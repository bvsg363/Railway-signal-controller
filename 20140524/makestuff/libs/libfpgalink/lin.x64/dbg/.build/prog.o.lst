   1              		.file	"prog.c"
   2              		.text
   3              	.Ltext0:
   5              	littleEndian32:
   6              	.LFB3:
   7              		.file 1 "/home/gani/eval/20140524/makestuff/common/makestuff.h"
   1:/home/gani/eval/20140524/makestuff/common/makestuff.h **** /*
   2:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * Copyright (C) 2009-2012 Chris McClelland
   3:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  *
   4:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * This program is free software: you can redistribute it and/or modify
   5:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * it under the terms of the GNU Lesser General Public License as published by
   6:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * the Free Software Foundation, either version 3 of the License, or
   7:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * (at your option) any later version.
   8:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  *
   9:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * This program is distributed in the hope that it will be useful,
  10:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * GNU Lesser General Public License for more details.
  13:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  *
  14:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * You should have received a copy of the GNU Lesser General Public License
  15:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:/home/gani/eval/20140524/makestuff/common/makestuff.h ****  */
  17:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  18:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #ifndef MAKESTUFF_H
  19:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define MAKESTUFF_H
  20:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  21:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #include <stddef.h>
  22:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  23:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  24:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#ifdef WIN32
  25:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		typedef char bool;
  26:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		enum {
  27:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 			false = 0,
  28:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 			true = 1
  29:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		};
  30:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#else
  31:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#include <stdbool.h>
  32:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#endif
  33:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #endif
  34:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  35:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #ifdef WIN32
  36:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT
  37:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) __declspec(dllexport) t __stdcall
  38:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define PFSZD "%Iu"
  39:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#ifdef _WIN64
  40:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%016IX"
  41:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  42:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#else
  43:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%08IX"
  44:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  45:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#endif
  46:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #else
  47:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT __attribute__((warn_unused_result))
  48:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) t
  49:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define PFSZD "%zu"
  50:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#ifdef __LP64__
  51:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%016zX"
  52:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  53:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#else
  54:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%08zX"
  55:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  56:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#endif
  57:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #endif
  58:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  59:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #ifndef NULL
  60:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define NULL ((void*)0)
  61:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #endif
  62:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  63:/home/gani/eval/20140524/makestuff/common/makestuff.h **** typedef unsigned char      uint8;
  64:/home/gani/eval/20140524/makestuff/common/makestuff.h **** typedef unsigned short     uint16;
  65:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  66:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#ifndef SDCC
  67:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		typedef unsigned long long uint64;
  68:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#endif
  69:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #endif
  70:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  71:/home/gani/eval/20140524/makestuff/common/makestuff.h **** typedef signed char        int8;
  72:/home/gani/eval/20140524/makestuff/common/makestuff.h **** typedef signed short       int16;
  73:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  74:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #if (defined __AVR__ && defined __GNUC__) || defined SDCC
  75:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	// The embedded platforms have sizeof(int) = 2, so use long
  76:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	typedef signed long    int32;
  77:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	typedef unsigned long  uint32;
  78:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #else
  79:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	// The i686 & x86_64 have sizeof(int) = 4
  80:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	typedef signed int     int32;
  81:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	typedef unsigned int   uint32;
  82:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #endif
  83:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  84:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  85:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#ifndef SDCC
  86:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		typedef signed long long int64;
  87:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#endif
  88:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #endif
  89:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  90:/home/gani/eval/20140524/makestuff/common/makestuff.h **** typedef unsigned int       bitfield;
  91:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
  92:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #if defined __GNUC__
  93:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define swap32(x) __builtin_bswap32(x)
  94:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #elif defined WIN32
  95:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#ifdef __cplusplus
  96:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		extern "C"
  97:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#endif
  98:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	unsigned long  __cdecl _byteswap_ulong(unsigned long);
  99:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#define swap32(x) _byteswap_ulong(x)
 100:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#ifndef __cplusplus
 101:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		#define inline __inline
 102:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#endif
 103:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #endif
 104:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define swap16(x) ((uint16)((((x) & 0x00FF) << 8) | (((x) >> 8) & 0x00FF)))
 105:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
 106:/home/gani/eval/20140524/makestuff/common/makestuff.h **** // The C standard requires this two-level indirection thing
 107:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #undef CONCAT
 108:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define CONCAT_INTERNAL(x, y) x ## y
 109:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define CONCAT(x, y) CONCAT_INTERNAL(x, y)
 110:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
 111:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define STR_INTERNAL(x) #x
 112:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define STR(x) STR_INTERNAL(x)
 113:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
 114:/home/gani/eval/20140524/makestuff/common/makestuff.h **** // The VA_NARGS() macro - count the number of arguments in a C99 variadic macro
 115:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define VA_EXPAND(x) x
 116:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define VA_NARGS(...) VA_EXPAND(VA_NARGS_INTERNAL(__VA_ARGS__, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
 117:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define VA_NARGS_INTERNAL(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y
 118:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define FAIL(code, label) { retVal = code; goto label; }
 119:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
 120:/home/gani/eval/20140524/makestuff/common/makestuff.h **** // The CHECK_STATUS() macro - if condition is true, set a returnCode and jump to a label (exit,
 121:/home/gani/eval/20140524/makestuff/common/makestuff.h **** // cleanup etc). If liberror is included you can also give an error message.
 122:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL3(condition, code, label) if ( condition ) { FAIL(code, label); }
 123:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL4(condition, code, label, prefix) LIBERROR_IS_REQUIRED
 124:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL5(condition, code, label, ...) LIBERROR_IS_REQUIRED
 125:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #define CHECK_STATUS(...) VA_EXPAND(CONCAT(CHECK_INTERNAL, VA_NARGS(__VA_ARGS__))(__VA_ARGS__))
 126:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 
 127:/home/gani/eval/20140524/makestuff/common/makestuff.h **** #ifdef BYTE_ORDER
 128:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 	#if BYTE_ORDER == 1234
 129:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		// Little-endian machines
 130:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		static inline uint16 bigEndian16(uint16 x) {
 131:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 			return swap16(x);
 132:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		}
 133:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		static inline uint32 bigEndian32(uint32 x) {
 134:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 			return swap32(x);
 135:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		}
 136:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		static inline uint16 littleEndian16(uint16 x) {
 137:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 			return x;
 138:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		}
 139:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		static inline uint32 littleEndian32(uint32 x) {
   8              		.loc 1 139 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 897DFC   		movl	%edi, -4(%rbp)
 140:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 			return x;
  16              		.loc 1 140 0
  17 0007 8B45FC   		movl	-4(%rbp), %eax
 141:/home/gani/eval/20140524/makestuff/common/makestuff.h **** 		}
  18              		.loc 1 141 0
  19 000a 5D       		popq	%rbp
  20              		.cfi_def_cfa 7, 8
  21 000b C3       		ret
  22              		.cfi_endproc
  23              	.LFE3:
  25              		.section	.rodata
  26              	.LC0:
  27 0000 62656769 		.string	"beginShift()"
  27      6E536869 
  27      66742829 
  27      00
  28              		.text
  30              	beginShift:
  31              	.LFB4:
  32              		.file 2 "prog.c"
   1:prog.c        **** /*
   2:prog.c        ****  * Copyright (C) 2009-2012 Chris McClelland
   3:prog.c        ****  *
   4:prog.c        ****  * This program is free software: you can redistribute it and/or modify
   5:prog.c        ****  * it under the terms of the GNU Lesser General Public License as published by
   6:prog.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:prog.c        ****  * (at your option) any later version.
   8:prog.c        ****  *
   9:prog.c        ****  * This program is distributed in the hope that it will be useful,
  10:prog.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:prog.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:prog.c        ****  * GNU Lesser General Public License for more details.
  13:prog.c        ****  *
  14:prog.c        ****  * You should have received a copy of the GNU Lesser General Public License
  15:prog.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:prog.c        ****  */
  17:prog.c        **** #include <stdlib.h>
  18:prog.c        **** #include <string.h>
  19:prog.c        **** #include <makestuff.h>
  20:prog.c        **** #include <libusbwrap.h>
  21:prog.c        **** #include <liberror.h>
  22:prog.c        **** #include "libfpgalink.h"
  23:prog.c        **** #include "private.h"
  24:prog.c        **** #include "csvfplay.h"
  25:prog.c        **** #include "vendorCommands.h"
  26:prog.c        **** 
  27:prog.c        **** // ------------------------------------------------------------------------------------------------
  28:prog.c        **** // Implementation of private functions
  29:prog.c        **** // ------------------------------------------------------------------------------------------------
  30:prog.c        **** 
  31:prog.c        **** // Kick off a shift operation on the micro. This will typically be followed by a bunch of sends and
  32:prog.c        **** // receives on EP1OUT & EP1IN. This operation specifies the operation (i.e one of four JTAG shift
  33:prog.c        **** // operations, parallel shift or serial shift. It also specifies a count, which is either a bit-
  34:prog.c        **** // count or a byte-count depending on the context.
  35:prog.c        **** //
  36:prog.c        **** // Called by:
  37:prog.c        **** //   jtagShiftInOut() -> beginShift()
  38:prog.c        **** //   flProgram() -> xProgram() -> fileWrite() -> dataWrite() -> beginShift()
  39:prog.c        **** //
  40:prog.c        **** static FLStatus beginShift(
  41:prog.c        **** 	struct FLContext *handle, uint32 count, ProgOp progOp, uint8 mode, const char **error)
  42:prog.c        **** {
  33              		.loc 2 42 0
  34              		.cfi_startproc
  35 000c 55       		pushq	%rbp
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 6, -16
  38 000d 4889E5   		movq	%rsp, %rbp
  39              		.cfi_def_cfa_register 6
  40 0010 4883EC40 		subq	$64, %rsp
  41 0014 48897DD8 		movq	%rdi, -40(%rbp)
  42 0018 8975D4   		movl	%esi, -44(%rbp)
  43 001b 8955D0   		movl	%edx, -48(%rbp)
  44 001e 89C8     		movl	%ecx, %eax
  45 0020 4C8945C0 		movq	%r8, -64(%rbp)
  46 0024 8845CC   		movb	%al, -52(%rbp)
  47              		.loc 2 42 0
  48 0027 64488B04 		movq	%fs:40, %rax
  48      25280000 
  48      00
  49 0030 488945F8 		movq	%rax, -8(%rbp)
  50 0034 31C0     		xorl	%eax, %eax
  43:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
  51              		.loc 2 43 0
  52 0036 C745EC00 		movl	$0, -20(%rbp)
  52      000000
  44:prog.c        **** 	USBStatus uStatus;
  45:prog.c        **** 	union {
  46:prog.c        **** 		uint32 u32;
  47:prog.c        **** 		uint8 bytes[4];
  48:prog.c        **** 	} countUnion;
  49:prog.c        **** 	countUnion.u32 = littleEndian32(count);
  53              		.loc 2 49 0
  54 003d 8B45D4   		movl	-44(%rbp), %eax
  55 0040 89C7     		movl	%eax, %edi
  56 0042 E8B9FFFF 		call	littleEndian32
  56      FF
  57 0047 8945F4   		movl	%eax, -12(%rbp)
  50:prog.c        **** 	uStatus = usbControlWrite(
  51:prog.c        **** 		handle->device,
  52:prog.c        **** 		CMD_PROG_CLOCK_DATA,  // bRequest
  53:prog.c        **** 		(uint8)mode,          // wValue
  54:prog.c        **** 		(uint8)progOp,        // wIndex
  58              		.loc 2 54 0
  59 004a 8B45D0   		movl	-48(%rbp), %eax
  50:prog.c        **** 	uStatus = usbControlWrite(
  60              		.loc 2 50 0
  61 004d 0FB6C8   		movzbl	%al, %ecx
  62 0050 0FB655CC 		movzbl	-52(%rbp), %edx
  63 0054 488B45D8 		movq	-40(%rbp), %rax
  64 0058 488B00   		movq	(%rax), %rax
  65 005b 488D75F4 		leaq	-12(%rbp), %rsi
  66 005f FF75C0   		pushq	-64(%rbp)
  67 0062 68881300 		pushq	$5000
  67      00
  68 0067 41B90400 		movl	$4, %r9d
  68      0000
  69 006d 4989F0   		movq	%rsi, %r8
  70 0070 BE810000 		movl	$129, %esi
  70      00
  71 0075 4889C7   		movq	%rax, %rdi
  72 0078 E8000000 		call	usbControlWrite@PLT
  72      00
  73 007d 4883C410 		addq	$16, %rsp
  74 0081 8945F0   		movl	%eax, -16(%rbp)
  55:prog.c        **** 		countUnion.bytes,     // send count
  56:prog.c        **** 		4,                    // wLength
  57:prog.c        **** 		5000,                 // timeout (ms)
  58:prog.c        **** 		error
  59:prog.c        **** 	);
  60:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_SHIFT, cleanup, "beginShift()");
  75              		.loc 2 60 0
  76 0084 837DF000 		cmpl	$0, -16(%rbp)
  77 0088 741C     		je	.L7
  78              		.loc 2 60 0 is_stmt 0 discriminator 1
  79 008a 488B45C0 		movq	-64(%rbp), %rax
  80 008e 488D3500 		leaq	.LC0(%rip), %rsi
  80      000000
  81 0095 4889C7   		movq	%rax, %rdi
  82 0098 E8000000 		call	errPrefix@PLT
  82      00
  83 009d C745EC0F 		movl	$15, -20(%rbp)
  83      000000
  84 00a4 EB01     		jmp	.L4
  85              	.L7:
  61:prog.c        **** cleanup:
  86              		.loc 2 61 0 is_stmt 1
  87 00a6 90       		nop
  88              	.L4:
  62:prog.c        **** 	return retVal;
  89              		.loc 2 62 0
  90 00a7 8B45EC   		movl	-20(%rbp), %eax
  63:prog.c        **** }
  91              		.loc 2 63 0
  92 00aa 488B55F8 		movq	-8(%rbp), %rdx
  93 00ae 64483314 		xorq	%fs:40, %rdx
  93      25280000 
  93      00
  94 00b7 7405     		je	.L6
  95 00b9 E8000000 		call	__stack_chk_fail@PLT
  95      00
  96              	.L6:
  97 00be C9       		leave
  98              		.cfi_def_cfa 7, 8
  99 00bf C3       		ret
 100              		.cfi_endproc
 101              	.LFE4:
 103              		.section	.rodata
 104              	.LC1:
 105 000d 646F5365 		.string	"doSend()"
 105      6E642829 
 105      00
 106              		.text
 108              	doSend:
 109              	.LFB5:
  64:prog.c        **** 
  65:prog.c        **** // Send a chunk of data to the micro on EP1OUT. The previous call to beginShift() specifies what th
  66:prog.c        **** // micro should actually do with the data.
  67:prog.c        **** //
  68:prog.c        **** // Called by:
  69:prog.c        **** //   jtagShiftInOut() -> doSend()
  70:prog.c        **** //   flProgram() -> xProgram() -> fileWrite() -> dataWrite() -> doSend()
  71:prog.c        **** //
  72:prog.c        **** static FLStatus doSend(
  73:prog.c        **** 	struct FLContext *handle, const uint8 *sendPtr, uint16 chunkSize, const char **error)
  74:prog.c        **** {
 110              		.loc 2 74 0
 111              		.cfi_startproc
 112 00c0 55       		pushq	%rbp
 113              		.cfi_def_cfa_offset 16
 114              		.cfi_offset 6, -16
 115 00c1 4889E5   		movq	%rsp, %rbp
 116              		.cfi_def_cfa_register 6
 117 00c4 4883EC30 		subq	$48, %rsp
 118 00c8 48897DE8 		movq	%rdi, -24(%rbp)
 119 00cc 488975E0 		movq	%rsi, -32(%rbp)
 120 00d0 89D0     		movl	%edx, %eax
 121 00d2 48894DD0 		movq	%rcx, -48(%rbp)
 122 00d6 668945DC 		movw	%ax, -36(%rbp)
  75:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 123              		.loc 2 75 0
 124 00da C745F800 		movl	$0, -8(%rbp)
 124      000000
  76:prog.c        **** 	USBStatus uStatus = usbBulkWrite(
 125              		.loc 2 76 0
 126 00e1 0FB74DDC 		movzwl	-36(%rbp), %ecx
  77:prog.c        **** 		handle->device,
  78:prog.c        **** 		handle->progOutEP,    // write to out endpoint
 127              		.loc 2 78 0
 128 00e5 488B45E8 		movq	-24(%rbp), %rax
 129 00e9 0FB64015 		movzbl	21(%rax), %eax
  76:prog.c        **** 	USBStatus uStatus = usbBulkWrite(
 130              		.loc 2 76 0
 131 00ed 0FB6F0   		movzbl	%al, %esi
 132 00f0 488B45E8 		movq	-24(%rbp), %rax
 133 00f4 488B00   		movq	(%rax), %rax
 134 00f7 488B7DD0 		movq	-48(%rbp), %rdi
 135 00fb 488B55E0 		movq	-32(%rbp), %rdx
 136 00ff 4989F9   		movq	%rdi, %r9
 137 0102 41B88813 		movl	$5000, %r8d
 137      0000
 138 0108 4889C7   		movq	%rax, %rdi
 139 010b E8000000 		call	usbBulkWrite@PLT
 139      00
 140 0110 8945FC   		movl	%eax, -4(%rbp)
  79:prog.c        **** 		sendPtr,              // write from send buffer
  80:prog.c        **** 		chunkSize,            // write this many bytes
  81:prog.c        **** 		5000,                 // timeout in milliseconds
  82:prog.c        **** 		error
  83:prog.c        **** 	);
  84:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_SEND, cleanup, "doSend()");
 141              		.loc 2 84 0
 142 0113 837DFC00 		cmpl	$0, -4(%rbp)
 143 0117 741C     		je	.L11
 144              		.loc 2 84 0 is_stmt 0 discriminator 1
 145 0119 488B45D0 		movq	-48(%rbp), %rax
 146 011d 488D3500 		leaq	.LC1(%rip), %rsi
 146      000000
 147 0124 4889C7   		movq	%rax, %rdi
 148 0127 E8000000 		call	errPrefix@PLT
 148      00
 149 012c C745F80D 		movl	$13, -8(%rbp)
 149      000000
 150 0133 EB01     		jmp	.L9
 151              	.L11:
  85:prog.c        **** cleanup:
 152              		.loc 2 85 0 is_stmt 1
 153 0135 90       		nop
 154              	.L9:
  86:prog.c        **** 	return retVal;
 155              		.loc 2 86 0
 156 0136 8B45F8   		movl	-8(%rbp), %eax
  87:prog.c        **** }
 157              		.loc 2 87 0
 158 0139 C9       		leave
 159              		.cfi_def_cfa 7, 8
 160 013a C3       		ret
 161              		.cfi_endproc
 162              	.LFE5:
 164              		.section	.rodata
 165              	.LC2:
 166 0016 646F5265 		.string	"doReceive()"
 166      63656976 
 166      65282900 
 167              		.text
 169              	doReceive:
 170              	.LFB6:
  88:prog.c        **** 
  89:prog.c        **** // Receive a chunk of data from the micro on EP1IN. The previous call to beginShift() specifies the
  90:prog.c        **** // source of the data.
  91:prog.c        **** //
  92:prog.c        **** // Called by:
  93:prog.c        **** //   jtagShiftInOut() -> doReceive()
  94:prog.c        **** //
  95:prog.c        **** static FLStatus doReceive(
  96:prog.c        **** 	struct FLContext *handle, uint8 *receivePtr, uint16 chunkSize, const char **error)
  97:prog.c        **** {
 171              		.loc 2 97 0
 172              		.cfi_startproc
 173 013b 55       		pushq	%rbp
 174              		.cfi_def_cfa_offset 16
 175              		.cfi_offset 6, -16
 176 013c 4889E5   		movq	%rsp, %rbp
 177              		.cfi_def_cfa_register 6
 178 013f 4883EC30 		subq	$48, %rsp
 179 0143 48897DE8 		movq	%rdi, -24(%rbp)
 180 0147 488975E0 		movq	%rsi, -32(%rbp)
 181 014b 89D0     		movl	%edx, %eax
 182 014d 48894DD0 		movq	%rcx, -48(%rbp)
 183 0151 668945DC 		movw	%ax, -36(%rbp)
  98:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 184              		.loc 2 98 0
 185 0155 C745F800 		movl	$0, -8(%rbp)
 185      000000
  99:prog.c        **** 	USBStatus uStatus = usbBulkRead(
 186              		.loc 2 99 0
 187 015c 0FB74DDC 		movzwl	-36(%rbp), %ecx
 100:prog.c        **** 		handle->device,
 101:prog.c        **** 		handle->progInEP,    // read from in endpoint
 188              		.loc 2 101 0
 189 0160 488B45E8 		movq	-24(%rbp), %rax
 190 0164 0FB64016 		movzbl	22(%rax), %eax
  99:prog.c        **** 	USBStatus uStatus = usbBulkRead(
 191              		.loc 2 99 0
 192 0168 0FB6F0   		movzbl	%al, %esi
 193 016b 488B45E8 		movq	-24(%rbp), %rax
 194 016f 488B00   		movq	(%rax), %rax
 195 0172 488B7DD0 		movq	-48(%rbp), %rdi
 196 0176 488B55E0 		movq	-32(%rbp), %rdx
 197 017a 4989F9   		movq	%rdi, %r9
 198 017d 41B88813 		movl	$5000, %r8d
 198      0000
 199 0183 4889C7   		movq	%rax, %rdi
 200 0186 E8000000 		call	usbBulkRead@PLT
 200      00
 201 018b 8945FC   		movl	%eax, -4(%rbp)
 102:prog.c        **** 		receivePtr,          // read into the receive buffer
 103:prog.c        **** 		chunkSize,           // read this many bytes
 104:prog.c        **** 		5000,                // timeout in milliseconds
 105:prog.c        **** 		error
 106:prog.c        **** 	);
 107:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_RECV, cleanup, "doReceive()");
 202              		.loc 2 107 0
 203 018e 837DFC00 		cmpl	$0, -4(%rbp)
 204 0192 741C     		je	.L15
 205              		.loc 2 107 0 is_stmt 0 discriminator 1
 206 0194 488B45D0 		movq	-48(%rbp), %rax
 207 0198 488D3500 		leaq	.LC2(%rip), %rsi
 207      000000
 208 019f 4889C7   		movq	%rax, %rdi
 209 01a2 E8000000 		call	errPrefix@PLT
 209      00
 210 01a7 C745F80E 		movl	$14, -8(%rbp)
 210      000000
 211 01ae EB01     		jmp	.L13
 212              	.L15:
 108:prog.c        **** cleanup:
 213              		.loc 2 108 0 is_stmt 1
 214 01b0 90       		nop
 215              	.L13:
 109:prog.c        **** 	return retVal;
 216              		.loc 2 109 0
 217 01b1 8B45F8   		movl	-8(%rbp), %eax
 110:prog.c        **** }
 218              		.loc 2 110 0
 219 01b4 C9       		leave
 220              		.cfi_def_cfa 7, 8
 221 01b5 C3       		ret
 222              		.cfi_endproc
 223              	.LFE6:
 225              		.section	.rodata
 226 0022 00000000 		.align 8
 226      0000
 227              	.LC3:
 228 0028 20202020 		.string	"                                                                                         
 228      20202020 
 228      20202020 
 228      20202020 
 228      20202020 
 229              		.text
 231              	spaces:
 232              	.LFB7:
 111:prog.c        **** 
 112:prog.c        **** static const char *spaces(ptrdiff_t n) {
 233              		.loc 2 112 0
 234              		.cfi_startproc
 235 01b6 55       		pushq	%rbp
 236              		.cfi_def_cfa_offset 16
 237              		.cfi_offset 6, -16
 238 01b7 4889E5   		movq	%rsp, %rbp
 239              		.cfi_def_cfa_register 6
 240 01ba 48897DE8 		movq	%rdi, -24(%rbp)
 113:prog.c        **** 	const char *const s =
 241              		.loc 2 113 0
 242 01be 488D0500 		leaq	.LC3(%rip), %rax
 242      000000
 243 01c5 488945F8 		movq	%rax, -8(%rbp)
 114:prog.c        **** 		"                                                                "
 115:prog.c        **** 		"                                                                "
 116:prog.c        **** 		"                                                                "
 117:prog.c        **** 		"                                                                ";
 118:prog.c        **** 	return s + 256-n;
 244              		.loc 2 118 0
 245 01c9 488B45E8 		movq	-24(%rbp), %rax
 246 01cd BA000100 		movl	$256, %edx
 246      00
 247 01d2 4829C2   		subq	%rax, %rdx
 248 01d5 488B45F8 		movq	-8(%rbp), %rax
 249 01d9 4801D0   		addq	%rdx, %rax
 119:prog.c        **** }
 250              		.loc 2 119 0
 251 01dc 5D       		popq	%rbp
 252              		.cfi_def_cfa 7, 8
 253 01dd C3       		ret
 254              		.cfi_endproc
 255              	.LFE7:
 257              		.section	.rodata
 258 0129 00000000 		.align 8
 258      000000
 259              	.LC4:
 260 0130 706F7075 		.string	"populateMap(): Unexpected end of config string:\n  %s\n  %s^"
 260      6C617465 
 260      4D617028 
 260      293A2055 
 260      6E657870 
 261 016b 00000000 		.align 8
 261      00
 262              	.LC5:
 263 0170 706F7075 		.string	"populateMap(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 263      6C617465 
 263      4D617028 
 263      293A2050 
 263      6F727420 
 264 01b6 0000     		.align 8
 265              	.LC6:
 266 01b8 706F7075 		.string	"populateMap(): Bit number is not valid:\n  %s\n  %s^"
 266      6C617465 
 266      4D617028 
 266      293A2042 
 266      6974206E 
 267 01eb 00000000 		.align 8
 267      00
 268              	.LC7:
 269 01f0 706F7075 		.string	"populateMap(): port '%c%d' is already used:\n  %s\n  %s^"
 269      6C617465 
 269      4D617028 
 269      293A2070 
 269      6F727420 
 270 0227 00       		.align 8
 271              	.LC8:
 272 0228 706F7075 		.string	"populateMap(): Expecting '+', '-' or '?' at char %d"
 272      6C617465 
 272      4D617028 
 272      293A2045 
 272      78706563 
 273              		.text
 275              	populateMap:
 276              	.LFB8:
 120:prog.c        **** 
 121:prog.c        **** #define GET_CHAR(func) \
 122:prog.c        **** 	ch = *ptr; \
 123:prog.c        **** 	CHECK_STATUS( \
 124:prog.c        **** 		ch == '\0', FL_CONF_FORMAT, cleanup, \
 125:prog.c        **** 		func"(): Unexpected end of config string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig))
 126:prog.c        **** 
 127:prog.c        **** #define EXPECT_CHAR(ex, func) \
 128:prog.c        **** 	GET_CHAR(func) \
 129:prog.c        **** 	CHECK_STATUS( \
 130:prog.c        **** 		ch != ex, FL_CONF_FORMAT, cleanup, \
 131:prog.c        **** 		func"(): Expecting "#ex":\n  %s\n  %s^", portConfig, spaces(ptr-portConfig)); \
 132:prog.c        **** 	ptr++
 133:prog.c        **** 
 134:prog.c        **** #define GET_PORT(port, func) \
 135:prog.c        **** 	GET_CHAR(func) \
 136:prog.c        **** 	CHECK_STATUS( \
 137:prog.c        **** 		ch < 'A' || ch > 'Z', FL_CONF_FORMAT, cleanup, \
 138:prog.c        **** 		func"(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^", portConfig, spaces(ptr-portCo
 139:prog.c        **** 	port = (uint8)(ch - 'A'); \
 140:prog.c        **** 	ptr++
 141:prog.c        **** 
 142:prog.c        **** #define GET_BIT(bit, func) \
 143:prog.c        **** 	GET_CHAR(func) \
 144:prog.c        **** 	CHECK_STATUS( \
 145:prog.c        **** 		ch < '0' || ch > '9', FL_CONF_FORMAT, cleanup, \
 146:prog.c        **** 		func"(): Bit number is not valid:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig)); \
 147:prog.c        **** 	bit = (uint8)(strtoul(ptr, (char**)&ptr, 10));
 148:prog.c        **** 
 149:prog.c        **** #define GET_DIGIT(bit, func) \
 150:prog.c        **** 	GET_CHAR(func) \
 151:prog.c        **** 	CHECK_STATUS( \
 152:prog.c        **** 		ch < '0' || ch > '7', FL_CONF_FORMAT, cleanup, \
 153:prog.c        **** 		func"(): Bit '%c' is not valid at char %d", ch, ptr-portConfig); \
 154:prog.c        **** 	bit = (uint8)(ch - '0'); \
 155:prog.c        **** 	ptr++
 156:prog.c        **** 
 157:prog.c        **** #define GET_PAIR(port, bit, func) \
 158:prog.c        **** 	GET_PORT(port, func); \
 159:prog.c        **** 	GET_BIT(bit, func)
 160:prog.c        **** 
 161:prog.c        **** #define SET_BIT(port, bit, status, func) \
 162:prog.c        **** 	CHECK_STATUS( \
 163:prog.c        **** 		pinMap[port][bit] != PIN_UNUSED, FL_CONF_FORMAT, cleanup,					\
 164:prog.c        **** 		func"(): port '%c%d' is already used:\n  %s\n  %s^", port+'A', bit, portConfig, spaces(ptr-portCo
 165:prog.c        **** 	pinMap[port][bit] = status
 166:prog.c        **** 
 167:prog.c        **** // This function parses a comma-separated list of ports with a suffix representing the desired stat
 168:prog.c        **** // of the port, e.g "A0+,B5-,D7/" means "PA0 is an output driven high, PB5 is an output driven low,
 169:prog.c        **** // and PD7 is an input". The result is recorded in the pinMap array, which is assumed to be of
 170:prog.c        **** // length 5*8=40. The parse stops when it encounters something other than a comma separator, and th
 171:prog.c        **** // location of that character stored in *endPtr.
 172:prog.c        **** //
 173:prog.c        **** // Called by:
 174:prog.c        **** //   xProgram() -> populateMap()
 175:prog.c        **** //
 176:prog.c        **** static FLStatus populateMap(
 177:prog.c        **** 	const char *portConfig, const char *ptr, const char **endPtr,
 178:prog.c        **** 	PinConfig pinMap[26][32], const char **error)
 179:prog.c        **** {
 277              		.loc 2 179 0
 278              		.cfi_startproc
 279 01de 55       		pushq	%rbp
 280              		.cfi_def_cfa_offset 16
 281              		.cfi_offset 6, -16
 282 01df 4889E5   		movq	%rsp, %rbp
 283              		.cfi_def_cfa_register 6
 284 01e2 4883EC40 		subq	$64, %rsp
 285 01e6 48897DE8 		movq	%rdi, -24(%rbp)
 286 01ea 488975E0 		movq	%rsi, -32(%rbp)
 287 01ee 488955D8 		movq	%rdx, -40(%rbp)
 288 01f2 48894DD0 		movq	%rcx, -48(%rbp)
 289 01f6 4C8945C8 		movq	%r8, -56(%rbp)
 180:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 290              		.loc 2 180 0
 291 01fa C745FC00 		movl	$0, -4(%rbp)
 291      000000
 292              	.L34:
 181:prog.c        **** 	uint8 thisPort, thisBit;
 182:prog.c        **** 	char ch;
 183:prog.c        **** 	do {
 184:prog.c        **** 		GET_PAIR(thisPort, thisBit, "populateMap");
 293              		.loc 2 184 0
 294 0201 488B45E0 		movq	-32(%rbp), %rax
 295 0205 0FB600   		movzbl	(%rax), %eax
 296 0208 8845F9   		movb	%al, -7(%rbp)
 297 020b 807DF900 		cmpb	$0, -7(%rbp)
 298 020f 7544     		jne	.L19
 299              		.loc 2 184 0 is_stmt 0 discriminator 1
 300 0211 488B45E0 		movq	-32(%rbp), %rax
 301 0215 4889C2   		movq	%rax, %rdx
 302 0218 488B45E8 		movq	-24(%rbp), %rax
 303 021c 4829C2   		subq	%rax, %rdx
 304 021f 4889D0   		movq	%rdx, %rax
 305 0222 4889C7   		movq	%rax, %rdi
 306 0225 E88CFFFF 		call	spaces
 306      FF
 307 022a 4889C1   		movq	%rax, %rcx
 308 022d 488B55E8 		movq	-24(%rbp), %rdx
 309 0231 488B45C8 		movq	-56(%rbp), %rax
 310 0235 488D3500 		leaq	.LC4(%rip), %rsi
 310      000000
 311 023c 4889C7   		movq	%rax, %rdi
 312 023f B8000000 		movl	$0, %eax
 312      00
 313 0244 E8000000 		call	errRender@PLT
 313      00
 314 0249 C745FC0B 		movl	$11, -4(%rbp)
 314      000000
 315 0250 E9E40300 		jmp	.L20
 315      00
 316              	.L19:
 317              		.loc 2 184 0 discriminator 2
 318 0255 807DF940 		cmpb	$64, -7(%rbp)
 319 0259 7E06     		jle	.L21
 320              		.loc 2 184 0 discriminator 4
 321 025b 807DF95A 		cmpb	$90, -7(%rbp)
 322 025f 7E44     		jle	.L22
 323              	.L21:
 324              		.loc 2 184 0 discriminator 5
 325 0261 488B45E0 		movq	-32(%rbp), %rax
 326 0265 4889C2   		movq	%rax, %rdx
 327 0268 488B45E8 		movq	-24(%rbp), %rax
 328 026c 4829C2   		subq	%rax, %rdx
 329 026f 4889D0   		movq	%rdx, %rax
 330 0272 4889C7   		movq	%rax, %rdi
 331 0275 E83CFFFF 		call	spaces
 331      FF
 332 027a 4889C1   		movq	%rax, %rcx
 333 027d 488B55E8 		movq	-24(%rbp), %rdx
 334 0281 488B45C8 		movq	-56(%rbp), %rax
 335 0285 488D3500 		leaq	.LC5(%rip), %rsi
 335      000000
 336 028c 4889C7   		movq	%rax, %rdi
 337 028f B8000000 		movl	$0, %eax
 337      00
 338 0294 E8000000 		call	errRender@PLT
 338      00
 339 0299 C745FC0B 		movl	$11, -4(%rbp)
 339      000000
 340 02a0 E9940300 		jmp	.L20
 340      00
 341              	.L22:
 342              		.loc 2 184 0 discriminator 6
 343 02a5 0FB645F9 		movzbl	-7(%rbp), %eax
 344 02a9 83E841   		subl	$65, %eax
 345 02ac 8845FA   		movb	%al, -6(%rbp)
 346 02af 488B45E0 		movq	-32(%rbp), %rax
 347 02b3 4883C001 		addq	$1, %rax
 348 02b7 488945E0 		movq	%rax, -32(%rbp)
 349 02bb 488B45E0 		movq	-32(%rbp), %rax
 350 02bf 0FB600   		movzbl	(%rax), %eax
 351 02c2 8845F9   		movb	%al, -7(%rbp)
 352 02c5 807DF900 		cmpb	$0, -7(%rbp)
 353 02c9 7544     		jne	.L23
 354              		.loc 2 184 0 discriminator 7
 355 02cb 488B45E0 		movq	-32(%rbp), %rax
 356 02cf 4889C2   		movq	%rax, %rdx
 357 02d2 488B45E8 		movq	-24(%rbp), %rax
 358 02d6 4829C2   		subq	%rax, %rdx
 359 02d9 4889D0   		movq	%rdx, %rax
 360 02dc 4889C7   		movq	%rax, %rdi
 361 02df E8D2FEFF 		call	spaces
 361      FF
 362 02e4 4889C1   		movq	%rax, %rcx
 363 02e7 488B55E8 		movq	-24(%rbp), %rdx
 364 02eb 488B45C8 		movq	-56(%rbp), %rax
 365 02ef 488D3500 		leaq	.LC4(%rip), %rsi
 365      000000
 366 02f6 4889C7   		movq	%rax, %rdi
 367 02f9 B8000000 		movl	$0, %eax
 367      00
 368 02fe E8000000 		call	errRender@PLT
 368      00
 369 0303 C745FC0B 		movl	$11, -4(%rbp)
 369      000000
 370 030a E92A0300 		jmp	.L20
 370      00
 371              	.L23:
 372              		.loc 2 184 0 discriminator 8
 373 030f 807DF92F 		cmpb	$47, -7(%rbp)
 374 0313 7E06     		jle	.L24
 375              		.loc 2 184 0 discriminator 10
 376 0315 807DF939 		cmpb	$57, -7(%rbp)
 377 0319 7E44     		jle	.L25
 378              	.L24:
 379              		.loc 2 184 0 discriminator 11
 380 031b 488B45E0 		movq	-32(%rbp), %rax
 381 031f 4889C2   		movq	%rax, %rdx
 382 0322 488B45E8 		movq	-24(%rbp), %rax
 383 0326 4829C2   		subq	%rax, %rdx
 384 0329 4889D0   		movq	%rdx, %rax
 385 032c 4889C7   		movq	%rax, %rdi
 386 032f E882FEFF 		call	spaces
 386      FF
 387 0334 4889C1   		movq	%rax, %rcx
 388 0337 488B55E8 		movq	-24(%rbp), %rdx
 389 033b 488B45C8 		movq	-56(%rbp), %rax
 390 033f 488D3500 		leaq	.LC6(%rip), %rsi
 390      000000
 391 0346 4889C7   		movq	%rax, %rdi
 392 0349 B8000000 		movl	$0, %eax
 392      00
 393 034e E8000000 		call	errRender@PLT
 393      00
 394 0353 C745FC0B 		movl	$11, -4(%rbp)
 394      000000
 395 035a E9DA0200 		jmp	.L20
 395      00
 396              	.L25:
 397              		.loc 2 184 0 discriminator 12
 398 035f 488B45E0 		movq	-32(%rbp), %rax
 399 0363 488D4DE0 		leaq	-32(%rbp), %rcx
 400 0367 BA0A0000 		movl	$10, %edx
 400      00
 401 036c 4889CE   		movq	%rcx, %rsi
 402 036f 4889C7   		movq	%rax, %rdi
 403 0372 E8000000 		call	strtoul@PLT
 403      00
 404 0377 8845FB   		movb	%al, -5(%rbp)
 185:prog.c        **** 		GET_CHAR("populateMap");
 405              		.loc 2 185 0 is_stmt 1 discriminator 12
 406 037a 488B45E0 		movq	-32(%rbp), %rax
 407 037e 0FB600   		movzbl	(%rax), %eax
 408 0381 8845F9   		movb	%al, -7(%rbp)
 409 0384 807DF900 		cmpb	$0, -7(%rbp)
 410 0388 7544     		jne	.L26
 411              		.loc 2 185 0 is_stmt 0 discriminator 1
 412 038a 488B45E0 		movq	-32(%rbp), %rax
 413 038e 4889C2   		movq	%rax, %rdx
 414 0391 488B45E8 		movq	-24(%rbp), %rax
 415 0395 4829C2   		subq	%rax, %rdx
 416 0398 4889D0   		movq	%rdx, %rax
 417 039b 4889C7   		movq	%rax, %rdi
 418 039e E813FEFF 		call	spaces
 418      FF
 419 03a3 4889C1   		movq	%rax, %rcx
 420 03a6 488B55E8 		movq	-24(%rbp), %rdx
 421 03aa 488B45C8 		movq	-56(%rbp), %rax
 422 03ae 488D3500 		leaq	.LC4(%rip), %rsi
 422      000000
 423 03b5 4889C7   		movq	%rax, %rdi
 424 03b8 B8000000 		movl	$0, %eax
 424      00
 425 03bd E8000000 		call	errRender@PLT
 425      00
 426 03c2 C745FC0B 		movl	$11, -4(%rbp)
 426      000000
 427 03c9 E96B0200 		jmp	.L20
 427      00
 428              	.L26:
 186:prog.c        **** 		if ( ch == '+' ) {
 429              		.loc 2 186 0 is_stmt 1
 430 03ce 807DF92B 		cmpb	$43, -7(%rbp)
 431 03d2 0F85A000 		jne	.L27
 431      0000
 187:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_HIGH, "populateMap");
 432              		.loc 2 187 0
 433 03d8 0FB645FA 		movzbl	-6(%rbp), %eax
 434 03dc 48C1E007 		salq	$7, %rax
 435 03e0 4889C2   		movq	%rax, %rdx
 436 03e3 488B45D0 		movq	-48(%rbp), %rax
 437 03e7 4801C2   		addq	%rax, %rdx
 438 03ea 0FB645FB 		movzbl	-5(%rbp), %eax
 439 03ee 4898     		cltq
 440 03f0 8B0482   		movl	(%rdx,%rax,4), %eax
 441 03f3 85C0     		testl	%eax, %eax
 442 03f5 745D     		je	.L28
 443              		.loc 2 187 0 is_stmt 0 discriminator 1
 444 03f7 488B45E0 		movq	-32(%rbp), %rax
 445 03fb 4889C2   		movq	%rax, %rdx
 446 03fe 488B45E8 		movq	-24(%rbp), %rax
 447 0402 4829C2   		subq	%rax, %rdx
 448 0405 4889D0   		movq	%rdx, %rax
 449 0408 4883E801 		subq	$1, %rax
 450 040c 4889C7   		movq	%rax, %rdi
 451 040f E8A2FDFF 		call	spaces
 451      FF
 452 0414 4889C7   		movq	%rax, %rdi
 453 0417 0FB655FB 		movzbl	-5(%rbp), %edx
 454 041b 0FB645FA 		movzbl	-6(%rbp), %eax
 455 041f 8D7041   		leal	65(%rax), %esi
 456 0422 488B4DE8 		movq	-24(%rbp), %rcx
 457 0426 488B45C8 		movq	-56(%rbp), %rax
 458 042a 4989F9   		movq	%rdi, %r9
 459 042d 4989C8   		movq	%rcx, %r8
 460 0430 89D1     		movl	%edx, %ecx
 461 0432 89F2     		movl	%esi, %edx
 462 0434 488D3500 		leaq	.LC7(%rip), %rsi
 462      000000
 463 043b 4889C7   		movq	%rax, %rdi
 464 043e B8000000 		movl	$0, %eax
 464      00
 465 0443 E8000000 		call	errRender@PLT
 465      00
 466 0448 C745FC0B 		movl	$11, -4(%rbp)
 466      000000
 467 044f E9E50100 		jmp	.L20
 467      00
 468              	.L28:
 469              		.loc 2 187 0 discriminator 2
 470 0454 0FB645FA 		movzbl	-6(%rbp), %eax
 471 0458 48C1E007 		salq	$7, %rax
 472 045c 4889C2   		movq	%rax, %rdx
 473 045f 488B45D0 		movq	-48(%rbp), %rax
 474 0463 4801C2   		addq	%rax, %rdx
 475 0466 0FB645FB 		movzbl	-5(%rbp), %eax
 476 046a 4898     		cltq
 477 046c C7048201 		movl	$1, (%rdx,%rax,4)
 477      000000
 478 0473 E9800100 		jmp	.L29
 478      00
 479              	.L27:
 188:prog.c        **** 		} else if ( ch == '-' ) {
 480              		.loc 2 188 0 is_stmt 1
 481 0478 807DF92D 		cmpb	$45, -7(%rbp)
 482 047c 0F85A000 		jne	.L30
 482      0000
 189:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_LOW, "populateMap");
 483              		.loc 2 189 0
 484 0482 0FB645FA 		movzbl	-6(%rbp), %eax
 485 0486 48C1E007 		salq	$7, %rax
 486 048a 4889C2   		movq	%rax, %rdx
 487 048d 488B45D0 		movq	-48(%rbp), %rax
 488 0491 4801C2   		addq	%rax, %rdx
 489 0494 0FB645FB 		movzbl	-5(%rbp), %eax
 490 0498 4898     		cltq
 491 049a 8B0482   		movl	(%rdx,%rax,4), %eax
 492 049d 85C0     		testl	%eax, %eax
 493 049f 745D     		je	.L31
 494              		.loc 2 189 0 is_stmt 0 discriminator 1
 495 04a1 488B45E0 		movq	-32(%rbp), %rax
 496 04a5 4889C2   		movq	%rax, %rdx
 497 04a8 488B45E8 		movq	-24(%rbp), %rax
 498 04ac 4829C2   		subq	%rax, %rdx
 499 04af 4889D0   		movq	%rdx, %rax
 500 04b2 4883E801 		subq	$1, %rax
 501 04b6 4889C7   		movq	%rax, %rdi
 502 04b9 E8F8FCFF 		call	spaces
 502      FF
 503 04be 4889C7   		movq	%rax, %rdi
 504 04c1 0FB655FB 		movzbl	-5(%rbp), %edx
 505 04c5 0FB645FA 		movzbl	-6(%rbp), %eax
 506 04c9 8D7041   		leal	65(%rax), %esi
 507 04cc 488B4DE8 		movq	-24(%rbp), %rcx
 508 04d0 488B45C8 		movq	-56(%rbp), %rax
 509 04d4 4989F9   		movq	%rdi, %r9
 510 04d7 4989C8   		movq	%rcx, %r8
 511 04da 89D1     		movl	%edx, %ecx
 512 04dc 89F2     		movl	%esi, %edx
 513 04de 488D3500 		leaq	.LC7(%rip), %rsi
 513      000000
 514 04e5 4889C7   		movq	%rax, %rdi
 515 04e8 B8000000 		movl	$0, %eax
 515      00
 516 04ed E8000000 		call	errRender@PLT
 516      00
 517 04f2 C745FC0B 		movl	$11, -4(%rbp)
 517      000000
 518 04f9 E93B0100 		jmp	.L20
 518      00
 519              	.L31:
 520              		.loc 2 189 0 discriminator 2
 521 04fe 0FB645FA 		movzbl	-6(%rbp), %eax
 522 0502 48C1E007 		salq	$7, %rax
 523 0506 4889C2   		movq	%rax, %rdx
 524 0509 488B45D0 		movq	-48(%rbp), %rax
 525 050d 4801C2   		addq	%rax, %rdx
 526 0510 0FB645FB 		movzbl	-5(%rbp), %eax
 527 0514 4898     		cltq
 528 0516 C7048202 		movl	$2, (%rdx,%rax,4)
 528      000000
 529 051d E9D60000 		jmp	.L29
 529      00
 530              	.L30:
 190:prog.c        **** 		} else if ( ch == '?' ) {
 531              		.loc 2 190 0 is_stmt 1
 532 0522 807DF93F 		cmpb	$63, -7(%rbp)
 533 0526 0F859D00 		jne	.L32
 533      0000
 191:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_INPUT, "populateMap");
 534              		.loc 2 191 0
 535 052c 0FB645FA 		movzbl	-6(%rbp), %eax
 536 0530 48C1E007 		salq	$7, %rax
 537 0534 4889C2   		movq	%rax, %rdx
 538 0537 488B45D0 		movq	-48(%rbp), %rax
 539 053b 4801C2   		addq	%rax, %rdx
 540 053e 0FB645FB 		movzbl	-5(%rbp), %eax
 541 0542 4898     		cltq
 542 0544 8B0482   		movl	(%rdx,%rax,4), %eax
 543 0547 85C0     		testl	%eax, %eax
 544 0549 745D     		je	.L33
 545              		.loc 2 191 0 is_stmt 0 discriminator 1
 546 054b 488B45E0 		movq	-32(%rbp), %rax
 547 054f 4889C2   		movq	%rax, %rdx
 548 0552 488B45E8 		movq	-24(%rbp), %rax
 549 0556 4829C2   		subq	%rax, %rdx
 550 0559 4889D0   		movq	%rdx, %rax
 551 055c 4883E801 		subq	$1, %rax
 552 0560 4889C7   		movq	%rax, %rdi
 553 0563 E84EFCFF 		call	spaces
 553      FF
 554 0568 4889C7   		movq	%rax, %rdi
 555 056b 0FB655FB 		movzbl	-5(%rbp), %edx
 556 056f 0FB645FA 		movzbl	-6(%rbp), %eax
 557 0573 8D7041   		leal	65(%rax), %esi
 558 0576 488B4DE8 		movq	-24(%rbp), %rcx
 559 057a 488B45C8 		movq	-56(%rbp), %rax
 560 057e 4989F9   		movq	%rdi, %r9
 561 0581 4989C8   		movq	%rcx, %r8
 562 0584 89D1     		movl	%edx, %ecx
 563 0586 89F2     		movl	%esi, %edx
 564 0588 488D3500 		leaq	.LC7(%rip), %rsi
 564      000000
 565 058f 4889C7   		movq	%rax, %rdi
 566 0592 B8000000 		movl	$0, %eax
 566      00
 567 0597 E8000000 		call	errRender@PLT
 567      00
 568 059c C745FC0B 		movl	$11, -4(%rbp)
 568      000000
 569 05a3 E9910000 		jmp	.L20
 569      00
 570              	.L33:
 571              		.loc 2 191 0 discriminator 2
 572 05a8 0FB645FA 		movzbl	-6(%rbp), %eax
 573 05ac 48C1E007 		salq	$7, %rax
 574 05b0 4889C2   		movq	%rax, %rdx
 575 05b3 488B45D0 		movq	-48(%rbp), %rax
 576 05b7 4801C2   		addq	%rax, %rdx
 577 05ba 0FB645FB 		movzbl	-5(%rbp), %eax
 578 05be 4898     		cltq
 579 05c0 C7048203 		movl	$3, (%rdx,%rax,4)
 579      000000
 580 05c7 EB2F     		jmp	.L29
 581              	.L32:
 192:prog.c        **** 		} else {
 193:prog.c        **** 			CHECK_STATUS(
 582              		.loc 2 193 0 is_stmt 1 discriminator 1
 583 05c9 488B45E0 		movq	-32(%rbp), %rax
 584 05cd 4889C2   		movq	%rax, %rdx
 585 05d0 488B45E8 		movq	-24(%rbp), %rax
 586 05d4 4829C2   		subq	%rax, %rdx
 587 05d7 488B45C8 		movq	-56(%rbp), %rax
 588 05db 488D3500 		leaq	.LC8(%rip), %rsi
 588      000000
 589 05e2 4889C7   		movq	%rax, %rdi
 590 05e5 B8000000 		movl	$0, %eax
 590      00
 591 05ea E8000000 		call	errRender@PLT
 591      00
 592 05ef C745FC0B 		movl	$11, -4(%rbp)
 592      000000
 593 05f6 EB41     		jmp	.L20
 594              	.L29:
 194:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 195:prog.c        **** 				"populateMap(): Expecting '+', '-' or '?' at char %d", ptr-portConfig);
 196:prog.c        **** 		}
 197:prog.c        **** 		ptr++;
 595              		.loc 2 197 0
 596 05f8 488B45E0 		movq	-32(%rbp), %rax
 597 05fc 4883C001 		addq	$1, %rax
 598 0600 488945E0 		movq	%rax, -32(%rbp)
 198:prog.c        **** 		ch = *ptr++;
 599              		.loc 2 198 0
 600 0604 488B45E0 		movq	-32(%rbp), %rax
 601 0608 488D5001 		leaq	1(%rax), %rdx
 602 060c 488955E0 		movq	%rdx, -32(%rbp)
 603 0610 0FB600   		movzbl	(%rax), %eax
 604 0613 8845F9   		movb	%al, -7(%rbp)
 199:prog.c        **** 	} while ( ch == ',' );
 605              		.loc 2 199 0
 606 0616 807DF92C 		cmpb	$44, -7(%rbp)
 607 061a 0F84E1FB 		je	.L34
 607      FFFF
 200:prog.c        **** 	if ( endPtr ) {
 608              		.loc 2 200 0
 609 0620 48837DD8 		cmpq	$0, -40(%rbp)
 609      00
 610 0625 7411     		je	.L36
 201:prog.c        **** 		*endPtr = ptr - 1;
 611              		.loc 2 201 0
 612 0627 488B45E0 		movq	-32(%rbp), %rax
 613 062b 488D50FF 		leaq	-1(%rax), %rdx
 614 062f 488B45D8 		movq	-40(%rbp), %rax
 615 0633 488910   		movq	%rdx, (%rax)
 616 0636 EB01     		jmp	.L20
 617              	.L36:
 202:prog.c        **** 	}
 203:prog.c        **** cleanup:
 618              		.loc 2 203 0
 619 0638 90       		nop
 620              	.L20:
 204:prog.c        **** 	return retVal;
 621              		.loc 2 204 0
 622 0639 8B45FC   		movl	-4(%rbp), %eax
 205:prog.c        **** }
 623              		.loc 2 205 0
 624 063c C9       		leave
 625              		.cfi_def_cfa 7, 8
 626 063d C3       		ret
 627              		.cfi_endproc
 628              	.LFE8:
 630              		.section	.rodata
 631              	.LC9:
 632 025c 706F7274 		.string	"portMap()"
 632      4D617028 
 632      2900
 633              		.text
 635              	portMap:
 636              	.LFB9:
 206:prog.c        **** 
 207:prog.c        **** // This function re-maps the physical port used by the micro for its logical programming ports.
 208:prog.c        **** //
 209:prog.c        **** // Called by:
 210:prog.c        **** //   xProgram() -> portMap()
 211:prog.c        **** //   progOpen() -> portMap()
 212:prog.c        **** //
 213:prog.c        **** static FLStatus portMap(
 214:prog.c        **** 	struct FLContext *handle, LogicalPort patchOp, uint8 port, uint8 bit,
 215:prog.c        **** 	const char **error)
 216:prog.c        **** {
 637              		.loc 2 216 0
 638              		.cfi_startproc
 639 063e 55       		pushq	%rbp
 640              		.cfi_def_cfa_offset 16
 641              		.cfi_offset 6, -16
 642 063f 4889E5   		movq	%rsp, %rbp
 643              		.cfi_def_cfa_register 6
 644 0642 4883EC30 		subq	$48, %rsp
 645 0646 48897DE8 		movq	%rdi, -24(%rbp)
 646 064a 8975E4   		movl	%esi, -28(%rbp)
 647 064d 89C8     		movl	%ecx, %eax
 648 064f 4C8945D0 		movq	%r8, -48(%rbp)
 649 0653 8855E0   		movb	%dl, -32(%rbp)
 650 0656 8845DC   		movb	%al, -36(%rbp)
 217:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 651              		.loc 2 217 0
 652 0659 C745F800 		movl	$0, -8(%rbp)
 652      000000
 218:prog.c        **** 	USBStatus uStatus;
 219:prog.c        **** 	const uint16 index = (uint16)((port << 8) | patchOp);
 653              		.loc 2 219 0
 654 0660 0FB645E0 		movzbl	-32(%rbp), %eax
 655 0664 C1E008   		sall	$8, %eax
 656 0667 89C2     		movl	%eax, %edx
 657 0669 8B45E4   		movl	-28(%rbp), %eax
 658 066c 09D0     		orl	%edx, %eax
 659 066e 668945F4 		movw	%ax, -12(%rbp)
 220:prog.c        **** 	const uint16 value = (uint16)bit;
 660              		.loc 2 220 0
 661 0672 0FB645DC 		movzbl	-36(%rbp), %eax
 662 0676 668945F6 		movw	%ax, -10(%rbp)
 221:prog.c        **** 	uStatus = usbControlWrite(
 663              		.loc 2 221 0
 664 067a 0FB74DF4 		movzwl	-12(%rbp), %ecx
 665 067e 0FB755F6 		movzwl	-10(%rbp), %edx
 666 0682 488B45E8 		movq	-24(%rbp), %rax
 667 0686 488B00   		movq	(%rax), %rax
 668 0689 FF75D0   		pushq	-48(%rbp)
 669 068c 68E80300 		pushq	$1000
 669      00
 670 0691 41B90000 		movl	$0, %r9d
 670      0000
 671 0697 41B80000 		movl	$0, %r8d
 671      0000
 672 069d BE860000 		movl	$134, %esi
 672      00
 673 06a2 4889C7   		movq	%rax, %rdi
 674 06a5 E8000000 		call	usbControlWrite@PLT
 674      00
 675 06aa 4883C410 		addq	$16, %rsp
 676 06ae 8945FC   		movl	%eax, -4(%rbp)
 222:prog.c        **** 		handle->device,
 223:prog.c        **** 		CMD_PORT_MAP,  // bRequest
 224:prog.c        **** 		value,         // wValue
 225:prog.c        **** 		index,         // wIndex
 226:prog.c        **** 		NULL,          // no data
 227:prog.c        **** 		0,             // wLength
 228:prog.c        **** 		1000,          // timeout (ms)
 229:prog.c        **** 		error
 230:prog.c        **** 	);
 231:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_PORT_MAP, cleanup, "portMap()");
 677              		.loc 2 231 0
 678 06b1 837DFC00 		cmpl	$0, -4(%rbp)
 679 06b5 741C     		je	.L40
 680              		.loc 2 231 0 is_stmt 0 discriminator 1
 681 06b7 488B45D0 		movq	-48(%rbp), %rax
 682 06bb 488D3500 		leaq	.LC9(%rip), %rsi
 682      000000
 683 06c2 4889C7   		movq	%rax, %rdi
 684 06c5 E8000000 		call	errPrefix@PLT
 684      00
 685 06ca C745F80C 		movl	$12, -8(%rbp)
 685      000000
 686 06d1 EB01     		jmp	.L38
 687              	.L40:
 232:prog.c        **** cleanup:
 688              		.loc 2 232 0 is_stmt 1
 689 06d3 90       		nop
 690              	.L38:
 233:prog.c        **** 	return retVal;
 691              		.loc 2 233 0
 692 06d4 8B45F8   		movl	-8(%rbp), %eax
 234:prog.c        **** }
 693              		.loc 2 234 0
 694 06d7 C9       		leave
 695              		.cfi_def_cfa 7, 8
 696 06d8 C3       		ret
 697              		.cfi_endproc
 698              	.LFE9:
 701              	makeLookup:
 702              	.LFB10:
 235:prog.c        **** 
 236:prog.c        **** // The bits in each byte of a programming file may need to be swapped before sending to the micro;
 237:prog.c        **** // this function makes a translation map for efficient bit-swapping. If bitOrder = {0,1,2,3,4,5,6,7
 238:prog.c        **** // then the resulting translation map does nothing. If bitOrder = {7,6,5,4,3,2,1,0} then the
 239:prog.c        **** // resulting translation map mirrors the bits.
 240:prog.c        **** //
 241:prog.c        **** // Called by:
 242:prog.c        **** //   xProgram() -> makeLookup()
 243:prog.c        **** //
 244:prog.c        **** static void makeLookup(const uint8 bitOrder[8], uint8 lookupTable[256]) {
 703              		.loc 2 244 0
 704              		.cfi_startproc
 705 06d9 55       		pushq	%rbp
 706              		.cfi_def_cfa_offset 16
 707              		.cfi_offset 6, -16
 708 06da 4889E5   		movq	%rsp, %rbp
 709              		.cfi_def_cfa_register 6
 710 06dd 48897DE8 		movq	%rdi, -24(%rbp)
 711 06e1 488975E0 		movq	%rsi, -32(%rbp)
 245:prog.c        **** 	uint8 thisByte;
 246:prog.c        **** 	uint16 i;
 247:prog.c        **** 	for ( i = 0; i < 256; i++ ) {
 712              		.loc 2 247 0
 713 06e5 66C745FE 		movw	$0, -2(%rbp)
 713      0000
 714 06eb E9960100 		jmp	.L42
 714      00
 715              	.L51:
 248:prog.c        **** 		thisByte = 0x00;
 716              		.loc 2 248 0
 717 06f0 C645FD00 		movb	$0, -3(%rbp)
 249:prog.c        **** 		if ( i & 0x80 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[7])); }
 718              		.loc 2 249 0
 719 06f4 0FB745FE 		movzwl	-2(%rbp), %eax
 720 06f8 25800000 		andl	$128, %eax
 720      00
 721 06fd 85C0     		testl	%eax, %eax
 722 06ff 7424     		je	.L43
 723              		.loc 2 249 0 is_stmt 0 discriminator 1
 724 0701 488B45E8 		movq	-24(%rbp), %rax
 725 0705 4883C007 		addq	$7, %rax
 726 0709 0FB600   		movzbl	(%rax), %eax
 727 070c 0FB6C0   		movzbl	%al, %eax
 728 070f BA010000 		movl	$1, %edx
 728      00
 729 0714 89C1     		movl	%eax, %ecx
 730 0716 D3E2     		sall	%cl, %edx
 731 0718 89D0     		movl	%edx, %eax
 732 071a 89C2     		movl	%eax, %edx
 733 071c 0FB645FD 		movzbl	-3(%rbp), %eax
 734 0720 09D0     		orl	%edx, %eax
 735 0722 8845FD   		movb	%al, -3(%rbp)
 736              	.L43:
 250:prog.c        **** 		if ( i & 0x40 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[6])); }
 737              		.loc 2 250 0 is_stmt 1
 738 0725 0FB745FE 		movzwl	-2(%rbp), %eax
 739 0729 83E040   		andl	$64, %eax
 740 072c 85C0     		testl	%eax, %eax
 741 072e 7424     		je	.L44
 742              		.loc 2 250 0 is_stmt 0 discriminator 1
 743 0730 488B45E8 		movq	-24(%rbp), %rax
 744 0734 4883C006 		addq	$6, %rax
 745 0738 0FB600   		movzbl	(%rax), %eax
 746 073b 0FB6C0   		movzbl	%al, %eax
 747 073e BA010000 		movl	$1, %edx
 747      00
 748 0743 89C1     		movl	%eax, %ecx
 749 0745 D3E2     		sall	%cl, %edx
 750 0747 89D0     		movl	%edx, %eax
 751 0749 89C2     		movl	%eax, %edx
 752 074b 0FB645FD 		movzbl	-3(%rbp), %eax
 753 074f 09D0     		orl	%edx, %eax
 754 0751 8845FD   		movb	%al, -3(%rbp)
 755              	.L44:
 251:prog.c        **** 		if ( i & 0x20 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[5])); }
 756              		.loc 2 251 0 is_stmt 1
 757 0754 0FB745FE 		movzwl	-2(%rbp), %eax
 758 0758 83E020   		andl	$32, %eax
 759 075b 85C0     		testl	%eax, %eax
 760 075d 7424     		je	.L45
 761              		.loc 2 251 0 is_stmt 0 discriminator 1
 762 075f 488B45E8 		movq	-24(%rbp), %rax
 763 0763 4883C005 		addq	$5, %rax
 764 0767 0FB600   		movzbl	(%rax), %eax
 765 076a 0FB6C0   		movzbl	%al, %eax
 766 076d BA010000 		movl	$1, %edx
 766      00
 767 0772 89C1     		movl	%eax, %ecx
 768 0774 D3E2     		sall	%cl, %edx
 769 0776 89D0     		movl	%edx, %eax
 770 0778 89C2     		movl	%eax, %edx
 771 077a 0FB645FD 		movzbl	-3(%rbp), %eax
 772 077e 09D0     		orl	%edx, %eax
 773 0780 8845FD   		movb	%al, -3(%rbp)
 774              	.L45:
 252:prog.c        **** 		if ( i & 0x10 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[4])); }
 775              		.loc 2 252 0 is_stmt 1
 776 0783 0FB745FE 		movzwl	-2(%rbp), %eax
 777 0787 83E010   		andl	$16, %eax
 778 078a 85C0     		testl	%eax, %eax
 779 078c 7424     		je	.L46
 780              		.loc 2 252 0 is_stmt 0 discriminator 1
 781 078e 488B45E8 		movq	-24(%rbp), %rax
 782 0792 4883C004 		addq	$4, %rax
 783 0796 0FB600   		movzbl	(%rax), %eax
 784 0799 0FB6C0   		movzbl	%al, %eax
 785 079c BA010000 		movl	$1, %edx
 785      00
 786 07a1 89C1     		movl	%eax, %ecx
 787 07a3 D3E2     		sall	%cl, %edx
 788 07a5 89D0     		movl	%edx, %eax
 789 07a7 89C2     		movl	%eax, %edx
 790 07a9 0FB645FD 		movzbl	-3(%rbp), %eax
 791 07ad 09D0     		orl	%edx, %eax
 792 07af 8845FD   		movb	%al, -3(%rbp)
 793              	.L46:
 253:prog.c        **** 		if ( i & 0x08 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[3])); }
 794              		.loc 2 253 0 is_stmt 1
 795 07b2 0FB745FE 		movzwl	-2(%rbp), %eax
 796 07b6 83E008   		andl	$8, %eax
 797 07b9 85C0     		testl	%eax, %eax
 798 07bb 7424     		je	.L47
 799              		.loc 2 253 0 is_stmt 0 discriminator 1
 800 07bd 488B45E8 		movq	-24(%rbp), %rax
 801 07c1 4883C003 		addq	$3, %rax
 802 07c5 0FB600   		movzbl	(%rax), %eax
 803 07c8 0FB6C0   		movzbl	%al, %eax
 804 07cb BA010000 		movl	$1, %edx
 804      00
 805 07d0 89C1     		movl	%eax, %ecx
 806 07d2 D3E2     		sall	%cl, %edx
 807 07d4 89D0     		movl	%edx, %eax
 808 07d6 89C2     		movl	%eax, %edx
 809 07d8 0FB645FD 		movzbl	-3(%rbp), %eax
 810 07dc 09D0     		orl	%edx, %eax
 811 07de 8845FD   		movb	%al, -3(%rbp)
 812              	.L47:
 254:prog.c        **** 		if ( i & 0x04 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[2])); }
 813              		.loc 2 254 0 is_stmt 1
 814 07e1 0FB745FE 		movzwl	-2(%rbp), %eax
 815 07e5 83E004   		andl	$4, %eax
 816 07e8 85C0     		testl	%eax, %eax
 817 07ea 7424     		je	.L48
 818              		.loc 2 254 0 is_stmt 0 discriminator 1
 819 07ec 488B45E8 		movq	-24(%rbp), %rax
 820 07f0 4883C002 		addq	$2, %rax
 821 07f4 0FB600   		movzbl	(%rax), %eax
 822 07f7 0FB6C0   		movzbl	%al, %eax
 823 07fa BA010000 		movl	$1, %edx
 823      00
 824 07ff 89C1     		movl	%eax, %ecx
 825 0801 D3E2     		sall	%cl, %edx
 826 0803 89D0     		movl	%edx, %eax
 827 0805 89C2     		movl	%eax, %edx
 828 0807 0FB645FD 		movzbl	-3(%rbp), %eax
 829 080b 09D0     		orl	%edx, %eax
 830 080d 8845FD   		movb	%al, -3(%rbp)
 831              	.L48:
 255:prog.c        **** 		if ( i & 0x02 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[1])); }
 832              		.loc 2 255 0 is_stmt 1
 833 0810 0FB745FE 		movzwl	-2(%rbp), %eax
 834 0814 83E002   		andl	$2, %eax
 835 0817 85C0     		testl	%eax, %eax
 836 0819 7424     		je	.L49
 837              		.loc 2 255 0 is_stmt 0 discriminator 1
 838 081b 488B45E8 		movq	-24(%rbp), %rax
 839 081f 4883C001 		addq	$1, %rax
 840 0823 0FB600   		movzbl	(%rax), %eax
 841 0826 0FB6C0   		movzbl	%al, %eax
 842 0829 BA010000 		movl	$1, %edx
 842      00
 843 082e 89C1     		movl	%eax, %ecx
 844 0830 D3E2     		sall	%cl, %edx
 845 0832 89D0     		movl	%edx, %eax
 846 0834 89C2     		movl	%eax, %edx
 847 0836 0FB645FD 		movzbl	-3(%rbp), %eax
 848 083a 09D0     		orl	%edx, %eax
 849 083c 8845FD   		movb	%al, -3(%rbp)
 850              	.L49:
 256:prog.c        **** 		if ( i & 0x01 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[0])); }
 851              		.loc 2 256 0 is_stmt 1
 852 083f 0FB745FE 		movzwl	-2(%rbp), %eax
 853 0843 83E001   		andl	$1, %eax
 854 0846 85C0     		testl	%eax, %eax
 855 0848 7420     		je	.L50
 856              		.loc 2 256 0 is_stmt 0 discriminator 1
 857 084a 488B45E8 		movq	-24(%rbp), %rax
 858 084e 0FB600   		movzbl	(%rax), %eax
 859 0851 0FB6C0   		movzbl	%al, %eax
 860 0854 BA010000 		movl	$1, %edx
 860      00
 861 0859 89C1     		movl	%eax, %ecx
 862 085b D3E2     		sall	%cl, %edx
 863 085d 89D0     		movl	%edx, %eax
 864 085f 89C2     		movl	%eax, %edx
 865 0861 0FB645FD 		movzbl	-3(%rbp), %eax
 866 0865 09D0     		orl	%edx, %eax
 867 0867 8845FD   		movb	%al, -3(%rbp)
 868              	.L50:
 257:prog.c        **** 		lookupTable[i] = thisByte;
 869              		.loc 2 257 0 is_stmt 1 discriminator 2
 870 086a 0FB755FE 		movzwl	-2(%rbp), %edx
 871 086e 488B45E0 		movq	-32(%rbp), %rax
 872 0872 4801C2   		addq	%rax, %rdx
 873 0875 0FB645FD 		movzbl	-3(%rbp), %eax
 874 0879 8802     		movb	%al, (%rdx)
 247:prog.c        **** 		thisByte = 0x00;
 875              		.loc 2 247 0 discriminator 2
 876 087b 0FB745FE 		movzwl	-2(%rbp), %eax
 877 087f 83C001   		addl	$1, %eax
 878 0882 668945FE 		movw	%ax, -2(%rbp)
 879              	.L42:
 247:prog.c        **** 		thisByte = 0x00;
 880              		.loc 2 247 0 is_stmt 0 discriminator 1
 881 0886 66817DFE 		cmpw	$255, -2(%rbp)
 881      FF00
 882 088c 0F865EFE 		jbe	.L51
 882      FFFF
 258:prog.c        **** 	}
 259:prog.c        **** }	
 883              		.loc 2 259 0 is_stmt 1
 884 0892 90       		nop
 885 0893 5D       		popq	%rbp
 886              		.cfi_def_cfa 7, 8
 887 0894 C3       		ret
 888              		.cfi_endproc
 889              	.LFE10:
 891              		.section	.rodata
 892              	.LC10:
 893 0266 64617461 		.string	"dataWrite()"
 893      57726974 
 893      65282900 
 894              		.text
 896              	dataWrite:
 897              	.LFB11:
 260:prog.c        **** 
 261:prog.c        **** // For serial & parallel programming, when the FPGA is ready to accept data, this function sends it
 262:prog.c        **** // one 64-byte block at a time, with a bit-transformation applied to each block.
 263:prog.c        **** //
 264:prog.c        **** // Called by:
 265:prog.c        **** //   xProgram() -> fileWrite() -> dataWrite()
 266:prog.c        **** //   xProgram() -> dataWrite()
 267:prog.c        **** //
 268:prog.c        **** static FLStatus dataWrite(struct FLContext *handle, ProgOp progOp, const uint8 *buf, uint32 len, co
 898              		.loc 2 268 0
 899              		.cfi_startproc
 900 0895 55       		pushq	%rbp
 901              		.cfi_def_cfa_offset 16
 902              		.cfi_offset 6, -16
 903 0896 4889E5   		movq	%rsp, %rbp
 904              		.cfi_def_cfa_register 6
 905 0899 4881EC90 		subq	$144, %rsp
 905      000000
 906 08a0 48897D98 		movq	%rdi, -104(%rbp)
 907 08a4 897594   		movl	%esi, -108(%rbp)
 908 08a7 48895588 		movq	%rdx, -120(%rbp)
 909 08ab 894D90   		movl	%ecx, -112(%rbp)
 910 08ae 4C894580 		movq	%r8, -128(%rbp)
 911 08b2 4C898D78 		movq	%r9, -136(%rbp)
 911      FFFFFF
 912              		.loc 2 268 0
 913 08b9 64488B04 		movq	%fs:40, %rax
 913      25280000 
 913      00
 914 08c2 488945F8 		movq	%rax, -8(%rbp)
 915 08c6 31C0     		xorl	%eax, %eax
 269:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 916              		.loc 2 269 0
 917 08c8 C745A800 		movl	$0, -88(%rbp)
 917      000000
 270:prog.c        **** 	uint16 chunkSize;
 271:prog.c        **** 	FLStatus fStatus = beginShift(handle, len, progOp, 0x00, error);
 918              		.loc 2 271 0
 919 08cf 488B8D78 		movq	-136(%rbp), %rcx
 919      FFFFFF
 920 08d6 8B5594   		movl	-108(%rbp), %edx
 921 08d9 8B7590   		movl	-112(%rbp), %esi
 922 08dc 488B4598 		movq	-104(%rbp), %rax
 923 08e0 4989C8   		movq	%rcx, %r8
 924 08e3 B9000000 		movl	$0, %ecx
 924      00
 925 08e8 4889C7   		movq	%rax, %rdi
 926 08eb E81CF7FF 		call	beginShift
 926      FF
 927 08f0 8945AC   		movl	%eax, -84(%rbp)
 272:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 928              		.loc 2 272 0
 929 08f3 837DAC00 		cmpl	$0, -84(%rbp)
 930 08f7 7421     		je	.L53
 931              		.loc 2 272 0 is_stmt 0 discriminator 1
 932 08f9 488B8578 		movq	-136(%rbp), %rax
 932      FFFFFF
 933 0900 488D3500 		leaq	.LC10(%rip), %rsi
 933      000000
 934 0907 4889C7   		movq	%rax, %rdi
 935 090a E8000000 		call	errPrefix@PLT
 935      00
 936 090f 8B45AC   		movl	-84(%rbp), %eax
 937 0912 8945A8   		movl	%eax, -88(%rbp)
 938 0915 E9320100 		jmp	.L54
 938      00
 939              	.L53:
 273:prog.c        **** 	if ( lookupTable ) {
 940              		.loc 2 273 0 is_stmt 1
 941 091a 48837D80 		cmpq	$0, -128(%rbp)
 941      00
 942 091f 0F842001 		je	.L63
 942      0000
 943              	.LBB2:
 274:prog.c        **** 		uint8 bitSwap[64];
 275:prog.c        **** 		uint16 i;
 276:prog.c        **** 		while ( len ) {
 944              		.loc 2 276 0
 945 0925 E9AA0000 		jmp	.L56
 945      00
 946              	.L62:
 277:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 947              		.loc 2 277 0
 948 092a 837D903F 		cmpl	$63, -112(%rbp)
 949 092e 7705     		ja	.L57
 950              		.loc 2 277 0 is_stmt 0 discriminator 1
 951 0930 8B4590   		movl	-112(%rbp), %eax
 952 0933 EB05     		jmp	.L58
 953              	.L57:
 954              		.loc 2 277 0 discriminator 2
 955 0935 B8400000 		movl	$64, %eax
 955      00
 956              	.L58:
 957              		.loc 2 277 0 discriminator 4
 958 093a 668945A6 		movw	%ax, -90(%rbp)
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 959              		.loc 2 278 0 is_stmt 1 discriminator 4
 960 093e 66C745A4 		movw	$0, -92(%rbp)
 960      0000
 961 0944 EB30     		jmp	.L59
 962              	.L60:
 279:prog.c        **** 				bitSwap[i] = lookupTable[buf[i]];
 963              		.loc 2 279 0 discriminator 3
 964 0946 0FB755A4 		movzwl	-92(%rbp), %edx
 965 094a 488B4588 		movq	-120(%rbp), %rax
 966 094e 4801D0   		addq	%rdx, %rax
 967 0951 0FB600   		movzbl	(%rax), %eax
 968 0954 0FB6D0   		movzbl	%al, %edx
 969 0957 488B4580 		movq	-128(%rbp), %rax
 970 095b 4801C2   		addq	%rax, %rdx
 971 095e 0FB745A4 		movzwl	-92(%rbp), %eax
 972 0962 0FB612   		movzbl	(%rdx), %edx
 973 0965 4898     		cltq
 974 0967 885405B0 		movb	%dl, -80(%rbp,%rax)
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 975              		.loc 2 278 0 discriminator 3
 976 096b 0FB745A4 		movzwl	-92(%rbp), %eax
 977 096f 83C001   		addl	$1, %eax
 978 0972 668945A4 		movw	%ax, -92(%rbp)
 979              	.L59:
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 980              		.loc 2 278 0 is_stmt 0 discriminator 1
 981 0976 0FB745A4 		movzwl	-92(%rbp), %eax
 982 097a 663B45A6 		cmpw	-90(%rbp), %ax
 983 097e 72C6     		jb	.L60
 280:prog.c        **** 			}
 281:prog.c        **** 			fStatus = doSend(handle, bitSwap, chunkSize, error);
 984              		.loc 2 281 0 is_stmt 1
 985 0980 0FB755A6 		movzwl	-90(%rbp), %edx
 986 0984 488B8D78 		movq	-136(%rbp), %rcx
 986      FFFFFF
 987 098b 488D75B0 		leaq	-80(%rbp), %rsi
 988 098f 488B4598 		movq	-104(%rbp), %rax
 989 0993 4889C7   		movq	%rax, %rdi
 990 0996 E825F7FF 		call	doSend
 990      FF
 991 099b 8945AC   		movl	%eax, -84(%rbp)
 282:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 992              		.loc 2 282 0
 993 099e 837DAC00 		cmpl	$0, -84(%rbp)
 994 09a2 7421     		je	.L61
 995              		.loc 2 282 0 is_stmt 0 discriminator 1
 996 09a4 488B8578 		movq	-136(%rbp), %rax
 996      FFFFFF
 997 09ab 488D3500 		leaq	.LC10(%rip), %rsi
 997      000000
 998 09b2 4889C7   		movq	%rax, %rdi
 999 09b5 E8000000 		call	errPrefix@PLT
 999      00
 1000 09ba 8B45AC   		movl	-84(%rbp), %eax
 1001 09bd 8945A8   		movl	%eax, -88(%rbp)
 1002 09c0 E9870000 		jmp	.L54
 1002      00
 1003              	.L61:
 283:prog.c        **** 			buf += chunkSize;
 1004              		.loc 2 283 0 is_stmt 1
 1005 09c5 0FB745A6 		movzwl	-90(%rbp), %eax
 1006 09c9 48014588 		addq	%rax, -120(%rbp)
 284:prog.c        **** 			len -= chunkSize;
 1007              		.loc 2 284 0
 1008 09cd 0FB745A6 		movzwl	-90(%rbp), %eax
 1009 09d1 294590   		subl	%eax, -112(%rbp)
 1010              	.L56:
 276:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1011              		.loc 2 276 0
 1012 09d4 837D9000 		cmpl	$0, -112(%rbp)
 1013 09d8 0F854CFF 		jne	.L62
 1013      FFFF
 1014 09de EB6C     		jmp	.L54
 1015              	.L67:
 1016              	.LBE2:
 285:prog.c        **** 		}
 286:prog.c        **** 	} else {
 287:prog.c        **** 		while ( len ) {
 288:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1017              		.loc 2 288 0
 1018 09e0 837D903F 		cmpl	$63, -112(%rbp)
 1019 09e4 7705     		ja	.L64
 1020              		.loc 2 288 0 is_stmt 0 discriminator 1
 1021 09e6 8B4590   		movl	-112(%rbp), %eax
 1022 09e9 EB05     		jmp	.L65
 1023              	.L64:
 1024              		.loc 2 288 0 discriminator 2
 1025 09eb B8400000 		movl	$64, %eax
 1025      00
 1026              	.L65:
 1027              		.loc 2 288 0 discriminator 4
 1028 09f0 668945A6 		movw	%ax, -90(%rbp)
 289:prog.c        **** 			fStatus = doSend(handle, buf, chunkSize, error);
 1029              		.loc 2 289 0 is_stmt 1 discriminator 4
 1030 09f4 0FB755A6 		movzwl	-90(%rbp), %edx
 1031 09f8 488B8D78 		movq	-136(%rbp), %rcx
 1031      FFFFFF
 1032 09ff 488B7588 		movq	-120(%rbp), %rsi
 1033 0a03 488B4598 		movq	-104(%rbp), %rax
 1034 0a07 4889C7   		movq	%rax, %rdi
 1035 0a0a E8B1F6FF 		call	doSend
 1035      FF
 1036 0a0f 8945AC   		movl	%eax, -84(%rbp)
 290:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 1037              		.loc 2 290 0 discriminator 4
 1038 0a12 837DAC00 		cmpl	$0, -84(%rbp)
 1039 0a16 741E     		je	.L66
 1040              		.loc 2 290 0 is_stmt 0 discriminator 1
 1041 0a18 488B8578 		movq	-136(%rbp), %rax
 1041      FFFFFF
 1042 0a1f 488D3500 		leaq	.LC10(%rip), %rsi
 1042      000000
 1043 0a26 4889C7   		movq	%rax, %rdi
 1044 0a29 E8000000 		call	errPrefix@PLT
 1044      00
 1045 0a2e 8B45AC   		movl	-84(%rbp), %eax
 1046 0a31 8945A8   		movl	%eax, -88(%rbp)
 1047 0a34 EB16     		jmp	.L54
 1048              	.L66:
 291:prog.c        **** 			buf += chunkSize;
 1049              		.loc 2 291 0 is_stmt 1
 1050 0a36 0FB745A6 		movzwl	-90(%rbp), %eax
 1051 0a3a 48014588 		addq	%rax, -120(%rbp)
 292:prog.c        **** 			len -= chunkSize;
 1052              		.loc 2 292 0
 1053 0a3e 0FB745A6 		movzwl	-90(%rbp), %eax
 1054 0a42 294590   		subl	%eax, -112(%rbp)
 1055              	.L63:
 287:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1056              		.loc 2 287 0
 1057 0a45 837D9000 		cmpl	$0, -112(%rbp)
 1058 0a49 7595     		jne	.L67
 293:prog.c        **** 		}
 294:prog.c        **** 	}
 295:prog.c        **** cleanup:
 1059              		.loc 2 295 0
 1060 0a4b 90       		nop
 1061              	.L54:
 296:prog.c        **** 	return retVal;
 1062              		.loc 2 296 0
 1063 0a4c 8B45A8   		movl	-88(%rbp), %eax
 297:prog.c        **** }
 1064              		.loc 2 297 0
 1065 0a4f 488B7DF8 		movq	-8(%rbp), %rdi
 1066 0a53 6448333C 		xorq	%fs:40, %rdi
 1066      25280000 
 1066      00
 1067 0a5c 7405     		je	.L69
 1068 0a5e E8000000 		call	__stack_chk_fail@PLT
 1068      00
 1069              	.L69:
 1070 0a63 C9       		leave
 1071              		.cfi_def_cfa 7, 8
 1072 0a64 C3       		ret
 1073              		.cfi_endproc
 1074              	.LFE11:
 1076              		.section	.rodata
 1077 0272 00000000 		.align 8
 1077      0000
 1078              	.LC11:
 1079 0278 7850726F 		.string	"xProgram(): unsupported ProgOp"
 1079      6772616D 
 1079      28293A20 
 1079      756E7375 
 1079      70706F72 
 1080 0297 00       		.align 8
 1081              	.LC12:
 1082 0298 7850726F 		.string	"xProgram(): Unexpected end of config string:\n  %s\n  %s^"
 1082      6772616D 
 1082      28293A20 
 1082      556E6578 
 1082      70656374 
 1083              		.align 8
 1084              	.LC13:
 1085 02d0 7850726F 		.string	"xProgram(): Expecting ':':\n  %s\n  %s^"
 1085      6772616D 
 1085      28293A20 
 1085      45787065 
 1085      6374696E 
 1086 02f6 0000     		.align 8
 1087              	.LC14:
 1088 02f8 7850726F 		.string	"xProgram(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 1088      6772616D 
 1088      28293A20 
 1088      506F7274 
 1088      20697320 
 1089 033b 00000000 		.align 8
 1089      00
 1090              	.LC15:
 1091 0340 7850726F 		.string	"xProgram(): Bit number is not valid:\n  %s\n  %s^"
 1091      6772616D 
 1091      28293A20 
 1091      42697420 
 1091      6E756D62 
 1092              		.align 8
 1093              	.LC16:
 1094 0370 7850726F 		.string	"xProgram(): port '%c%d' is already used:\n  %s\n  %s^"
 1094      6772616D 
 1094      28293A20 
 1094      706F7274 
 1094      20272563 
 1095 03a4 00000000 		.align 8
 1096              	.LC17:
 1097 03a8 7850726F 		.string	"xProgram(): Bit '%c' is not valid at char %d"
 1097      6772616D 
 1097      28293A20 
 1097      42697420 
 1097      27256327 
 1098              	.LC18:
 1099 03d5 7850726F 		.string	"xProgram()"
 1099      6772616D 
 1099      282900
 1100              		.align 8
 1101              	.LC19:
 1102 03e0 7850726F 		.string	"xProgram(): Expecting ']':\n  %s\n  %s^"
 1102      6772616D 
 1102      28293A20 
 1102      45787065 
 1102      6374696E 
 1103 0406 0000     		.align 8
 1104              	.LC20:
 1105 0408 7850726F 		.string	"xProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^"
 1105      6772616D 
 1105      28293A20 
 1105      45787065 
 1105      6374696E 
 1106 043f 00       		.align 8
 1107              	.LC21:
 1108 0440 7850726F 		.string	"xProgram(): DONE did not assert"
 1108      6772616D 
 1108      28293A20 
 1108      444F4E45 
 1108      20646964 
 1109              		.align 8
 1110              	.LC22:
 1111 0460 7850726F 		.string	"xProgram(): INIT unexpectedly low (CRC error during config)"
 1111      6772616D 
 1111      28293A20 
 1111      494E4954 
 1111      20756E65 
 1112              		.text
 1114              	xProgram:
 1115              	.LFB12:
 298:prog.c        **** 
 299:prog.c        **** // This function performs either a serial or a parallel programming operation on Xilinx FPGAs.
 300:prog.c        **** //
 301:prog.c        **** // Called by:
 302:prog.c        **** //   flProgram() -> xProgram()
 303:prog.c        **** //
 304:prog.c        **** static FLStatus xProgram(struct FLContext *handle, ProgOp progOp, const char *portConfig, const uin
 1116              		.loc 2 304 0
 1117              		.cfi_startproc
 1118 0a65 55       		pushq	%rbp
 1119              		.cfi_def_cfa_offset 16
 1120              		.cfi_offset 6, -16
 1121 0a66 4889E5   		movq	%rsp, %rbp
 1122              		.cfi_def_cfa_register 6
 1123 0a69 4881ECC0 		subq	$3776, %rsp
 1123      0E0000
 1124 0a70 4889BD68 		movq	%rdi, -3736(%rbp)
 1124      F1FFFF
 1125 0a77 89B564F1 		movl	%esi, -3740(%rbp)
 1125      FFFF
 1126 0a7d 48899558 		movq	%rdx, -3752(%rbp)
 1126      F1FFFF
 1127 0a84 48898D50 		movq	%rcx, -3760(%rbp)
 1127      F1FFFF
 1128 0a8b 44898560 		movl	%r8d, -3744(%rbp)
 1128      F1FFFF
 1129 0a92 4C898D48 		movq	%r9, -3768(%rbp)
 1129      F1FFFF
 1130              		.loc 2 304 0
 1131 0a99 64488B04 		movq	%fs:40, %rax
 1131      25280000 
 1131      00
 1132 0aa2 488945F8 		movq	%rax, -8(%rbp)
 1133 0aa6 31C0     		xorl	%eax, %eax
 305:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 1134              		.loc 2 305 0
 1135 0aa8 C78588F1 		movl	$0, -3704(%rbp)
 1135      FFFF0000 
 1135      0000
 306:prog.c        **** 	FLStatus fStatus;
 307:prog.c        **** 	uint8 progPort, progBit;
 308:prog.c        **** 	uint8 initPort, initBit;
 309:prog.c        **** 	uint8 donePort, doneBit;
 310:prog.c        **** 	uint8 cclkPort, cclkBit;
 311:prog.c        **** 	uint8 dataPort, dataBit[8];
 312:prog.c        **** 	uint8 port, bit;
 313:prog.c        **** 	uint8 initStatus, doneStatus;
 314:prog.c        **** 	const char *ptr = portConfig + 2;
 1136              		.loc 2 314 0
 1137 0ab2 488B8558 		movq	-3752(%rbp), %rax
 1137      F1FFFF
 1138 0ab9 4883C002 		addq	$2, %rax
 1139 0abd 48898598 		movq	%rax, -3688(%rbp)
 1139      F1FFFF
 315:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 1140              		.loc 2 315 0
 1141 0ac4 488D95A0 		leaq	-3680(%rbp), %rdx
 1141      F1FFFF
 1142 0acb B8000000 		movl	$0, %eax
 1142      00
 1143 0ad0 B9A00100 		movl	$416, %ecx
 1143      00
 1144 0ad5 4889D7   		movq	%rdx, %rdi
 1145 0ad8 F348AB   		rep stosq
 316:prog.c        **** 	PinConfig thisPin;
 317:prog.c        **** 	const uint8 zeroBlock[64] = {0,};
 1146              		.loc 2 317 0
 1147 0adb 48C785B0 		movq	$0, -336(%rbp)
 1147      FEFFFF00 
 1147      000000
 1148 0ae6 48C785B8 		movq	$0, -328(%rbp)
 1148      FEFFFF00 
 1148      000000
 1149 0af1 48C785C0 		movq	$0, -320(%rbp)
 1149      FEFFFF00 
 1149      000000
 1150 0afc 48C785C8 		movq	$0, -312(%rbp)
 1150      FEFFFF00 
 1150      000000
 1151 0b07 48C785D0 		movq	$0, -304(%rbp)
 1151      FEFFFF00 
 1151      000000
 1152 0b12 48C785D8 		movq	$0, -296(%rbp)
 1152      FEFFFF00 
 1152      000000
 1153 0b1d 48C785E0 		movq	$0, -288(%rbp)
 1153      FEFFFF00 
 1153      000000
 1154 0b28 48C785E8 		movq	$0, -280(%rbp)
 1154      FEFFFF00 
 1154      000000
 318:prog.c        **** 	uint8 lookupTable[256];
 319:prog.c        **** 	int i;
 320:prog.c        **** 	char ch;
 321:prog.c        **** 	CHECK_STATUS(
 1155              		.loc 2 321 0
 1156 0b33 83BD64F1 		cmpl	$5, -3740(%rbp)
 1156      FFFF05
 1157 0b3a 742E     		je	.L71
 1158              		.loc 2 321 0 is_stmt 0 discriminator 1
 1159 0b3c 83BD64F1 		cmpl	$6, -3740(%rbp)
 1159      FFFF06
 1160 0b43 7425     		je	.L71
 1161              		.loc 2 321 0 discriminator 2
 1162 0b45 488B8548 		movq	-3768(%rbp), %rax
 1162      F1FFFF
 1163 0b4c 488D3500 		leaq	.LC11(%rip), %rsi
 1163      000000
 1164 0b53 4889C7   		movq	%rax, %rdi
 1165 0b56 E8000000 		call	errPrefix@PLT
 1165      00
 1166 0b5b C78588F1 		movl	$11, -3704(%rbp)
 1166      FFFF0B00 
 1166      0000
 1167 0b65 E9471C00 		jmp	.L72
 1167      00
 1168              	.L71:
 322:prog.c        **** 		progOp != PROG_PARALLEL && progOp != PROG_SPI_SEND, FL_CONF_FORMAT, cleanup,
 323:prog.c        **** 		"xProgram(): unsupported ProgOp");
 324:prog.c        **** 	EXPECT_CHAR(':', "xProgram");
 1169              		.loc 2 324 0 is_stmt 1
 1170 0b6a 488B8598 		movq	-3688(%rbp), %rax
 1170      F1FFFF
 1171 0b71 0FB600   		movzbl	(%rax), %eax
 1172 0b74 88857EF1 		movb	%al, -3714(%rbp)
 1172      FFFF
 1173 0b7a 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1173      FFFF00
 1174 0b81 7553     		jne	.L73
 1175              		.loc 2 324 0 is_stmt 0 discriminator 1
 1176 0b83 488B8598 		movq	-3688(%rbp), %rax
 1176      F1FFFF
 1177 0b8a 4889C2   		movq	%rax, %rdx
 1178 0b8d 488B8558 		movq	-3752(%rbp), %rax
 1178      F1FFFF
 1179 0b94 4829C2   		subq	%rax, %rdx
 1180 0b97 4889D0   		movq	%rdx, %rax
 1181 0b9a 4889C7   		movq	%rax, %rdi
 1182 0b9d E814F6FF 		call	spaces
 1182      FF
 1183 0ba2 4889C1   		movq	%rax, %rcx
 1184 0ba5 488B9558 		movq	-3752(%rbp), %rdx
 1184      F1FFFF
 1185 0bac 488B8548 		movq	-3768(%rbp), %rax
 1185      F1FFFF
 1186 0bb3 488D3500 		leaq	.LC12(%rip), %rsi
 1186      000000
 1187 0bba 4889C7   		movq	%rax, %rdi
 1188 0bbd B8000000 		movl	$0, %eax
 1188      00
 1189 0bc2 E8000000 		call	errRender@PLT
 1189      00
 1190 0bc7 C78588F1 		movl	$11, -3704(%rbp)
 1190      FFFF0B00 
 1190      0000
 1191 0bd1 E9DB1B00 		jmp	.L72
 1191      00
 1192              	.L73:
 1193              		.loc 2 324 0 discriminator 2
 1194 0bd6 80BD7EF1 		cmpb	$58, -3714(%rbp)
 1194      FFFF3A
 1195 0bdd 7453     		je	.L74
 1196              		.loc 2 324 0 discriminator 3
 1197 0bdf 488B8598 		movq	-3688(%rbp), %rax
 1197      F1FFFF
 1198 0be6 4889C2   		movq	%rax, %rdx
 1199 0be9 488B8558 		movq	-3752(%rbp), %rax
 1199      F1FFFF
 1200 0bf0 4829C2   		subq	%rax, %rdx
 1201 0bf3 4889D0   		movq	%rdx, %rax
 1202 0bf6 4889C7   		movq	%rax, %rdi
 1203 0bf9 E8B8F5FF 		call	spaces
 1203      FF
 1204 0bfe 4889C1   		movq	%rax, %rcx
 1205 0c01 488B9558 		movq	-3752(%rbp), %rdx
 1205      F1FFFF
 1206 0c08 488B8548 		movq	-3768(%rbp), %rax
 1206      F1FFFF
 1207 0c0f 488D3500 		leaq	.LC13(%rip), %rsi
 1207      000000
 1208 0c16 4889C7   		movq	%rax, %rdi
 1209 0c19 B8000000 		movl	$0, %eax
 1209      00
 1210 0c1e E8000000 		call	errRender@PLT
 1210      00
 1211 0c23 C78588F1 		movl	$11, -3704(%rbp)
 1211      FFFF0B00 
 1211      0000
 1212 0c2d E97F1B00 		jmp	.L72
 1212      00
 1213              	.L74:
 1214              		.loc 2 324 0 discriminator 4
 1215 0c32 488B8598 		movq	-3688(%rbp), %rax
 1215      F1FFFF
 1216 0c39 4883C001 		addq	$1, %rax
 1217 0c3d 48898598 		movq	%rax, -3688(%rbp)
 1217      F1FFFF
 325:prog.c        **** 
 326:prog.c        **** 	GET_PAIR(progPort, progBit, "xProgram");
 1218              		.loc 2 326 0 is_stmt 1 discriminator 4
 1219 0c44 488B8598 		movq	-3688(%rbp), %rax
 1219      F1FFFF
 1220 0c4b 0FB600   		movzbl	(%rax), %eax
 1221 0c4e 88857EF1 		movb	%al, -3714(%rbp)
 1221      FFFF
 1222 0c54 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1222      FFFF00
 1223 0c5b 7553     		jne	.L75
 1224              		.loc 2 326 0 is_stmt 0 discriminator 1
 1225 0c5d 488B8598 		movq	-3688(%rbp), %rax
 1225      F1FFFF
 1226 0c64 4889C2   		movq	%rax, %rdx
 1227 0c67 488B8558 		movq	-3752(%rbp), %rax
 1227      F1FFFF
 1228 0c6e 4829C2   		subq	%rax, %rdx
 1229 0c71 4889D0   		movq	%rdx, %rax
 1230 0c74 4889C7   		movq	%rax, %rdi
 1231 0c77 E83AF5FF 		call	spaces
 1231      FF
 1232 0c7c 4889C1   		movq	%rax, %rcx
 1233 0c7f 488B9558 		movq	-3752(%rbp), %rdx
 1233      F1FFFF
 1234 0c86 488B8548 		movq	-3768(%rbp), %rax
 1234      F1FFFF
 1235 0c8d 488D3500 		leaq	.LC12(%rip), %rsi
 1235      000000
 1236 0c94 4889C7   		movq	%rax, %rdi
 1237 0c97 B8000000 		movl	$0, %eax
 1237      00
 1238 0c9c E8000000 		call	errRender@PLT
 1238      00
 1239 0ca1 C78588F1 		movl	$11, -3704(%rbp)
 1239      FFFF0B00 
 1239      0000
 1240 0cab E9011B00 		jmp	.L72
 1240      00
 1241              	.L75:
 1242              		.loc 2 326 0 discriminator 2
 1243 0cb0 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1243      FFFF40
 1244 0cb7 7E09     		jle	.L76
 1245              		.loc 2 326 0 discriminator 4
 1246 0cb9 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1246      FFFF5A
 1247 0cc0 7E53     		jle	.L77
 1248              	.L76:
 1249              		.loc 2 326 0 discriminator 5
 1250 0cc2 488B8598 		movq	-3688(%rbp), %rax
 1250      F1FFFF
 1251 0cc9 4889C2   		movq	%rax, %rdx
 1252 0ccc 488B8558 		movq	-3752(%rbp), %rax
 1252      F1FFFF
 1253 0cd3 4829C2   		subq	%rax, %rdx
 1254 0cd6 4889D0   		movq	%rdx, %rax
 1255 0cd9 4889C7   		movq	%rax, %rdi
 1256 0cdc E8D5F4FF 		call	spaces
 1256      FF
 1257 0ce1 4889C1   		movq	%rax, %rcx
 1258 0ce4 488B9558 		movq	-3752(%rbp), %rdx
 1258      F1FFFF
 1259 0ceb 488B8548 		movq	-3768(%rbp), %rax
 1259      F1FFFF
 1260 0cf2 488D3500 		leaq	.LC14(%rip), %rsi
 1260      000000
 1261 0cf9 4889C7   		movq	%rax, %rdi
 1262 0cfc B8000000 		movl	$0, %eax
 1262      00
 1263 0d01 E8000000 		call	errRender@PLT
 1263      00
 1264 0d06 C78588F1 		movl	$11, -3704(%rbp)
 1264      FFFF0B00 
 1264      0000
 1265 0d10 E99C1A00 		jmp	.L72
 1265      00
 1266              	.L77:
 1267              		.loc 2 326 0 discriminator 6
 1268 0d15 0FB6857E 		movzbl	-3714(%rbp), %eax
 1268      F1FFFF
 1269 0d1c 83E841   		subl	$65, %eax
 1270 0d1f 88857FF1 		movb	%al, -3713(%rbp)
 1270      FFFF
 1271 0d25 488B8598 		movq	-3688(%rbp), %rax
 1271      F1FFFF
 1272 0d2c 4883C001 		addq	$1, %rax
 1273 0d30 48898598 		movq	%rax, -3688(%rbp)
 1273      F1FFFF
 1274 0d37 488B8598 		movq	-3688(%rbp), %rax
 1274      F1FFFF
 1275 0d3e 0FB600   		movzbl	(%rax), %eax
 1276 0d41 88857EF1 		movb	%al, -3714(%rbp)
 1276      FFFF
 1277 0d47 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1277      FFFF00
 1278 0d4e 7553     		jne	.L78
 1279              		.loc 2 326 0 discriminator 7
 1280 0d50 488B8598 		movq	-3688(%rbp), %rax
 1280      F1FFFF
 1281 0d57 4889C2   		movq	%rax, %rdx
 1282 0d5a 488B8558 		movq	-3752(%rbp), %rax
 1282      F1FFFF
 1283 0d61 4829C2   		subq	%rax, %rdx
 1284 0d64 4889D0   		movq	%rdx, %rax
 1285 0d67 4889C7   		movq	%rax, %rdi
 1286 0d6a E847F4FF 		call	spaces
 1286      FF
 1287 0d6f 4889C1   		movq	%rax, %rcx
 1288 0d72 488B9558 		movq	-3752(%rbp), %rdx
 1288      F1FFFF
 1289 0d79 488B8548 		movq	-3768(%rbp), %rax
 1289      F1FFFF
 1290 0d80 488D3500 		leaq	.LC12(%rip), %rsi
 1290      000000
 1291 0d87 4889C7   		movq	%rax, %rdi
 1292 0d8a B8000000 		movl	$0, %eax
 1292      00
 1293 0d8f E8000000 		call	errRender@PLT
 1293      00
 1294 0d94 C78588F1 		movl	$11, -3704(%rbp)
 1294      FFFF0B00 
 1294      0000
 1295 0d9e E90E1A00 		jmp	.L72
 1295      00
 1296              	.L78:
 1297              		.loc 2 326 0 discriminator 8
 1298 0da3 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1298      FFFF2F
 1299 0daa 7E09     		jle	.L79
 1300              		.loc 2 326 0 discriminator 10
 1301 0dac 80BD7EF1 		cmpb	$57, -3714(%rbp)
 1301      FFFF39
 1302 0db3 7E53     		jle	.L80
 1303              	.L79:
 1304              		.loc 2 326 0 discriminator 11
 1305 0db5 488B8598 		movq	-3688(%rbp), %rax
 1305      F1FFFF
 1306 0dbc 4889C2   		movq	%rax, %rdx
 1307 0dbf 488B8558 		movq	-3752(%rbp), %rax
 1307      F1FFFF
 1308 0dc6 4829C2   		subq	%rax, %rdx
 1309 0dc9 4889D0   		movq	%rdx, %rax
 1310 0dcc 4889C7   		movq	%rax, %rdi
 1311 0dcf E8E2F3FF 		call	spaces
 1311      FF
 1312 0dd4 4889C1   		movq	%rax, %rcx
 1313 0dd7 488B9558 		movq	-3752(%rbp), %rdx
 1313      F1FFFF
 1314 0dde 488B8548 		movq	-3768(%rbp), %rax
 1314      F1FFFF
 1315 0de5 488D3500 		leaq	.LC15(%rip), %rsi
 1315      000000
 1316 0dec 4889C7   		movq	%rax, %rdi
 1317 0def B8000000 		movl	$0, %eax
 1317      00
 1318 0df4 E8000000 		call	errRender@PLT
 1318      00
 1319 0df9 C78588F1 		movl	$11, -3704(%rbp)
 1319      FFFF0B00 
 1319      0000
 1320 0e03 E9A91900 		jmp	.L72
 1320      00
 1321              	.L80:
 1322              		.loc 2 326 0 discriminator 12
 1323 0e08 488B8598 		movq	-3688(%rbp), %rax
 1323      F1FFFF
 1324 0e0f 488D8D98 		leaq	-3688(%rbp), %rcx
 1324      F1FFFF
 1325 0e16 BA0A0000 		movl	$10, %edx
 1325      00
 1326 0e1b 4889CE   		movq	%rcx, %rsi
 1327 0e1e 4889C7   		movq	%rax, %rdi
 1328 0e21 E8000000 		call	strtoul@PLT
 1328      00
 1329 0e26 888580F1 		movb	%al, -3712(%rbp)
 1329      FFFF
 327:prog.c        **** 	SET_BIT(progPort, progBit, PIN_LOW, "xProgram");
 1330              		.loc 2 327 0 is_stmt 1 discriminator 12
 1331 0e2c 0FB6957F 		movzbl	-3713(%rbp), %edx
 1331      F1FFFF
 1332 0e33 0FB68580 		movzbl	-3712(%rbp), %eax
 1332      F1FFFF
 1333 0e3a 4898     		cltq
 1334 0e3c 4863D2   		movslq	%edx, %rdx
 1335 0e3f 48C1E205 		salq	$5, %rdx
 1336 0e43 4801D0   		addq	%rdx, %rax
 1337 0e46 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1337      F1FFFF
 1338 0e4d 85C0     		testl	%eax, %eax
 1339 0e4f 7472     		je	.L81
 1340              		.loc 2 327 0 is_stmt 0 discriminator 1
 1341 0e51 488B8598 		movq	-3688(%rbp), %rax
 1341      F1FFFF
 1342 0e58 4889C2   		movq	%rax, %rdx
 1343 0e5b 488B8558 		movq	-3752(%rbp), %rax
 1343      F1FFFF
 1344 0e62 4829C2   		subq	%rax, %rdx
 1345 0e65 4889D0   		movq	%rdx, %rax
 1346 0e68 4883E801 		subq	$1, %rax
 1347 0e6c 4889C7   		movq	%rax, %rdi
 1348 0e6f E842F3FF 		call	spaces
 1348      FF
 1349 0e74 4889C7   		movq	%rax, %rdi
 1350 0e77 0FB69580 		movzbl	-3712(%rbp), %edx
 1350      F1FFFF
 1351 0e7e 0FB6857F 		movzbl	-3713(%rbp), %eax
 1351      F1FFFF
 1352 0e85 8D7041   		leal	65(%rax), %esi
 1353 0e88 488B8D58 		movq	-3752(%rbp), %rcx
 1353      F1FFFF
 1354 0e8f 488B8548 		movq	-3768(%rbp), %rax
 1354      F1FFFF
 1355 0e96 4989F9   		movq	%rdi, %r9
 1356 0e99 4989C8   		movq	%rcx, %r8
 1357 0e9c 89D1     		movl	%edx, %ecx
 1358 0e9e 89F2     		movl	%esi, %edx
 1359 0ea0 488D3500 		leaq	.LC16(%rip), %rsi
 1359      000000
 1360 0ea7 4889C7   		movq	%rax, %rdi
 1361 0eaa B8000000 		movl	$0, %eax
 1361      00
 1362 0eaf E8000000 		call	errRender@PLT
 1362      00
 1363 0eb4 C78588F1 		movl	$11, -3704(%rbp)
 1363      FFFF0B00 
 1363      0000
 1364 0ebe E9EE1800 		jmp	.L72
 1364      00
 1365              	.L81:
 1366              		.loc 2 327 0 discriminator 2
 1367 0ec3 0FB6957F 		movzbl	-3713(%rbp), %edx
 1367      F1FFFF
 1368 0eca 0FB68580 		movzbl	-3712(%rbp), %eax
 1368      F1FFFF
 1369 0ed1 4898     		cltq
 1370 0ed3 4863D2   		movslq	%edx, %rdx
 1371 0ed6 48C1E205 		salq	$5, %rdx
 1372 0eda 4801D0   		addq	%rdx, %rax
 1373 0edd C78485A0 		movl	$2, -3680(%rbp,%rax,4)
 1373      F1FFFF02 
 1373      000000
 328:prog.c        **** 
 329:prog.c        **** 	GET_PAIR(initPort, initBit, "xProgram");
 1374              		.loc 2 329 0 is_stmt 1 discriminator 2
 1375 0ee8 488B8598 		movq	-3688(%rbp), %rax
 1375      F1FFFF
 1376 0eef 0FB600   		movzbl	(%rax), %eax
 1377 0ef2 88857EF1 		movb	%al, -3714(%rbp)
 1377      FFFF
 1378 0ef8 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1378      FFFF00
 1379 0eff 7553     		jne	.L82
 1380              		.loc 2 329 0 is_stmt 0 discriminator 1
 1381 0f01 488B8598 		movq	-3688(%rbp), %rax
 1381      F1FFFF
 1382 0f08 4889C2   		movq	%rax, %rdx
 1383 0f0b 488B8558 		movq	-3752(%rbp), %rax
 1383      F1FFFF
 1384 0f12 4829C2   		subq	%rax, %rdx
 1385 0f15 4889D0   		movq	%rdx, %rax
 1386 0f18 4889C7   		movq	%rax, %rdi
 1387 0f1b E896F2FF 		call	spaces
 1387      FF
 1388 0f20 4889C1   		movq	%rax, %rcx
 1389 0f23 488B9558 		movq	-3752(%rbp), %rdx
 1389      F1FFFF
 1390 0f2a 488B8548 		movq	-3768(%rbp), %rax
 1390      F1FFFF
 1391 0f31 488D3500 		leaq	.LC12(%rip), %rsi
 1391      000000
 1392 0f38 4889C7   		movq	%rax, %rdi
 1393 0f3b B8000000 		movl	$0, %eax
 1393      00
 1394 0f40 E8000000 		call	errRender@PLT
 1394      00
 1395 0f45 C78588F1 		movl	$11, -3704(%rbp)
 1395      FFFF0B00 
 1395      0000
 1396 0f4f E95D1800 		jmp	.L72
 1396      00
 1397              	.L82:
 1398              		.loc 2 329 0 discriminator 2
 1399 0f54 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1399      FFFF40
 1400 0f5b 7E09     		jle	.L83
 1401              		.loc 2 329 0 discriminator 4
 1402 0f5d 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1402      FFFF5A
 1403 0f64 7E53     		jle	.L84
 1404              	.L83:
 1405              		.loc 2 329 0 discriminator 5
 1406 0f66 488B8598 		movq	-3688(%rbp), %rax
 1406      F1FFFF
 1407 0f6d 4889C2   		movq	%rax, %rdx
 1408 0f70 488B8558 		movq	-3752(%rbp), %rax
 1408      F1FFFF
 1409 0f77 4829C2   		subq	%rax, %rdx
 1410 0f7a 4889D0   		movq	%rdx, %rax
 1411 0f7d 4889C7   		movq	%rax, %rdi
 1412 0f80 E831F2FF 		call	spaces
 1412      FF
 1413 0f85 4889C1   		movq	%rax, %rcx
 1414 0f88 488B9558 		movq	-3752(%rbp), %rdx
 1414      F1FFFF
 1415 0f8f 488B8548 		movq	-3768(%rbp), %rax
 1415      F1FFFF
 1416 0f96 488D3500 		leaq	.LC14(%rip), %rsi
 1416      000000
 1417 0f9d 4889C7   		movq	%rax, %rdi
 1418 0fa0 B8000000 		movl	$0, %eax
 1418      00
 1419 0fa5 E8000000 		call	errRender@PLT
 1419      00
 1420 0faa C78588F1 		movl	$11, -3704(%rbp)
 1420      FFFF0B00 
 1420      0000
 1421 0fb4 E9F81700 		jmp	.L72
 1421      00
 1422              	.L84:
 1423              		.loc 2 329 0 discriminator 6
 1424 0fb9 0FB6857E 		movzbl	-3714(%rbp), %eax
 1424      F1FFFF
 1425 0fc0 83E841   		subl	$65, %eax
 1426 0fc3 888581F1 		movb	%al, -3711(%rbp)
 1426      FFFF
 1427 0fc9 488B8598 		movq	-3688(%rbp), %rax
 1427      F1FFFF
 1428 0fd0 4883C001 		addq	$1, %rax
 1429 0fd4 48898598 		movq	%rax, -3688(%rbp)
 1429      F1FFFF
 1430 0fdb 488B8598 		movq	-3688(%rbp), %rax
 1430      F1FFFF
 1431 0fe2 0FB600   		movzbl	(%rax), %eax
 1432 0fe5 88857EF1 		movb	%al, -3714(%rbp)
 1432      FFFF
 1433 0feb 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1433      FFFF00
 1434 0ff2 7553     		jne	.L85
 1435              		.loc 2 329 0 discriminator 7
 1436 0ff4 488B8598 		movq	-3688(%rbp), %rax
 1436      F1FFFF
 1437 0ffb 4889C2   		movq	%rax, %rdx
 1438 0ffe 488B8558 		movq	-3752(%rbp), %rax
 1438      F1FFFF
 1439 1005 4829C2   		subq	%rax, %rdx
 1440 1008 4889D0   		movq	%rdx, %rax
 1441 100b 4889C7   		movq	%rax, %rdi
 1442 100e E8A3F1FF 		call	spaces
 1442      FF
 1443 1013 4889C1   		movq	%rax, %rcx
 1444 1016 488B9558 		movq	-3752(%rbp), %rdx
 1444      F1FFFF
 1445 101d 488B8548 		movq	-3768(%rbp), %rax
 1445      F1FFFF
 1446 1024 488D3500 		leaq	.LC12(%rip), %rsi
 1446      000000
 1447 102b 4889C7   		movq	%rax, %rdi
 1448 102e B8000000 		movl	$0, %eax
 1448      00
 1449 1033 E8000000 		call	errRender@PLT
 1449      00
 1450 1038 C78588F1 		movl	$11, -3704(%rbp)
 1450      FFFF0B00 
 1450      0000
 1451 1042 E96A1700 		jmp	.L72
 1451      00
 1452              	.L85:
 1453              		.loc 2 329 0 discriminator 8
 1454 1047 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1454      FFFF2F
 1455 104e 7E09     		jle	.L86
 1456              		.loc 2 329 0 discriminator 10
 1457 1050 80BD7EF1 		cmpb	$57, -3714(%rbp)
 1457      FFFF39
 1458 1057 7E53     		jle	.L87
 1459              	.L86:
 1460              		.loc 2 329 0 discriminator 11
 1461 1059 488B8598 		movq	-3688(%rbp), %rax
 1461      F1FFFF
 1462 1060 4889C2   		movq	%rax, %rdx
 1463 1063 488B8558 		movq	-3752(%rbp), %rax
 1463      F1FFFF
 1464 106a 4829C2   		subq	%rax, %rdx
 1465 106d 4889D0   		movq	%rdx, %rax
 1466 1070 4889C7   		movq	%rax, %rdi
 1467 1073 E83EF1FF 		call	spaces
 1467      FF
 1468 1078 4889C1   		movq	%rax, %rcx
 1469 107b 488B9558 		movq	-3752(%rbp), %rdx
 1469      F1FFFF
 1470 1082 488B8548 		movq	-3768(%rbp), %rax
 1470      F1FFFF
 1471 1089 488D3500 		leaq	.LC15(%rip), %rsi
 1471      000000
 1472 1090 4889C7   		movq	%rax, %rdi
 1473 1093 B8000000 		movl	$0, %eax
 1473      00
 1474 1098 E8000000 		call	errRender@PLT
 1474      00
 1475 109d C78588F1 		movl	$11, -3704(%rbp)
 1475      FFFF0B00 
 1475      0000
 1476 10a7 E9051700 		jmp	.L72
 1476      00
 1477              	.L87:
 1478              		.loc 2 329 0 discriminator 12
 1479 10ac 488B8598 		movq	-3688(%rbp), %rax
 1479      F1FFFF
 1480 10b3 488D8D98 		leaq	-3688(%rbp), %rcx
 1480      F1FFFF
 1481 10ba BA0A0000 		movl	$10, %edx
 1481      00
 1482 10bf 4889CE   		movq	%rcx, %rsi
 1483 10c2 4889C7   		movq	%rax, %rdi
 1484 10c5 E8000000 		call	strtoul@PLT
 1484      00
 1485 10ca 888582F1 		movb	%al, -3710(%rbp)
 1485      FFFF
 330:prog.c        **** 	SET_BIT(initPort, initBit, PIN_INPUT, "xProgram");
 1486              		.loc 2 330 0 is_stmt 1 discriminator 12
 1487 10d0 0FB69581 		movzbl	-3711(%rbp), %edx
 1487      F1FFFF
 1488 10d7 0FB68582 		movzbl	-3710(%rbp), %eax
 1488      F1FFFF
 1489 10de 4898     		cltq
 1490 10e0 4863D2   		movslq	%edx, %rdx
 1491 10e3 48C1E205 		salq	$5, %rdx
 1492 10e7 4801D0   		addq	%rdx, %rax
 1493 10ea 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1493      F1FFFF
 1494 10f1 85C0     		testl	%eax, %eax
 1495 10f3 7472     		je	.L88
 1496              		.loc 2 330 0 is_stmt 0 discriminator 1
 1497 10f5 488B8598 		movq	-3688(%rbp), %rax
 1497      F1FFFF
 1498 10fc 4889C2   		movq	%rax, %rdx
 1499 10ff 488B8558 		movq	-3752(%rbp), %rax
 1499      F1FFFF
 1500 1106 4829C2   		subq	%rax, %rdx
 1501 1109 4889D0   		movq	%rdx, %rax
 1502 110c 4883E801 		subq	$1, %rax
 1503 1110 4889C7   		movq	%rax, %rdi
 1504 1113 E89EF0FF 		call	spaces
 1504      FF
 1505 1118 4889C7   		movq	%rax, %rdi
 1506 111b 0FB69582 		movzbl	-3710(%rbp), %edx
 1506      F1FFFF
 1507 1122 0FB68581 		movzbl	-3711(%rbp), %eax
 1507      F1FFFF
 1508 1129 8D7041   		leal	65(%rax), %esi
 1509 112c 488B8D58 		movq	-3752(%rbp), %rcx
 1509      F1FFFF
 1510 1133 488B8548 		movq	-3768(%rbp), %rax
 1510      F1FFFF
 1511 113a 4989F9   		movq	%rdi, %r9
 1512 113d 4989C8   		movq	%rcx, %r8
 1513 1140 89D1     		movl	%edx, %ecx
 1514 1142 89F2     		movl	%esi, %edx
 1515 1144 488D3500 		leaq	.LC16(%rip), %rsi
 1515      000000
 1516 114b 4889C7   		movq	%rax, %rdi
 1517 114e B8000000 		movl	$0, %eax
 1517      00
 1518 1153 E8000000 		call	errRender@PLT
 1518      00
 1519 1158 C78588F1 		movl	$11, -3704(%rbp)
 1519      FFFF0B00 
 1519      0000
 1520 1162 E94A1600 		jmp	.L72
 1520      00
 1521              	.L88:
 1522              		.loc 2 330 0 discriminator 2
 1523 1167 0FB69581 		movzbl	-3711(%rbp), %edx
 1523      F1FFFF
 1524 116e 0FB68582 		movzbl	-3710(%rbp), %eax
 1524      F1FFFF
 1525 1175 4898     		cltq
 1526 1177 4863D2   		movslq	%edx, %rdx
 1527 117a 48C1E205 		salq	$5, %rdx
 1528 117e 4801D0   		addq	%rdx, %rax
 1529 1181 C78485A0 		movl	$3, -3680(%rbp,%rax,4)
 1529      F1FFFF03 
 1529      000000
 331:prog.c        **** 
 332:prog.c        **** 	GET_PAIR(donePort, doneBit, "xProgram");
 1530              		.loc 2 332 0 is_stmt 1 discriminator 2
 1531 118c 488B8598 		movq	-3688(%rbp), %rax
 1531      F1FFFF
 1532 1193 0FB600   		movzbl	(%rax), %eax
 1533 1196 88857EF1 		movb	%al, -3714(%rbp)
 1533      FFFF
 1534 119c 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1534      FFFF00
 1535 11a3 7553     		jne	.L89
 1536              		.loc 2 332 0 is_stmt 0 discriminator 1
 1537 11a5 488B8598 		movq	-3688(%rbp), %rax
 1537      F1FFFF
 1538 11ac 4889C2   		movq	%rax, %rdx
 1539 11af 488B8558 		movq	-3752(%rbp), %rax
 1539      F1FFFF
 1540 11b6 4829C2   		subq	%rax, %rdx
 1541 11b9 4889D0   		movq	%rdx, %rax
 1542 11bc 4889C7   		movq	%rax, %rdi
 1543 11bf E8F2EFFF 		call	spaces
 1543      FF
 1544 11c4 4889C1   		movq	%rax, %rcx
 1545 11c7 488B9558 		movq	-3752(%rbp), %rdx
 1545      F1FFFF
 1546 11ce 488B8548 		movq	-3768(%rbp), %rax
 1546      F1FFFF
 1547 11d5 488D3500 		leaq	.LC12(%rip), %rsi
 1547      000000
 1548 11dc 4889C7   		movq	%rax, %rdi
 1549 11df B8000000 		movl	$0, %eax
 1549      00
 1550 11e4 E8000000 		call	errRender@PLT
 1550      00
 1551 11e9 C78588F1 		movl	$11, -3704(%rbp)
 1551      FFFF0B00 
 1551      0000
 1552 11f3 E9B91500 		jmp	.L72
 1552      00
 1553              	.L89:
 1554              		.loc 2 332 0 discriminator 2
 1555 11f8 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1555      FFFF40
 1556 11ff 7E09     		jle	.L90
 1557              		.loc 2 332 0 discriminator 4
 1558 1201 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1558      FFFF5A
 1559 1208 7E53     		jle	.L91
 1560              	.L90:
 1561              		.loc 2 332 0 discriminator 5
 1562 120a 488B8598 		movq	-3688(%rbp), %rax
 1562      F1FFFF
 1563 1211 4889C2   		movq	%rax, %rdx
 1564 1214 488B8558 		movq	-3752(%rbp), %rax
 1564      F1FFFF
 1565 121b 4829C2   		subq	%rax, %rdx
 1566 121e 4889D0   		movq	%rdx, %rax
 1567 1221 4889C7   		movq	%rax, %rdi
 1568 1224 E88DEFFF 		call	spaces
 1568      FF
 1569 1229 4889C1   		movq	%rax, %rcx
 1570 122c 488B9558 		movq	-3752(%rbp), %rdx
 1570      F1FFFF
 1571 1233 488B8548 		movq	-3768(%rbp), %rax
 1571      F1FFFF
 1572 123a 488D3500 		leaq	.LC14(%rip), %rsi
 1572      000000
 1573 1241 4889C7   		movq	%rax, %rdi
 1574 1244 B8000000 		movl	$0, %eax
 1574      00
 1575 1249 E8000000 		call	errRender@PLT
 1575      00
 1576 124e C78588F1 		movl	$11, -3704(%rbp)
 1576      FFFF0B00 
 1576      0000
 1577 1258 E9541500 		jmp	.L72
 1577      00
 1578              	.L91:
 1579              		.loc 2 332 0 discriminator 6
 1580 125d 0FB6857E 		movzbl	-3714(%rbp), %eax
 1580      F1FFFF
 1581 1264 83E841   		subl	$65, %eax
 1582 1267 888583F1 		movb	%al, -3709(%rbp)
 1582      FFFF
 1583 126d 488B8598 		movq	-3688(%rbp), %rax
 1583      F1FFFF
 1584 1274 4883C001 		addq	$1, %rax
 1585 1278 48898598 		movq	%rax, -3688(%rbp)
 1585      F1FFFF
 1586 127f 488B8598 		movq	-3688(%rbp), %rax
 1586      F1FFFF
 1587 1286 0FB600   		movzbl	(%rax), %eax
 1588 1289 88857EF1 		movb	%al, -3714(%rbp)
 1588      FFFF
 1589 128f 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1589      FFFF00
 1590 1296 7553     		jne	.L92
 1591              		.loc 2 332 0 discriminator 7
 1592 1298 488B8598 		movq	-3688(%rbp), %rax
 1592      F1FFFF
 1593 129f 4889C2   		movq	%rax, %rdx
 1594 12a2 488B8558 		movq	-3752(%rbp), %rax
 1594      F1FFFF
 1595 12a9 4829C2   		subq	%rax, %rdx
 1596 12ac 4889D0   		movq	%rdx, %rax
 1597 12af 4889C7   		movq	%rax, %rdi
 1598 12b2 E8FFEEFF 		call	spaces
 1598      FF
 1599 12b7 4889C1   		movq	%rax, %rcx
 1600 12ba 488B9558 		movq	-3752(%rbp), %rdx
 1600      F1FFFF
 1601 12c1 488B8548 		movq	-3768(%rbp), %rax
 1601      F1FFFF
 1602 12c8 488D3500 		leaq	.LC12(%rip), %rsi
 1602      000000
 1603 12cf 4889C7   		movq	%rax, %rdi
 1604 12d2 B8000000 		movl	$0, %eax
 1604      00
 1605 12d7 E8000000 		call	errRender@PLT
 1605      00
 1606 12dc C78588F1 		movl	$11, -3704(%rbp)
 1606      FFFF0B00 
 1606      0000
 1607 12e6 E9C61400 		jmp	.L72
 1607      00
 1608              	.L92:
 1609              		.loc 2 332 0 discriminator 8
 1610 12eb 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1610      FFFF2F
 1611 12f2 7E09     		jle	.L93
 1612              		.loc 2 332 0 discriminator 10
 1613 12f4 80BD7EF1 		cmpb	$57, -3714(%rbp)
 1613      FFFF39
 1614 12fb 7E53     		jle	.L94
 1615              	.L93:
 1616              		.loc 2 332 0 discriminator 11
 1617 12fd 488B8598 		movq	-3688(%rbp), %rax
 1617      F1FFFF
 1618 1304 4889C2   		movq	%rax, %rdx
 1619 1307 488B8558 		movq	-3752(%rbp), %rax
 1619      F1FFFF
 1620 130e 4829C2   		subq	%rax, %rdx
 1621 1311 4889D0   		movq	%rdx, %rax
 1622 1314 4889C7   		movq	%rax, %rdi
 1623 1317 E89AEEFF 		call	spaces
 1623      FF
 1624 131c 4889C1   		movq	%rax, %rcx
 1625 131f 488B9558 		movq	-3752(%rbp), %rdx
 1625      F1FFFF
 1626 1326 488B8548 		movq	-3768(%rbp), %rax
 1626      F1FFFF
 1627 132d 488D3500 		leaq	.LC15(%rip), %rsi
 1627      000000
 1628 1334 4889C7   		movq	%rax, %rdi
 1629 1337 B8000000 		movl	$0, %eax
 1629      00
 1630 133c E8000000 		call	errRender@PLT
 1630      00
 1631 1341 C78588F1 		movl	$11, -3704(%rbp)
 1631      FFFF0B00 
 1631      0000
 1632 134b E9611400 		jmp	.L72
 1632      00
 1633              	.L94:
 1634              		.loc 2 332 0 discriminator 12
 1635 1350 488B8598 		movq	-3688(%rbp), %rax
 1635      F1FFFF
 1636 1357 488D8D98 		leaq	-3688(%rbp), %rcx
 1636      F1FFFF
 1637 135e BA0A0000 		movl	$10, %edx
 1637      00
 1638 1363 4889CE   		movq	%rcx, %rsi
 1639 1366 4889C7   		movq	%rax, %rdi
 1640 1369 E8000000 		call	strtoul@PLT
 1640      00
 1641 136e 888584F1 		movb	%al, -3708(%rbp)
 1641      FFFF
 333:prog.c        **** 	SET_BIT(donePort, doneBit, PIN_INPUT, "xProgram");
 1642              		.loc 2 333 0 is_stmt 1 discriminator 12
 1643 1374 0FB69583 		movzbl	-3709(%rbp), %edx
 1643      F1FFFF
 1644 137b 0FB68584 		movzbl	-3708(%rbp), %eax
 1644      F1FFFF
 1645 1382 4898     		cltq
 1646 1384 4863D2   		movslq	%edx, %rdx
 1647 1387 48C1E205 		salq	$5, %rdx
 1648 138b 4801D0   		addq	%rdx, %rax
 1649 138e 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1649      F1FFFF
 1650 1395 85C0     		testl	%eax, %eax
 1651 1397 7472     		je	.L95
 1652              		.loc 2 333 0 is_stmt 0 discriminator 1
 1653 1399 488B8598 		movq	-3688(%rbp), %rax
 1653      F1FFFF
 1654 13a0 4889C2   		movq	%rax, %rdx
 1655 13a3 488B8558 		movq	-3752(%rbp), %rax
 1655      F1FFFF
 1656 13aa 4829C2   		subq	%rax, %rdx
 1657 13ad 4889D0   		movq	%rdx, %rax
 1658 13b0 4883E801 		subq	$1, %rax
 1659 13b4 4889C7   		movq	%rax, %rdi
 1660 13b7 E8FAEDFF 		call	spaces
 1660      FF
 1661 13bc 4889C7   		movq	%rax, %rdi
 1662 13bf 0FB69584 		movzbl	-3708(%rbp), %edx
 1662      F1FFFF
 1663 13c6 0FB68583 		movzbl	-3709(%rbp), %eax
 1663      F1FFFF
 1664 13cd 8D7041   		leal	65(%rax), %esi
 1665 13d0 488B8D58 		movq	-3752(%rbp), %rcx
 1665      F1FFFF
 1666 13d7 488B8548 		movq	-3768(%rbp), %rax
 1666      F1FFFF
 1667 13de 4989F9   		movq	%rdi, %r9
 1668 13e1 4989C8   		movq	%rcx, %r8
 1669 13e4 89D1     		movl	%edx, %ecx
 1670 13e6 89F2     		movl	%esi, %edx
 1671 13e8 488D3500 		leaq	.LC16(%rip), %rsi
 1671      000000
 1672 13ef 4889C7   		movq	%rax, %rdi
 1673 13f2 B8000000 		movl	$0, %eax
 1673      00
 1674 13f7 E8000000 		call	errRender@PLT
 1674      00
 1675 13fc C78588F1 		movl	$11, -3704(%rbp)
 1675      FFFF0B00 
 1675      0000
 1676 1406 E9A61300 		jmp	.L72
 1676      00
 1677              	.L95:
 1678              		.loc 2 333 0 discriminator 2
 1679 140b 0FB69583 		movzbl	-3709(%rbp), %edx
 1679      F1FFFF
 1680 1412 0FB68584 		movzbl	-3708(%rbp), %eax
 1680      F1FFFF
 1681 1419 4898     		cltq
 1682 141b 4863D2   		movslq	%edx, %rdx
 1683 141e 48C1E205 		salq	$5, %rdx
 1684 1422 4801D0   		addq	%rdx, %rax
 1685 1425 C78485A0 		movl	$3, -3680(%rbp,%rax,4)
 1685      F1FFFF03 
 1685      000000
 334:prog.c        **** 
 335:prog.c        **** 	GET_PAIR(cclkPort, cclkBit, "xProgram");
 1686              		.loc 2 335 0 is_stmt 1 discriminator 2
 1687 1430 488B8598 		movq	-3688(%rbp), %rax
 1687      F1FFFF
 1688 1437 0FB600   		movzbl	(%rax), %eax
 1689 143a 88857EF1 		movb	%al, -3714(%rbp)
 1689      FFFF
 1690 1440 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1690      FFFF00
 1691 1447 7553     		jne	.L96
 1692              		.loc 2 335 0 is_stmt 0 discriminator 1
 1693 1449 488B8598 		movq	-3688(%rbp), %rax
 1693      F1FFFF
 1694 1450 4889C2   		movq	%rax, %rdx
 1695 1453 488B8558 		movq	-3752(%rbp), %rax
 1695      F1FFFF
 1696 145a 4829C2   		subq	%rax, %rdx
 1697 145d 4889D0   		movq	%rdx, %rax
 1698 1460 4889C7   		movq	%rax, %rdi
 1699 1463 E84EEDFF 		call	spaces
 1699      FF
 1700 1468 4889C1   		movq	%rax, %rcx
 1701 146b 488B9558 		movq	-3752(%rbp), %rdx
 1701      F1FFFF
 1702 1472 488B8548 		movq	-3768(%rbp), %rax
 1702      F1FFFF
 1703 1479 488D3500 		leaq	.LC12(%rip), %rsi
 1703      000000
 1704 1480 4889C7   		movq	%rax, %rdi
 1705 1483 B8000000 		movl	$0, %eax
 1705      00
 1706 1488 E8000000 		call	errRender@PLT
 1706      00
 1707 148d C78588F1 		movl	$11, -3704(%rbp)
 1707      FFFF0B00 
 1707      0000
 1708 1497 E9151300 		jmp	.L72
 1708      00
 1709              	.L96:
 1710              		.loc 2 335 0 discriminator 2
 1711 149c 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1711      FFFF40
 1712 14a3 7E09     		jle	.L97
 1713              		.loc 2 335 0 discriminator 4
 1714 14a5 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1714      FFFF5A
 1715 14ac 7E53     		jle	.L98
 1716              	.L97:
 1717              		.loc 2 335 0 discriminator 5
 1718 14ae 488B8598 		movq	-3688(%rbp), %rax
 1718      F1FFFF
 1719 14b5 4889C2   		movq	%rax, %rdx
 1720 14b8 488B8558 		movq	-3752(%rbp), %rax
 1720      F1FFFF
 1721 14bf 4829C2   		subq	%rax, %rdx
 1722 14c2 4889D0   		movq	%rdx, %rax
 1723 14c5 4889C7   		movq	%rax, %rdi
 1724 14c8 E8E9ECFF 		call	spaces
 1724      FF
 1725 14cd 4889C1   		movq	%rax, %rcx
 1726 14d0 488B9558 		movq	-3752(%rbp), %rdx
 1726      F1FFFF
 1727 14d7 488B8548 		movq	-3768(%rbp), %rax
 1727      F1FFFF
 1728 14de 488D3500 		leaq	.LC14(%rip), %rsi
 1728      000000
 1729 14e5 4889C7   		movq	%rax, %rdi
 1730 14e8 B8000000 		movl	$0, %eax
 1730      00
 1731 14ed E8000000 		call	errRender@PLT
 1731      00
 1732 14f2 C78588F1 		movl	$11, -3704(%rbp)
 1732      FFFF0B00 
 1732      0000
 1733 14fc E9B01200 		jmp	.L72
 1733      00
 1734              	.L98:
 1735              		.loc 2 335 0 discriminator 6
 1736 1501 0FB6857E 		movzbl	-3714(%rbp), %eax
 1736      F1FFFF
 1737 1508 83E841   		subl	$65, %eax
 1738 150b 888585F1 		movb	%al, -3707(%rbp)
 1738      FFFF
 1739 1511 488B8598 		movq	-3688(%rbp), %rax
 1739      F1FFFF
 1740 1518 4883C001 		addq	$1, %rax
 1741 151c 48898598 		movq	%rax, -3688(%rbp)
 1741      F1FFFF
 1742 1523 488B8598 		movq	-3688(%rbp), %rax
 1742      F1FFFF
 1743 152a 0FB600   		movzbl	(%rax), %eax
 1744 152d 88857EF1 		movb	%al, -3714(%rbp)
 1744      FFFF
 1745 1533 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1745      FFFF00
 1746 153a 7553     		jne	.L99
 1747              		.loc 2 335 0 discriminator 7
 1748 153c 488B8598 		movq	-3688(%rbp), %rax
 1748      F1FFFF
 1749 1543 4889C2   		movq	%rax, %rdx
 1750 1546 488B8558 		movq	-3752(%rbp), %rax
 1750      F1FFFF
 1751 154d 4829C2   		subq	%rax, %rdx
 1752 1550 4889D0   		movq	%rdx, %rax
 1753 1553 4889C7   		movq	%rax, %rdi
 1754 1556 E85BECFF 		call	spaces
 1754      FF
 1755 155b 4889C1   		movq	%rax, %rcx
 1756 155e 488B9558 		movq	-3752(%rbp), %rdx
 1756      F1FFFF
 1757 1565 488B8548 		movq	-3768(%rbp), %rax
 1757      F1FFFF
 1758 156c 488D3500 		leaq	.LC12(%rip), %rsi
 1758      000000
 1759 1573 4889C7   		movq	%rax, %rdi
 1760 1576 B8000000 		movl	$0, %eax
 1760      00
 1761 157b E8000000 		call	errRender@PLT
 1761      00
 1762 1580 C78588F1 		movl	$11, -3704(%rbp)
 1762      FFFF0B00 
 1762      0000
 1763 158a E9221200 		jmp	.L72
 1763      00
 1764              	.L99:
 1765              		.loc 2 335 0 discriminator 8
 1766 158f 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1766      FFFF2F
 1767 1596 7E09     		jle	.L100
 1768              		.loc 2 335 0 discriminator 10
 1769 1598 80BD7EF1 		cmpb	$57, -3714(%rbp)
 1769      FFFF39
 1770 159f 7E53     		jle	.L101
 1771              	.L100:
 1772              		.loc 2 335 0 discriminator 11
 1773 15a1 488B8598 		movq	-3688(%rbp), %rax
 1773      F1FFFF
 1774 15a8 4889C2   		movq	%rax, %rdx
 1775 15ab 488B8558 		movq	-3752(%rbp), %rax
 1775      F1FFFF
 1776 15b2 4829C2   		subq	%rax, %rdx
 1777 15b5 4889D0   		movq	%rdx, %rax
 1778 15b8 4889C7   		movq	%rax, %rdi
 1779 15bb E8F6EBFF 		call	spaces
 1779      FF
 1780 15c0 4889C1   		movq	%rax, %rcx
 1781 15c3 488B9558 		movq	-3752(%rbp), %rdx
 1781      F1FFFF
 1782 15ca 488B8548 		movq	-3768(%rbp), %rax
 1782      F1FFFF
 1783 15d1 488D3500 		leaq	.LC15(%rip), %rsi
 1783      000000
 1784 15d8 4889C7   		movq	%rax, %rdi
 1785 15db B8000000 		movl	$0, %eax
 1785      00
 1786 15e0 E8000000 		call	errRender@PLT
 1786      00
 1787 15e5 C78588F1 		movl	$11, -3704(%rbp)
 1787      FFFF0B00 
 1787      0000
 1788 15ef E9BD1100 		jmp	.L72
 1788      00
 1789              	.L101:
 1790              		.loc 2 335 0 discriminator 12
 1791 15f4 488B8598 		movq	-3688(%rbp), %rax
 1791      F1FFFF
 1792 15fb 488D8D98 		leaq	-3688(%rbp), %rcx
 1792      F1FFFF
 1793 1602 BA0A0000 		movl	$10, %edx
 1793      00
 1794 1607 4889CE   		movq	%rcx, %rsi
 1795 160a 4889C7   		movq	%rax, %rdi
 1796 160d E8000000 		call	strtoul@PLT
 1796      00
 1797 1612 888586F1 		movb	%al, -3706(%rbp)
 1797      FFFF
 336:prog.c        **** 	SET_BIT(cclkPort, cclkBit, PIN_LOW, "xProgram");
 1798              		.loc 2 336 0 is_stmt 1 discriminator 12
 1799 1618 0FB69585 		movzbl	-3707(%rbp), %edx
 1799      F1FFFF
 1800 161f 0FB68586 		movzbl	-3706(%rbp), %eax
 1800      F1FFFF
 1801 1626 4898     		cltq
 1802 1628 4863D2   		movslq	%edx, %rdx
 1803 162b 48C1E205 		salq	$5, %rdx
 1804 162f 4801D0   		addq	%rdx, %rax
 1805 1632 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1805      F1FFFF
 1806 1639 85C0     		testl	%eax, %eax
 1807 163b 7472     		je	.L102
 1808              		.loc 2 336 0 is_stmt 0 discriminator 1
 1809 163d 488B8598 		movq	-3688(%rbp), %rax
 1809      F1FFFF
 1810 1644 4889C2   		movq	%rax, %rdx
 1811 1647 488B8558 		movq	-3752(%rbp), %rax
 1811      F1FFFF
 1812 164e 4829C2   		subq	%rax, %rdx
 1813 1651 4889D0   		movq	%rdx, %rax
 1814 1654 4883E801 		subq	$1, %rax
 1815 1658 4889C7   		movq	%rax, %rdi
 1816 165b E856EBFF 		call	spaces
 1816      FF
 1817 1660 4889C7   		movq	%rax, %rdi
 1818 1663 0FB69586 		movzbl	-3706(%rbp), %edx
 1818      F1FFFF
 1819 166a 0FB68585 		movzbl	-3707(%rbp), %eax
 1819      F1FFFF
 1820 1671 8D7041   		leal	65(%rax), %esi
 1821 1674 488B8D58 		movq	-3752(%rbp), %rcx
 1821      F1FFFF
 1822 167b 488B8548 		movq	-3768(%rbp), %rax
 1822      F1FFFF
 1823 1682 4989F9   		movq	%rdi, %r9
 1824 1685 4989C8   		movq	%rcx, %r8
 1825 1688 89D1     		movl	%edx, %ecx
 1826 168a 89F2     		movl	%esi, %edx
 1827 168c 488D3500 		leaq	.LC16(%rip), %rsi
 1827      000000
 1828 1693 4889C7   		movq	%rax, %rdi
 1829 1696 B8000000 		movl	$0, %eax
 1829      00
 1830 169b E8000000 		call	errRender@PLT
 1830      00
 1831 16a0 C78588F1 		movl	$11, -3704(%rbp)
 1831      FFFF0B00 
 1831      0000
 1832 16aa E9021100 		jmp	.L72
 1832      00
 1833              	.L102:
 1834              		.loc 2 336 0 discriminator 2
 1835 16af 0FB69585 		movzbl	-3707(%rbp), %edx
 1835      F1FFFF
 1836 16b6 0FB68586 		movzbl	-3706(%rbp), %eax
 1836      F1FFFF
 1837 16bd 4898     		cltq
 1838 16bf 4863D2   		movslq	%edx, %rdx
 1839 16c2 48C1E205 		salq	$5, %rdx
 1840 16c6 4801D0   		addq	%rdx, %rax
 1841 16c9 C78485A0 		movl	$2, -3680(%rbp,%rax,4)
 1841      F1FFFF02 
 1841      000000
 337:prog.c        **** 
 338:prog.c        **** 	GET_PORT(dataPort, "xProgram");
 1842              		.loc 2 338 0 is_stmt 1 discriminator 2
 1843 16d4 488B8598 		movq	-3688(%rbp), %rax
 1843      F1FFFF
 1844 16db 0FB600   		movzbl	(%rax), %eax
 1845 16de 88857EF1 		movb	%al, -3714(%rbp)
 1845      FFFF
 1846 16e4 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1846      FFFF00
 1847 16eb 7553     		jne	.L103
 1848              		.loc 2 338 0 is_stmt 0 discriminator 1
 1849 16ed 488B8598 		movq	-3688(%rbp), %rax
 1849      F1FFFF
 1850 16f4 4889C2   		movq	%rax, %rdx
 1851 16f7 488B8558 		movq	-3752(%rbp), %rax
 1851      F1FFFF
 1852 16fe 4829C2   		subq	%rax, %rdx
 1853 1701 4889D0   		movq	%rdx, %rax
 1854 1704 4889C7   		movq	%rax, %rdi
 1855 1707 E8AAEAFF 		call	spaces
 1855      FF
 1856 170c 4889C1   		movq	%rax, %rcx
 1857 170f 488B9558 		movq	-3752(%rbp), %rdx
 1857      F1FFFF
 1858 1716 488B8548 		movq	-3768(%rbp), %rax
 1858      F1FFFF
 1859 171d 488D3500 		leaq	.LC12(%rip), %rsi
 1859      000000
 1860 1724 4889C7   		movq	%rax, %rdi
 1861 1727 B8000000 		movl	$0, %eax
 1861      00
 1862 172c E8000000 		call	errRender@PLT
 1862      00
 1863 1731 C78588F1 		movl	$11, -3704(%rbp)
 1863      FFFF0B00 
 1863      0000
 1864 173b E9711000 		jmp	.L72
 1864      00
 1865              	.L103:
 1866              		.loc 2 338 0 discriminator 2
 1867 1740 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1867      FFFF40
 1868 1747 7E09     		jle	.L104
 1869              		.loc 2 338 0 discriminator 4
 1870 1749 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1870      FFFF5A
 1871 1750 7E53     		jle	.L105
 1872              	.L104:
 1873              		.loc 2 338 0 discriminator 5
 1874 1752 488B8598 		movq	-3688(%rbp), %rax
 1874      F1FFFF
 1875 1759 4889C2   		movq	%rax, %rdx
 1876 175c 488B8558 		movq	-3752(%rbp), %rax
 1876      F1FFFF
 1877 1763 4829C2   		subq	%rax, %rdx
 1878 1766 4889D0   		movq	%rdx, %rax
 1879 1769 4889C7   		movq	%rax, %rdi
 1880 176c E845EAFF 		call	spaces
 1880      FF
 1881 1771 4889C1   		movq	%rax, %rcx
 1882 1774 488B9558 		movq	-3752(%rbp), %rdx
 1882      F1FFFF
 1883 177b 488B8548 		movq	-3768(%rbp), %rax
 1883      F1FFFF
 1884 1782 488D3500 		leaq	.LC14(%rip), %rsi
 1884      000000
 1885 1789 4889C7   		movq	%rax, %rdi
 1886 178c B8000000 		movl	$0, %eax
 1886      00
 1887 1791 E8000000 		call	errRender@PLT
 1887      00
 1888 1796 C78588F1 		movl	$11, -3704(%rbp)
 1888      FFFF0B00 
 1888      0000
 1889 17a0 E90C1000 		jmp	.L72
 1889      00
 1890              	.L105:
 1891              		.loc 2 338 0 discriminator 6
 1892 17a5 0FB6857E 		movzbl	-3714(%rbp), %eax
 1892      F1FFFF
 1893 17ac 83E841   		subl	$65, %eax
 1894 17af 888587F1 		movb	%al, -3705(%rbp)
 1894      FFFF
 1895 17b5 488B8598 		movq	-3688(%rbp), %rax
 1895      F1FFFF
 1896 17bc 4883C001 		addq	$1, %rax
 1897 17c0 48898598 		movq	%rax, -3688(%rbp)
 1897      F1FFFF
 339:prog.c        **** 	if ( progOp == PROG_PARALLEL ) {
 1898              		.loc 2 339 0 is_stmt 1 discriminator 6
 1899 17c7 83BD64F1 		cmpl	$5, -3740(%rbp)
 1899      FFFF05
 1900 17ce 0F851202 		jne	.L106
 1900      0000
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1901              		.loc 2 340 0
 1902 17d4 C7858CF1 		movl	$0, -3700(%rbp)
 1902      FFFF0000 
 1902      0000
 1903 17de E9D80100 		jmp	.L107
 1903      00
 1904              	.L112:
 341:prog.c        **** 			GET_DIGIT(dataBit[i], "xProgram");
 1905              		.loc 2 341 0
 1906 17e3 488B8598 		movq	-3688(%rbp), %rax
 1906      F1FFFF
 1907 17ea 0FB600   		movzbl	(%rax), %eax
 1908 17ed 88857EF1 		movb	%al, -3714(%rbp)
 1908      FFFF
 1909 17f3 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1909      FFFF00
 1910 17fa 7553     		jne	.L108
 1911              		.loc 2 341 0 is_stmt 0 discriminator 1
 1912 17fc 488B8598 		movq	-3688(%rbp), %rax
 1912      F1FFFF
 1913 1803 4889C2   		movq	%rax, %rdx
 1914 1806 488B8558 		movq	-3752(%rbp), %rax
 1914      F1FFFF
 1915 180d 4829C2   		subq	%rax, %rdx
 1916 1810 4889D0   		movq	%rdx, %rax
 1917 1813 4889C7   		movq	%rax, %rdi
 1918 1816 E89BE9FF 		call	spaces
 1918      FF
 1919 181b 4889C1   		movq	%rax, %rcx
 1920 181e 488B9558 		movq	-3752(%rbp), %rdx
 1920      F1FFFF
 1921 1825 488B8548 		movq	-3768(%rbp), %rax
 1921      F1FFFF
 1922 182c 488D3500 		leaq	.LC12(%rip), %rsi
 1922      000000
 1923 1833 4889C7   		movq	%rax, %rdi
 1924 1836 B8000000 		movl	$0, %eax
 1924      00
 1925 183b E8000000 		call	errRender@PLT
 1925      00
 1926 1840 C78588F1 		movl	$11, -3704(%rbp)
 1926      FFFF0B00 
 1926      0000
 1927 184a E9620F00 		jmp	.L72
 1927      00
 1928              	.L108:
 1929              		.loc 2 341 0 discriminator 2
 1930 184f 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1930      FFFF2F
 1931 1856 7E09     		jle	.L109
 1932              		.loc 2 341 0 discriminator 4
 1933 1858 80BD7EF1 		cmpb	$55, -3714(%rbp)
 1933      FFFF37
 1934 185f 7E48     		jle	.L110
 1935              	.L109:
 1936              		.loc 2 341 0 discriminator 5
 1937 1861 488B8598 		movq	-3688(%rbp), %rax
 1937      F1FFFF
 1938 1868 4889C2   		movq	%rax, %rdx
 1939 186b 488B8558 		movq	-3752(%rbp), %rax
 1939      F1FFFF
 1940 1872 4889D1   		movq	%rdx, %rcx
 1941 1875 4829C1   		subq	%rax, %rcx
 1942 1878 0FBE957E 		movsbl	-3714(%rbp), %edx
 1942      F1FFFF
 1943 187f 488B8548 		movq	-3768(%rbp), %rax
 1943      F1FFFF
 1944 1886 488D3500 		leaq	.LC17(%rip), %rsi
 1944      000000
 1945 188d 4889C7   		movq	%rax, %rdi
 1946 1890 B8000000 		movl	$0, %eax
 1946      00
 1947 1895 E8000000 		call	errRender@PLT
 1947      00
 1948 189a C78588F1 		movl	$11, -3704(%rbp)
 1948      FFFF0B00 
 1948      0000
 1949 18a4 E9080F00 		jmp	.L72
 1949      00
 1950              	.L110:
 1951              		.loc 2 341 0 discriminator 6
 1952 18a9 0FB6857E 		movzbl	-3714(%rbp), %eax
 1952      F1FFFF
 1953 18b0 8D50D0   		leal	-48(%rax), %edx
 1954 18b3 8B858CF1 		movl	-3700(%rbp), %eax
 1954      FFFF
 1955 18b9 4898     		cltq
 1956 18bb 889405A0 		movb	%dl, -352(%rbp,%rax)
 1956      FEFFFF
 1957 18c2 488B8598 		movq	-3688(%rbp), %rax
 1957      F1FFFF
 1958 18c9 4883C001 		addq	$1, %rax
 1959 18cd 48898598 		movq	%rax, -3688(%rbp)
 1959      F1FFFF
 342:prog.c        **** 			SET_BIT(dataPort, dataBit[i], PIN_LOW, "xProgram");
 1960              		.loc 2 342 0 is_stmt 1 discriminator 6
 1961 18d4 0FB69587 		movzbl	-3705(%rbp), %edx
 1961      F1FFFF
 1962 18db 8B858CF1 		movl	-3700(%rbp), %eax
 1962      FFFF
 1963 18e1 4898     		cltq
 1964 18e3 0FB68405 		movzbl	-352(%rbp,%rax), %eax
 1964      A0FEFFFF 
 1965 18eb 0FB6C0   		movzbl	%al, %eax
 1966 18ee 4898     		cltq
 1967 18f0 4863D2   		movslq	%edx, %rdx
 1968 18f3 48C1E205 		salq	$5, %rdx
 1969 18f7 4801D0   		addq	%rdx, %rax
 1970 18fa 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1970      F1FFFF
 1971 1901 85C0     		testl	%eax, %eax
 1972 1903 747E     		je	.L111
 1973              		.loc 2 342 0 is_stmt 0 discriminator 1
 1974 1905 488B8598 		movq	-3688(%rbp), %rax
 1974      F1FFFF
 1975 190c 4889C2   		movq	%rax, %rdx
 1976 190f 488B8558 		movq	-3752(%rbp), %rax
 1976      F1FFFF
 1977 1916 4829C2   		subq	%rax, %rdx
 1978 1919 4889D0   		movq	%rdx, %rax
 1979 191c 4883E801 		subq	$1, %rax
 1980 1920 4889C7   		movq	%rax, %rdi
 1981 1923 E88EE8FF 		call	spaces
 1981      FF
 1982 1928 4889C7   		movq	%rax, %rdi
 1983 192b 8B858CF1 		movl	-3700(%rbp), %eax
 1983      FFFF
 1984 1931 4898     		cltq
 1985 1933 0FB68405 		movzbl	-352(%rbp,%rax), %eax
 1985      A0FEFFFF 
 1986 193b 0FB6D0   		movzbl	%al, %edx
 1987 193e 0FB68587 		movzbl	-3705(%rbp), %eax
 1987      F1FFFF
 1988 1945 8D7041   		leal	65(%rax), %esi
 1989 1948 488B8D58 		movq	-3752(%rbp), %rcx
 1989      F1FFFF
 1990 194f 488B8548 		movq	-3768(%rbp), %rax
 1990      F1FFFF
 1991 1956 4989F9   		movq	%rdi, %r9
 1992 1959 4989C8   		movq	%rcx, %r8
 1993 195c 89D1     		movl	%edx, %ecx
 1994 195e 89F2     		movl	%esi, %edx
 1995 1960 488D3500 		leaq	.LC16(%rip), %rsi
 1995      000000
 1996 1967 4889C7   		movq	%rax, %rdi
 1997 196a B8000000 		movl	$0, %eax
 1997      00
 1998 196f E8000000 		call	errRender@PLT
 1998      00
 1999 1974 C78588F1 		movl	$11, -3704(%rbp)
 1999      FFFF0B00 
 1999      0000
 2000 197e E92E0E00 		jmp	.L72
 2000      00
 2001              	.L111:
 2002              		.loc 2 342 0 discriminator 2
 2003 1983 0FB69587 		movzbl	-3705(%rbp), %edx
 2003      F1FFFF
 2004 198a 8B858CF1 		movl	-3700(%rbp), %eax
 2004      FFFF
 2005 1990 4898     		cltq
 2006 1992 0FB68405 		movzbl	-352(%rbp,%rax), %eax
 2006      A0FEFFFF 
 2007 199a 0FB6C0   		movzbl	%al, %eax
 2008 199d 4898     		cltq
 2009 199f 4863D2   		movslq	%edx, %rdx
 2010 19a2 48C1E205 		salq	$5, %rdx
 2011 19a6 4801D0   		addq	%rdx, %rax
 2012 19a9 C78485A0 		movl	$2, -3680(%rbp,%rax,4)
 2012      F1FFFF02 
 2012      000000
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 2013              		.loc 2 340 0 is_stmt 1 discriminator 2
 2014 19b4 83858CF1 		addl	$1, -3700(%rbp)
 2014      FFFF01
 2015              	.L107:
 2016 19bb 83BD8CF1 		cmpl	$7, -3700(%rbp)
 2016      FFFF07
 2017 19c2 0F8E1BFE 		jle	.L112
 2017      FFFF
 343:prog.c        **** 		}
 344:prog.c        **** 		makeLookup(dataBit, lookupTable);
 2018              		.loc 2 344 0
 2019 19c8 488D95F0 		leaq	-272(%rbp), %rdx
 2019      FEFFFF
 2020 19cf 488D85A0 		leaq	-352(%rbp), %rax
 2020      FEFFFF
 2021 19d6 4889D6   		movq	%rdx, %rsi
 2022 19d9 4889C7   		movq	%rax, %rdi
 2023 19dc E8F8ECFF 		call	makeLookup
 2023      FF
 2024 19e1 E9190200 		jmp	.L113
 2024      00
 2025              	.L106:
 345:prog.c        **** 	} else if ( progOp == PROG_SPI_SEND ) {
 2026              		.loc 2 345 0
 2027 19e6 83BD64F1 		cmpl	$6, -3740(%rbp)
 2027      FFFF06
 2028 19ed 0F850C02 		jne	.L113
 2028      0000
 2029              	.LBB3:
 346:prog.c        **** 		const uint8 bitOrder[8] = {7,6,5,4,3,2,1,0};
 2030              		.loc 2 346 0
 2031 19f3 C685A8FE 		movb	$7, -344(%rbp)
 2031      FFFF07
 2032 19fa C685A9FE 		movb	$6, -343(%rbp)
 2032      FFFF06
 2033 1a01 C685AAFE 		movb	$5, -342(%rbp)
 2033      FFFF05
 2034 1a08 C685ABFE 		movb	$4, -341(%rbp)
 2034      FFFF04
 2035 1a0f C685ACFE 		movb	$3, -340(%rbp)
 2035      FFFF03
 2036 1a16 C685ADFE 		movb	$2, -339(%rbp)
 2036      FFFF02
 2037 1a1d C685AEFE 		movb	$1, -338(%rbp)
 2037      FFFF01
 2038 1a24 C685AFFE 		movb	$0, -337(%rbp)
 2038      FFFF00
 347:prog.c        **** 		makeLookup(bitOrder, lookupTable);
 2039              		.loc 2 347 0
 2040 1a2b 488D95F0 		leaq	-272(%rbp), %rdx
 2040      FEFFFF
 2041 1a32 488D85A8 		leaq	-344(%rbp), %rax
 2041      FEFFFF
 2042 1a39 4889D6   		movq	%rdx, %rsi
 2043 1a3c 4889C7   		movq	%rax, %rdi
 2044 1a3f E895ECFF 		call	makeLookup
 2044      FF
 348:prog.c        **** 		GET_BIT(dataBit[0], "xProgram");
 2045              		.loc 2 348 0
 2046 1a44 488B8598 		movq	-3688(%rbp), %rax
 2046      F1FFFF
 2047 1a4b 0FB600   		movzbl	(%rax), %eax
 2048 1a4e 88857EF1 		movb	%al, -3714(%rbp)
 2048      FFFF
 2049 1a54 80BD7EF1 		cmpb	$0, -3714(%rbp)
 2049      FFFF00
 2050 1a5b 7553     		jne	.L114
 2051              		.loc 2 348 0 is_stmt 0 discriminator 1
 2052 1a5d 488B8598 		movq	-3688(%rbp), %rax
 2052      F1FFFF
 2053 1a64 4889C2   		movq	%rax, %rdx
 2054 1a67 488B8558 		movq	-3752(%rbp), %rax
 2054      F1FFFF
 2055 1a6e 4829C2   		subq	%rax, %rdx
 2056 1a71 4889D0   		movq	%rdx, %rax
 2057 1a74 4889C7   		movq	%rax, %rdi
 2058 1a77 E83AE7FF 		call	spaces
 2058      FF
 2059 1a7c 4889C1   		movq	%rax, %rcx
 2060 1a7f 488B9558 		movq	-3752(%rbp), %rdx
 2060      F1FFFF
 2061 1a86 488B8548 		movq	-3768(%rbp), %rax
 2061      F1FFFF
 2062 1a8d 488D3500 		leaq	.LC12(%rip), %rsi
 2062      000000
 2063 1a94 4889C7   		movq	%rax, %rdi
 2064 1a97 B8000000 		movl	$0, %eax
 2064      00
 2065 1a9c E8000000 		call	errRender@PLT
 2065      00
 2066 1aa1 C78588F1 		movl	$11, -3704(%rbp)
 2066      FFFF0B00 
 2066      0000
 2067 1aab E9010D00 		jmp	.L72
 2067      00
 2068              	.L114:
 2069              		.loc 2 348 0 discriminator 2
 2070 1ab0 80BD7EF1 		cmpb	$47, -3714(%rbp)
 2070      FFFF2F
 2071 1ab7 7E09     		jle	.L116
 2072              		.loc 2 348 0 discriminator 5
 2073 1ab9 80BD7EF1 		cmpb	$57, -3714(%rbp)
 2073      FFFF39
 2074 1ac0 7E53     		jle	.L117
 2075              	.L116:
 2076              		.loc 2 348 0 discriminator 6
 2077 1ac2 488B8598 		movq	-3688(%rbp), %rax
 2077      F1FFFF
 2078 1ac9 4889C2   		movq	%rax, %rdx
 2079 1acc 488B8558 		movq	-3752(%rbp), %rax
 2079      F1FFFF
 2080 1ad3 4829C2   		subq	%rax, %rdx
 2081 1ad6 4889D0   		movq	%rdx, %rax
 2082 1ad9 4889C7   		movq	%rax, %rdi
 2083 1adc E8D5E6FF 		call	spaces
 2083      FF
 2084 1ae1 4889C1   		movq	%rax, %rcx
 2085 1ae4 488B9558 		movq	-3752(%rbp), %rdx
 2085      F1FFFF
 2086 1aeb 488B8548 		movq	-3768(%rbp), %rax
 2086      F1FFFF
 2087 1af2 488D3500 		leaq	.LC15(%rip), %rsi
 2087      000000
 2088 1af9 4889C7   		movq	%rax, %rdi
 2089 1afc B8000000 		movl	$0, %eax
 2089      00
 2090 1b01 E8000000 		call	errRender@PLT
 2090      00
 2091 1b06 C78588F1 		movl	$11, -3704(%rbp)
 2091      FFFF0B00 
 2091      0000
 2092 1b10 E99C0C00 		jmp	.L72
 2092      00
 2093              	.L117:
 2094              		.loc 2 348 0 discriminator 7
 2095 1b15 488B8598 		movq	-3688(%rbp), %rax
 2095      F1FFFF
 2096 1b1c 488D8D98 		leaq	-3688(%rbp), %rcx
 2096      F1FFFF
 2097 1b23 BA0A0000 		movl	$10, %edx
 2097      00
 2098 1b28 4889CE   		movq	%rcx, %rsi
 2099 1b2b 4889C7   		movq	%rax, %rdi
 2100 1b2e E8000000 		call	strtoul@PLT
 2100      00
 2101 1b33 8885A0FE 		movb	%al, -352(%rbp)
 2101      FFFF
 349:prog.c        **** 		SET_BIT(dataPort, dataBit[0], PIN_LOW, "xProgram");
 2102              		.loc 2 349 0 is_stmt 1 discriminator 7
 2103 1b39 0FB69587 		movzbl	-3705(%rbp), %edx
 2103      F1FFFF
 2104 1b40 0FB685A0 		movzbl	-352(%rbp), %eax
 2104      FEFFFF
 2105 1b47 0FB6C0   		movzbl	%al, %eax
 2106 1b4a 4898     		cltq
 2107 1b4c 4863D2   		movslq	%edx, %rdx
 2108 1b4f 48C1E205 		salq	$5, %rdx
 2109 1b53 4801D0   		addq	%rdx, %rax
 2110 1b56 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 2110      F1FFFF
 2111 1b5d 85C0     		testl	%eax, %eax
 2112 1b5f 7476     		je	.L118
 2113              		.loc 2 349 0 is_stmt 0 discriminator 1
 2114 1b61 488B8598 		movq	-3688(%rbp), %rax
 2114      F1FFFF
 2115 1b68 4889C2   		movq	%rax, %rdx
 2116 1b6b 488B8558 		movq	-3752(%rbp), %rax
 2116      F1FFFF
 2117 1b72 4829C2   		subq	%rax, %rdx
 2118 1b75 4889D0   		movq	%rdx, %rax
 2119 1b78 4883E801 		subq	$1, %rax
 2120 1b7c 4889C7   		movq	%rax, %rdi
 2121 1b7f E832E6FF 		call	spaces
 2121      FF
 2122 1b84 4889C7   		movq	%rax, %rdi
 2123 1b87 0FB685A0 		movzbl	-352(%rbp), %eax
 2123      FEFFFF
 2124 1b8e 0FB6D0   		movzbl	%al, %edx
 2125 1b91 0FB68587 		movzbl	-3705(%rbp), %eax
 2125      F1FFFF
 2126 1b98 8D7041   		leal	65(%rax), %esi
 2127 1b9b 488B8D58 		movq	-3752(%rbp), %rcx
 2127      F1FFFF
 2128 1ba2 488B8548 		movq	-3768(%rbp), %rax
 2128      F1FFFF
 2129 1ba9 4989F9   		movq	%rdi, %r9
 2130 1bac 4989C8   		movq	%rcx, %r8
 2131 1baf 89D1     		movl	%edx, %ecx
 2132 1bb1 89F2     		movl	%esi, %edx
 2133 1bb3 488D3500 		leaq	.LC16(%rip), %rsi
 2133      000000
 2134 1bba 4889C7   		movq	%rax, %rdi
 2135 1bbd B8000000 		movl	$0, %eax
 2135      00
 2136 1bc2 E8000000 		call	errRender@PLT
 2136      00
 2137 1bc7 C78588F1 		movl	$11, -3704(%rbp)
 2137      FFFF0B00 
 2137      0000
 2138 1bd1 90       		nop
 2139 1bd2 E9DA0B00 		jmp	.L72
 2139      00
 2140              	.L118:
 2141              		.loc 2 349 0 discriminator 2
 2142 1bd7 0FB69587 		movzbl	-3705(%rbp), %edx
 2142      F1FFFF
 2143 1bde 0FB685A0 		movzbl	-352(%rbp), %eax
 2143      FEFFFF
 2144 1be5 0FB6C0   		movzbl	%al, %eax
 2145 1be8 4898     		cltq
 2146 1bea 4863D2   		movslq	%edx, %rdx
 2147 1bed 48C1E205 		salq	$5, %rdx
 2148 1bf1 4801D0   		addq	%rdx, %rax
 2149 1bf4 C78485A0 		movl	$2, -3680(%rbp,%rax,4)
 2149      F1FFFF02 
 2149      000000
 2150              	.L113:
 2151              	.LBE3:
 350:prog.c        **** 	}
 351:prog.c        **** 
 352:prog.c        **** 	GET_CHAR("xProgram");
 2152              		.loc 2 352 0 is_stmt 1
 2153 1bff 488B8598 		movq	-3688(%rbp), %rax
 2153      F1FFFF
 2154 1c06 0FB600   		movzbl	(%rax), %eax
 2155 1c09 88857EF1 		movb	%al, -3714(%rbp)
 2155      FFFF
 2156 1c0f 80BD7EF1 		cmpb	$0, -3714(%rbp)
 2156      FFFF00
 2157 1c16 7553     		jne	.L119
 2158              		.loc 2 352 0 is_stmt 0 discriminator 1
 2159 1c18 488B8598 		movq	-3688(%rbp), %rax
 2159      F1FFFF
 2160 1c1f 4889C2   		movq	%rax, %rdx
 2161 1c22 488B8558 		movq	-3752(%rbp), %rax
 2161      F1FFFF
 2162 1c29 4829C2   		subq	%rax, %rdx
 2163 1c2c 4889D0   		movq	%rdx, %rax
 2164 1c2f 4889C7   		movq	%rax, %rdi
 2165 1c32 E87FE5FF 		call	spaces
 2165      FF
 2166 1c37 4889C1   		movq	%rax, %rcx
 2167 1c3a 488B9558 		movq	-3752(%rbp), %rdx
 2167      F1FFFF
 2168 1c41 488B8548 		movq	-3768(%rbp), %rax
 2168      F1FFFF
 2169 1c48 488D3500 		leaq	.LC12(%rip), %rsi
 2169      000000
 2170 1c4f 4889C7   		movq	%rax, %rdi
 2171 1c52 B8000000 		movl	$0, %eax
 2171      00
 2172 1c57 E8000000 		call	errRender@PLT
 2172      00
 2173 1c5c C78588F1 		movl	$11, -3704(%rbp)
 2173      FFFF0B00 
 2173      0000
 2174 1c66 E9460B00 		jmp	.L72
 2174      00
 2175              	.L119:
 353:prog.c        **** 	if ( ch == '[' ) {
 2176              		.loc 2 353 0 is_stmt 1
 2177 1c6b 80BD7EF1 		cmpb	$91, -3714(%rbp)
 2177      FFFF5B
 2178 1c72 0F855001 		jne	.L120
 2178      0000
 354:prog.c        **** 		ptr++;
 2179              		.loc 2 354 0
 2180 1c78 488B8598 		movq	-3688(%rbp), %rax
 2180      F1FFFF
 2181 1c7f 4883C001 		addq	$1, %rax
 2182 1c83 48898598 		movq	%rax, -3688(%rbp)
 2182      F1FFFF
 355:prog.c        **** 		fStatus = populateMap(portConfig, ptr, &ptr, pinMap, error);
 2183              		.loc 2 355 0
 2184 1c8a 488BB598 		movq	-3688(%rbp), %rsi
 2184      F1FFFF
 2185 1c91 488BBD48 		movq	-3768(%rbp), %rdi
 2185      F1FFFF
 2186 1c98 488D8DA0 		leaq	-3680(%rbp), %rcx
 2186      F1FFFF
 2187 1c9f 488D9598 		leaq	-3688(%rbp), %rdx
 2187      F1FFFF
 2188 1ca6 488B8558 		movq	-3752(%rbp), %rax
 2188      F1FFFF
 2189 1cad 4989F8   		movq	%rdi, %r8
 2190 1cb0 4889C7   		movq	%rax, %rdi
 2191 1cb3 E826E5FF 		call	populateMap
 2191      FF
 2192 1cb8 898590F1 		movl	%eax, -3696(%rbp)
 2192      FFFF
 356:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2193              		.loc 2 356 0
 2194 1cbe 83BD90F1 		cmpl	$0, -3696(%rbp)
 2194      FFFF00
 2195 1cc5 7427     		je	.L121
 2196              		.loc 2 356 0 is_stmt 0 discriminator 1
 2197 1cc7 488B8548 		movq	-3768(%rbp), %rax
 2197      F1FFFF
 2198 1cce 488D3500 		leaq	.LC18(%rip), %rsi
 2198      000000
 2199 1cd5 4889C7   		movq	%rax, %rdi
 2200 1cd8 E8000000 		call	errPrefix@PLT
 2200      00
 2201 1cdd 8B8590F1 		movl	-3696(%rbp), %eax
 2201      FFFF
 2202 1ce3 898588F1 		movl	%eax, -3704(%rbp)
 2202      FFFF
 2203 1ce9 E9C30A00 		jmp	.L72
 2203      00
 2204              	.L121:
 357:prog.c        **** 		EXPECT_CHAR(']', "xProgram");
 2205              		.loc 2 357 0 is_stmt 1
 2206 1cee 488B8598 		movq	-3688(%rbp), %rax
 2206      F1FFFF
 2207 1cf5 0FB600   		movzbl	(%rax), %eax
 2208 1cf8 88857EF1 		movb	%al, -3714(%rbp)
 2208      FFFF
 2209 1cfe 80BD7EF1 		cmpb	$0, -3714(%rbp)
 2209      FFFF00
 2210 1d05 7553     		jne	.L122
 2211              		.loc 2 357 0 is_stmt 0 discriminator 1
 2212 1d07 488B8598 		movq	-3688(%rbp), %rax
 2212      F1FFFF
 2213 1d0e 4889C2   		movq	%rax, %rdx
 2214 1d11 488B8558 		movq	-3752(%rbp), %rax
 2214      F1FFFF
 2215 1d18 4829C2   		subq	%rax, %rdx
 2216 1d1b 4889D0   		movq	%rdx, %rax
 2217 1d1e 4889C7   		movq	%rax, %rdi
 2218 1d21 E890E4FF 		call	spaces
 2218      FF
 2219 1d26 4889C1   		movq	%rax, %rcx
 2220 1d29 488B9558 		movq	-3752(%rbp), %rdx
 2220      F1FFFF
 2221 1d30 488B8548 		movq	-3768(%rbp), %rax
 2221      F1FFFF
 2222 1d37 488D3500 		leaq	.LC12(%rip), %rsi
 2222      000000
 2223 1d3e 4889C7   		movq	%rax, %rdi
 2224 1d41 B8000000 		movl	$0, %eax
 2224      00
 2225 1d46 E8000000 		call	errRender@PLT
 2225      00
 2226 1d4b C78588F1 		movl	$11, -3704(%rbp)
 2226      FFFF0B00 
 2226      0000
 2227 1d55 E9570A00 		jmp	.L72
 2227      00
 2228              	.L122:
 2229              		.loc 2 357 0 discriminator 2
 2230 1d5a 80BD7EF1 		cmpb	$93, -3714(%rbp)
 2230      FFFF5D
 2231 1d61 7453     		je	.L123
 2232              		.loc 2 357 0 discriminator 3
 2233 1d63 488B8598 		movq	-3688(%rbp), %rax
 2233      F1FFFF
 2234 1d6a 4889C2   		movq	%rax, %rdx
 2235 1d6d 488B8558 		movq	-3752(%rbp), %rax
 2235      F1FFFF
 2236 1d74 4829C2   		subq	%rax, %rdx
 2237 1d77 4889D0   		movq	%rdx, %rax
 2238 1d7a 4889C7   		movq	%rax, %rdi
 2239 1d7d E834E4FF 		call	spaces
 2239      FF
 2240 1d82 4889C1   		movq	%rax, %rcx
 2241 1d85 488B9558 		movq	-3752(%rbp), %rdx
 2241      F1FFFF
 2242 1d8c 488B8548 		movq	-3768(%rbp), %rax
 2242      F1FFFF
 2243 1d93 488D3500 		leaq	.LC19(%rip), %rsi
 2243      000000
 2244 1d9a 4889C7   		movq	%rax, %rdi
 2245 1d9d B8000000 		movl	$0, %eax
 2245      00
 2246 1da2 E8000000 		call	errRender@PLT
 2246      00
 2247 1da7 C78588F1 		movl	$11, -3704(%rbp)
 2247      FFFF0B00 
 2247      0000
 2248 1db1 E9FB0900 		jmp	.L72
 2248      00
 2249              	.L123:
 2250              		.loc 2 357 0 discriminator 4
 2251 1db6 488B8598 		movq	-3688(%rbp), %rax
 2251      F1FFFF
 2252 1dbd 4883C001 		addq	$1, %rax
 2253 1dc1 48898598 		movq	%rax, -3688(%rbp)
 2253      F1FFFF
 2254              	.L120:
 358:prog.c        **** 	}
 359:prog.c        **** 	ch = *ptr;
 2255              		.loc 2 359 0 is_stmt 1
 2256 1dc8 488B8598 		movq	-3688(%rbp), %rax
 2256      F1FFFF
 2257 1dcf 0FB600   		movzbl	(%rax), %eax
 2258 1dd2 88857EF1 		movb	%al, -3714(%rbp)
 2258      FFFF
 360:prog.c        **** 	CHECK_STATUS(
 2259              		.loc 2 360 0
 2260 1dd8 80BD7EF1 		cmpb	$0, -3714(%rbp)
 2260      FFFF00
 2261 1ddf 745C     		je	.L124
 2262              		.loc 2 360 0 is_stmt 0 discriminator 1
 2263 1de1 80BD7EF1 		cmpb	$58, -3714(%rbp)
 2263      FFFF3A
 2264 1de8 7453     		je	.L124
 2265              		.loc 2 360 0 discriminator 2
 2266 1dea 488B8598 		movq	-3688(%rbp), %rax
 2266      F1FFFF
 2267 1df1 4889C2   		movq	%rax, %rdx
 2268 1df4 488B8558 		movq	-3752(%rbp), %rax
 2268      F1FFFF
 2269 1dfb 4829C2   		subq	%rax, %rdx
 2270 1dfe 4889D0   		movq	%rdx, %rax
 2271 1e01 4889C7   		movq	%rax, %rdi
 2272 1e04 E8ADE3FF 		call	spaces
 2272      FF
 2273 1e09 4889C1   		movq	%rax, %rcx
 2274 1e0c 488B9558 		movq	-3752(%rbp), %rdx
 2274      F1FFFF
 2275 1e13 488B8548 		movq	-3768(%rbp), %rax
 2275      F1FFFF
 2276 1e1a 488D3500 		leaq	.LC20(%rip), %rsi
 2276      000000
 2277 1e21 4889C7   		movq	%rax, %rdi
 2278 1e24 B8000000 		movl	$0, %eax
 2278      00
 2279 1e29 E8000000 		call	errRender@PLT
 2279      00
 2280 1e2e C78588F1 		movl	$11, -3704(%rbp)
 2280      FFFF0B00 
 2280      0000
 2281 1e38 E9740900 		jmp	.L72
 2281      00
 2282              	.L124:
 361:prog.c        **** 		ch != '\0' && ch != ':', FL_CONF_FORMAT, cleanup,
 362:prog.c        **** 		"xProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig));
 363:prog.c        **** 
 364:prog.c        **** 	// Map the CCLK bit & the SelectMAP data bus
 365:prog.c        **** 	fStatus = portMap(handle, LP_SCK, cclkPort, cclkBit, error);
 2283              		.loc 2 365 0 is_stmt 1
 2284 1e3d 0FB68D86 		movzbl	-3706(%rbp), %ecx
 2284      F1FFFF
 2285 1e44 0FB69585 		movzbl	-3707(%rbp), %edx
 2285      F1FFFF
 2286 1e4b 488BB548 		movq	-3768(%rbp), %rsi
 2286      F1FFFF
 2287 1e52 488B8568 		movq	-3736(%rbp), %rax
 2287      F1FFFF
 2288 1e59 4989F0   		movq	%rsi, %r8
 2289 1e5c BE040000 		movl	$4, %esi
 2289      00
 2290 1e61 4889C7   		movq	%rax, %rdi
 2291 1e64 E8D5E7FF 		call	portMap
 2291      FF
 2292 1e69 898590F1 		movl	%eax, -3696(%rbp)
 2292      FFFF
 366:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2293              		.loc 2 366 0
 2294 1e6f 83BD90F1 		cmpl	$0, -3696(%rbp)
 2294      FFFF00
 2295 1e76 7427     		je	.L125
 2296              		.loc 2 366 0 is_stmt 0 discriminator 1
 2297 1e78 488B8548 		movq	-3768(%rbp), %rax
 2297      F1FFFF
 2298 1e7f 488D3500 		leaq	.LC18(%rip), %rsi
 2298      000000
 2299 1e86 4889C7   		movq	%rax, %rdi
 2300 1e89 E8000000 		call	errPrefix@PLT
 2300      00
 2301 1e8e 8B8590F1 		movl	-3696(%rbp), %eax
 2301      FFFF
 2302 1e94 898588F1 		movl	%eax, -3704(%rbp)
 2302      FFFF
 2303 1e9a E9120900 		jmp	.L72
 2303      00
 2304              	.L125:
 367:prog.c        **** 	if ( progOp == PROG_PARALLEL ) {
 2305              		.loc 2 367 0 is_stmt 1
 2306 1e9f 83BD64F1 		cmpl	$5, -3740(%rbp)
 2306      FFFF05
 2307 1ea6 7564     		jne	.L126
 368:prog.c        **** 		fStatus = portMap(handle, LP_D8, dataPort, 0x00, error);
 2308              		.loc 2 368 0
 2309 1ea8 0FB69587 		movzbl	-3705(%rbp), %edx
 2309      F1FFFF
 2310 1eaf 488B8D48 		movq	-3768(%rbp), %rcx
 2310      F1FFFF
 2311 1eb6 488B8568 		movq	-3736(%rbp), %rax
 2311      F1FFFF
 2312 1ebd 4989C8   		movq	%rcx, %r8
 2313 1ec0 B9000000 		movl	$0, %ecx
 2313      00
 2314 1ec5 BE050000 		movl	$5, %esi
 2314      00
 2315 1eca 4889C7   		movq	%rax, %rdi
 2316 1ecd E86CE7FF 		call	portMap
 2316      FF
 2317 1ed2 898590F1 		movl	%eax, -3696(%rbp)
 2317      FFFF
 369:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2318              		.loc 2 369 0
 2319 1ed8 83BD90F1 		cmpl	$0, -3696(%rbp)
 2319      FFFF00
 2320 1edf 0F849500 		je	.L127
 2320      0000
 2321              		.loc 2 369 0 is_stmt 0 discriminator 1
 2322 1ee5 488B8548 		movq	-3768(%rbp), %rax
 2322      F1FFFF
 2323 1eec 488D3500 		leaq	.LC18(%rip), %rsi
 2323      000000
 2324 1ef3 4889C7   		movq	%rax, %rdi
 2325 1ef6 E8000000 		call	errPrefix@PLT
 2325      00
 2326 1efb 8B8590F1 		movl	-3696(%rbp), %eax
 2326      FFFF
 2327 1f01 898588F1 		movl	%eax, -3704(%rbp)
 2327      FFFF
 2328 1f07 E9A50800 		jmp	.L72
 2328      00
 2329              	.L126:
 370:prog.c        **** 	} else if ( progOp == PROG_SPI_SEND ) {
 2330              		.loc 2 370 0 is_stmt 1
 2331 1f0c 83BD64F1 		cmpl	$6, -3740(%rbp)
 2331      FFFF06
 2332 1f13 7565     		jne	.L127
 371:prog.c        **** 		fStatus = portMap(handle, LP_MOSI, dataPort, dataBit[0], error);
 2333              		.loc 2 371 0
 2334 1f15 0FB685A0 		movzbl	-352(%rbp), %eax
 2334      FEFFFF
 2335 1f1c 0FB6C8   		movzbl	%al, %ecx
 2336 1f1f 0FB69587 		movzbl	-3705(%rbp), %edx
 2336      F1FFFF
 2337 1f26 488BB548 		movq	-3768(%rbp), %rsi
 2337      F1FFFF
 2338 1f2d 488B8568 		movq	-3736(%rbp), %rax
 2338      F1FFFF
 2339 1f34 4989F0   		movq	%rsi, %r8
 2340 1f37 BE020000 		movl	$2, %esi
 2340      00
 2341 1f3c 4889C7   		movq	%rax, %rdi
 2342 1f3f E8FAE6FF 		call	portMap
 2342      FF
 2343 1f44 898590F1 		movl	%eax, -3696(%rbp)
 2343      FFFF
 372:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2344              		.loc 2 372 0
 2345 1f4a 83BD90F1 		cmpl	$0, -3696(%rbp)
 2345      FFFF00
 2346 1f51 7427     		je	.L127
 2347              		.loc 2 372 0 is_stmt 0 discriminator 1
 2348 1f53 488B8548 		movq	-3768(%rbp), %rax
 2348      F1FFFF
 2349 1f5a 488D3500 		leaq	.LC18(%rip), %rsi
 2349      000000
 2350 1f61 4889C7   		movq	%rax, %rdi
 2351 1f64 E8000000 		call	errPrefix@PLT
 2351      00
 2352 1f69 8B8590F1 		movl	-3696(%rbp), %eax
 2352      FFFF
 2353 1f6f 898588F1 		movl	%eax, -3704(%rbp)
 2353      FFFF
 2354 1f75 E9370800 		jmp	.L72
 2354      00
 2355              	.L127:
 373:prog.c        **** 	}
 374:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 2356              		.loc 2 374 0 is_stmt 1
 2357 1f7a 488B9548 		movq	-3768(%rbp), %rdx
 2357      F1FFFF
 2358 1f81 488B8568 		movq	-3736(%rbp), %rax
 2358      F1FFFF
 2359 1f88 4989D0   		movq	%rdx, %r8
 2360 1f8b B9000000 		movl	$0, %ecx
 2360      00
 2361 1f90 BA000000 		movl	$0, %edx
 2361      00
 2362 1f95 BE000000 		movl	$0, %esi
 2362      00
 2363 1f9a 4889C7   		movq	%rax, %rdi
 2364 1f9d E89CE6FF 		call	portMap
 2364      FF
 2365 1fa2 898590F1 		movl	%eax, -3696(%rbp)
 2365      FFFF
 375:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2366              		.loc 2 375 0
 2367 1fa8 83BD90F1 		cmpl	$0, -3696(%rbp)
 2367      FFFF00
 2368 1faf 7427     		je	.L128
 2369              		.loc 2 375 0 is_stmt 0 discriminator 1
 2370 1fb1 488B8548 		movq	-3768(%rbp), %rax
 2370      F1FFFF
 2371 1fb8 488D3500 		leaq	.LC18(%rip), %rsi
 2371      000000
 2372 1fbf 4889C7   		movq	%rax, %rdi
 2373 1fc2 E8000000 		call	errPrefix@PLT
 2373      00
 2374 1fc7 8B8590F1 		movl	-3696(%rbp), %eax
 2374      FFFF
 2375 1fcd 898588F1 		movl	%eax, -3704(%rbp)
 2375      FFFF
 2376 1fd3 E9D90700 		jmp	.L72
 2376      00
 2377              	.L128:
 376:prog.c        **** 
 377:prog.c        **** 	// Assert PROG & wait for INIT & DONE to go low
 378:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, NULL, error); // INIT is inp
 2378              		.loc 2 378 0 is_stmt 1
 2379 1fd8 0FB69582 		movzbl	-3710(%rbp), %edx
 2379      F1FFFF
 2380 1fdf 0FB6B581 		movzbl	-3711(%rbp), %esi
 2380      F1FFFF
 2381 1fe6 488B8D48 		movq	-3768(%rbp), %rcx
 2381      F1FFFF
 2382 1fed 488B8568 		movq	-3736(%rbp), %rax
 2382      F1FFFF
 2383 1ff4 4989C9   		movq	%rcx, %r9
 2384 1ff7 41B80000 		movl	$0, %r8d
 2384      0000
 2385 1ffd B9030000 		movl	$3, %ecx
 2385      00
 2386 2002 4889C7   		movq	%rax, %rdi
 2387 2005 E8000000 		call	flSingleBitPortAccess@PLT
 2387      00
 2388 200a 898590F1 		movl	%eax, -3696(%rbp)
 2388      FFFF
 379:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2389              		.loc 2 379 0
 2390 2010 83BD90F1 		cmpl	$0, -3696(%rbp)
 2390      FFFF00
 2391 2017 7427     		je	.L129
 2392              		.loc 2 379 0 is_stmt 0 discriminator 1
 2393 2019 488B8548 		movq	-3768(%rbp), %rax
 2393      F1FFFF
 2394 2020 488D3500 		leaq	.LC18(%rip), %rsi
 2394      000000
 2395 2027 4889C7   		movq	%rax, %rdi
 2396 202a E8000000 		call	errPrefix@PLT
 2396      00
 2397 202f 8B8590F1 		movl	-3696(%rbp), %eax
 2397      FFFF
 2398 2035 898588F1 		movl	%eax, -3704(%rbp)
 2398      FFFF
 2399 203b E9710700 		jmp	.L72
 2399      00
 2400              	.L129:
 380:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, NULL, error); // DONE is inp
 2401              		.loc 2 380 0 is_stmt 1
 2402 2040 0FB69584 		movzbl	-3708(%rbp), %edx
 2402      F1FFFF
 2403 2047 0FB6B583 		movzbl	-3709(%rbp), %esi
 2403      F1FFFF
 2404 204e 488B8D48 		movq	-3768(%rbp), %rcx
 2404      F1FFFF
 2405 2055 488B8568 		movq	-3736(%rbp), %rax
 2405      F1FFFF
 2406 205c 4989C9   		movq	%rcx, %r9
 2407 205f 41B80000 		movl	$0, %r8d
 2407      0000
 2408 2065 B9030000 		movl	$3, %ecx
 2408      00
 2409 206a 4889C7   		movq	%rax, %rdi
 2410 206d E8000000 		call	flSingleBitPortAccess@PLT
 2410      00
 2411 2072 898590F1 		movl	%eax, -3696(%rbp)
 2411      FFFF
 381:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2412              		.loc 2 381 0
 2413 2078 83BD90F1 		cmpl	$0, -3696(%rbp)
 2413      FFFF00
 2414 207f 7427     		je	.L130
 2415              		.loc 2 381 0 is_stmt 0 discriminator 1
 2416 2081 488B8548 		movq	-3768(%rbp), %rax
 2416      F1FFFF
 2417 2088 488D3500 		leaq	.LC18(%rip), %rsi
 2417      000000
 2418 208f 4889C7   		movq	%rax, %rdi
 2419 2092 E8000000 		call	errPrefix@PLT
 2419      00
 2420 2097 8B8590F1 		movl	-3696(%rbp), %eax
 2420      FFFF
 2421 209d 898588F1 		movl	%eax, -3704(%rbp)
 2421      FFFF
 2422 20a3 E9090700 		jmp	.L72
 2422      00
 2423              	.L130:
 382:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, progPort, progBit, PIN_LOW, NULL, error); // PROG is low
 2424              		.loc 2 382 0 is_stmt 1
 2425 20a8 0FB69580 		movzbl	-3712(%rbp), %edx
 2425      F1FFFF
 2426 20af 0FB6B57F 		movzbl	-3713(%rbp), %esi
 2426      F1FFFF
 2427 20b6 488B8D48 		movq	-3768(%rbp), %rcx
 2427      F1FFFF
 2428 20bd 488B8568 		movq	-3736(%rbp), %rax
 2428      F1FFFF
 2429 20c4 4989C9   		movq	%rcx, %r9
 2430 20c7 41B80000 		movl	$0, %r8d
 2430      0000
 2431 20cd B9020000 		movl	$2, %ecx
 2431      00
 2432 20d2 4889C7   		movq	%rax, %rdi
 2433 20d5 E8000000 		call	flSingleBitPortAccess@PLT
 2433      00
 2434 20da 898590F1 		movl	%eax, -3696(%rbp)
 2434      FFFF
 383:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2435              		.loc 2 383 0
 2436 20e0 83BD90F1 		cmpl	$0, -3696(%rbp)
 2436      FFFF00
 2437 20e7 7427     		je	.L131
 2438              		.loc 2 383 0 is_stmt 0 discriminator 1
 2439 20e9 488B8548 		movq	-3768(%rbp), %rax
 2439      F1FFFF
 2440 20f0 488D3500 		leaq	.LC18(%rip), %rsi
 2440      000000
 2441 20f7 4889C7   		movq	%rax, %rdi
 2442 20fa E8000000 		call	errPrefix@PLT
 2442      00
 2443 20ff 8B8590F1 		movl	-3696(%rbp), %eax
 2443      FFFF
 2444 2105 898588F1 		movl	%eax, -3704(%rbp)
 2444      FFFF
 2445 210b E9A10600 		jmp	.L72
 2445      00
 2446              	.L131:
 384:prog.c        **** 	do {
 385:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2447              		.loc 2 385 0 is_stmt 1
 2448 2110 0FB69582 		movzbl	-3710(%rbp), %edx
 2448      F1FFFF
 2449 2117 0FB6B581 		movzbl	-3711(%rbp), %esi
 2449      F1FFFF
 2450 211e 488BBD48 		movq	-3768(%rbp), %rdi
 2450      F1FFFF
 2451 2125 488D8D7A 		leaq	-3718(%rbp), %rcx
 2451      F1FFFF
 2452 212c 488B8568 		movq	-3736(%rbp), %rax
 2452      F1FFFF
 2453 2133 4989F9   		movq	%rdi, %r9
 2454 2136 4989C8   		movq	%rcx, %r8
 2455 2139 B9030000 		movl	$3, %ecx
 2455      00
 2456 213e 4889C7   		movq	%rax, %rdi
 2457 2141 E8000000 		call	flSingleBitPortAccess@PLT
 2457      00
 2458 2146 898590F1 		movl	%eax, -3696(%rbp)
 2458      FFFF
 386:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2459              		.loc 2 386 0
 2460 214c 83BD90F1 		cmpl	$0, -3696(%rbp)
 2460      FFFF00
 2461 2153 7427     		je	.L132
 2462              		.loc 2 386 0 is_stmt 0 discriminator 1
 2463 2155 488B8548 		movq	-3768(%rbp), %rax
 2463      F1FFFF
 2464 215c 488D3500 		leaq	.LC18(%rip), %rsi
 2464      000000
 2465 2163 4889C7   		movq	%rax, %rdi
 2466 2166 E8000000 		call	errPrefix@PLT
 2466      00
 2467 216b 8B8590F1 		movl	-3696(%rbp), %eax
 2467      FFFF
 2468 2171 898588F1 		movl	%eax, -3704(%rbp)
 2468      FFFF
 2469 2177 E9350600 		jmp	.L72
 2469      00
 2470              	.L132:
 387:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 2471              		.loc 2 387 0 is_stmt 1
 2472 217c 0FB69584 		movzbl	-3708(%rbp), %edx
 2472      F1FFFF
 2473 2183 0FB6B583 		movzbl	-3709(%rbp), %esi
 2473      F1FFFF
 2474 218a 488BBD48 		movq	-3768(%rbp), %rdi
 2474      F1FFFF
 2475 2191 488D8D7B 		leaq	-3717(%rbp), %rcx
 2475      F1FFFF
 2476 2198 488B8568 		movq	-3736(%rbp), %rax
 2476      F1FFFF
 2477 219f 4989F9   		movq	%rdi, %r9
 2478 21a2 4989C8   		movq	%rcx, %r8
 2479 21a5 B9030000 		movl	$3, %ecx
 2479      00
 2480 21aa 4889C7   		movq	%rax, %rdi
 2481 21ad E8000000 		call	flSingleBitPortAccess@PLT
 2481      00
 2482 21b2 898590F1 		movl	%eax, -3696(%rbp)
 2482      FFFF
 388:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2483              		.loc 2 388 0
 2484 21b8 83BD90F1 		cmpl	$0, -3696(%rbp)
 2484      FFFF00
 2485 21bf 7427     		je	.L133
 2486              		.loc 2 388 0 is_stmt 0 discriminator 1
 2487 21c1 488B8548 		movq	-3768(%rbp), %rax
 2487      F1FFFF
 2488 21c8 488D3500 		leaq	.LC18(%rip), %rsi
 2488      000000
 2489 21cf 4889C7   		movq	%rax, %rdi
 2490 21d2 E8000000 		call	errPrefix@PLT
 2490      00
 2491 21d7 8B8590F1 		movl	-3696(%rbp), %eax
 2491      FFFF
 2492 21dd 898588F1 		movl	%eax, -3704(%rbp)
 2492      FFFF
 2493 21e3 E9C90500 		jmp	.L72
 2493      00
 2494              	.L133:
 389:prog.c        **** 	} while ( initStatus || doneStatus );
 2495              		.loc 2 389 0 is_stmt 1
 2496 21e8 0FB6857A 		movzbl	-3718(%rbp), %eax
 2496      F1FFFF
 2497 21ef 84C0     		testb	%al, %al
 2498 21f1 0F8519FF 		jne	.L131
 2498      FFFF
 2499              		.loc 2 389 0 is_stmt 0 discriminator 1
 2500 21f7 0FB6857B 		movzbl	-3717(%rbp), %eax
 2500      F1FFFF
 2501 21fe 84C0     		testb	%al, %al
 2502 2200 0F850AFF 		jne	.L131
 2502      FFFF
 390:prog.c        **** 
 391:prog.c        **** 	// Now it's safe to switch to conduit mode zero (=JTAG, etc)
 392:prog.c        **** 	fStatus = flSelectConduit(handle, 0x00, error);
 2503              		.loc 2 392 0 is_stmt 1
 2504 2206 488B9548 		movq	-3768(%rbp), %rdx
 2504      F1FFFF
 2505 220d 488B8568 		movq	-3736(%rbp), %rax
 2505      F1FFFF
 2506 2214 BE000000 		movl	$0, %esi
 2506      00
 2507 2219 4889C7   		movq	%rax, %rdi
 2508 221c E8000000 		call	flSelectConduit@PLT
 2508      00
 2509 2221 898590F1 		movl	%eax, -3696(%rbp)
 2509      FFFF
 393:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2510              		.loc 2 393 0
 2511 2227 83BD90F1 		cmpl	$0, -3696(%rbp)
 2511      FFFF00
 2512 222e 7427     		je	.L134
 2513              		.loc 2 393 0 is_stmt 0 discriminator 1
 2514 2230 488B8548 		movq	-3768(%rbp), %rax
 2514      F1FFFF
 2515 2237 488D3500 		leaq	.LC18(%rip), %rsi
 2515      000000
 2516 223e 4889C7   		movq	%rax, %rdi
 2517 2241 E8000000 		call	errPrefix@PLT
 2517      00
 2518 2246 8B8590F1 		movl	-3696(%rbp), %eax
 2518      FFFF
 2519 224c 898588F1 		movl	%eax, -3704(%rbp)
 2519      FFFF
 2520 2252 E95A0500 		jmp	.L72
 2520      00
 2521              	.L134:
 394:prog.c        **** 
 395:prog.c        **** 	// Apply requested configuration to each specified pin
 396:prog.c        **** 	pinMap[progPort][progBit] = PIN_UNUSED;
 2522              		.loc 2 396 0 is_stmt 1
 2523 2257 0FB6957F 		movzbl	-3713(%rbp), %edx
 2523      F1FFFF
 2524 225e 0FB68580 		movzbl	-3712(%rbp), %eax
 2524      F1FFFF
 2525 2265 4898     		cltq
 2526 2267 4863D2   		movslq	%edx, %rdx
 2527 226a 48C1E205 		salq	$5, %rdx
 2528 226e 4801D0   		addq	%rdx, %rax
 2529 2271 C78485A0 		movl	$0, -3680(%rbp,%rax,4)
 2529      F1FFFF00 
 2529      000000
 397:prog.c        **** 	pinMap[initPort][initBit] = PIN_UNUSED;
 2530              		.loc 2 397 0
 2531 227c 0FB69581 		movzbl	-3711(%rbp), %edx
 2531      F1FFFF
 2532 2283 0FB68582 		movzbl	-3710(%rbp), %eax
 2532      F1FFFF
 2533 228a 4898     		cltq
 2534 228c 4863D2   		movslq	%edx, %rdx
 2535 228f 48C1E205 		salq	$5, %rdx
 2536 2293 4801D0   		addq	%rdx, %rax
 2537 2296 C78485A0 		movl	$0, -3680(%rbp,%rax,4)
 2537      F1FFFF00 
 2537      000000
 398:prog.c        **** 	pinMap[donePort][doneBit] = PIN_UNUSED;
 2538              		.loc 2 398 0
 2539 22a1 0FB69583 		movzbl	-3709(%rbp), %edx
 2539      F1FFFF
 2540 22a8 0FB68584 		movzbl	-3708(%rbp), %eax
 2540      F1FFFF
 2541 22af 4898     		cltq
 2542 22b1 4863D2   		movslq	%edx, %rdx
 2543 22b4 48C1E205 		salq	$5, %rdx
 2544 22b8 4801D0   		addq	%rdx, %rax
 2545 22bb C78485A0 		movl	$0, -3680(%rbp,%rax,4)
 2545      F1FFFF00 
 2545      000000
 399:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 2546              		.loc 2 399 0
 2547 22c6 C6857CF1 		movb	$0, -3716(%rbp)
 2547      FFFF00
 2548 22cd E9D50000 		jmp	.L135
 2548      00
 2549              	.L139:
 400:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2550              		.loc 2 400 0
 2551 22d2 C6857DF1 		movb	$0, -3715(%rbp)
 2551      FFFF00
 2552 22d9 E9AC0000 		jmp	.L136
 2552      00
 2553              	.L138:
 401:prog.c        **** 			thisPin = pinMap[port][bit];
 2554              		.loc 2 401 0
 2555 22de 0FB6957C 		movzbl	-3716(%rbp), %edx
 2555      F1FFFF
 2556 22e5 0FB6857D 		movzbl	-3715(%rbp), %eax
 2556      F1FFFF
 2557 22ec 4898     		cltq
 2558 22ee 4863D2   		movslq	%edx, %rdx
 2559 22f1 48C1E205 		salq	$5, %rdx
 2560 22f5 4801D0   		addq	%rdx, %rax
 2561 22f8 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 2561      F1FFFF
 2562 22ff 898594F1 		movl	%eax, -3692(%rbp)
 2562      FFFF
 402:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 2563              		.loc 2 402 0
 2564 2305 83BD94F1 		cmpl	$0, -3692(%rbp)
 2564      FFFF00
 2565 230c 746C     		je	.L137
 403:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, thisPin, NULL, error);
 2566              		.loc 2 403 0
 2567 230e 8B8594F1 		movl	-3692(%rbp), %eax
 2567      FFFF
 2568 2314 0FB6C8   		movzbl	%al, %ecx
 2569 2317 0FB6957D 		movzbl	-3715(%rbp), %edx
 2569      F1FFFF
 2570 231e 0FB6B57C 		movzbl	-3716(%rbp), %esi
 2570      F1FFFF
 2571 2325 488BBD48 		movq	-3768(%rbp), %rdi
 2571      F1FFFF
 2572 232c 488B8568 		movq	-3736(%rbp), %rax
 2572      F1FFFF
 2573 2333 4989F9   		movq	%rdi, %r9
 2574 2336 41B80000 		movl	$0, %r8d
 2574      0000
 2575 233c 4889C7   		movq	%rax, %rdi
 2576 233f E8000000 		call	flSingleBitPortAccess@PLT
 2576      00
 2577 2344 898590F1 		movl	%eax, -3696(%rbp)
 2577      FFFF
 404:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2578              		.loc 2 404 0
 2579 234a 83BD90F1 		cmpl	$0, -3696(%rbp)
 2579      FFFF00
 2580 2351 7427     		je	.L137
 2581              		.loc 2 404 0 is_stmt 0 discriminator 1
 2582 2353 488B8548 		movq	-3768(%rbp), %rax
 2582      F1FFFF
 2583 235a 488D3500 		leaq	.LC18(%rip), %rsi
 2583      000000
 2584 2361 4889C7   		movq	%rax, %rdi
 2585 2364 E8000000 		call	errPrefix@PLT
 2585      00
 2586 2369 8B8590F1 		movl	-3696(%rbp), %eax
 2586      FFFF
 2587 236f 898588F1 		movl	%eax, -3704(%rbp)
 2587      FFFF
 2588 2375 E9370400 		jmp	.L72
 2588      00
 2589              	.L137:
 400:prog.c        **** 			thisPin = pinMap[port][bit];
 2590              		.loc 2 400 0 is_stmt 1 discriminator 2
 2591 237a 0FB6857D 		movzbl	-3715(%rbp), %eax
 2591      F1FFFF
 2592 2381 83C001   		addl	$1, %eax
 2593 2384 88857DF1 		movb	%al, -3715(%rbp)
 2593      FFFF
 2594              	.L136:
 400:prog.c        **** 			thisPin = pinMap[port][bit];
 2595              		.loc 2 400 0 is_stmt 0 discriminator 1
 2596 238a 80BD7DF1 		cmpb	$31, -3715(%rbp)
 2596      FFFF1F
 2597 2391 0F8647FF 		jbe	.L138
 2597      FFFF
 399:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2598              		.loc 2 399 0 is_stmt 1 discriminator 2
 2599 2397 0FB6857C 		movzbl	-3716(%rbp), %eax
 2599      F1FFFF
 2600 239e 83C001   		addl	$1, %eax
 2601 23a1 88857CF1 		movb	%al, -3716(%rbp)
 2601      FFFF
 2602              	.L135:
 399:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2603              		.loc 2 399 0 is_stmt 0 discriminator 1
 2604 23a7 80BD7CF1 		cmpb	$25, -3716(%rbp)
 2604      FFFF19
 2605 23ae 0F861EFF 		jbe	.L139
 2605      FFFF
 405:prog.c        **** 			}
 406:prog.c        **** 		}
 407:prog.c        **** 	}
 408:prog.c        **** 
 409:prog.c        **** 	// Deassert PROG and wait for INIT to go high
 410:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, progPort, progBit, PIN_HIGH, NULL, error); // PROG is high
 2606              		.loc 2 410 0 is_stmt 1
 2607 23b4 0FB69580 		movzbl	-3712(%rbp), %edx
 2607      F1FFFF
 2608 23bb 0FB6B57F 		movzbl	-3713(%rbp), %esi
 2608      F1FFFF
 2609 23c2 488B8D48 		movq	-3768(%rbp), %rcx
 2609      F1FFFF
 2610 23c9 488B8568 		movq	-3736(%rbp), %rax
 2610      F1FFFF
 2611 23d0 4989C9   		movq	%rcx, %r9
 2612 23d3 41B80000 		movl	$0, %r8d
 2612      0000
 2613 23d9 B9010000 		movl	$1, %ecx
 2613      00
 2614 23de 4889C7   		movq	%rax, %rdi
 2615 23e1 E8000000 		call	flSingleBitPortAccess@PLT
 2615      00
 2616 23e6 898590F1 		movl	%eax, -3696(%rbp)
 2616      FFFF
 411:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2617              		.loc 2 411 0
 2618 23ec 83BD90F1 		cmpl	$0, -3696(%rbp)
 2618      FFFF00
 2619 23f3 7427     		je	.L140
 2620              		.loc 2 411 0 is_stmt 0 discriminator 1
 2621 23f5 488B8548 		movq	-3768(%rbp), %rax
 2621      F1FFFF
 2622 23fc 488D3500 		leaq	.LC18(%rip), %rsi
 2622      000000
 2623 2403 4889C7   		movq	%rax, %rdi
 2624 2406 E8000000 		call	errPrefix@PLT
 2624      00
 2625 240b 8B8590F1 		movl	-3696(%rbp), %eax
 2625      FFFF
 2626 2411 898588F1 		movl	%eax, -3704(%rbp)
 2626      FFFF
 2627 2417 E9950300 		jmp	.L72
 2627      00
 2628              	.L140:
 412:prog.c        **** 	do {
 413:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2629              		.loc 2 413 0 is_stmt 1
 2630 241c 0FB69582 		movzbl	-3710(%rbp), %edx
 2630      F1FFFF
 2631 2423 0FB6B581 		movzbl	-3711(%rbp), %esi
 2631      F1FFFF
 2632 242a 488BBD48 		movq	-3768(%rbp), %rdi
 2632      F1FFFF
 2633 2431 488D8D7A 		leaq	-3718(%rbp), %rcx
 2633      F1FFFF
 2634 2438 488B8568 		movq	-3736(%rbp), %rax
 2634      F1FFFF
 2635 243f 4989F9   		movq	%rdi, %r9
 2636 2442 4989C8   		movq	%rcx, %r8
 2637 2445 B9030000 		movl	$3, %ecx
 2637      00
 2638 244a 4889C7   		movq	%rax, %rdi
 2639 244d E8000000 		call	flSingleBitPortAccess@PLT
 2639      00
 2640 2452 898590F1 		movl	%eax, -3696(%rbp)
 2640      FFFF
 414:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2641              		.loc 2 414 0
 2642 2458 83BD90F1 		cmpl	$0, -3696(%rbp)
 2642      FFFF00
 2643 245f 7427     		je	.L141
 2644              		.loc 2 414 0 is_stmt 0 discriminator 1
 2645 2461 488B8548 		movq	-3768(%rbp), %rax
 2645      F1FFFF
 2646 2468 488D3500 		leaq	.LC18(%rip), %rsi
 2646      000000
 2647 246f 4889C7   		movq	%rax, %rdi
 2648 2472 E8000000 		call	errPrefix@PLT
 2648      00
 2649 2477 8B8590F1 		movl	-3696(%rbp), %eax
 2649      FFFF
 2650 247d 898588F1 		movl	%eax, -3704(%rbp)
 2650      FFFF
 2651 2483 E9290300 		jmp	.L72
 2651      00
 2652              	.L141:
 415:prog.c        **** 	} while ( !initStatus );
 2653              		.loc 2 415 0 is_stmt 1
 2654 2488 0FB6857A 		movzbl	-3718(%rbp), %eax
 2654      F1FFFF
 2655 248f 84C0     		testb	%al, %al
 2656 2491 7489     		je	.L140
 416:prog.c        **** 
 417:prog.c        **** 	// Write the programming file into the FPGA
 418:prog.c        **** 	fStatus = dataWrite(handle, progOp, data, len, lookupTable, error);
 2657              		.loc 2 418 0
 2658 2493 4C8B8548 		movq	-3768(%rbp), %r8
 2658      F1FFFF
 2659 249a 488DBDF0 		leaq	-272(%rbp), %rdi
 2659      FEFFFF
 2660 24a1 8B8D60F1 		movl	-3744(%rbp), %ecx
 2660      FFFF
 2661 24a7 488B9550 		movq	-3760(%rbp), %rdx
 2661      F1FFFF
 2662 24ae 8BB564F1 		movl	-3740(%rbp), %esi
 2662      FFFF
 2663 24b4 488B8568 		movq	-3736(%rbp), %rax
 2663      F1FFFF
 2664 24bb 4D89C1   		movq	%r8, %r9
 2665 24be 4989F8   		movq	%rdi, %r8
 2666 24c1 4889C7   		movq	%rax, %rdi
 2667 24c4 E8CCE3FF 		call	dataWrite
 2667      FF
 2668 24c9 898590F1 		movl	%eax, -3696(%rbp)
 2668      FFFF
 419:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2669              		.loc 2 419 0
 2670 24cf 83BD90F1 		cmpl	$0, -3696(%rbp)
 2670      FFFF00
 2671 24d6 7427     		je	.L142
 2672              		.loc 2 419 0 is_stmt 0 discriminator 1
 2673 24d8 488B8548 		movq	-3768(%rbp), %rax
 2673      F1FFFF
 2674 24df 488D3500 		leaq	.LC18(%rip), %rsi
 2674      000000
 2675 24e6 4889C7   		movq	%rax, %rdi
 2676 24e9 E8000000 		call	errPrefix@PLT
 2676      00
 2677 24ee 8B8590F1 		movl	-3696(%rbp), %eax
 2677      FFFF
 2678 24f4 898588F1 		movl	%eax, -3704(%rbp)
 2678      FFFF
 2679 24fa E9B20200 		jmp	.L72
 2679      00
 2680              	.L142:
 420:prog.c        **** 
 421:prog.c        **** 	i = 0;
 2681              		.loc 2 421 0 is_stmt 1
 2682 24ff C7858CF1 		movl	$0, -3700(%rbp)
 2682      FFFF0000 
 2682      0000
 2683              	.L150:
 422:prog.c        **** 	for ( ; ; ) {
 423:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2684              		.loc 2 423 0
 2685 2509 0FB69582 		movzbl	-3710(%rbp), %edx
 2685      F1FFFF
 2686 2510 0FB6B581 		movzbl	-3711(%rbp), %esi
 2686      F1FFFF
 2687 2517 488BBD48 		movq	-3768(%rbp), %rdi
 2687      F1FFFF
 2688 251e 488D8D7A 		leaq	-3718(%rbp), %rcx
 2688      F1FFFF
 2689 2525 488B8568 		movq	-3736(%rbp), %rax
 2689      F1FFFF
 2690 252c 4989F9   		movq	%rdi, %r9
 2691 252f 4989C8   		movq	%rcx, %r8
 2692 2532 B9030000 		movl	$3, %ecx
 2692      00
 2693 2537 4889C7   		movq	%rax, %rdi
 2694 253a E8000000 		call	flSingleBitPortAccess@PLT
 2694      00
 2695 253f 898590F1 		movl	%eax, -3696(%rbp)
 2695      FFFF
 424:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2696              		.loc 2 424 0
 2697 2545 83BD90F1 		cmpl	$0, -3696(%rbp)
 2697      FFFF00
 2698 254c 7427     		je	.L143
 2699              		.loc 2 424 0 is_stmt 0 discriminator 1
 2700 254e 488B8548 		movq	-3768(%rbp), %rax
 2700      F1FFFF
 2701 2555 488D3500 		leaq	.LC18(%rip), %rsi
 2701      000000
 2702 255c 4889C7   		movq	%rax, %rdi
 2703 255f E8000000 		call	errPrefix@PLT
 2703      00
 2704 2564 8B8590F1 		movl	-3696(%rbp), %eax
 2704      FFFF
 2705 256a 898588F1 		movl	%eax, -3704(%rbp)
 2705      FFFF
 2706 2570 E93C0200 		jmp	.L72
 2706      00
 2707              	.L143:
 425:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 2708              		.loc 2 425 0 is_stmt 1
 2709 2575 0FB69584 		movzbl	-3708(%rbp), %edx
 2709      F1FFFF
 2710 257c 0FB6B583 		movzbl	-3709(%rbp), %esi
 2710      F1FFFF
 2711 2583 488BBD48 		movq	-3768(%rbp), %rdi
 2711      F1FFFF
 2712 258a 488D8D7B 		leaq	-3717(%rbp), %rcx
 2712      F1FFFF
 2713 2591 488B8568 		movq	-3736(%rbp), %rax
 2713      F1FFFF
 2714 2598 4989F9   		movq	%rdi, %r9
 2715 259b 4989C8   		movq	%rcx, %r8
 2716 259e B9030000 		movl	$3, %ecx
 2716      00
 2717 25a3 4889C7   		movq	%rax, %rdi
 2718 25a6 E8000000 		call	flSingleBitPortAccess@PLT
 2718      00
 2719 25ab 898590F1 		movl	%eax, -3696(%rbp)
 2719      FFFF
 426:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2720              		.loc 2 426 0
 2721 25b1 83BD90F1 		cmpl	$0, -3696(%rbp)
 2721      FFFF00
 2722 25b8 7427     		je	.L144
 2723              		.loc 2 426 0 is_stmt 0 discriminator 1
 2724 25ba 488B8548 		movq	-3768(%rbp), %rax
 2724      F1FFFF
 2725 25c1 488D3500 		leaq	.LC18(%rip), %rsi
 2725      000000
 2726 25c8 4889C7   		movq	%rax, %rdi
 2727 25cb E8000000 		call	errPrefix@PLT
 2727      00
 2728 25d0 8B8590F1 		movl	-3696(%rbp), %eax
 2728      FFFF
 2729 25d6 898588F1 		movl	%eax, -3704(%rbp)
 2729      FFFF
 2730 25dc E9D00100 		jmp	.L72
 2730      00
 2731              	.L144:
 427:prog.c        **** 		if ( doneStatus ) {
 2732              		.loc 2 427 0 is_stmt 1
 2733 25e1 0FB6857B 		movzbl	-3717(%rbp), %eax
 2733      F1FFFF
 2734 25e8 84C0     		testb	%al, %al
 2735 25ea 0F85D800 		jne	.L159
 2735      0000
 428:prog.c        **** 			// If DONE goes high, we've finished.
 429:prog.c        **** 			break;
 430:prog.c        **** 		} else if ( initStatus ) {
 2736              		.loc 2 430 0
 2737 25f0 0FB6857A 		movzbl	-3718(%rbp), %eax
 2737      F1FFFF
 2738 25f7 84C0     		testb	%al, %al
 2739 25f9 0F84A400 		je	.L147
 2739      0000
 431:prog.c        **** 			// If DONE remains low and INIT remains high, we probably just need more clocks
 432:prog.c        **** 			i++;
 2740              		.loc 2 432 0
 2741 25ff 83858CF1 		addl	$1, -3700(%rbp)
 2741      FFFF01
 433:prog.c        **** 			CHECK_STATUS(i == 10, FL_PROG_ERR, cleanup, "xProgram(): DONE did not assert");
 2742              		.loc 2 433 0
 2743 2606 83BD8CF1 		cmpl	$10, -3700(%rbp)
 2743      FFFF0A
 2744 260d 7525     		jne	.L148
 2745              		.loc 2 433 0 is_stmt 0 discriminator 1
 2746 260f 488B8548 		movq	-3768(%rbp), %rax
 2746      F1FFFF
 2747 2616 488D3500 		leaq	.LC21(%rip), %rsi
 2747      000000
 2748 261d 4889C7   		movq	%rax, %rdi
 2749 2620 E8000000 		call	errPrefix@PLT
 2749      00
 2750 2625 C78588F1 		movl	$20, -3704(%rbp)
 2750      FFFF1400 
 2750      0000
 2751 262f E97D0100 		jmp	.L72
 2751      00
 2752              	.L148:
 434:prog.c        **** 			fStatus = dataWrite(handle, progOp, zeroBlock, 64, lookupTable, error);
 2753              		.loc 2 434 0 is_stmt 1
 2754 2634 488BBD48 		movq	-3768(%rbp), %rdi
 2754      F1FFFF
 2755 263b 488D8DF0 		leaq	-272(%rbp), %rcx
 2755      FEFFFF
 2756 2642 488D95B0 		leaq	-336(%rbp), %rdx
 2756      FEFFFF
 2757 2649 8BB564F1 		movl	-3740(%rbp), %esi
 2757      FFFF
 2758 264f 488B8568 		movq	-3736(%rbp), %rax
 2758      F1FFFF
 2759 2656 4989F9   		movq	%rdi, %r9
 2760 2659 4989C8   		movq	%rcx, %r8
 2761 265c B9400000 		movl	$64, %ecx
 2761      00
 2762 2661 4889C7   		movq	%rax, %rdi
 2763 2664 E82CE2FF 		call	dataWrite
 2763      FF
 2764 2669 898590F1 		movl	%eax, -3696(%rbp)
 2764      FFFF
 435:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2765              		.loc 2 435 0
 2766 266f 83BD90F1 		cmpl	$0, -3696(%rbp)
 2766      FFFF00
 2767 2676 0F848DFE 		je	.L150
 2767      FFFF
 2768              		.loc 2 435 0 is_stmt 0 discriminator 1
 2769 267c 488B8548 		movq	-3768(%rbp), %rax
 2769      F1FFFF
 2770 2683 488D3500 		leaq	.LC18(%rip), %rsi
 2770      000000
 2771 268a 4889C7   		movq	%rax, %rdi
 2772 268d E8000000 		call	errPrefix@PLT
 2772      00
 2773 2692 8B8590F1 		movl	-3696(%rbp), %eax
 2773      FFFF
 2774 2698 898588F1 		movl	%eax, -3704(%rbp)
 2774      FFFF
 2775 269e E90E0100 		jmp	.L72
 2775      00
 2776              	.L147:
 436:prog.c        **** 		} else {
 437:prog.c        **** 			// If DONE remains low and INIT goes low, an error occurred
 438:prog.c        **** 			CHECK_STATUS(
 2777              		.loc 2 438 0 is_stmt 1 discriminator 1
 2778 26a3 488B8548 		movq	-3768(%rbp), %rax
 2778      F1FFFF
 2779 26aa 488D3500 		leaq	.LC22(%rip), %rsi
 2779      000000
 2780 26b1 4889C7   		movq	%rax, %rdi
 2781 26b4 E8000000 		call	errPrefix@PLT
 2781      00
 2782 26b9 C78588F1 		movl	$20, -3704(%rbp)
 2782      FFFF1400 
 2782      0000
 2783 26c3 E9E90000 		jmp	.L72
 2783      00
 2784              	.L159:
 429:prog.c        **** 		} else if ( initStatus ) {
 2785              		.loc 2 429 0
 2786 26c8 90       		nop
 439:prog.c        **** 				true, FL_PROG_ERR, cleanup,
 440:prog.c        **** 				"xProgram(): INIT unexpectedly low (CRC error during config)");
 441:prog.c        **** 		}
 442:prog.c        **** 	}
 443:prog.c        **** 
 444:prog.c        **** 	// Make all specified pins inputs; leave INIT & DONE as inputs and leave PROG driven high
 445:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 2787              		.loc 2 445 0
 2788 26c9 C6857CF1 		movb	$0, -3716(%rbp)
 2788      FFFF00
 2789 26d0 E9CE0000 		jmp	.L151
 2789      00
 2790              	.L155:
 446:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2791              		.loc 2 446 0
 2792 26d5 C6857DF1 		movb	$0, -3715(%rbp)
 2792      FFFF00
 2793 26dc E9A50000 		jmp	.L152
 2793      00
 2794              	.L154:
 447:prog.c        **** 			thisPin = pinMap[port][bit];
 2795              		.loc 2 447 0
 2796 26e1 0FB6957C 		movzbl	-3716(%rbp), %edx
 2796      F1FFFF
 2797 26e8 0FB6857D 		movzbl	-3715(%rbp), %eax
 2797      F1FFFF
 2798 26ef 4898     		cltq
 2799 26f1 4863D2   		movslq	%edx, %rdx
 2800 26f4 48C1E205 		salq	$5, %rdx
 2801 26f8 4801D0   		addq	%rdx, %rax
 2802 26fb 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 2802      F1FFFF
 2803 2702 898594F1 		movl	%eax, -3692(%rbp)
 2803      FFFF
 448:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 2804              		.loc 2 448 0
 2805 2708 83BD94F1 		cmpl	$0, -3692(%rbp)
 2805      FFFF00
 2806 270f 7465     		je	.L153
 449:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, PIN_INPUT, NULL, error);
 2807              		.loc 2 449 0
 2808 2711 0FB6957D 		movzbl	-3715(%rbp), %edx
 2808      F1FFFF
 2809 2718 0FB6B57C 		movzbl	-3716(%rbp), %esi
 2809      F1FFFF
 2810 271f 488B8D48 		movq	-3768(%rbp), %rcx
 2810      F1FFFF
 2811 2726 488B8568 		movq	-3736(%rbp), %rax
 2811      F1FFFF
 2812 272d 4989C9   		movq	%rcx, %r9
 2813 2730 41B80000 		movl	$0, %r8d
 2813      0000
 2814 2736 B9030000 		movl	$3, %ecx
 2814      00
 2815 273b 4889C7   		movq	%rax, %rdi
 2816 273e E8000000 		call	flSingleBitPortAccess@PLT
 2816      00
 2817 2743 898590F1 		movl	%eax, -3696(%rbp)
 2817      FFFF
 450:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2818              		.loc 2 450 0
 2819 2749 83BD90F1 		cmpl	$0, -3696(%rbp)
 2819      FFFF00
 2820 2750 7424     		je	.L153
 2821              		.loc 2 450 0 is_stmt 0 discriminator 1
 2822 2752 488B8548 		movq	-3768(%rbp), %rax
 2822      F1FFFF
 2823 2759 488D3500 		leaq	.LC18(%rip), %rsi
 2823      000000
 2824 2760 4889C7   		movq	%rax, %rdi
 2825 2763 E8000000 		call	errPrefix@PLT
 2825      00
 2826 2768 8B8590F1 		movl	-3696(%rbp), %eax
 2826      FFFF
 2827 276e 898588F1 		movl	%eax, -3704(%rbp)
 2827      FFFF
 2828 2774 EB3B     		jmp	.L72
 2829              	.L153:
 446:prog.c        **** 			thisPin = pinMap[port][bit];
 2830              		.loc 2 446 0 is_stmt 1 discriminator 2
 2831 2776 0FB6857D 		movzbl	-3715(%rbp), %eax
 2831      F1FFFF
 2832 277d 83C001   		addl	$1, %eax
 2833 2780 88857DF1 		movb	%al, -3715(%rbp)
 2833      FFFF
 2834              	.L152:
 446:prog.c        **** 			thisPin = pinMap[port][bit];
 2835              		.loc 2 446 0 is_stmt 0 discriminator 1
 2836 2786 80BD7DF1 		cmpb	$31, -3715(%rbp)
 2836      FFFF1F
 2837 278d 0F864EFF 		jbe	.L154
 2837      FFFF
 445:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2838              		.loc 2 445 0 is_stmt 1 discriminator 2
 2839 2793 0FB6857C 		movzbl	-3716(%rbp), %eax
 2839      F1FFFF
 2840 279a 83C001   		addl	$1, %eax
 2841 279d 88857CF1 		movb	%al, -3716(%rbp)
 2841      FFFF
 2842              	.L151:
 445:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2843              		.loc 2 445 0 is_stmt 0 discriminator 1
 2844 27a3 80BD7CF1 		cmpb	$25, -3716(%rbp)
 2844      FFFF19
 2845 27aa 0F8625FF 		jbe	.L155
 2845      FFFF
 451:prog.c        **** 			}
 452:prog.c        **** 		}
 453:prog.c        **** 	}
 454:prog.c        **** cleanup:
 2846              		.loc 2 454 0 is_stmt 1
 2847 27b0 90       		nop
 2848              	.L72:
 455:prog.c        **** 	return retVal;
 2849              		.loc 2 455 0
 2850 27b1 8B8588F1 		movl	-3704(%rbp), %eax
 2850      FFFF
 456:prog.c        **** }
 2851              		.loc 2 456 0
 2852 27b7 488B75F8 		movq	-8(%rbp), %rsi
 2853 27bb 64483334 		xorq	%fs:40, %rsi
 2853      25280000 
 2853      00
 2854 27c4 7405     		je	.L157
 2855 27c6 E8000000 		call	__stack_chk_fail@PLT
 2855      00
 2856              	.L157:
 2857 27cb C9       		leave
 2858              		.cfi_def_cfa 7, 8
 2859 27cc C3       		ret
 2860              		.cfi_endproc
 2861              	.LFE12:
 2863              		.section	.rodata
 2864 049c 00000000 		.align 8
 2865              	.LC23:
 2866 04a0 6150726F 		.string	"aProgram(): Unexpected end of config string:\n  %s\n  %s^"
 2866      6772616D 
 2866      28293A20 
 2866      556E6578 
 2866      70656374 
 2867              		.align 8
 2868              	.LC24:
 2869 04d8 6150726F 		.string	"aProgram(): Expecting ':':\n  %s\n  %s^"
 2869      6772616D 
 2869      28293A20 
 2869      45787065 
 2869      6374696E 
 2870 04fe 0000     		.align 8
 2871              	.LC25:
 2872 0500 6150726F 		.string	"aProgram(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 2872      6772616D 
 2872      28293A20 
 2872      506F7274 
 2872      20697320 
 2873 0543 00000000 		.align 8
 2873      00
 2874              	.LC26:
 2875 0548 6150726F 		.string	"aProgram(): Bit number is not valid:\n  %s\n  %s^"
 2875      6772616D 
 2875      28293A20 
 2875      42697420 
 2875      6E756D62 
 2876              		.align 8
 2877              	.LC27:
 2878 0578 6150726F 		.string	"aProgram(): port '%c%d' is already used:\n  %s\n  %s^"
 2878      6772616D 
 2878      28293A20 
 2878      706F7274 
 2878      20272563 
 2879              	.LC28:
 2880 05ac 6150726F 		.string	"aProgram()"
 2880      6772616D 
 2880      282900
 2881 05b7 00       		.align 8
 2882              	.LC29:
 2883 05b8 6150726F 		.string	"aProgram(): Expecting ']':\n  %s\n  %s^"
 2883      6772616D 
 2883      28293A20 
 2883      45787065 
 2883      6374696E 
 2884 05de 0000     		.align 8
 2885              	.LC30:
 2886 05e0 6150726F 		.string	"aProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^"
 2886      6772616D 
 2886      28293A20 
 2886      45787065 
 2886      6374696E 
 2887 0617 00       		.align 8
 2888              	.LC31:
 2889 0618 6150726F 		.string	"aProgram(): CONF_DONE remained low (CRC error during config)"
 2889      6772616D 
 2889      28293A20 
 2889      434F4E46 
 2889      5F444F4E 
 2890              		.text
 2892              	aProgram:
 2893              	.LFB13:
 457:prog.c        **** 
 458:prog.c        **** // This function performs a "passive" serial programming operation on Altera FPGAs.
 459:prog.c        **** //
 460:prog.c        **** // Called by:
 461:prog.c        **** //   flProgramBlob() -> xProgram()
 462:prog.c        **** //
 463:prog.c        **** static FLStatus aProgram(struct FLContext *handle, const char *portConfig, const uint8 *data, uint3
 2894              		.loc 2 463 0
 2895              		.cfi_startproc
 2896 27cd 55       		pushq	%rbp
 2897              		.cfi_def_cfa_offset 16
 2898              		.cfi_offset 6, -16
 2899 27ce 4889E5   		movq	%rsp, %rbp
 2900              		.cfi_def_cfa_register 6
 2901 27d1 4881EC70 		subq	$3696, %rsp
 2901      0E0000
 2902 27d8 4889BDB8 		movq	%rdi, -3656(%rbp)
 2902      F1FFFF
 2903 27df 4889B5B0 		movq	%rsi, -3664(%rbp)
 2903      F1FFFF
 2904 27e6 488995A8 		movq	%rdx, -3672(%rbp)
 2904      F1FFFF
 2905 27ed 898DA4F1 		movl	%ecx, -3676(%rbp)
 2905      FFFF
 2906 27f3 4C898598 		movq	%r8, -3688(%rbp)
 2906      F1FFFF
 2907              		.loc 2 463 0
 2908 27fa 64488B04 		movq	%fs:40, %rax
 2908      25280000 
 2908      00
 2909 2803 488945F8 		movq	%rax, -8(%rbp)
 2910 2807 31C0     		xorl	%eax, %eax
 464:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 2911              		.loc 2 464 0
 2912 2809 C785CCF1 		movl	$0, -3636(%rbp)
 2912      FFFF0000 
 2912      0000
 465:prog.c        **** 	FLStatus fStatus;
 466:prog.c        **** 	uint8 ncfgPort, ncfgBit;
 467:prog.c        **** 	uint8 donePort, doneBit;
 468:prog.c        **** 	uint8 dclkPort, dclkBit;
 469:prog.c        **** 	uint8 dataPort, dataBit;
 470:prog.c        **** 	uint8 port, bit;
 471:prog.c        **** 	uint8 doneStatus;
 472:prog.c        **** 	const char *ptr = portConfig + 2;
 2913              		.loc 2 472 0
 2914 2813 488B85B0 		movq	-3664(%rbp), %rax
 2914      F1FFFF
 2915 281a 4883C002 		addq	$2, %rax
 2916 281e 488985D8 		movq	%rax, -3624(%rbp)
 2916      F1FFFF
 473:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 2917              		.loc 2 473 0
 2918 2825 488D95E0 		leaq	-3616(%rbp), %rdx
 2918      F1FFFF
 2919 282c B8000000 		movl	$0, %eax
 2919      00
 2920 2831 B9A00100 		movl	$416, %ecx
 2920      00
 2921 2836 4889D7   		movq	%rdx, %rdi
 2922 2839 F348AB   		rep stosq
 474:prog.c        **** 	PinConfig thisPin;
 475:prog.c        **** 	uint8 lookupTable[256];
 476:prog.c        **** 	const uint8 bitOrder[8] = {0,1,2,3,4,5,6,7};
 2923              		.loc 2 476 0
 2924 283c C685E8FE 		movb	$0, -280(%rbp)
 2924      FFFF00
 2925 2843 C685E9FE 		movb	$1, -279(%rbp)
 2925      FFFF01
 2926 284a C685EAFE 		movb	$2, -278(%rbp)
 2926      FFFF02
 2927 2851 C685EBFE 		movb	$3, -277(%rbp)
 2927      FFFF03
 2928 2858 C685ECFE 		movb	$4, -276(%rbp)
 2928      FFFF04
 2929 285f C685EDFE 		movb	$5, -275(%rbp)
 2929      FFFF05
 2930 2866 C685EEFE 		movb	$6, -274(%rbp)
 2930      FFFF06
 2931 286d C685EFFE 		movb	$7, -273(%rbp)
 2931      FFFF07
 477:prog.c        **** 	char ch;
 478:prog.c        **** 	EXPECT_CHAR(':', "aProgram");
 2932              		.loc 2 478 0
 2933 2874 488B85D8 		movq	-3624(%rbp), %rax
 2933      F1FFFF
 2934 287b 0FB600   		movzbl	(%rax), %eax
 2935 287e 8885C3F1 		movb	%al, -3645(%rbp)
 2935      FFFF
 2936 2884 80BDC3F1 		cmpb	$0, -3645(%rbp)
 2936      FFFF00
 2937 288b 7553     		jne	.L161
 2938              		.loc 2 478 0 is_stmt 0 discriminator 1
 2939 288d 488B85D8 		movq	-3624(%rbp), %rax
 2939      F1FFFF
 2940 2894 4889C2   		movq	%rax, %rdx
 2941 2897 488B85B0 		movq	-3664(%rbp), %rax
 2941      F1FFFF
 2942 289e 4829C2   		subq	%rax, %rdx
 2943 28a1 4889D0   		movq	%rdx, %rax
 2944 28a4 4889C7   		movq	%rax, %rdi
 2945 28a7 E80AD9FF 		call	spaces
 2945      FF
 2946 28ac 4889C1   		movq	%rax, %rcx
 2947 28af 488B95B0 		movq	-3664(%rbp), %rdx
 2947      F1FFFF
 2948 28b6 488B8598 		movq	-3688(%rbp), %rax
 2948      F1FFFF
 2949 28bd 488D3500 		leaq	.LC23(%rip), %rsi
 2949      000000
 2950 28c4 4889C7   		movq	%rax, %rdi
 2951 28c7 B8000000 		movl	$0, %eax
 2951      00
 2952 28cc E8000000 		call	errRender@PLT
 2952      00
 2953 28d1 C785CCF1 		movl	$11, -3636(%rbp)
 2953      FFFF0B00 
 2953      0000
 2954 28db E99A1200 		jmp	.L162
 2954      00
 2955              	.L161:
 2956              		.loc 2 478 0 discriminator 2
 2957 28e0 80BDC3F1 		cmpb	$58, -3645(%rbp)
 2957      FFFF3A
 2958 28e7 7453     		je	.L163
 2959              		.loc 2 478 0 discriminator 3
 2960 28e9 488B85D8 		movq	-3624(%rbp), %rax
 2960      F1FFFF
 2961 28f0 4889C2   		movq	%rax, %rdx
 2962 28f3 488B85B0 		movq	-3664(%rbp), %rax
 2962      F1FFFF
 2963 28fa 4829C2   		subq	%rax, %rdx
 2964 28fd 4889D0   		movq	%rdx, %rax
 2965 2900 4889C7   		movq	%rax, %rdi
 2966 2903 E8AED8FF 		call	spaces
 2966      FF
 2967 2908 4889C1   		movq	%rax, %rcx
 2968 290b 488B95B0 		movq	-3664(%rbp), %rdx
 2968      F1FFFF
 2969 2912 488B8598 		movq	-3688(%rbp), %rax
 2969      F1FFFF
 2970 2919 488D3500 		leaq	.LC24(%rip), %rsi
 2970      000000
 2971 2920 4889C7   		movq	%rax, %rdi
 2972 2923 B8000000 		movl	$0, %eax
 2972      00
 2973 2928 E8000000 		call	errRender@PLT
 2973      00
 2974 292d C785CCF1 		movl	$11, -3636(%rbp)
 2974      FFFF0B00 
 2974      0000
 2975 2937 E93E1200 		jmp	.L162
 2975      00
 2976              	.L163:
 2977              		.loc 2 478 0 discriminator 4
 2978 293c 488B85D8 		movq	-3624(%rbp), %rax
 2978      F1FFFF
 2979 2943 4883C001 		addq	$1, %rax
 2980 2947 488985D8 		movq	%rax, -3624(%rbp)
 2980      F1FFFF
 479:prog.c        **** 
 480:prog.c        **** 	GET_PAIR(ncfgPort, ncfgBit, "aProgram");
 2981              		.loc 2 480 0 is_stmt 1 discriminator 4
 2982 294e 488B85D8 		movq	-3624(%rbp), %rax
 2982      F1FFFF
 2983 2955 0FB600   		movzbl	(%rax), %eax
 2984 2958 8885C3F1 		movb	%al, -3645(%rbp)
 2984      FFFF
 2985 295e 80BDC3F1 		cmpb	$0, -3645(%rbp)
 2985      FFFF00
 2986 2965 7553     		jne	.L164
 2987              		.loc 2 480 0 is_stmt 0 discriminator 1
 2988 2967 488B85D8 		movq	-3624(%rbp), %rax
 2988      F1FFFF
 2989 296e 4889C2   		movq	%rax, %rdx
 2990 2971 488B85B0 		movq	-3664(%rbp), %rax
 2990      F1FFFF
 2991 2978 4829C2   		subq	%rax, %rdx
 2992 297b 4889D0   		movq	%rdx, %rax
 2993 297e 4889C7   		movq	%rax, %rdi
 2994 2981 E830D8FF 		call	spaces
 2994      FF
 2995 2986 4889C1   		movq	%rax, %rcx
 2996 2989 488B95B0 		movq	-3664(%rbp), %rdx
 2996      F1FFFF
 2997 2990 488B8598 		movq	-3688(%rbp), %rax
 2997      F1FFFF
 2998 2997 488D3500 		leaq	.LC23(%rip), %rsi
 2998      000000
 2999 299e 4889C7   		movq	%rax, %rdi
 3000 29a1 B8000000 		movl	$0, %eax
 3000      00
 3001 29a6 E8000000 		call	errRender@PLT
 3001      00
 3002 29ab C785CCF1 		movl	$11, -3636(%rbp)
 3002      FFFF0B00 
 3002      0000
 3003 29b5 E9C01100 		jmp	.L162
 3003      00
 3004              	.L164:
 3005              		.loc 2 480 0 discriminator 2
 3006 29ba 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3006      FFFF40
 3007 29c1 7E09     		jle	.L165
 3008              		.loc 2 480 0 discriminator 4
 3009 29c3 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3009      FFFF5A
 3010 29ca 7E53     		jle	.L166
 3011              	.L165:
 3012              		.loc 2 480 0 discriminator 5
 3013 29cc 488B85D8 		movq	-3624(%rbp), %rax
 3013      F1FFFF
 3014 29d3 4889C2   		movq	%rax, %rdx
 3015 29d6 488B85B0 		movq	-3664(%rbp), %rax
 3015      F1FFFF
 3016 29dd 4829C2   		subq	%rax, %rdx
 3017 29e0 4889D0   		movq	%rdx, %rax
 3018 29e3 4889C7   		movq	%rax, %rdi
 3019 29e6 E8CBD7FF 		call	spaces
 3019      FF
 3020 29eb 4889C1   		movq	%rax, %rcx
 3021 29ee 488B95B0 		movq	-3664(%rbp), %rdx
 3021      F1FFFF
 3022 29f5 488B8598 		movq	-3688(%rbp), %rax
 3022      F1FFFF
 3023 29fc 488D3500 		leaq	.LC25(%rip), %rsi
 3023      000000
 3024 2a03 4889C7   		movq	%rax, %rdi
 3025 2a06 B8000000 		movl	$0, %eax
 3025      00
 3026 2a0b E8000000 		call	errRender@PLT
 3026      00
 3027 2a10 C785CCF1 		movl	$11, -3636(%rbp)
 3027      FFFF0B00 
 3027      0000
 3028 2a1a E95B1100 		jmp	.L162
 3028      00
 3029              	.L166:
 3030              		.loc 2 480 0 discriminator 6
 3031 2a1f 0FB685C3 		movzbl	-3645(%rbp), %eax
 3031      F1FFFF
 3032 2a26 83E841   		subl	$65, %eax
 3033 2a29 8885C4F1 		movb	%al, -3644(%rbp)
 3033      FFFF
 3034 2a2f 488B85D8 		movq	-3624(%rbp), %rax
 3034      F1FFFF
 3035 2a36 4883C001 		addq	$1, %rax
 3036 2a3a 488985D8 		movq	%rax, -3624(%rbp)
 3036      F1FFFF
 3037 2a41 488B85D8 		movq	-3624(%rbp), %rax
 3037      F1FFFF
 3038 2a48 0FB600   		movzbl	(%rax), %eax
 3039 2a4b 8885C3F1 		movb	%al, -3645(%rbp)
 3039      FFFF
 3040 2a51 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3040      FFFF00
 3041 2a58 7553     		jne	.L167
 3042              		.loc 2 480 0 discriminator 7
 3043 2a5a 488B85D8 		movq	-3624(%rbp), %rax
 3043      F1FFFF
 3044 2a61 4889C2   		movq	%rax, %rdx
 3045 2a64 488B85B0 		movq	-3664(%rbp), %rax
 3045      F1FFFF
 3046 2a6b 4829C2   		subq	%rax, %rdx
 3047 2a6e 4889D0   		movq	%rdx, %rax
 3048 2a71 4889C7   		movq	%rax, %rdi
 3049 2a74 E83DD7FF 		call	spaces
 3049      FF
 3050 2a79 4889C1   		movq	%rax, %rcx
 3051 2a7c 488B95B0 		movq	-3664(%rbp), %rdx
 3051      F1FFFF
 3052 2a83 488B8598 		movq	-3688(%rbp), %rax
 3052      F1FFFF
 3053 2a8a 488D3500 		leaq	.LC23(%rip), %rsi
 3053      000000
 3054 2a91 4889C7   		movq	%rax, %rdi
 3055 2a94 B8000000 		movl	$0, %eax
 3055      00
 3056 2a99 E8000000 		call	errRender@PLT
 3056      00
 3057 2a9e C785CCF1 		movl	$11, -3636(%rbp)
 3057      FFFF0B00 
 3057      0000
 3058 2aa8 E9CD1000 		jmp	.L162
 3058      00
 3059              	.L167:
 3060              		.loc 2 480 0 discriminator 8
 3061 2aad 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3061      FFFF2F
 3062 2ab4 7E09     		jle	.L168
 3063              		.loc 2 480 0 discriminator 10
 3064 2ab6 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3064      FFFF39
 3065 2abd 7E53     		jle	.L169
 3066              	.L168:
 3067              		.loc 2 480 0 discriminator 11
 3068 2abf 488B85D8 		movq	-3624(%rbp), %rax
 3068      F1FFFF
 3069 2ac6 4889C2   		movq	%rax, %rdx
 3070 2ac9 488B85B0 		movq	-3664(%rbp), %rax
 3070      F1FFFF
 3071 2ad0 4829C2   		subq	%rax, %rdx
 3072 2ad3 4889D0   		movq	%rdx, %rax
 3073 2ad6 4889C7   		movq	%rax, %rdi
 3074 2ad9 E8D8D6FF 		call	spaces
 3074      FF
 3075 2ade 4889C1   		movq	%rax, %rcx
 3076 2ae1 488B95B0 		movq	-3664(%rbp), %rdx
 3076      F1FFFF
 3077 2ae8 488B8598 		movq	-3688(%rbp), %rax
 3077      F1FFFF
 3078 2aef 488D3500 		leaq	.LC26(%rip), %rsi
 3078      000000
 3079 2af6 4889C7   		movq	%rax, %rdi
 3080 2af9 B8000000 		movl	$0, %eax
 3080      00
 3081 2afe E8000000 		call	errRender@PLT
 3081      00
 3082 2b03 C785CCF1 		movl	$11, -3636(%rbp)
 3082      FFFF0B00 
 3082      0000
 3083 2b0d E9681000 		jmp	.L162
 3083      00
 3084              	.L169:
 3085              		.loc 2 480 0 discriminator 12
 3086 2b12 488B85D8 		movq	-3624(%rbp), %rax
 3086      F1FFFF
 3087 2b19 488D8DD8 		leaq	-3624(%rbp), %rcx
 3087      F1FFFF
 3088 2b20 BA0A0000 		movl	$10, %edx
 3088      00
 3089 2b25 4889CE   		movq	%rcx, %rsi
 3090 2b28 4889C7   		movq	%rax, %rdi
 3091 2b2b E8000000 		call	strtoul@PLT
 3091      00
 3092 2b30 8885C5F1 		movb	%al, -3643(%rbp)
 3092      FFFF
 481:prog.c        **** 	SET_BIT(ncfgPort, ncfgBit, PIN_LOW, "aProgram");
 3093              		.loc 2 481 0 is_stmt 1 discriminator 12
 3094 2b36 0FB695C4 		movzbl	-3644(%rbp), %edx
 3094      F1FFFF
 3095 2b3d 0FB685C5 		movzbl	-3643(%rbp), %eax
 3095      F1FFFF
 3096 2b44 4898     		cltq
 3097 2b46 4863D2   		movslq	%edx, %rdx
 3098 2b49 48C1E205 		salq	$5, %rdx
 3099 2b4d 4801D0   		addq	%rdx, %rax
 3100 2b50 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3100      F1FFFF
 3101 2b57 85C0     		testl	%eax, %eax
 3102 2b59 7472     		je	.L170
 3103              		.loc 2 481 0 is_stmt 0 discriminator 1
 3104 2b5b 488B85D8 		movq	-3624(%rbp), %rax
 3104      F1FFFF
 3105 2b62 4889C2   		movq	%rax, %rdx
 3106 2b65 488B85B0 		movq	-3664(%rbp), %rax
 3106      F1FFFF
 3107 2b6c 4829C2   		subq	%rax, %rdx
 3108 2b6f 4889D0   		movq	%rdx, %rax
 3109 2b72 4883E801 		subq	$1, %rax
 3110 2b76 4889C7   		movq	%rax, %rdi
 3111 2b79 E838D6FF 		call	spaces
 3111      FF
 3112 2b7e 4889C7   		movq	%rax, %rdi
 3113 2b81 0FB695C5 		movzbl	-3643(%rbp), %edx
 3113      F1FFFF
 3114 2b88 0FB685C4 		movzbl	-3644(%rbp), %eax
 3114      F1FFFF
 3115 2b8f 8D7041   		leal	65(%rax), %esi
 3116 2b92 488B8DB0 		movq	-3664(%rbp), %rcx
 3116      F1FFFF
 3117 2b99 488B8598 		movq	-3688(%rbp), %rax
 3117      F1FFFF
 3118 2ba0 4989F9   		movq	%rdi, %r9
 3119 2ba3 4989C8   		movq	%rcx, %r8
 3120 2ba6 89D1     		movl	%edx, %ecx
 3121 2ba8 89F2     		movl	%esi, %edx
 3122 2baa 488D3500 		leaq	.LC27(%rip), %rsi
 3122      000000
 3123 2bb1 4889C7   		movq	%rax, %rdi
 3124 2bb4 B8000000 		movl	$0, %eax
 3124      00
 3125 2bb9 E8000000 		call	errRender@PLT
 3125      00
 3126 2bbe C785CCF1 		movl	$11, -3636(%rbp)
 3126      FFFF0B00 
 3126      0000
 3127 2bc8 E9AD0F00 		jmp	.L162
 3127      00
 3128              	.L170:
 3129              		.loc 2 481 0 discriminator 2
 3130 2bcd 0FB695C4 		movzbl	-3644(%rbp), %edx
 3130      F1FFFF
 3131 2bd4 0FB685C5 		movzbl	-3643(%rbp), %eax
 3131      F1FFFF
 3132 2bdb 4898     		cltq
 3133 2bdd 4863D2   		movslq	%edx, %rdx
 3134 2be0 48C1E205 		salq	$5, %rdx
 3135 2be4 4801D0   		addq	%rdx, %rax
 3136 2be7 C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3136      F1FFFF02 
 3136      000000
 482:prog.c        **** 
 483:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ncfgPort, ncfgBit, PIN_LOW, NULL, error); // nCONFIG is lo
 3137              		.loc 2 483 0 is_stmt 1 discriminator 2
 3138 2bf2 0FB695C5 		movzbl	-3643(%rbp), %edx
 3138      F1FFFF
 3139 2bf9 0FB6B5C4 		movzbl	-3644(%rbp), %esi
 3139      F1FFFF
 3140 2c00 488B8D98 		movq	-3688(%rbp), %rcx
 3140      F1FFFF
 3141 2c07 488B85B8 		movq	-3656(%rbp), %rax
 3141      F1FFFF
 3142 2c0e 4989C9   		movq	%rcx, %r9
 3143 2c11 41B80000 		movl	$0, %r8d
 3143      0000
 3144 2c17 B9020000 		movl	$2, %ecx
 3144      00
 3145 2c1c 4889C7   		movq	%rax, %rdi
 3146 2c1f E8000000 		call	flSingleBitPortAccess@PLT
 3146      00
 3147 2c24 8985D0F1 		movl	%eax, -3632(%rbp)
 3147      FFFF
 484:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3148              		.loc 2 484 0 discriminator 2
 3149 2c2a 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3149      FFFF00
 3150 2c31 7427     		je	.L171
 3151              		.loc 2 484 0 is_stmt 0 discriminator 1
 3152 2c33 488B8598 		movq	-3688(%rbp), %rax
 3152      F1FFFF
 3153 2c3a 488D3500 		leaq	.LC28(%rip), %rsi
 3153      000000
 3154 2c41 4889C7   		movq	%rax, %rdi
 3155 2c44 E8000000 		call	errPrefix@PLT
 3155      00
 3156 2c49 8B85D0F1 		movl	-3632(%rbp), %eax
 3156      FFFF
 3157 2c4f 8985CCF1 		movl	%eax, -3636(%rbp)
 3157      FFFF
 3158 2c55 E9200F00 		jmp	.L162
 3158      00
 3159              	.L171:
 485:prog.c        **** 
 486:prog.c        **** 	GET_PAIR(donePort, doneBit, "aProgram");
 3160              		.loc 2 486 0 is_stmt 1
 3161 2c5a 488B85D8 		movq	-3624(%rbp), %rax
 3161      F1FFFF
 3162 2c61 0FB600   		movzbl	(%rax), %eax
 3163 2c64 8885C3F1 		movb	%al, -3645(%rbp)
 3163      FFFF
 3164 2c6a 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3164      FFFF00
 3165 2c71 7553     		jne	.L172
 3166              		.loc 2 486 0 is_stmt 0 discriminator 1
 3167 2c73 488B85D8 		movq	-3624(%rbp), %rax
 3167      F1FFFF
 3168 2c7a 4889C2   		movq	%rax, %rdx
 3169 2c7d 488B85B0 		movq	-3664(%rbp), %rax
 3169      F1FFFF
 3170 2c84 4829C2   		subq	%rax, %rdx
 3171 2c87 4889D0   		movq	%rdx, %rax
 3172 2c8a 4889C7   		movq	%rax, %rdi
 3173 2c8d E824D5FF 		call	spaces
 3173      FF
 3174 2c92 4889C1   		movq	%rax, %rcx
 3175 2c95 488B95B0 		movq	-3664(%rbp), %rdx
 3175      F1FFFF
 3176 2c9c 488B8598 		movq	-3688(%rbp), %rax
 3176      F1FFFF
 3177 2ca3 488D3500 		leaq	.LC23(%rip), %rsi
 3177      000000
 3178 2caa 4889C7   		movq	%rax, %rdi
 3179 2cad B8000000 		movl	$0, %eax
 3179      00
 3180 2cb2 E8000000 		call	errRender@PLT
 3180      00
 3181 2cb7 C785CCF1 		movl	$11, -3636(%rbp)
 3181      FFFF0B00 
 3181      0000
 3182 2cc1 E9B40E00 		jmp	.L162
 3182      00
 3183              	.L172:
 3184              		.loc 2 486 0 discriminator 2
 3185 2cc6 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3185      FFFF40
 3186 2ccd 7E09     		jle	.L173
 3187              		.loc 2 486 0 discriminator 4
 3188 2ccf 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3188      FFFF5A
 3189 2cd6 7E53     		jle	.L174
 3190              	.L173:
 3191              		.loc 2 486 0 discriminator 5
 3192 2cd8 488B85D8 		movq	-3624(%rbp), %rax
 3192      F1FFFF
 3193 2cdf 4889C2   		movq	%rax, %rdx
 3194 2ce2 488B85B0 		movq	-3664(%rbp), %rax
 3194      F1FFFF
 3195 2ce9 4829C2   		subq	%rax, %rdx
 3196 2cec 4889D0   		movq	%rdx, %rax
 3197 2cef 4889C7   		movq	%rax, %rdi
 3198 2cf2 E8BFD4FF 		call	spaces
 3198      FF
 3199 2cf7 4889C1   		movq	%rax, %rcx
 3200 2cfa 488B95B0 		movq	-3664(%rbp), %rdx
 3200      F1FFFF
 3201 2d01 488B8598 		movq	-3688(%rbp), %rax
 3201      F1FFFF
 3202 2d08 488D3500 		leaq	.LC25(%rip), %rsi
 3202      000000
 3203 2d0f 4889C7   		movq	%rax, %rdi
 3204 2d12 B8000000 		movl	$0, %eax
 3204      00
 3205 2d17 E8000000 		call	errRender@PLT
 3205      00
 3206 2d1c C785CCF1 		movl	$11, -3636(%rbp)
 3206      FFFF0B00 
 3206      0000
 3207 2d26 E94F0E00 		jmp	.L162
 3207      00
 3208              	.L174:
 3209              		.loc 2 486 0 discriminator 6
 3210 2d2b 0FB685C3 		movzbl	-3645(%rbp), %eax
 3210      F1FFFF
 3211 2d32 83E841   		subl	$65, %eax
 3212 2d35 8885C6F1 		movb	%al, -3642(%rbp)
 3212      FFFF
 3213 2d3b 488B85D8 		movq	-3624(%rbp), %rax
 3213      F1FFFF
 3214 2d42 4883C001 		addq	$1, %rax
 3215 2d46 488985D8 		movq	%rax, -3624(%rbp)
 3215      F1FFFF
 3216 2d4d 488B85D8 		movq	-3624(%rbp), %rax
 3216      F1FFFF
 3217 2d54 0FB600   		movzbl	(%rax), %eax
 3218 2d57 8885C3F1 		movb	%al, -3645(%rbp)
 3218      FFFF
 3219 2d5d 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3219      FFFF00
 3220 2d64 7553     		jne	.L175
 3221              		.loc 2 486 0 discriminator 7
 3222 2d66 488B85D8 		movq	-3624(%rbp), %rax
 3222      F1FFFF
 3223 2d6d 4889C2   		movq	%rax, %rdx
 3224 2d70 488B85B0 		movq	-3664(%rbp), %rax
 3224      F1FFFF
 3225 2d77 4829C2   		subq	%rax, %rdx
 3226 2d7a 4889D0   		movq	%rdx, %rax
 3227 2d7d 4889C7   		movq	%rax, %rdi
 3228 2d80 E831D4FF 		call	spaces
 3228      FF
 3229 2d85 4889C1   		movq	%rax, %rcx
 3230 2d88 488B95B0 		movq	-3664(%rbp), %rdx
 3230      F1FFFF
 3231 2d8f 488B8598 		movq	-3688(%rbp), %rax
 3231      F1FFFF
 3232 2d96 488D3500 		leaq	.LC23(%rip), %rsi
 3232      000000
 3233 2d9d 4889C7   		movq	%rax, %rdi
 3234 2da0 B8000000 		movl	$0, %eax
 3234      00
 3235 2da5 E8000000 		call	errRender@PLT
 3235      00
 3236 2daa C785CCF1 		movl	$11, -3636(%rbp)
 3236      FFFF0B00 
 3236      0000
 3237 2db4 E9C10D00 		jmp	.L162
 3237      00
 3238              	.L175:
 3239              		.loc 2 486 0 discriminator 8
 3240 2db9 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3240      FFFF2F
 3241 2dc0 7E09     		jle	.L176
 3242              		.loc 2 486 0 discriminator 10
 3243 2dc2 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3243      FFFF39
 3244 2dc9 7E53     		jle	.L177
 3245              	.L176:
 3246              		.loc 2 486 0 discriminator 11
 3247 2dcb 488B85D8 		movq	-3624(%rbp), %rax
 3247      F1FFFF
 3248 2dd2 4889C2   		movq	%rax, %rdx
 3249 2dd5 488B85B0 		movq	-3664(%rbp), %rax
 3249      F1FFFF
 3250 2ddc 4829C2   		subq	%rax, %rdx
 3251 2ddf 4889D0   		movq	%rdx, %rax
 3252 2de2 4889C7   		movq	%rax, %rdi
 3253 2de5 E8CCD3FF 		call	spaces
 3253      FF
 3254 2dea 4889C1   		movq	%rax, %rcx
 3255 2ded 488B95B0 		movq	-3664(%rbp), %rdx
 3255      F1FFFF
 3256 2df4 488B8598 		movq	-3688(%rbp), %rax
 3256      F1FFFF
 3257 2dfb 488D3500 		leaq	.LC26(%rip), %rsi
 3257      000000
 3258 2e02 4889C7   		movq	%rax, %rdi
 3259 2e05 B8000000 		movl	$0, %eax
 3259      00
 3260 2e0a E8000000 		call	errRender@PLT
 3260      00
 3261 2e0f C785CCF1 		movl	$11, -3636(%rbp)
 3261      FFFF0B00 
 3261      0000
 3262 2e19 E95C0D00 		jmp	.L162
 3262      00
 3263              	.L177:
 3264              		.loc 2 486 0 discriminator 12
 3265 2e1e 488B85D8 		movq	-3624(%rbp), %rax
 3265      F1FFFF
 3266 2e25 488D8DD8 		leaq	-3624(%rbp), %rcx
 3266      F1FFFF
 3267 2e2c BA0A0000 		movl	$10, %edx
 3267      00
 3268 2e31 4889CE   		movq	%rcx, %rsi
 3269 2e34 4889C7   		movq	%rax, %rdi
 3270 2e37 E8000000 		call	strtoul@PLT
 3270      00
 3271 2e3c 8885C7F1 		movb	%al, -3641(%rbp)
 3271      FFFF
 487:prog.c        **** 	SET_BIT(donePort, doneBit, PIN_INPUT, "aProgram");
 3272              		.loc 2 487 0 is_stmt 1 discriminator 12
 3273 2e42 0FB695C6 		movzbl	-3642(%rbp), %edx
 3273      F1FFFF
 3274 2e49 0FB685C7 		movzbl	-3641(%rbp), %eax
 3274      F1FFFF
 3275 2e50 4898     		cltq
 3276 2e52 4863D2   		movslq	%edx, %rdx
 3277 2e55 48C1E205 		salq	$5, %rdx
 3278 2e59 4801D0   		addq	%rdx, %rax
 3279 2e5c 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3279      F1FFFF
 3280 2e63 85C0     		testl	%eax, %eax
 3281 2e65 7472     		je	.L178
 3282              		.loc 2 487 0 is_stmt 0 discriminator 1
 3283 2e67 488B85D8 		movq	-3624(%rbp), %rax
 3283      F1FFFF
 3284 2e6e 4889C2   		movq	%rax, %rdx
 3285 2e71 488B85B0 		movq	-3664(%rbp), %rax
 3285      F1FFFF
 3286 2e78 4829C2   		subq	%rax, %rdx
 3287 2e7b 4889D0   		movq	%rdx, %rax
 3288 2e7e 4883E801 		subq	$1, %rax
 3289 2e82 4889C7   		movq	%rax, %rdi
 3290 2e85 E82CD3FF 		call	spaces
 3290      FF
 3291 2e8a 4889C7   		movq	%rax, %rdi
 3292 2e8d 0FB695C7 		movzbl	-3641(%rbp), %edx
 3292      F1FFFF
 3293 2e94 0FB685C6 		movzbl	-3642(%rbp), %eax
 3293      F1FFFF
 3294 2e9b 8D7041   		leal	65(%rax), %esi
 3295 2e9e 488B8DB0 		movq	-3664(%rbp), %rcx
 3295      F1FFFF
 3296 2ea5 488B8598 		movq	-3688(%rbp), %rax
 3296      F1FFFF
 3297 2eac 4989F9   		movq	%rdi, %r9
 3298 2eaf 4989C8   		movq	%rcx, %r8
 3299 2eb2 89D1     		movl	%edx, %ecx
 3300 2eb4 89F2     		movl	%esi, %edx
 3301 2eb6 488D3500 		leaq	.LC27(%rip), %rsi
 3301      000000
 3302 2ebd 4889C7   		movq	%rax, %rdi
 3303 2ec0 B8000000 		movl	$0, %eax
 3303      00
 3304 2ec5 E8000000 		call	errRender@PLT
 3304      00
 3305 2eca C785CCF1 		movl	$11, -3636(%rbp)
 3305      FFFF0B00 
 3305      0000
 3306 2ed4 E9A10C00 		jmp	.L162
 3306      00
 3307              	.L178:
 3308              		.loc 2 487 0 discriminator 2
 3309 2ed9 0FB695C6 		movzbl	-3642(%rbp), %edx
 3309      F1FFFF
 3310 2ee0 0FB685C7 		movzbl	-3641(%rbp), %eax
 3310      F1FFFF
 3311 2ee7 4898     		cltq
 3312 2ee9 4863D2   		movslq	%edx, %rdx
 3313 2eec 48C1E205 		salq	$5, %rdx
 3314 2ef0 4801D0   		addq	%rdx, %rax
 3315 2ef3 C78485E0 		movl	$3, -3616(%rbp,%rax,4)
 3315      F1FFFF03 
 3315      000000
 488:prog.c        **** 
 489:prog.c        **** 	GET_PAIR(dclkPort, dclkBit, "aProgram");
 3316              		.loc 2 489 0 is_stmt 1 discriminator 2
 3317 2efe 488B85D8 		movq	-3624(%rbp), %rax
 3317      F1FFFF
 3318 2f05 0FB600   		movzbl	(%rax), %eax
 3319 2f08 8885C3F1 		movb	%al, -3645(%rbp)
 3319      FFFF
 3320 2f0e 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3320      FFFF00
 3321 2f15 7553     		jne	.L179
 3322              		.loc 2 489 0 is_stmt 0 discriminator 1
 3323 2f17 488B85D8 		movq	-3624(%rbp), %rax
 3323      F1FFFF
 3324 2f1e 4889C2   		movq	%rax, %rdx
 3325 2f21 488B85B0 		movq	-3664(%rbp), %rax
 3325      F1FFFF
 3326 2f28 4829C2   		subq	%rax, %rdx
 3327 2f2b 4889D0   		movq	%rdx, %rax
 3328 2f2e 4889C7   		movq	%rax, %rdi
 3329 2f31 E880D2FF 		call	spaces
 3329      FF
 3330 2f36 4889C1   		movq	%rax, %rcx
 3331 2f39 488B95B0 		movq	-3664(%rbp), %rdx
 3331      F1FFFF
 3332 2f40 488B8598 		movq	-3688(%rbp), %rax
 3332      F1FFFF
 3333 2f47 488D3500 		leaq	.LC23(%rip), %rsi
 3333      000000
 3334 2f4e 4889C7   		movq	%rax, %rdi
 3335 2f51 B8000000 		movl	$0, %eax
 3335      00
 3336 2f56 E8000000 		call	errRender@PLT
 3336      00
 3337 2f5b C785CCF1 		movl	$11, -3636(%rbp)
 3337      FFFF0B00 
 3337      0000
 3338 2f65 E9100C00 		jmp	.L162
 3338      00
 3339              	.L179:
 3340              		.loc 2 489 0 discriminator 2
 3341 2f6a 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3341      FFFF40
 3342 2f71 7E09     		jle	.L180
 3343              		.loc 2 489 0 discriminator 4
 3344 2f73 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3344      FFFF5A
 3345 2f7a 7E53     		jle	.L181
 3346              	.L180:
 3347              		.loc 2 489 0 discriminator 5
 3348 2f7c 488B85D8 		movq	-3624(%rbp), %rax
 3348      F1FFFF
 3349 2f83 4889C2   		movq	%rax, %rdx
 3350 2f86 488B85B0 		movq	-3664(%rbp), %rax
 3350      F1FFFF
 3351 2f8d 4829C2   		subq	%rax, %rdx
 3352 2f90 4889D0   		movq	%rdx, %rax
 3353 2f93 4889C7   		movq	%rax, %rdi
 3354 2f96 E81BD2FF 		call	spaces
 3354      FF
 3355 2f9b 4889C1   		movq	%rax, %rcx
 3356 2f9e 488B95B0 		movq	-3664(%rbp), %rdx
 3356      F1FFFF
 3357 2fa5 488B8598 		movq	-3688(%rbp), %rax
 3357      F1FFFF
 3358 2fac 488D3500 		leaq	.LC25(%rip), %rsi
 3358      000000
 3359 2fb3 4889C7   		movq	%rax, %rdi
 3360 2fb6 B8000000 		movl	$0, %eax
 3360      00
 3361 2fbb E8000000 		call	errRender@PLT
 3361      00
 3362 2fc0 C785CCF1 		movl	$11, -3636(%rbp)
 3362      FFFF0B00 
 3362      0000
 3363 2fca E9AB0B00 		jmp	.L162
 3363      00
 3364              	.L181:
 3365              		.loc 2 489 0 discriminator 6
 3366 2fcf 0FB685C3 		movzbl	-3645(%rbp), %eax
 3366      F1FFFF
 3367 2fd6 83E841   		subl	$65, %eax
 3368 2fd9 8885C8F1 		movb	%al, -3640(%rbp)
 3368      FFFF
 3369 2fdf 488B85D8 		movq	-3624(%rbp), %rax
 3369      F1FFFF
 3370 2fe6 4883C001 		addq	$1, %rax
 3371 2fea 488985D8 		movq	%rax, -3624(%rbp)
 3371      F1FFFF
 3372 2ff1 488B85D8 		movq	-3624(%rbp), %rax
 3372      F1FFFF
 3373 2ff8 0FB600   		movzbl	(%rax), %eax
 3374 2ffb 8885C3F1 		movb	%al, -3645(%rbp)
 3374      FFFF
 3375 3001 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3375      FFFF00
 3376 3008 7553     		jne	.L182
 3377              		.loc 2 489 0 discriminator 7
 3378 300a 488B85D8 		movq	-3624(%rbp), %rax
 3378      F1FFFF
 3379 3011 4889C2   		movq	%rax, %rdx
 3380 3014 488B85B0 		movq	-3664(%rbp), %rax
 3380      F1FFFF
 3381 301b 4829C2   		subq	%rax, %rdx
 3382 301e 4889D0   		movq	%rdx, %rax
 3383 3021 4889C7   		movq	%rax, %rdi
 3384 3024 E88DD1FF 		call	spaces
 3384      FF
 3385 3029 4889C1   		movq	%rax, %rcx
 3386 302c 488B95B0 		movq	-3664(%rbp), %rdx
 3386      F1FFFF
 3387 3033 488B8598 		movq	-3688(%rbp), %rax
 3387      F1FFFF
 3388 303a 488D3500 		leaq	.LC23(%rip), %rsi
 3388      000000
 3389 3041 4889C7   		movq	%rax, %rdi
 3390 3044 B8000000 		movl	$0, %eax
 3390      00
 3391 3049 E8000000 		call	errRender@PLT
 3391      00
 3392 304e C785CCF1 		movl	$11, -3636(%rbp)
 3392      FFFF0B00 
 3392      0000
 3393 3058 E91D0B00 		jmp	.L162
 3393      00
 3394              	.L182:
 3395              		.loc 2 489 0 discriminator 8
 3396 305d 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3396      FFFF2F
 3397 3064 7E09     		jle	.L183
 3398              		.loc 2 489 0 discriminator 10
 3399 3066 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3399      FFFF39
 3400 306d 7E53     		jle	.L184
 3401              	.L183:
 3402              		.loc 2 489 0 discriminator 11
 3403 306f 488B85D8 		movq	-3624(%rbp), %rax
 3403      F1FFFF
 3404 3076 4889C2   		movq	%rax, %rdx
 3405 3079 488B85B0 		movq	-3664(%rbp), %rax
 3405      F1FFFF
 3406 3080 4829C2   		subq	%rax, %rdx
 3407 3083 4889D0   		movq	%rdx, %rax
 3408 3086 4889C7   		movq	%rax, %rdi
 3409 3089 E828D1FF 		call	spaces
 3409      FF
 3410 308e 4889C1   		movq	%rax, %rcx
 3411 3091 488B95B0 		movq	-3664(%rbp), %rdx
 3411      F1FFFF
 3412 3098 488B8598 		movq	-3688(%rbp), %rax
 3412      F1FFFF
 3413 309f 488D3500 		leaq	.LC26(%rip), %rsi
 3413      000000
 3414 30a6 4889C7   		movq	%rax, %rdi
 3415 30a9 B8000000 		movl	$0, %eax
 3415      00
 3416 30ae E8000000 		call	errRender@PLT
 3416      00
 3417 30b3 C785CCF1 		movl	$11, -3636(%rbp)
 3417      FFFF0B00 
 3417      0000
 3418 30bd E9B80A00 		jmp	.L162
 3418      00
 3419              	.L184:
 3420              		.loc 2 489 0 discriminator 12
 3421 30c2 488B85D8 		movq	-3624(%rbp), %rax
 3421      F1FFFF
 3422 30c9 488D8DD8 		leaq	-3624(%rbp), %rcx
 3422      F1FFFF
 3423 30d0 BA0A0000 		movl	$10, %edx
 3423      00
 3424 30d5 4889CE   		movq	%rcx, %rsi
 3425 30d8 4889C7   		movq	%rax, %rdi
 3426 30db E8000000 		call	strtoul@PLT
 3426      00
 3427 30e0 8885C9F1 		movb	%al, -3639(%rbp)
 3427      FFFF
 490:prog.c        **** 	SET_BIT(dclkPort, dclkBit, PIN_LOW, "aProgram");
 3428              		.loc 2 490 0 is_stmt 1 discriminator 12
 3429 30e6 0FB695C8 		movzbl	-3640(%rbp), %edx
 3429      F1FFFF
 3430 30ed 0FB685C9 		movzbl	-3639(%rbp), %eax
 3430      F1FFFF
 3431 30f4 4898     		cltq
 3432 30f6 4863D2   		movslq	%edx, %rdx
 3433 30f9 48C1E205 		salq	$5, %rdx
 3434 30fd 4801D0   		addq	%rdx, %rax
 3435 3100 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3435      F1FFFF
 3436 3107 85C0     		testl	%eax, %eax
 3437 3109 7472     		je	.L185
 3438              		.loc 2 490 0 is_stmt 0 discriminator 1
 3439 310b 488B85D8 		movq	-3624(%rbp), %rax
 3439      F1FFFF
 3440 3112 4889C2   		movq	%rax, %rdx
 3441 3115 488B85B0 		movq	-3664(%rbp), %rax
 3441      F1FFFF
 3442 311c 4829C2   		subq	%rax, %rdx
 3443 311f 4889D0   		movq	%rdx, %rax
 3444 3122 4883E801 		subq	$1, %rax
 3445 3126 4889C7   		movq	%rax, %rdi
 3446 3129 E888D0FF 		call	spaces
 3446      FF
 3447 312e 4889C7   		movq	%rax, %rdi
 3448 3131 0FB695C9 		movzbl	-3639(%rbp), %edx
 3448      F1FFFF
 3449 3138 0FB685C8 		movzbl	-3640(%rbp), %eax
 3449      F1FFFF
 3450 313f 8D7041   		leal	65(%rax), %esi
 3451 3142 488B8DB0 		movq	-3664(%rbp), %rcx
 3451      F1FFFF
 3452 3149 488B8598 		movq	-3688(%rbp), %rax
 3452      F1FFFF
 3453 3150 4989F9   		movq	%rdi, %r9
 3454 3153 4989C8   		movq	%rcx, %r8
 3455 3156 89D1     		movl	%edx, %ecx
 3456 3158 89F2     		movl	%esi, %edx
 3457 315a 488D3500 		leaq	.LC27(%rip), %rsi
 3457      000000
 3458 3161 4889C7   		movq	%rax, %rdi
 3459 3164 B8000000 		movl	$0, %eax
 3459      00
 3460 3169 E8000000 		call	errRender@PLT
 3460      00
 3461 316e C785CCF1 		movl	$11, -3636(%rbp)
 3461      FFFF0B00 
 3461      0000
 3462 3178 E9FD0900 		jmp	.L162
 3462      00
 3463              	.L185:
 3464              		.loc 2 490 0 discriminator 2
 3465 317d 0FB695C8 		movzbl	-3640(%rbp), %edx
 3465      F1FFFF
 3466 3184 0FB685C9 		movzbl	-3639(%rbp), %eax
 3466      F1FFFF
 3467 318b 4898     		cltq
 3468 318d 4863D2   		movslq	%edx, %rdx
 3469 3190 48C1E205 		salq	$5, %rdx
 3470 3194 4801D0   		addq	%rdx, %rax
 3471 3197 C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3471      F1FFFF02 
 3471      000000
 491:prog.c        **** 
 492:prog.c        **** 	GET_PAIR(dataPort, dataBit, "aProgram");
 3472              		.loc 2 492 0 is_stmt 1 discriminator 2
 3473 31a2 488B85D8 		movq	-3624(%rbp), %rax
 3473      F1FFFF
 3474 31a9 0FB600   		movzbl	(%rax), %eax
 3475 31ac 8885C3F1 		movb	%al, -3645(%rbp)
 3475      FFFF
 3476 31b2 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3476      FFFF00
 3477 31b9 7553     		jne	.L186
 3478              		.loc 2 492 0 is_stmt 0 discriminator 1
 3479 31bb 488B85D8 		movq	-3624(%rbp), %rax
 3479      F1FFFF
 3480 31c2 4889C2   		movq	%rax, %rdx
 3481 31c5 488B85B0 		movq	-3664(%rbp), %rax
 3481      F1FFFF
 3482 31cc 4829C2   		subq	%rax, %rdx
 3483 31cf 4889D0   		movq	%rdx, %rax
 3484 31d2 4889C7   		movq	%rax, %rdi
 3485 31d5 E8DCCFFF 		call	spaces
 3485      FF
 3486 31da 4889C1   		movq	%rax, %rcx
 3487 31dd 488B95B0 		movq	-3664(%rbp), %rdx
 3487      F1FFFF
 3488 31e4 488B8598 		movq	-3688(%rbp), %rax
 3488      F1FFFF
 3489 31eb 488D3500 		leaq	.LC23(%rip), %rsi
 3489      000000
 3490 31f2 4889C7   		movq	%rax, %rdi
 3491 31f5 B8000000 		movl	$0, %eax
 3491      00
 3492 31fa E8000000 		call	errRender@PLT
 3492      00
 3493 31ff C785CCF1 		movl	$11, -3636(%rbp)
 3493      FFFF0B00 
 3493      0000
 3494 3209 E96C0900 		jmp	.L162
 3494      00
 3495              	.L186:
 3496              		.loc 2 492 0 discriminator 2
 3497 320e 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3497      FFFF40
 3498 3215 7E09     		jle	.L187
 3499              		.loc 2 492 0 discriminator 4
 3500 3217 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3500      FFFF5A
 3501 321e 7E53     		jle	.L188
 3502              	.L187:
 3503              		.loc 2 492 0 discriminator 5
 3504 3220 488B85D8 		movq	-3624(%rbp), %rax
 3504      F1FFFF
 3505 3227 4889C2   		movq	%rax, %rdx
 3506 322a 488B85B0 		movq	-3664(%rbp), %rax
 3506      F1FFFF
 3507 3231 4829C2   		subq	%rax, %rdx
 3508 3234 4889D0   		movq	%rdx, %rax
 3509 3237 4889C7   		movq	%rax, %rdi
 3510 323a E877CFFF 		call	spaces
 3510      FF
 3511 323f 4889C1   		movq	%rax, %rcx
 3512 3242 488B95B0 		movq	-3664(%rbp), %rdx
 3512      F1FFFF
 3513 3249 488B8598 		movq	-3688(%rbp), %rax
 3513      F1FFFF
 3514 3250 488D3500 		leaq	.LC25(%rip), %rsi
 3514      000000
 3515 3257 4889C7   		movq	%rax, %rdi
 3516 325a B8000000 		movl	$0, %eax
 3516      00
 3517 325f E8000000 		call	errRender@PLT
 3517      00
 3518 3264 C785CCF1 		movl	$11, -3636(%rbp)
 3518      FFFF0B00 
 3518      0000
 3519 326e E9070900 		jmp	.L162
 3519      00
 3520              	.L188:
 3521              		.loc 2 492 0 discriminator 6
 3522 3273 0FB685C3 		movzbl	-3645(%rbp), %eax
 3522      F1FFFF
 3523 327a 83E841   		subl	$65, %eax
 3524 327d 8885CAF1 		movb	%al, -3638(%rbp)
 3524      FFFF
 3525 3283 488B85D8 		movq	-3624(%rbp), %rax
 3525      F1FFFF
 3526 328a 4883C001 		addq	$1, %rax
 3527 328e 488985D8 		movq	%rax, -3624(%rbp)
 3527      F1FFFF
 3528 3295 488B85D8 		movq	-3624(%rbp), %rax
 3528      F1FFFF
 3529 329c 0FB600   		movzbl	(%rax), %eax
 3530 329f 8885C3F1 		movb	%al, -3645(%rbp)
 3530      FFFF
 3531 32a5 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3531      FFFF00
 3532 32ac 7553     		jne	.L189
 3533              		.loc 2 492 0 discriminator 7
 3534 32ae 488B85D8 		movq	-3624(%rbp), %rax
 3534      F1FFFF
 3535 32b5 4889C2   		movq	%rax, %rdx
 3536 32b8 488B85B0 		movq	-3664(%rbp), %rax
 3536      F1FFFF
 3537 32bf 4829C2   		subq	%rax, %rdx
 3538 32c2 4889D0   		movq	%rdx, %rax
 3539 32c5 4889C7   		movq	%rax, %rdi
 3540 32c8 E8E9CEFF 		call	spaces
 3540      FF
 3541 32cd 4889C1   		movq	%rax, %rcx
 3542 32d0 488B95B0 		movq	-3664(%rbp), %rdx
 3542      F1FFFF
 3543 32d7 488B8598 		movq	-3688(%rbp), %rax
 3543      F1FFFF
 3544 32de 488D3500 		leaq	.LC23(%rip), %rsi
 3544      000000
 3545 32e5 4889C7   		movq	%rax, %rdi
 3546 32e8 B8000000 		movl	$0, %eax
 3546      00
 3547 32ed E8000000 		call	errRender@PLT
 3547      00
 3548 32f2 C785CCF1 		movl	$11, -3636(%rbp)
 3548      FFFF0B00 
 3548      0000
 3549 32fc E9790800 		jmp	.L162
 3549      00
 3550              	.L189:
 3551              		.loc 2 492 0 discriminator 8
 3552 3301 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3552      FFFF2F
 3553 3308 7E09     		jle	.L190
 3554              		.loc 2 492 0 discriminator 10
 3555 330a 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3555      FFFF39
 3556 3311 7E53     		jle	.L191
 3557              	.L190:
 3558              		.loc 2 492 0 discriminator 11
 3559 3313 488B85D8 		movq	-3624(%rbp), %rax
 3559      F1FFFF
 3560 331a 4889C2   		movq	%rax, %rdx
 3561 331d 488B85B0 		movq	-3664(%rbp), %rax
 3561      F1FFFF
 3562 3324 4829C2   		subq	%rax, %rdx
 3563 3327 4889D0   		movq	%rdx, %rax
 3564 332a 4889C7   		movq	%rax, %rdi
 3565 332d E884CEFF 		call	spaces
 3565      FF
 3566 3332 4889C1   		movq	%rax, %rcx
 3567 3335 488B95B0 		movq	-3664(%rbp), %rdx
 3567      F1FFFF
 3568 333c 488B8598 		movq	-3688(%rbp), %rax
 3568      F1FFFF
 3569 3343 488D3500 		leaq	.LC26(%rip), %rsi
 3569      000000
 3570 334a 4889C7   		movq	%rax, %rdi
 3571 334d B8000000 		movl	$0, %eax
 3571      00
 3572 3352 E8000000 		call	errRender@PLT
 3572      00
 3573 3357 C785CCF1 		movl	$11, -3636(%rbp)
 3573      FFFF0B00 
 3573      0000
 3574 3361 E9140800 		jmp	.L162
 3574      00
 3575              	.L191:
 3576              		.loc 2 492 0 discriminator 12
 3577 3366 488B85D8 		movq	-3624(%rbp), %rax
 3577      F1FFFF
 3578 336d 488D8DD8 		leaq	-3624(%rbp), %rcx
 3578      F1FFFF
 3579 3374 BA0A0000 		movl	$10, %edx
 3579      00
 3580 3379 4889CE   		movq	%rcx, %rsi
 3581 337c 4889C7   		movq	%rax, %rdi
 3582 337f E8000000 		call	strtoul@PLT
 3582      00
 3583 3384 8885CBF1 		movb	%al, -3637(%rbp)
 3583      FFFF
 493:prog.c        **** 	SET_BIT(dataPort, dataBit, PIN_LOW, "aProgram");
 3584              		.loc 2 493 0 is_stmt 1 discriminator 12
 3585 338a 0FB695CA 		movzbl	-3638(%rbp), %edx
 3585      F1FFFF
 3586 3391 0FB685CB 		movzbl	-3637(%rbp), %eax
 3586      F1FFFF
 3587 3398 4898     		cltq
 3588 339a 4863D2   		movslq	%edx, %rdx
 3589 339d 48C1E205 		salq	$5, %rdx
 3590 33a1 4801D0   		addq	%rdx, %rax
 3591 33a4 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3591      F1FFFF
 3592 33ab 85C0     		testl	%eax, %eax
 3593 33ad 7472     		je	.L192
 3594              		.loc 2 493 0 is_stmt 0 discriminator 1
 3595 33af 488B85D8 		movq	-3624(%rbp), %rax
 3595      F1FFFF
 3596 33b6 4889C2   		movq	%rax, %rdx
 3597 33b9 488B85B0 		movq	-3664(%rbp), %rax
 3597      F1FFFF
 3598 33c0 4829C2   		subq	%rax, %rdx
 3599 33c3 4889D0   		movq	%rdx, %rax
 3600 33c6 4883E801 		subq	$1, %rax
 3601 33ca 4889C7   		movq	%rax, %rdi
 3602 33cd E8E4CDFF 		call	spaces
 3602      FF
 3603 33d2 4889C7   		movq	%rax, %rdi
 3604 33d5 0FB695CB 		movzbl	-3637(%rbp), %edx
 3604      F1FFFF
 3605 33dc 0FB685CA 		movzbl	-3638(%rbp), %eax
 3605      F1FFFF
 3606 33e3 8D7041   		leal	65(%rax), %esi
 3607 33e6 488B8DB0 		movq	-3664(%rbp), %rcx
 3607      F1FFFF
 3608 33ed 488B8598 		movq	-3688(%rbp), %rax
 3608      F1FFFF
 3609 33f4 4989F9   		movq	%rdi, %r9
 3610 33f7 4989C8   		movq	%rcx, %r8
 3611 33fa 89D1     		movl	%edx, %ecx
 3612 33fc 89F2     		movl	%esi, %edx
 3613 33fe 488D3500 		leaq	.LC27(%rip), %rsi
 3613      000000
 3614 3405 4889C7   		movq	%rax, %rdi
 3615 3408 B8000000 		movl	$0, %eax
 3615      00
 3616 340d E8000000 		call	errRender@PLT
 3616      00
 3617 3412 C785CCF1 		movl	$11, -3636(%rbp)
 3617      FFFF0B00 
 3617      0000
 3618 341c E9590700 		jmp	.L162
 3618      00
 3619              	.L192:
 3620              		.loc 2 493 0 discriminator 2
 3621 3421 0FB695CA 		movzbl	-3638(%rbp), %edx
 3621      F1FFFF
 3622 3428 0FB685CB 		movzbl	-3637(%rbp), %eax
 3622      F1FFFF
 3623 342f 4898     		cltq
 3624 3431 4863D2   		movslq	%edx, %rdx
 3625 3434 48C1E205 		salq	$5, %rdx
 3626 3438 4801D0   		addq	%rdx, %rax
 3627 343b C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3627      F1FFFF02 
 3627      000000
 494:prog.c        **** 
 495:prog.c        **** 	GET_CHAR("aProgram");
 3628              		.loc 2 495 0 is_stmt 1 discriminator 2
 3629 3446 488B85D8 		movq	-3624(%rbp), %rax
 3629      F1FFFF
 3630 344d 0FB600   		movzbl	(%rax), %eax
 3631 3450 8885C3F1 		movb	%al, -3645(%rbp)
 3631      FFFF
 3632 3456 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3632      FFFF00
 3633 345d 7553     		jne	.L193
 3634              		.loc 2 495 0 is_stmt 0 discriminator 1
 3635 345f 488B85D8 		movq	-3624(%rbp), %rax
 3635      F1FFFF
 3636 3466 4889C2   		movq	%rax, %rdx
 3637 3469 488B85B0 		movq	-3664(%rbp), %rax
 3637      F1FFFF
 3638 3470 4829C2   		subq	%rax, %rdx
 3639 3473 4889D0   		movq	%rdx, %rax
 3640 3476 4889C7   		movq	%rax, %rdi
 3641 3479 E838CDFF 		call	spaces
 3641      FF
 3642 347e 4889C1   		movq	%rax, %rcx
 3643 3481 488B95B0 		movq	-3664(%rbp), %rdx
 3643      F1FFFF
 3644 3488 488B8598 		movq	-3688(%rbp), %rax
 3644      F1FFFF
 3645 348f 488D3500 		leaq	.LC23(%rip), %rsi
 3645      000000
 3646 3496 4889C7   		movq	%rax, %rdi
 3647 3499 B8000000 		movl	$0, %eax
 3647      00
 3648 349e E8000000 		call	errRender@PLT
 3648      00
 3649 34a3 C785CCF1 		movl	$11, -3636(%rbp)
 3649      FFFF0B00 
 3649      0000
 3650 34ad E9C80600 		jmp	.L162
 3650      00
 3651              	.L193:
 496:prog.c        **** 	if ( ch == '[' ) {
 3652              		.loc 2 496 0 is_stmt 1
 3653 34b2 80BDC3F1 		cmpb	$91, -3645(%rbp)
 3653      FFFF5B
 3654 34b9 0F855001 		jne	.L194
 3654      0000
 497:prog.c        **** 		ptr++;
 3655              		.loc 2 497 0
 3656 34bf 488B85D8 		movq	-3624(%rbp), %rax
 3656      F1FFFF
 3657 34c6 4883C001 		addq	$1, %rax
 3658 34ca 488985D8 		movq	%rax, -3624(%rbp)
 3658      F1FFFF
 498:prog.c        **** 		fStatus = populateMap(portConfig, ptr, &ptr, pinMap, error);
 3659              		.loc 2 498 0
 3660 34d1 488BB5D8 		movq	-3624(%rbp), %rsi
 3660      F1FFFF
 3661 34d8 488BBD98 		movq	-3688(%rbp), %rdi
 3661      F1FFFF
 3662 34df 488D8DE0 		leaq	-3616(%rbp), %rcx
 3662      F1FFFF
 3663 34e6 488D95D8 		leaq	-3624(%rbp), %rdx
 3663      F1FFFF
 3664 34ed 488B85B0 		movq	-3664(%rbp), %rax
 3664      F1FFFF
 3665 34f4 4989F8   		movq	%rdi, %r8
 3666 34f7 4889C7   		movq	%rax, %rdi
 3667 34fa E8DFCCFF 		call	populateMap
 3667      FF
 3668 34ff 8985D0F1 		movl	%eax, -3632(%rbp)
 3668      FFFF
 499:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3669              		.loc 2 499 0
 3670 3505 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3670      FFFF00
 3671 350c 7427     		je	.L195
 3672              		.loc 2 499 0 is_stmt 0 discriminator 1
 3673 350e 488B8598 		movq	-3688(%rbp), %rax
 3673      F1FFFF
 3674 3515 488D3500 		leaq	.LC28(%rip), %rsi
 3674      000000
 3675 351c 4889C7   		movq	%rax, %rdi
 3676 351f E8000000 		call	errPrefix@PLT
 3676      00
 3677 3524 8B85D0F1 		movl	-3632(%rbp), %eax
 3677      FFFF
 3678 352a 8985CCF1 		movl	%eax, -3636(%rbp)
 3678      FFFF
 3679 3530 E9450600 		jmp	.L162
 3679      00
 3680              	.L195:
 500:prog.c        **** 		EXPECT_CHAR(']', "aProgram");
 3681              		.loc 2 500 0 is_stmt 1
 3682 3535 488B85D8 		movq	-3624(%rbp), %rax
 3682      F1FFFF
 3683 353c 0FB600   		movzbl	(%rax), %eax
 3684 353f 8885C3F1 		movb	%al, -3645(%rbp)
 3684      FFFF
 3685 3545 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3685      FFFF00
 3686 354c 7553     		jne	.L196
 3687              		.loc 2 500 0 is_stmt 0 discriminator 1
 3688 354e 488B85D8 		movq	-3624(%rbp), %rax
 3688      F1FFFF
 3689 3555 4889C2   		movq	%rax, %rdx
 3690 3558 488B85B0 		movq	-3664(%rbp), %rax
 3690      F1FFFF
 3691 355f 4829C2   		subq	%rax, %rdx
 3692 3562 4889D0   		movq	%rdx, %rax
 3693 3565 4889C7   		movq	%rax, %rdi
 3694 3568 E849CCFF 		call	spaces
 3694      FF
 3695 356d 4889C1   		movq	%rax, %rcx
 3696 3570 488B95B0 		movq	-3664(%rbp), %rdx
 3696      F1FFFF
 3697 3577 488B8598 		movq	-3688(%rbp), %rax
 3697      F1FFFF
 3698 357e 488D3500 		leaq	.LC23(%rip), %rsi
 3698      000000
 3699 3585 4889C7   		movq	%rax, %rdi
 3700 3588 B8000000 		movl	$0, %eax
 3700      00
 3701 358d E8000000 		call	errRender@PLT
 3701      00
 3702 3592 C785CCF1 		movl	$11, -3636(%rbp)
 3702      FFFF0B00 
 3702      0000
 3703 359c E9D90500 		jmp	.L162
 3703      00
 3704              	.L196:
 3705              		.loc 2 500 0 discriminator 2
 3706 35a1 80BDC3F1 		cmpb	$93, -3645(%rbp)
 3706      FFFF5D
 3707 35a8 7453     		je	.L197
 3708              		.loc 2 500 0 discriminator 3
 3709 35aa 488B85D8 		movq	-3624(%rbp), %rax
 3709      F1FFFF
 3710 35b1 4889C2   		movq	%rax, %rdx
 3711 35b4 488B85B0 		movq	-3664(%rbp), %rax
 3711      F1FFFF
 3712 35bb 4829C2   		subq	%rax, %rdx
 3713 35be 4889D0   		movq	%rdx, %rax
 3714 35c1 4889C7   		movq	%rax, %rdi
 3715 35c4 E8EDCBFF 		call	spaces
 3715      FF
 3716 35c9 4889C1   		movq	%rax, %rcx
 3717 35cc 488B95B0 		movq	-3664(%rbp), %rdx
 3717      F1FFFF
 3718 35d3 488B8598 		movq	-3688(%rbp), %rax
 3718      F1FFFF
 3719 35da 488D3500 		leaq	.LC29(%rip), %rsi
 3719      000000
 3720 35e1 4889C7   		movq	%rax, %rdi
 3721 35e4 B8000000 		movl	$0, %eax
 3721      00
 3722 35e9 E8000000 		call	errRender@PLT
 3722      00
 3723 35ee C785CCF1 		movl	$11, -3636(%rbp)
 3723      FFFF0B00 
 3723      0000
 3724 35f8 E97D0500 		jmp	.L162
 3724      00
 3725              	.L197:
 3726              		.loc 2 500 0 discriminator 4
 3727 35fd 488B85D8 		movq	-3624(%rbp), %rax
 3727      F1FFFF
 3728 3604 4883C001 		addq	$1, %rax
 3729 3608 488985D8 		movq	%rax, -3624(%rbp)
 3729      F1FFFF
 3730              	.L194:
 501:prog.c        **** 	}
 502:prog.c        **** 	ch = *ptr;
 3731              		.loc 2 502 0 is_stmt 1
 3732 360f 488B85D8 		movq	-3624(%rbp), %rax
 3732      F1FFFF
 3733 3616 0FB600   		movzbl	(%rax), %eax
 3734 3619 8885C3F1 		movb	%al, -3645(%rbp)
 3734      FFFF
 503:prog.c        **** 	CHECK_STATUS(
 3735              		.loc 2 503 0
 3736 361f 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3736      FFFF00
 3737 3626 745C     		je	.L198
 3738              		.loc 2 503 0 is_stmt 0 discriminator 1
 3739 3628 80BDC3F1 		cmpb	$58, -3645(%rbp)
 3739      FFFF3A
 3740 362f 7453     		je	.L198
 3741              		.loc 2 503 0 discriminator 2
 3742 3631 488B85D8 		movq	-3624(%rbp), %rax
 3742      F1FFFF
 3743 3638 4889C2   		movq	%rax, %rdx
 3744 363b 488B85B0 		movq	-3664(%rbp), %rax
 3744      F1FFFF
 3745 3642 4829C2   		subq	%rax, %rdx
 3746 3645 4889D0   		movq	%rdx, %rax
 3747 3648 4889C7   		movq	%rax, %rdi
 3748 364b E866CBFF 		call	spaces
 3748      FF
 3749 3650 4889C1   		movq	%rax, %rcx
 3750 3653 488B95B0 		movq	-3664(%rbp), %rdx
 3750      F1FFFF
 3751 365a 488B8598 		movq	-3688(%rbp), %rax
 3751      F1FFFF
 3752 3661 488D3500 		leaq	.LC30(%rip), %rsi
 3752      000000
 3753 3668 4889C7   		movq	%rax, %rdi
 3754 366b B8000000 		movl	$0, %eax
 3754      00
 3755 3670 E8000000 		call	errRender@PLT
 3755      00
 3756 3675 C785CCF1 		movl	$11, -3636(%rbp)
 3756      FFFF0B00 
 3756      0000
 3757 367f E9F60400 		jmp	.L162
 3757      00
 3758              	.L198:
 504:prog.c        **** 		ch != '\0' && ch != ':', FL_CONF_FORMAT, cleanup,
 505:prog.c        **** 		"aProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig));
 506:prog.c        **** 
 507:prog.c        **** 	// Make a lookup table to swap the bits
 508:prog.c        **** 	makeLookup(bitOrder, lookupTable);
 3759              		.loc 2 508 0 is_stmt 1
 3760 3684 488D95F0 		leaq	-272(%rbp), %rdx
 3760      FEFFFF
 3761 368b 488D85E8 		leaq	-280(%rbp), %rax
 3761      FEFFFF
 3762 3692 4889D6   		movq	%rdx, %rsi
 3763 3695 4889C7   		movq	%rax, %rdi
 3764 3698 E83CD0FF 		call	makeLookup
 3764      FF
 509:prog.c        **** 
 510:prog.c        **** 	// Map DCLK & DATA0
 511:prog.c        **** 	fStatus = portMap(handle, LP_SCK, dclkPort, dclkBit, error);
 3765              		.loc 2 511 0
 3766 369d 0FB68DC9 		movzbl	-3639(%rbp), %ecx
 3766      F1FFFF
 3767 36a4 0FB695C8 		movzbl	-3640(%rbp), %edx
 3767      F1FFFF
 3768 36ab 488BB598 		movq	-3688(%rbp), %rsi
 3768      F1FFFF
 3769 36b2 488B85B8 		movq	-3656(%rbp), %rax
 3769      F1FFFF
 3770 36b9 4989F0   		movq	%rsi, %r8
 3771 36bc BE040000 		movl	$4, %esi
 3771      00
 3772 36c1 4889C7   		movq	%rax, %rdi
 3773 36c4 E875CFFF 		call	portMap
 3773      FF
 3774 36c9 8985D0F1 		movl	%eax, -3632(%rbp)
 3774      FFFF
 512:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3775              		.loc 2 512 0
 3776 36cf 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3776      FFFF00
 3777 36d6 7427     		je	.L199
 3778              		.loc 2 512 0 is_stmt 0 discriminator 1
 3779 36d8 488B8598 		movq	-3688(%rbp), %rax
 3779      F1FFFF
 3780 36df 488D3500 		leaq	.LC28(%rip), %rsi
 3780      000000
 3781 36e6 4889C7   		movq	%rax, %rdi
 3782 36e9 E8000000 		call	errPrefix@PLT
 3782      00
 3783 36ee 8B85D0F1 		movl	-3632(%rbp), %eax
 3783      FFFF
 3784 36f4 8985CCF1 		movl	%eax, -3636(%rbp)
 3784      FFFF
 3785 36fa E97B0400 		jmp	.L162
 3785      00
 3786              	.L199:
 513:prog.c        **** 	fStatus = portMap(handle, LP_MOSI, dataPort, dataBit, error);
 3787              		.loc 2 513 0 is_stmt 1
 3788 36ff 0FB68DCB 		movzbl	-3637(%rbp), %ecx
 3788      F1FFFF
 3789 3706 0FB695CA 		movzbl	-3638(%rbp), %edx
 3789      F1FFFF
 3790 370d 488BB598 		movq	-3688(%rbp), %rsi
 3790      F1FFFF
 3791 3714 488B85B8 		movq	-3656(%rbp), %rax
 3791      F1FFFF
 3792 371b 4989F0   		movq	%rsi, %r8
 3793 371e BE020000 		movl	$2, %esi
 3793      00
 3794 3723 4889C7   		movq	%rax, %rdi
 3795 3726 E813CFFF 		call	portMap
 3795      FF
 3796 372b 8985D0F1 		movl	%eax, -3632(%rbp)
 3796      FFFF
 514:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3797              		.loc 2 514 0
 3798 3731 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3798      FFFF00
 3799 3738 7427     		je	.L200
 3800              		.loc 2 514 0 is_stmt 0 discriminator 1
 3801 373a 488B8598 		movq	-3688(%rbp), %rax
 3801      F1FFFF
 3802 3741 488D3500 		leaq	.LC28(%rip), %rsi
 3802      000000
 3803 3748 4889C7   		movq	%rax, %rdi
 3804 374b E8000000 		call	errPrefix@PLT
 3804      00
 3805 3750 8B85D0F1 		movl	-3632(%rbp), %eax
 3805      FFFF
 3806 3756 8985CCF1 		movl	%eax, -3636(%rbp)
 3806      FFFF
 3807 375c E9190400 		jmp	.L162
 3807      00
 3808              	.L200:
 515:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 3809              		.loc 2 515 0 is_stmt 1
 3810 3761 488B9598 		movq	-3688(%rbp), %rdx
 3810      F1FFFF
 3811 3768 488B85B8 		movq	-3656(%rbp), %rax
 3811      F1FFFF
 3812 376f 4989D0   		movq	%rdx, %r8
 3813 3772 B9000000 		movl	$0, %ecx
 3813      00
 3814 3777 BA000000 		movl	$0, %edx
 3814      00
 3815 377c BE000000 		movl	$0, %esi
 3815      00
 3816 3781 4889C7   		movq	%rax, %rdi
 3817 3784 E8B5CEFF 		call	portMap
 3817      FF
 3818 3789 8985D0F1 		movl	%eax, -3632(%rbp)
 3818      FFFF
 516:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3819              		.loc 2 516 0
 3820 378f 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3820      FFFF00
 3821 3796 7427     		je	.L201
 3822              		.loc 2 516 0 is_stmt 0 discriminator 1
 3823 3798 488B8598 		movq	-3688(%rbp), %rax
 3823      F1FFFF
 3824 379f 488D3500 		leaq	.LC28(%rip), %rsi
 3824      000000
 3825 37a6 4889C7   		movq	%rax, %rdi
 3826 37a9 E8000000 		call	errPrefix@PLT
 3826      00
 3827 37ae 8B85D0F1 		movl	-3632(%rbp), %eax
 3827      FFFF
 3828 37b4 8985CCF1 		movl	%eax, -3636(%rbp)
 3828      FFFF
 3829 37ba E9BB0300 		jmp	.L162
 3829      00
 3830              	.L201:
 517:prog.c        **** 
 518:prog.c        **** 	// Switch to conduit mode zero (=JTAG, etc)
 519:prog.c        **** 	fStatus = flSelectConduit(handle, 0x00, error);
 3831              		.loc 2 519 0 is_stmt 1
 3832 37bf 488B9598 		movq	-3688(%rbp), %rdx
 3832      F1FFFF
 3833 37c6 488B85B8 		movq	-3656(%rbp), %rax
 3833      F1FFFF
 3834 37cd BE000000 		movl	$0, %esi
 3834      00
 3835 37d2 4889C7   		movq	%rax, %rdi
 3836 37d5 E8000000 		call	flSelectConduit@PLT
 3836      00
 3837 37da 8985D0F1 		movl	%eax, -3632(%rbp)
 3837      FFFF
 520:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3838              		.loc 2 520 0
 3839 37e0 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3839      FFFF00
 3840 37e7 7427     		je	.L202
 3841              		.loc 2 520 0 is_stmt 0 discriminator 1
 3842 37e9 488B8598 		movq	-3688(%rbp), %rax
 3842      F1FFFF
 3843 37f0 488D3500 		leaq	.LC28(%rip), %rsi
 3843      000000
 3844 37f7 4889C7   		movq	%rax, %rdi
 3845 37fa E8000000 		call	errPrefix@PLT
 3845      00
 3846 37ff 8B85D0F1 		movl	-3632(%rbp), %eax
 3846      FFFF
 3847 3805 8985CCF1 		movl	%eax, -3636(%rbp)
 3847      FFFF
 3848 380b E96A0300 		jmp	.L162
 3848      00
 3849              	.L202:
 521:prog.c        **** 
 522:prog.c        **** 	// Apply requested configuration to each specified pin
 523:prog.c        **** 	pinMap[ncfgPort][ncfgBit] = PIN_UNUSED;
 3850              		.loc 2 523 0 is_stmt 1
 3851 3810 0FB695C4 		movzbl	-3644(%rbp), %edx
 3851      F1FFFF
 3852 3817 0FB685C5 		movzbl	-3643(%rbp), %eax
 3852      F1FFFF
 3853 381e 4898     		cltq
 3854 3820 4863D2   		movslq	%edx, %rdx
 3855 3823 48C1E205 		salq	$5, %rdx
 3856 3827 4801D0   		addq	%rdx, %rax
 3857 382a C78485E0 		movl	$0, -3616(%rbp,%rax,4)
 3857      F1FFFF00 
 3857      000000
 524:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 3858              		.loc 2 524 0
 3859 3835 C685C1F1 		movb	$0, -3647(%rbp)
 3859      FFFF00
 3860 383c E9D50000 		jmp	.L203
 3860      00
 3861              	.L207:
 525:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3862              		.loc 2 525 0
 3863 3841 C685C2F1 		movb	$0, -3646(%rbp)
 3863      FFFF00
 3864 3848 E9AC0000 		jmp	.L204
 3864      00
 3865              	.L206:
 526:prog.c        **** 			thisPin = pinMap[port][bit];
 3866              		.loc 2 526 0
 3867 384d 0FB695C1 		movzbl	-3647(%rbp), %edx
 3867      F1FFFF
 3868 3854 0FB685C2 		movzbl	-3646(%rbp), %eax
 3868      F1FFFF
 3869 385b 4898     		cltq
 3870 385d 4863D2   		movslq	%edx, %rdx
 3871 3860 48C1E205 		salq	$5, %rdx
 3872 3864 4801D0   		addq	%rdx, %rax
 3873 3867 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3873      F1FFFF
 3874 386e 8985D4F1 		movl	%eax, -3628(%rbp)
 3874      FFFF
 527:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 3875              		.loc 2 527 0
 3876 3874 83BDD4F1 		cmpl	$0, -3628(%rbp)
 3876      FFFF00
 3877 387b 746C     		je	.L205
 528:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, thisPin, NULL, error);
 3878              		.loc 2 528 0
 3879 387d 8B85D4F1 		movl	-3628(%rbp), %eax
 3879      FFFF
 3880 3883 0FB6C8   		movzbl	%al, %ecx
 3881 3886 0FB695C2 		movzbl	-3646(%rbp), %edx
 3881      F1FFFF
 3882 388d 0FB6B5C1 		movzbl	-3647(%rbp), %esi
 3882      F1FFFF
 3883 3894 488BBD98 		movq	-3688(%rbp), %rdi
 3883      F1FFFF
 3884 389b 488B85B8 		movq	-3656(%rbp), %rax
 3884      F1FFFF
 3885 38a2 4989F9   		movq	%rdi, %r9
 3886 38a5 41B80000 		movl	$0, %r8d
 3886      0000
 3887 38ab 4889C7   		movq	%rax, %rdi
 3888 38ae E8000000 		call	flSingleBitPortAccess@PLT
 3888      00
 3889 38b3 8985D0F1 		movl	%eax, -3632(%rbp)
 3889      FFFF
 529:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3890              		.loc 2 529 0
 3891 38b9 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3891      FFFF00
 3892 38c0 7427     		je	.L205
 3893              		.loc 2 529 0 is_stmt 0 discriminator 1
 3894 38c2 488B8598 		movq	-3688(%rbp), %rax
 3894      F1FFFF
 3895 38c9 488D3500 		leaq	.LC28(%rip), %rsi
 3895      000000
 3896 38d0 4889C7   		movq	%rax, %rdi
 3897 38d3 E8000000 		call	errPrefix@PLT
 3897      00
 3898 38d8 8B85D0F1 		movl	-3632(%rbp), %eax
 3898      FFFF
 3899 38de 8985CCF1 		movl	%eax, -3636(%rbp)
 3899      FFFF
 3900 38e4 E9910200 		jmp	.L162
 3900      00
 3901              	.L205:
 525:prog.c        **** 			thisPin = pinMap[port][bit];
 3902              		.loc 2 525 0 is_stmt 1 discriminator 2
 3903 38e9 0FB685C2 		movzbl	-3646(%rbp), %eax
 3903      F1FFFF
 3904 38f0 83C001   		addl	$1, %eax
 3905 38f3 8885C2F1 		movb	%al, -3646(%rbp)
 3905      FFFF
 3906              	.L204:
 525:prog.c        **** 			thisPin = pinMap[port][bit];
 3907              		.loc 2 525 0 is_stmt 0 discriminator 1
 3908 38f9 80BDC2F1 		cmpb	$31, -3646(%rbp)
 3908      FFFF1F
 3909 3900 0F8647FF 		jbe	.L206
 3909      FFFF
 524:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3910              		.loc 2 524 0 is_stmt 1 discriminator 2
 3911 3906 0FB685C1 		movzbl	-3647(%rbp), %eax
 3911      F1FFFF
 3912 390d 83C001   		addl	$1, %eax
 3913 3910 8885C1F1 		movb	%al, -3647(%rbp)
 3913      FFFF
 3914              	.L203:
 524:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3915              		.loc 2 524 0 is_stmt 0 discriminator 1
 3916 3916 80BDC1F1 		cmpb	$25, -3647(%rbp)
 3916      FFFF19
 3917 391d 0F861EFF 		jbe	.L207
 3917      FFFF
 530:prog.c        **** 			}
 531:prog.c        **** 		}
 532:prog.c        **** 	}
 533:prog.c        **** 
 534:prog.c        **** 	// Deassert nCONFIG
 535:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ncfgPort, ncfgBit, PIN_INPUT, NULL, error); // nCONFIG pul
 3918              		.loc 2 535 0 is_stmt 1
 3919 3923 0FB695C5 		movzbl	-3643(%rbp), %edx
 3919      F1FFFF
 3920 392a 0FB6B5C4 		movzbl	-3644(%rbp), %esi
 3920      F1FFFF
 3921 3931 488B8D98 		movq	-3688(%rbp), %rcx
 3921      F1FFFF
 3922 3938 488B85B8 		movq	-3656(%rbp), %rax
 3922      F1FFFF
 3923 393f 4989C9   		movq	%rcx, %r9
 3924 3942 41B80000 		movl	$0, %r8d
 3924      0000
 3925 3948 B9030000 		movl	$3, %ecx
 3925      00
 3926 394d 4889C7   		movq	%rax, %rdi
 3927 3950 E8000000 		call	flSingleBitPortAccess@PLT
 3927      00
 3928 3955 8985D0F1 		movl	%eax, -3632(%rbp)
 3928      FFFF
 536:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3929              		.loc 2 536 0
 3930 395b 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3930      FFFF00
 3931 3962 7427     		je	.L208
 3932              		.loc 2 536 0 is_stmt 0 discriminator 1
 3933 3964 488B8598 		movq	-3688(%rbp), %rax
 3933      F1FFFF
 3934 396b 488D3500 		leaq	.LC28(%rip), %rsi
 3934      000000
 3935 3972 4889C7   		movq	%rax, %rdi
 3936 3975 E8000000 		call	errPrefix@PLT
 3936      00
 3937 397a 8B85D0F1 		movl	-3632(%rbp), %eax
 3937      FFFF
 3938 3980 8985CCF1 		movl	%eax, -3636(%rbp)
 3938      FFFF
 3939 3986 E9EF0100 		jmp	.L162
 3939      00
 3940              	.L208:
 537:prog.c        **** 
 538:prog.c        **** 	// Write the programming file into the FPGA
 539:prog.c        **** 	fStatus = dataWrite(handle, PROG_SPI_SEND, data, len, lookupTable, error);
 3941              		.loc 2 539 0 is_stmt 1
 3942 398b 488BBD98 		movq	-3688(%rbp), %rdi
 3942      F1FFFF
 3943 3992 488DB5F0 		leaq	-272(%rbp), %rsi
 3943      FEFFFF
 3944 3999 8B8DA4F1 		movl	-3676(%rbp), %ecx
 3944      FFFF
 3945 399f 488B95A8 		movq	-3672(%rbp), %rdx
 3945      F1FFFF
 3946 39a6 488B85B8 		movq	-3656(%rbp), %rax
 3946      F1FFFF
 3947 39ad 4989F9   		movq	%rdi, %r9
 3948 39b0 4989F0   		movq	%rsi, %r8
 3949 39b3 BE060000 		movl	$6, %esi
 3949      00
 3950 39b8 4889C7   		movq	%rax, %rdi
 3951 39bb E8D5CEFF 		call	dataWrite
 3951      FF
 3952 39c0 8985D0F1 		movl	%eax, -3632(%rbp)
 3952      FFFF
 540:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3953              		.loc 2 540 0
 3954 39c6 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3954      FFFF00
 3955 39cd 7427     		je	.L209
 3956              		.loc 2 540 0 is_stmt 0 discriminator 1
 3957 39cf 488B8598 		movq	-3688(%rbp), %rax
 3957      F1FFFF
 3958 39d6 488D3500 		leaq	.LC28(%rip), %rsi
 3958      000000
 3959 39dd 4889C7   		movq	%rax, %rdi
 3960 39e0 E8000000 		call	errPrefix@PLT
 3960      00
 3961 39e5 8B85D0F1 		movl	-3632(%rbp), %eax
 3961      FFFF
 3962 39eb 8985CCF1 		movl	%eax, -3636(%rbp)
 3962      FFFF
 3963 39f1 E9840100 		jmp	.L162
 3963      00
 3964              	.L209:
 541:prog.c        **** 
 542:prog.c        **** 	// Verify that CONF_DONE went high
 543:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 3965              		.loc 2 543 0 is_stmt 1
 3966 39f6 0FB695C7 		movzbl	-3641(%rbp), %edx
 3966      F1FFFF
 3967 39fd 0FB6B5C6 		movzbl	-3642(%rbp), %esi
 3967      F1FFFF
 3968 3a04 488BBD98 		movq	-3688(%rbp), %rdi
 3968      F1FFFF
 3969 3a0b 488D8DC0 		leaq	-3648(%rbp), %rcx
 3969      F1FFFF
 3970 3a12 488B85B8 		movq	-3656(%rbp), %rax
 3970      F1FFFF
 3971 3a19 4989F9   		movq	%rdi, %r9
 3972 3a1c 4989C8   		movq	%rcx, %r8
 3973 3a1f B9030000 		movl	$3, %ecx
 3973      00
 3974 3a24 4889C7   		movq	%rax, %rdi
 3975 3a27 E8000000 		call	flSingleBitPortAccess@PLT
 3975      00
 3976 3a2c 8985D0F1 		movl	%eax, -3632(%rbp)
 3976      FFFF
 544:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3977              		.loc 2 544 0
 3978 3a32 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3978      FFFF00
 3979 3a39 7427     		je	.L210
 3980              		.loc 2 544 0 is_stmt 0 discriminator 1
 3981 3a3b 488B8598 		movq	-3688(%rbp), %rax
 3981      F1FFFF
 3982 3a42 488D3500 		leaq	.LC28(%rip), %rsi
 3982      000000
 3983 3a49 4889C7   		movq	%rax, %rdi
 3984 3a4c E8000000 		call	errPrefix@PLT
 3984      00
 3985 3a51 8B85D0F1 		movl	-3632(%rbp), %eax
 3985      FFFF
 3986 3a57 8985CCF1 		movl	%eax, -3636(%rbp)
 3986      FFFF
 3987 3a5d E9180100 		jmp	.L162
 3987      00
 3988              	.L210:
 545:prog.c        **** 	CHECK_STATUS(
 3989              		.loc 2 545 0 is_stmt 1
 3990 3a62 0FB685C0 		movzbl	-3648(%rbp), %eax
 3990      F1FFFF
 3991 3a69 84C0     		testb	%al, %al
 3992 3a6b 7525     		jne	.L211
 3993              		.loc 2 545 0 is_stmt 0 discriminator 1
 3994 3a6d 488B8598 		movq	-3688(%rbp), %rax
 3994      F1FFFF
 3995 3a74 488D3500 		leaq	.LC31(%rip), %rsi
 3995      000000
 3996 3a7b 4889C7   		movq	%rax, %rdi
 3997 3a7e E8000000 		call	errPrefix@PLT
 3997      00
 3998 3a83 C785CCF1 		movl	$20, -3636(%rbp)
 3998      FFFF1400 
 3998      0000
 3999 3a8d E9E80000 		jmp	.L162
 3999      00
 4000              	.L211:
 546:prog.c        **** 		!doneStatus, FL_PROG_ERR, cleanup,
 547:prog.c        **** 		"aProgram(): CONF_DONE remained low (CRC error during config)");
 548:prog.c        **** 
 549:prog.c        **** 	// Make all specified pins inputs; leave CONF_DONE as input and leave nCONFIG driven high
 550:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 4001              		.loc 2 550 0 is_stmt 1
 4002 3a92 C685C1F1 		movb	$0, -3647(%rbp)
 4002      FFFF00
 4003 3a99 E9CE0000 		jmp	.L212
 4003      00
 4004              	.L216:
 551:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 4005              		.loc 2 551 0
 4006 3a9e C685C2F1 		movb	$0, -3646(%rbp)
 4006      FFFF00
 4007 3aa5 E9A50000 		jmp	.L213
 4007      00
 4008              	.L215:
 552:prog.c        **** 			thisPin = pinMap[port][bit];
 4009              		.loc 2 552 0
 4010 3aaa 0FB695C1 		movzbl	-3647(%rbp), %edx
 4010      F1FFFF
 4011 3ab1 0FB685C2 		movzbl	-3646(%rbp), %eax
 4011      F1FFFF
 4012 3ab8 4898     		cltq
 4013 3aba 4863D2   		movslq	%edx, %rdx
 4014 3abd 48C1E205 		salq	$5, %rdx
 4015 3ac1 4801D0   		addq	%rdx, %rax
 4016 3ac4 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 4016      F1FFFF
 4017 3acb 8985D4F1 		movl	%eax, -3628(%rbp)
 4017      FFFF
 553:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 4018              		.loc 2 553 0
 4019 3ad1 83BDD4F1 		cmpl	$0, -3628(%rbp)
 4019      FFFF00
 4020 3ad8 7465     		je	.L214
 554:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, PIN_INPUT, NULL, error);
 4021              		.loc 2 554 0
 4022 3ada 0FB695C2 		movzbl	-3646(%rbp), %edx
 4022      F1FFFF
 4023 3ae1 0FB6B5C1 		movzbl	-3647(%rbp), %esi
 4023      F1FFFF
 4024 3ae8 488B8D98 		movq	-3688(%rbp), %rcx
 4024      F1FFFF
 4025 3aef 488B85B8 		movq	-3656(%rbp), %rax
 4025      F1FFFF
 4026 3af6 4989C9   		movq	%rcx, %r9
 4027 3af9 41B80000 		movl	$0, %r8d
 4027      0000
 4028 3aff B9030000 		movl	$3, %ecx
 4028      00
 4029 3b04 4889C7   		movq	%rax, %rdi
 4030 3b07 E8000000 		call	flSingleBitPortAccess@PLT
 4030      00
 4031 3b0c 8985D0F1 		movl	%eax, -3632(%rbp)
 4031      FFFF
 555:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 4032              		.loc 2 555 0
 4033 3b12 83BDD0F1 		cmpl	$0, -3632(%rbp)
 4033      FFFF00
 4034 3b19 7424     		je	.L214
 4035              		.loc 2 555 0 is_stmt 0 discriminator 1
 4036 3b1b 488B8598 		movq	-3688(%rbp), %rax
 4036      F1FFFF
 4037 3b22 488D3500 		leaq	.LC28(%rip), %rsi
 4037      000000
 4038 3b29 4889C7   		movq	%rax, %rdi
 4039 3b2c E8000000 		call	errPrefix@PLT
 4039      00
 4040 3b31 8B85D0F1 		movl	-3632(%rbp), %eax
 4040      FFFF
 4041 3b37 8985CCF1 		movl	%eax, -3636(%rbp)
 4041      FFFF
 4042 3b3d EB3B     		jmp	.L162
 4043              	.L214:
 551:prog.c        **** 			thisPin = pinMap[port][bit];
 4044              		.loc 2 551 0 is_stmt 1 discriminator 2
 4045 3b3f 0FB685C2 		movzbl	-3646(%rbp), %eax
 4045      F1FFFF
 4046 3b46 83C001   		addl	$1, %eax
 4047 3b49 8885C2F1 		movb	%al, -3646(%rbp)
 4047      FFFF
 4048              	.L213:
 551:prog.c        **** 			thisPin = pinMap[port][bit];
 4049              		.loc 2 551 0 is_stmt 0 discriminator 1
 4050 3b4f 80BDC2F1 		cmpb	$31, -3646(%rbp)
 4050      FFFF1F
 4051 3b56 0F864EFF 		jbe	.L215
 4051      FFFF
 550:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 4052              		.loc 2 550 0 is_stmt 1 discriminator 2
 4053 3b5c 0FB685C1 		movzbl	-3647(%rbp), %eax
 4053      F1FFFF
 4054 3b63 83C001   		addl	$1, %eax
 4055 3b66 8885C1F1 		movb	%al, -3647(%rbp)
 4055      FFFF
 4056              	.L212:
 550:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 4057              		.loc 2 550 0 is_stmt 0 discriminator 1
 4058 3b6c 80BDC1F1 		cmpb	$25, -3647(%rbp)
 4058      FFFF19
 4059 3b73 0F8625FF 		jbe	.L216
 4059      FFFF
 556:prog.c        **** 			}
 557:prog.c        **** 		}
 558:prog.c        **** 	}
 559:prog.c        **** cleanup:
 4060              		.loc 2 559 0 is_stmt 1
 4061 3b79 90       		nop
 4062              	.L162:
 560:prog.c        **** 	return retVal;
 4063              		.loc 2 560 0
 4064 3b7a 8B85CCF1 		movl	-3636(%rbp), %eax
 4064      FFFF
 561:prog.c        **** }
 4065              		.loc 2 561 0
 4066 3b80 488B75F8 		movq	-8(%rbp), %rsi
 4067 3b84 64483334 		xorq	%fs:40, %rsi
 4067      25280000 
 4067      00
 4068 3b8d 7405     		je	.L218
 4069 3b8f E8000000 		call	__stack_chk_fail@PLT
 4069      00
 4070              	.L218:
 4071 3b94 C9       		leave
 4072              		.cfi_def_cfa 7, 8
 4073 3b95 C3       		ret
 4074              		.cfi_endproc
 4075              	.LFE13:
 4077              		.section	.rodata
 4078 0655 000000   		.align 8
 4079              	.LC32:
 4080 0658 70726F67 		.string	"progOpen(): Unexpected end of config string:\n  %s\n  %s^"
 4080      4F70656E 
 4080      28293A20 
 4080      556E6578 
 4080      70656374 
 4081              		.align 8
 4082              	.LC33:
 4083 0690 70726F67 		.string	"progOpen(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 4083      4F70656E 
 4083      28293A20 
 4083      506F7274 
 4083      20697320 
 4084 06d3 00000000 		.align 8
 4084      00
 4085              	.LC34:
 4086 06d8 70726F67 		.string	"progOpen(): Bit number is not valid:\n  %s\n  %s^"
 4086      4F70656E 
 4086      28293A20 
 4086      42697420 
 4086      6E756D62 
 4087              		.align 8
 4088              	.LC35:
 4089 0708 70726F67 		.string	"progOpen(): port '%c%d' is already used:\n  %s\n  %s^"
 4089      4F70656E 
 4089      28293A20 
 4089      706F7274 
 4089      20272563 
 4090              	.LC36:
 4091 073c 70726F67 		.string	"progOpen()"
 4091      4F70656E 
 4091      282900
 4092              		.text
 4094              	progOpenInternal:
 4095              	.LFB14:
 562:prog.c        **** 
 563:prog.c        **** static FLStatus progOpenInternal(struct FLContext *handle, const char *portConfig, const char *ptr,
 4096              		.loc 2 563 0
 4097              		.cfi_startproc
 4098 3b96 55       		pushq	%rbp
 4099              		.cfi_def_cfa_offset 16
 4100              		.cfi_offset 6, -16
 4101 3b97 4889E5   		movq	%rsp, %rbp
 4102              		.cfi_def_cfa_register 6
 4103 3b9a 4881EC50 		subq	$3408, %rsp
 4103      0D0000
 4104 3ba1 4889BDC8 		movq	%rdi, -3384(%rbp)
 4104      F2FFFF
 4105 3ba8 4889B5C0 		movq	%rsi, -3392(%rbp)
 4105      F2FFFF
 4106 3baf 488995B8 		movq	%rdx, -3400(%rbp)
 4106      F2FFFF
 4107 3bb6 48898DB0 		movq	%rcx, -3408(%rbp)
 4107      F2FFFF
 4108              		.loc 2 563 0
 4109 3bbd 64488B04 		movq	%fs:40, %rax
 4109      25280000 
 4109      00
 4110 3bc6 488945F8 		movq	%rax, -8(%rbp)
 4111 3bca 31C0     		xorl	%eax, %eax
 564:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 4112              		.loc 2 564 0
 4113 3bcc C785E8F2 		movl	$0, -3352(%rbp)
 4113      FFFF0000 
 4113      0000
 565:prog.c        **** 	FLStatus fStatus;
 566:prog.c        **** 	uint8 misoPort, misoBit;
 567:prog.c        **** 	uint8 mosiPort, mosiBit;
 568:prog.c        **** 	uint8 ssPort, ssBit;
 569:prog.c        **** 	uint8 sckPort, sckBit;
 570:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 4114              		.loc 2 570 0
 4115 3bd6 488D95F0 		leaq	-3344(%rbp), %rdx
 4115      F2FFFF
 4116 3bdd B8000000 		movl	$0, %eax
 4116      00
 4117 3be2 B9A00100 		movl	$416, %ecx
 4117      00
 4118 3be7 4889D7   		movq	%rdx, %rdi
 4119 3bea F348AB   		rep stosq
 571:prog.c        **** 	char ch;
 572:prog.c        **** 
 573:prog.c        **** 	// Get all four JTAG bits and tell the micro which ones to use
 574:prog.c        **** 	GET_PAIR(misoPort, misoBit, "progOpen");        // MISO/TDO
 4120              		.loc 2 574 0
 4121 3bed 488B85B8 		movq	-3400(%rbp), %rax
 4121      F2FFFF
 4122 3bf4 0FB600   		movzbl	(%rax), %eax
 4123 3bf7 8885DFF2 		movb	%al, -3361(%rbp)
 4123      FFFF
 4124 3bfd 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4124      FFFF00
 4125 3c04 7553     		jne	.L220
 4126              		.loc 2 574 0 is_stmt 0 discriminator 1
 4127 3c06 488B85B8 		movq	-3400(%rbp), %rax
 4127      F2FFFF
 4128 3c0d 4889C2   		movq	%rax, %rdx
 4129 3c10 488B85C0 		movq	-3392(%rbp), %rax
 4129      F2FFFF
 4130 3c17 4829C2   		subq	%rax, %rdx
 4131 3c1a 4889D0   		movq	%rdx, %rax
 4132 3c1d 4889C7   		movq	%rax, %rdi
 4133 3c20 E891C5FF 		call	spaces
 4133      FF
 4134 3c25 4889C1   		movq	%rax, %rcx
 4135 3c28 488B95C0 		movq	-3392(%rbp), %rdx
 4135      F2FFFF
 4136 3c2f 488B85B0 		movq	-3408(%rbp), %rax
 4136      F2FFFF
 4137 3c36 488D3500 		leaq	.LC32(%rip), %rsi
 4137      000000
 4138 3c3d 4889C7   		movq	%rax, %rdi
 4139 3c40 B8000000 		movl	$0, %eax
 4139      00
 4140 3c45 E8000000 		call	errRender@PLT
 4140      00
 4141 3c4a C785E8F2 		movl	$11, -3352(%rbp)
 4141      FFFF0B00 
 4141      0000
 4142 3c54 E9320E00 		jmp	.L221
 4142      00
 4143              	.L220:
 4144              		.loc 2 574 0 discriminator 2
 4145 3c59 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4145      FFFF40
 4146 3c60 7E09     		jle	.L222
 4147              		.loc 2 574 0 discriminator 4
 4148 3c62 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4148      FFFF5A
 4149 3c69 7E53     		jle	.L223
 4150              	.L222:
 4151              		.loc 2 574 0 discriminator 5
 4152 3c6b 488B85B8 		movq	-3400(%rbp), %rax
 4152      F2FFFF
 4153 3c72 4889C2   		movq	%rax, %rdx
 4154 3c75 488B85C0 		movq	-3392(%rbp), %rax
 4154      F2FFFF
 4155 3c7c 4829C2   		subq	%rax, %rdx
 4156 3c7f 4889D0   		movq	%rdx, %rax
 4157 3c82 4889C7   		movq	%rax, %rdi
 4158 3c85 E82CC5FF 		call	spaces
 4158      FF
 4159 3c8a 4889C1   		movq	%rax, %rcx
 4160 3c8d 488B95C0 		movq	-3392(%rbp), %rdx
 4160      F2FFFF
 4161 3c94 488B85B0 		movq	-3408(%rbp), %rax
 4161      F2FFFF
 4162 3c9b 488D3500 		leaq	.LC33(%rip), %rsi
 4162      000000
 4163 3ca2 4889C7   		movq	%rax, %rdi
 4164 3ca5 B8000000 		movl	$0, %eax
 4164      00
 4165 3caa E8000000 		call	errRender@PLT
 4165      00
 4166 3caf C785E8F2 		movl	$11, -3352(%rbp)
 4166      FFFF0B00 
 4166      0000
 4167 3cb9 E9CD0D00 		jmp	.L221
 4167      00
 4168              	.L223:
 4169              		.loc 2 574 0 discriminator 6
 4170 3cbe 0FB685DF 		movzbl	-3361(%rbp), %eax
 4170      F2FFFF
 4171 3cc5 83E841   		subl	$65, %eax
 4172 3cc8 8885E0F2 		movb	%al, -3360(%rbp)
 4172      FFFF
 4173 3cce 488B85B8 		movq	-3400(%rbp), %rax
 4173      F2FFFF
 4174 3cd5 4883C001 		addq	$1, %rax
 4175 3cd9 488985B8 		movq	%rax, -3400(%rbp)
 4175      F2FFFF
 4176 3ce0 488B85B8 		movq	-3400(%rbp), %rax
 4176      F2FFFF
 4177 3ce7 0FB600   		movzbl	(%rax), %eax
 4178 3cea 8885DFF2 		movb	%al, -3361(%rbp)
 4178      FFFF
 4179 3cf0 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4179      FFFF00
 4180 3cf7 7553     		jne	.L224
 4181              		.loc 2 574 0 discriminator 7
 4182 3cf9 488B85B8 		movq	-3400(%rbp), %rax
 4182      F2FFFF
 4183 3d00 4889C2   		movq	%rax, %rdx
 4184 3d03 488B85C0 		movq	-3392(%rbp), %rax
 4184      F2FFFF
 4185 3d0a 4829C2   		subq	%rax, %rdx
 4186 3d0d 4889D0   		movq	%rdx, %rax
 4187 3d10 4889C7   		movq	%rax, %rdi
 4188 3d13 E89EC4FF 		call	spaces
 4188      FF
 4189 3d18 4889C1   		movq	%rax, %rcx
 4190 3d1b 488B95C0 		movq	-3392(%rbp), %rdx
 4190      F2FFFF
 4191 3d22 488B85B0 		movq	-3408(%rbp), %rax
 4191      F2FFFF
 4192 3d29 488D3500 		leaq	.LC32(%rip), %rsi
 4192      000000
 4193 3d30 4889C7   		movq	%rax, %rdi
 4194 3d33 B8000000 		movl	$0, %eax
 4194      00
 4195 3d38 E8000000 		call	errRender@PLT
 4195      00
 4196 3d3d C785E8F2 		movl	$11, -3352(%rbp)
 4196      FFFF0B00 
 4196      0000
 4197 3d47 E93F0D00 		jmp	.L221
 4197      00
 4198              	.L224:
 4199              		.loc 2 574 0 discriminator 8
 4200 3d4c 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4200      FFFF2F
 4201 3d53 7E09     		jle	.L225
 4202              		.loc 2 574 0 discriminator 10
 4203 3d55 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4203      FFFF39
 4204 3d5c 7E53     		jle	.L226
 4205              	.L225:
 4206              		.loc 2 574 0 discriminator 11
 4207 3d5e 488B85B8 		movq	-3400(%rbp), %rax
 4207      F2FFFF
 4208 3d65 4889C2   		movq	%rax, %rdx
 4209 3d68 488B85C0 		movq	-3392(%rbp), %rax
 4209      F2FFFF
 4210 3d6f 4829C2   		subq	%rax, %rdx
 4211 3d72 4889D0   		movq	%rdx, %rax
 4212 3d75 4889C7   		movq	%rax, %rdi
 4213 3d78 E839C4FF 		call	spaces
 4213      FF
 4214 3d7d 4889C1   		movq	%rax, %rcx
 4215 3d80 488B95C0 		movq	-3392(%rbp), %rdx
 4215      F2FFFF
 4216 3d87 488B85B0 		movq	-3408(%rbp), %rax
 4216      F2FFFF
 4217 3d8e 488D3500 		leaq	.LC34(%rip), %rsi
 4217      000000
 4218 3d95 4889C7   		movq	%rax, %rdi
 4219 3d98 B8000000 		movl	$0, %eax
 4219      00
 4220 3d9d E8000000 		call	errRender@PLT
 4220      00
 4221 3da2 C785E8F2 		movl	$11, -3352(%rbp)
 4221      FFFF0B00 
 4221      0000
 4222 3dac E9DA0C00 		jmp	.L221
 4222      00
 4223              	.L226:
 4224              		.loc 2 574 0 discriminator 12
 4225 3db1 488B85B8 		movq	-3400(%rbp), %rax
 4225      F2FFFF
 4226 3db8 488D8DB8 		leaq	-3400(%rbp), %rcx
 4226      F2FFFF
 4227 3dbf BA0A0000 		movl	$10, %edx
 4227      00
 4228 3dc4 4889CE   		movq	%rcx, %rsi
 4229 3dc7 4889C7   		movq	%rax, %rdi
 4230 3dca E8000000 		call	strtoul@PLT
 4230      00
 4231 3dcf 8885E1F2 		movb	%al, -3359(%rbp)
 4231      FFFF
 575:prog.c        **** 	SET_BIT(misoPort, misoBit, PIN_INPUT, "progOpen");
 4232              		.loc 2 575 0 is_stmt 1 discriminator 12
 4233 3dd5 0FB695E0 		movzbl	-3360(%rbp), %edx
 4233      F2FFFF
 4234 3ddc 0FB685E1 		movzbl	-3359(%rbp), %eax
 4234      F2FFFF
 4235 3de3 4898     		cltq
 4236 3de5 4863D2   		movslq	%edx, %rdx
 4237 3de8 48C1E205 		salq	$5, %rdx
 4238 3dec 4801D0   		addq	%rdx, %rax
 4239 3def 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4239      F2FFFF
 4240 3df6 85C0     		testl	%eax, %eax
 4241 3df8 7472     		je	.L227
 4242              		.loc 2 575 0 is_stmt 0 discriminator 1
 4243 3dfa 488B85B8 		movq	-3400(%rbp), %rax
 4243      F2FFFF
 4244 3e01 4889C2   		movq	%rax, %rdx
 4245 3e04 488B85C0 		movq	-3392(%rbp), %rax
 4245      F2FFFF
 4246 3e0b 4829C2   		subq	%rax, %rdx
 4247 3e0e 4889D0   		movq	%rdx, %rax
 4248 3e11 4883E801 		subq	$1, %rax
 4249 3e15 4889C7   		movq	%rax, %rdi
 4250 3e18 E899C3FF 		call	spaces
 4250      FF
 4251 3e1d 4889C7   		movq	%rax, %rdi
 4252 3e20 0FB695E1 		movzbl	-3359(%rbp), %edx
 4252      F2FFFF
 4253 3e27 0FB685E0 		movzbl	-3360(%rbp), %eax
 4253      F2FFFF
 4254 3e2e 8D7041   		leal	65(%rax), %esi
 4255 3e31 488B8DC0 		movq	-3392(%rbp), %rcx
 4255      F2FFFF
 4256 3e38 488B85B0 		movq	-3408(%rbp), %rax
 4256      F2FFFF
 4257 3e3f 4989F9   		movq	%rdi, %r9
 4258 3e42 4989C8   		movq	%rcx, %r8
 4259 3e45 89D1     		movl	%edx, %ecx
 4260 3e47 89F2     		movl	%esi, %edx
 4261 3e49 488D3500 		leaq	.LC35(%rip), %rsi
 4261      000000
 4262 3e50 4889C7   		movq	%rax, %rdi
 4263 3e53 B8000000 		movl	$0, %eax
 4263      00
 4264 3e58 E8000000 		call	errRender@PLT
 4264      00
 4265 3e5d C785E8F2 		movl	$11, -3352(%rbp)
 4265      FFFF0B00 
 4265      0000
 4266 3e67 E91F0C00 		jmp	.L221
 4266      00
 4267              	.L227:
 4268              		.loc 2 575 0 discriminator 2
 4269 3e6c 0FB695E0 		movzbl	-3360(%rbp), %edx
 4269      F2FFFF
 4270 3e73 0FB685E1 		movzbl	-3359(%rbp), %eax
 4270      F2FFFF
 4271 3e7a 4898     		cltq
 4272 3e7c 4863D2   		movslq	%edx, %rdx
 4273 3e7f 48C1E205 		salq	$5, %rdx
 4274 3e83 4801D0   		addq	%rdx, %rax
 4275 3e86 C78485F0 		movl	$3, -3344(%rbp,%rax,4)
 4275      F2FFFF03 
 4275      000000
 576:prog.c        **** 	fStatus = portMap(handle, LP_MISO, misoPort, misoBit, error);
 4276              		.loc 2 576 0 is_stmt 1 discriminator 2
 4277 3e91 0FB68DE1 		movzbl	-3359(%rbp), %ecx
 4277      F2FFFF
 4278 3e98 0FB695E0 		movzbl	-3360(%rbp), %edx
 4278      F2FFFF
 4279 3e9f 488BB5B0 		movq	-3408(%rbp), %rsi
 4279      F2FFFF
 4280 3ea6 488B85C8 		movq	-3384(%rbp), %rax
 4280      F2FFFF
 4281 3ead 4989F0   		movq	%rsi, %r8
 4282 3eb0 BE010000 		movl	$1, %esi
 4282      00
 4283 3eb5 4889C7   		movq	%rax, %rdi
 4284 3eb8 E881C7FF 		call	portMap
 4284      FF
 4285 3ebd 8985ECF2 		movl	%eax, -3348(%rbp)
 4285      FFFF
 577:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4286              		.loc 2 577 0 discriminator 2
 4287 3ec3 83BDECF2 		cmpl	$0, -3348(%rbp)
 4287      FFFF00
 4288 3eca 7427     		je	.L228
 4289              		.loc 2 577 0 is_stmt 0 discriminator 1
 4290 3ecc 488B85B0 		movq	-3408(%rbp), %rax
 4290      F2FFFF
 4291 3ed3 488D3500 		leaq	.LC36(%rip), %rsi
 4291      000000
 4292 3eda 4889C7   		movq	%rax, %rdi
 4293 3edd E8000000 		call	errPrefix@PLT
 4293      00
 4294 3ee2 8B85ECF2 		movl	-3348(%rbp), %eax
 4294      FFFF
 4295 3ee8 8985E8F2 		movl	%eax, -3352(%rbp)
 4295      FFFF
 4296 3eee E9980B00 		jmp	.L221
 4296      00
 4297              	.L228:
 578:prog.c        **** 
 579:prog.c        **** 	GET_PAIR(mosiPort, mosiBit, "progOpen");        // MOSI/TDI
 4298              		.loc 2 579 0 is_stmt 1
 4299 3ef3 488B85B8 		movq	-3400(%rbp), %rax
 4299      F2FFFF
 4300 3efa 0FB600   		movzbl	(%rax), %eax
 4301 3efd 8885DFF2 		movb	%al, -3361(%rbp)
 4301      FFFF
 4302 3f03 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4302      FFFF00
 4303 3f0a 7553     		jne	.L229
 4304              		.loc 2 579 0 is_stmt 0 discriminator 1
 4305 3f0c 488B85B8 		movq	-3400(%rbp), %rax
 4305      F2FFFF
 4306 3f13 4889C2   		movq	%rax, %rdx
 4307 3f16 488B85C0 		movq	-3392(%rbp), %rax
 4307      F2FFFF
 4308 3f1d 4829C2   		subq	%rax, %rdx
 4309 3f20 4889D0   		movq	%rdx, %rax
 4310 3f23 4889C7   		movq	%rax, %rdi
 4311 3f26 E88BC2FF 		call	spaces
 4311      FF
 4312 3f2b 4889C1   		movq	%rax, %rcx
 4313 3f2e 488B95C0 		movq	-3392(%rbp), %rdx
 4313      F2FFFF
 4314 3f35 488B85B0 		movq	-3408(%rbp), %rax
 4314      F2FFFF
 4315 3f3c 488D3500 		leaq	.LC32(%rip), %rsi
 4315      000000
 4316 3f43 4889C7   		movq	%rax, %rdi
 4317 3f46 B8000000 		movl	$0, %eax
 4317      00
 4318 3f4b E8000000 		call	errRender@PLT
 4318      00
 4319 3f50 C785E8F2 		movl	$11, -3352(%rbp)
 4319      FFFF0B00 
 4319      0000
 4320 3f5a E92C0B00 		jmp	.L221
 4320      00
 4321              	.L229:
 4322              		.loc 2 579 0 discriminator 2
 4323 3f5f 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4323      FFFF40
 4324 3f66 7E09     		jle	.L230
 4325              		.loc 2 579 0 discriminator 4
 4326 3f68 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4326      FFFF5A
 4327 3f6f 7E53     		jle	.L231
 4328              	.L230:
 4329              		.loc 2 579 0 discriminator 5
 4330 3f71 488B85B8 		movq	-3400(%rbp), %rax
 4330      F2FFFF
 4331 3f78 4889C2   		movq	%rax, %rdx
 4332 3f7b 488B85C0 		movq	-3392(%rbp), %rax
 4332      F2FFFF
 4333 3f82 4829C2   		subq	%rax, %rdx
 4334 3f85 4889D0   		movq	%rdx, %rax
 4335 3f88 4889C7   		movq	%rax, %rdi
 4336 3f8b E826C2FF 		call	spaces
 4336      FF
 4337 3f90 4889C1   		movq	%rax, %rcx
 4338 3f93 488B95C0 		movq	-3392(%rbp), %rdx
 4338      F2FFFF
 4339 3f9a 488B85B0 		movq	-3408(%rbp), %rax
 4339      F2FFFF
 4340 3fa1 488D3500 		leaq	.LC33(%rip), %rsi
 4340      000000
 4341 3fa8 4889C7   		movq	%rax, %rdi
 4342 3fab B8000000 		movl	$0, %eax
 4342      00
 4343 3fb0 E8000000 		call	errRender@PLT
 4343      00
 4344 3fb5 C785E8F2 		movl	$11, -3352(%rbp)
 4344      FFFF0B00 
 4344      0000
 4345 3fbf E9C70A00 		jmp	.L221
 4345      00
 4346              	.L231:
 4347              		.loc 2 579 0 discriminator 6
 4348 3fc4 0FB685DF 		movzbl	-3361(%rbp), %eax
 4348      F2FFFF
 4349 3fcb 83E841   		subl	$65, %eax
 4350 3fce 8885E2F2 		movb	%al, -3358(%rbp)
 4350      FFFF
 4351 3fd4 488B85B8 		movq	-3400(%rbp), %rax
 4351      F2FFFF
 4352 3fdb 4883C001 		addq	$1, %rax
 4353 3fdf 488985B8 		movq	%rax, -3400(%rbp)
 4353      F2FFFF
 4354 3fe6 488B85B8 		movq	-3400(%rbp), %rax
 4354      F2FFFF
 4355 3fed 0FB600   		movzbl	(%rax), %eax
 4356 3ff0 8885DFF2 		movb	%al, -3361(%rbp)
 4356      FFFF
 4357 3ff6 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4357      FFFF00
 4358 3ffd 7553     		jne	.L232
 4359              		.loc 2 579 0 discriminator 7
 4360 3fff 488B85B8 		movq	-3400(%rbp), %rax
 4360      F2FFFF
 4361 4006 4889C2   		movq	%rax, %rdx
 4362 4009 488B85C0 		movq	-3392(%rbp), %rax
 4362      F2FFFF
 4363 4010 4829C2   		subq	%rax, %rdx
 4364 4013 4889D0   		movq	%rdx, %rax
 4365 4016 4889C7   		movq	%rax, %rdi
 4366 4019 E898C1FF 		call	spaces
 4366      FF
 4367 401e 4889C1   		movq	%rax, %rcx
 4368 4021 488B95C0 		movq	-3392(%rbp), %rdx
 4368      F2FFFF
 4369 4028 488B85B0 		movq	-3408(%rbp), %rax
 4369      F2FFFF
 4370 402f 488D3500 		leaq	.LC32(%rip), %rsi
 4370      000000
 4371 4036 4889C7   		movq	%rax, %rdi
 4372 4039 B8000000 		movl	$0, %eax
 4372      00
 4373 403e E8000000 		call	errRender@PLT
 4373      00
 4374 4043 C785E8F2 		movl	$11, -3352(%rbp)
 4374      FFFF0B00 
 4374      0000
 4375 404d E9390A00 		jmp	.L221
 4375      00
 4376              	.L232:
 4377              		.loc 2 579 0 discriminator 8
 4378 4052 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4378      FFFF2F
 4379 4059 7E09     		jle	.L233
 4380              		.loc 2 579 0 discriminator 10
 4381 405b 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4381      FFFF39
 4382 4062 7E53     		jle	.L234
 4383              	.L233:
 4384              		.loc 2 579 0 discriminator 11
 4385 4064 488B85B8 		movq	-3400(%rbp), %rax
 4385      F2FFFF
 4386 406b 4889C2   		movq	%rax, %rdx
 4387 406e 488B85C0 		movq	-3392(%rbp), %rax
 4387      F2FFFF
 4388 4075 4829C2   		subq	%rax, %rdx
 4389 4078 4889D0   		movq	%rdx, %rax
 4390 407b 4889C7   		movq	%rax, %rdi
 4391 407e E833C1FF 		call	spaces
 4391      FF
 4392 4083 4889C1   		movq	%rax, %rcx
 4393 4086 488B95C0 		movq	-3392(%rbp), %rdx
 4393      F2FFFF
 4394 408d 488B85B0 		movq	-3408(%rbp), %rax
 4394      F2FFFF
 4395 4094 488D3500 		leaq	.LC34(%rip), %rsi
 4395      000000
 4396 409b 4889C7   		movq	%rax, %rdi
 4397 409e B8000000 		movl	$0, %eax
 4397      00
 4398 40a3 E8000000 		call	errRender@PLT
 4398      00
 4399 40a8 C785E8F2 		movl	$11, -3352(%rbp)
 4399      FFFF0B00 
 4399      0000
 4400 40b2 E9D40900 		jmp	.L221
 4400      00
 4401              	.L234:
 4402              		.loc 2 579 0 discriminator 12
 4403 40b7 488B85B8 		movq	-3400(%rbp), %rax
 4403      F2FFFF
 4404 40be 488D8DB8 		leaq	-3400(%rbp), %rcx
 4404      F2FFFF
 4405 40c5 BA0A0000 		movl	$10, %edx
 4405      00
 4406 40ca 4889CE   		movq	%rcx, %rsi
 4407 40cd 4889C7   		movq	%rax, %rdi
 4408 40d0 E8000000 		call	strtoul@PLT
 4408      00
 4409 40d5 8885E3F2 		movb	%al, -3357(%rbp)
 4409      FFFF
 580:prog.c        **** 	SET_BIT(mosiPort, mosiBit, PIN_LOW, "progOpen");
 4410              		.loc 2 580 0 is_stmt 1 discriminator 12
 4411 40db 0FB695E2 		movzbl	-3358(%rbp), %edx
 4411      F2FFFF
 4412 40e2 0FB685E3 		movzbl	-3357(%rbp), %eax
 4412      F2FFFF
 4413 40e9 4898     		cltq
 4414 40eb 4863D2   		movslq	%edx, %rdx
 4415 40ee 48C1E205 		salq	$5, %rdx
 4416 40f2 4801D0   		addq	%rdx, %rax
 4417 40f5 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4417      F2FFFF
 4418 40fc 85C0     		testl	%eax, %eax
 4419 40fe 7472     		je	.L235
 4420              		.loc 2 580 0 is_stmt 0 discriminator 1
 4421 4100 488B85B8 		movq	-3400(%rbp), %rax
 4421      F2FFFF
 4422 4107 4889C2   		movq	%rax, %rdx
 4423 410a 488B85C0 		movq	-3392(%rbp), %rax
 4423      F2FFFF
 4424 4111 4829C2   		subq	%rax, %rdx
 4425 4114 4889D0   		movq	%rdx, %rax
 4426 4117 4883E801 		subq	$1, %rax
 4427 411b 4889C7   		movq	%rax, %rdi
 4428 411e E893C0FF 		call	spaces
 4428      FF
 4429 4123 4889C7   		movq	%rax, %rdi
 4430 4126 0FB695E3 		movzbl	-3357(%rbp), %edx
 4430      F2FFFF
 4431 412d 0FB685E2 		movzbl	-3358(%rbp), %eax
 4431      F2FFFF
 4432 4134 8D7041   		leal	65(%rax), %esi
 4433 4137 488B8DC0 		movq	-3392(%rbp), %rcx
 4433      F2FFFF
 4434 413e 488B85B0 		movq	-3408(%rbp), %rax
 4434      F2FFFF
 4435 4145 4989F9   		movq	%rdi, %r9
 4436 4148 4989C8   		movq	%rcx, %r8
 4437 414b 89D1     		movl	%edx, %ecx
 4438 414d 89F2     		movl	%esi, %edx
 4439 414f 488D3500 		leaq	.LC35(%rip), %rsi
 4439      000000
 4440 4156 4889C7   		movq	%rax, %rdi
 4441 4159 B8000000 		movl	$0, %eax
 4441      00
 4442 415e E8000000 		call	errRender@PLT
 4442      00
 4443 4163 C785E8F2 		movl	$11, -3352(%rbp)
 4443      FFFF0B00 
 4443      0000
 4444 416d E9190900 		jmp	.L221
 4444      00
 4445              	.L235:
 4446              		.loc 2 580 0 discriminator 2
 4447 4172 0FB695E2 		movzbl	-3358(%rbp), %edx
 4447      F2FFFF
 4448 4179 0FB685E3 		movzbl	-3357(%rbp), %eax
 4448      F2FFFF
 4449 4180 4898     		cltq
 4450 4182 4863D2   		movslq	%edx, %rdx
 4451 4185 48C1E205 		salq	$5, %rdx
 4452 4189 4801D0   		addq	%rdx, %rax
 4453 418c C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4453      F2FFFF02 
 4453      000000
 581:prog.c        **** 	fStatus = portMap(handle, LP_MOSI, mosiPort, mosiBit, error);
 4454              		.loc 2 581 0 is_stmt 1 discriminator 2
 4455 4197 0FB68DE3 		movzbl	-3357(%rbp), %ecx
 4455      F2FFFF
 4456 419e 0FB695E2 		movzbl	-3358(%rbp), %edx
 4456      F2FFFF
 4457 41a5 488BB5B0 		movq	-3408(%rbp), %rsi
 4457      F2FFFF
 4458 41ac 488B85C8 		movq	-3384(%rbp), %rax
 4458      F2FFFF
 4459 41b3 4989F0   		movq	%rsi, %r8
 4460 41b6 BE020000 		movl	$2, %esi
 4460      00
 4461 41bb 4889C7   		movq	%rax, %rdi
 4462 41be E87BC4FF 		call	portMap
 4462      FF
 4463 41c3 8985ECF2 		movl	%eax, -3348(%rbp)
 4463      FFFF
 582:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4464              		.loc 2 582 0 discriminator 2
 4465 41c9 83BDECF2 		cmpl	$0, -3348(%rbp)
 4465      FFFF00
 4466 41d0 7427     		je	.L236
 4467              		.loc 2 582 0 is_stmt 0 discriminator 1
 4468 41d2 488B85B0 		movq	-3408(%rbp), %rax
 4468      F2FFFF
 4469 41d9 488D3500 		leaq	.LC36(%rip), %rsi
 4469      000000
 4470 41e0 4889C7   		movq	%rax, %rdi
 4471 41e3 E8000000 		call	errPrefix@PLT
 4471      00
 4472 41e8 8B85ECF2 		movl	-3348(%rbp), %eax
 4472      FFFF
 4473 41ee 8985E8F2 		movl	%eax, -3352(%rbp)
 4473      FFFF
 4474 41f4 E9920800 		jmp	.L221
 4474      00
 4475              	.L236:
 583:prog.c        **** 
 584:prog.c        **** 	GET_PAIR(ssPort, ssBit, "progOpen");        // SS/TMS
 4476              		.loc 2 584 0 is_stmt 1
 4477 41f9 488B85B8 		movq	-3400(%rbp), %rax
 4477      F2FFFF
 4478 4200 0FB600   		movzbl	(%rax), %eax
 4479 4203 8885DFF2 		movb	%al, -3361(%rbp)
 4479      FFFF
 4480 4209 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4480      FFFF00
 4481 4210 7553     		jne	.L237
 4482              		.loc 2 584 0 is_stmt 0 discriminator 1
 4483 4212 488B85B8 		movq	-3400(%rbp), %rax
 4483      F2FFFF
 4484 4219 4889C2   		movq	%rax, %rdx
 4485 421c 488B85C0 		movq	-3392(%rbp), %rax
 4485      F2FFFF
 4486 4223 4829C2   		subq	%rax, %rdx
 4487 4226 4889D0   		movq	%rdx, %rax
 4488 4229 4889C7   		movq	%rax, %rdi
 4489 422c E885BFFF 		call	spaces
 4489      FF
 4490 4231 4889C1   		movq	%rax, %rcx
 4491 4234 488B95C0 		movq	-3392(%rbp), %rdx
 4491      F2FFFF
 4492 423b 488B85B0 		movq	-3408(%rbp), %rax
 4492      F2FFFF
 4493 4242 488D3500 		leaq	.LC32(%rip), %rsi
 4493      000000
 4494 4249 4889C7   		movq	%rax, %rdi
 4495 424c B8000000 		movl	$0, %eax
 4495      00
 4496 4251 E8000000 		call	errRender@PLT
 4496      00
 4497 4256 C785E8F2 		movl	$11, -3352(%rbp)
 4497      FFFF0B00 
 4497      0000
 4498 4260 E9260800 		jmp	.L221
 4498      00
 4499              	.L237:
 4500              		.loc 2 584 0 discriminator 2
 4501 4265 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4501      FFFF40
 4502 426c 7E09     		jle	.L238
 4503              		.loc 2 584 0 discriminator 4
 4504 426e 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4504      FFFF5A
 4505 4275 7E53     		jle	.L239
 4506              	.L238:
 4507              		.loc 2 584 0 discriminator 5
 4508 4277 488B85B8 		movq	-3400(%rbp), %rax
 4508      F2FFFF
 4509 427e 4889C2   		movq	%rax, %rdx
 4510 4281 488B85C0 		movq	-3392(%rbp), %rax
 4510      F2FFFF
 4511 4288 4829C2   		subq	%rax, %rdx
 4512 428b 4889D0   		movq	%rdx, %rax
 4513 428e 4889C7   		movq	%rax, %rdi
 4514 4291 E820BFFF 		call	spaces
 4514      FF
 4515 4296 4889C1   		movq	%rax, %rcx
 4516 4299 488B95C0 		movq	-3392(%rbp), %rdx
 4516      F2FFFF
 4517 42a0 488B85B0 		movq	-3408(%rbp), %rax
 4517      F2FFFF
 4518 42a7 488D3500 		leaq	.LC33(%rip), %rsi
 4518      000000
 4519 42ae 4889C7   		movq	%rax, %rdi
 4520 42b1 B8000000 		movl	$0, %eax
 4520      00
 4521 42b6 E8000000 		call	errRender@PLT
 4521      00
 4522 42bb C785E8F2 		movl	$11, -3352(%rbp)
 4522      FFFF0B00 
 4522      0000
 4523 42c5 E9C10700 		jmp	.L221
 4523      00
 4524              	.L239:
 4525              		.loc 2 584 0 discriminator 6
 4526 42ca 0FB685DF 		movzbl	-3361(%rbp), %eax
 4526      F2FFFF
 4527 42d1 83E841   		subl	$65, %eax
 4528 42d4 8885E4F2 		movb	%al, -3356(%rbp)
 4528      FFFF
 4529 42da 488B85B8 		movq	-3400(%rbp), %rax
 4529      F2FFFF
 4530 42e1 4883C001 		addq	$1, %rax
 4531 42e5 488985B8 		movq	%rax, -3400(%rbp)
 4531      F2FFFF
 4532 42ec 488B85B8 		movq	-3400(%rbp), %rax
 4532      F2FFFF
 4533 42f3 0FB600   		movzbl	(%rax), %eax
 4534 42f6 8885DFF2 		movb	%al, -3361(%rbp)
 4534      FFFF
 4535 42fc 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4535      FFFF00
 4536 4303 7553     		jne	.L240
 4537              		.loc 2 584 0 discriminator 7
 4538 4305 488B85B8 		movq	-3400(%rbp), %rax
 4538      F2FFFF
 4539 430c 4889C2   		movq	%rax, %rdx
 4540 430f 488B85C0 		movq	-3392(%rbp), %rax
 4540      F2FFFF
 4541 4316 4829C2   		subq	%rax, %rdx
 4542 4319 4889D0   		movq	%rdx, %rax
 4543 431c 4889C7   		movq	%rax, %rdi
 4544 431f E892BEFF 		call	spaces
 4544      FF
 4545 4324 4889C1   		movq	%rax, %rcx
 4546 4327 488B95C0 		movq	-3392(%rbp), %rdx
 4546      F2FFFF
 4547 432e 488B85B0 		movq	-3408(%rbp), %rax
 4547      F2FFFF
 4548 4335 488D3500 		leaq	.LC32(%rip), %rsi
 4548      000000
 4549 433c 4889C7   		movq	%rax, %rdi
 4550 433f B8000000 		movl	$0, %eax
 4550      00
 4551 4344 E8000000 		call	errRender@PLT
 4551      00
 4552 4349 C785E8F2 		movl	$11, -3352(%rbp)
 4552      FFFF0B00 
 4552      0000
 4553 4353 E9330700 		jmp	.L221
 4553      00
 4554              	.L240:
 4555              		.loc 2 584 0 discriminator 8
 4556 4358 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4556      FFFF2F
 4557 435f 7E09     		jle	.L241
 4558              		.loc 2 584 0 discriminator 10
 4559 4361 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4559      FFFF39
 4560 4368 7E53     		jle	.L242
 4561              	.L241:
 4562              		.loc 2 584 0 discriminator 11
 4563 436a 488B85B8 		movq	-3400(%rbp), %rax
 4563      F2FFFF
 4564 4371 4889C2   		movq	%rax, %rdx
 4565 4374 488B85C0 		movq	-3392(%rbp), %rax
 4565      F2FFFF
 4566 437b 4829C2   		subq	%rax, %rdx
 4567 437e 4889D0   		movq	%rdx, %rax
 4568 4381 4889C7   		movq	%rax, %rdi
 4569 4384 E82DBEFF 		call	spaces
 4569      FF
 4570 4389 4889C1   		movq	%rax, %rcx
 4571 438c 488B95C0 		movq	-3392(%rbp), %rdx
 4571      F2FFFF
 4572 4393 488B85B0 		movq	-3408(%rbp), %rax
 4572      F2FFFF
 4573 439a 488D3500 		leaq	.LC34(%rip), %rsi
 4573      000000
 4574 43a1 4889C7   		movq	%rax, %rdi
 4575 43a4 B8000000 		movl	$0, %eax
 4575      00
 4576 43a9 E8000000 		call	errRender@PLT
 4576      00
 4577 43ae C785E8F2 		movl	$11, -3352(%rbp)
 4577      FFFF0B00 
 4577      0000
 4578 43b8 E9CE0600 		jmp	.L221
 4578      00
 4579              	.L242:
 4580              		.loc 2 584 0 discriminator 12
 4581 43bd 488B85B8 		movq	-3400(%rbp), %rax
 4581      F2FFFF
 4582 43c4 488D8DB8 		leaq	-3400(%rbp), %rcx
 4582      F2FFFF
 4583 43cb BA0A0000 		movl	$10, %edx
 4583      00
 4584 43d0 4889CE   		movq	%rcx, %rsi
 4585 43d3 4889C7   		movq	%rax, %rdi
 4586 43d6 E8000000 		call	strtoul@PLT
 4586      00
 4587 43db 8885E5F2 		movb	%al, -3355(%rbp)
 4587      FFFF
 585:prog.c        **** 	SET_BIT(ssPort, ssBit, PIN_LOW, "progOpen");
 4588              		.loc 2 585 0 is_stmt 1 discriminator 12
 4589 43e1 0FB695E4 		movzbl	-3356(%rbp), %edx
 4589      F2FFFF
 4590 43e8 0FB685E5 		movzbl	-3355(%rbp), %eax
 4590      F2FFFF
 4591 43ef 4898     		cltq
 4592 43f1 4863D2   		movslq	%edx, %rdx
 4593 43f4 48C1E205 		salq	$5, %rdx
 4594 43f8 4801D0   		addq	%rdx, %rax
 4595 43fb 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4595      F2FFFF
 4596 4402 85C0     		testl	%eax, %eax
 4597 4404 7472     		je	.L243
 4598              		.loc 2 585 0 is_stmt 0 discriminator 1
 4599 4406 488B85B8 		movq	-3400(%rbp), %rax
 4599      F2FFFF
 4600 440d 4889C2   		movq	%rax, %rdx
 4601 4410 488B85C0 		movq	-3392(%rbp), %rax
 4601      F2FFFF
 4602 4417 4829C2   		subq	%rax, %rdx
 4603 441a 4889D0   		movq	%rdx, %rax
 4604 441d 4883E801 		subq	$1, %rax
 4605 4421 4889C7   		movq	%rax, %rdi
 4606 4424 E88DBDFF 		call	spaces
 4606      FF
 4607 4429 4889C7   		movq	%rax, %rdi
 4608 442c 0FB695E5 		movzbl	-3355(%rbp), %edx
 4608      F2FFFF
 4609 4433 0FB685E4 		movzbl	-3356(%rbp), %eax
 4609      F2FFFF
 4610 443a 8D7041   		leal	65(%rax), %esi
 4611 443d 488B8DC0 		movq	-3392(%rbp), %rcx
 4611      F2FFFF
 4612 4444 488B85B0 		movq	-3408(%rbp), %rax
 4612      F2FFFF
 4613 444b 4989F9   		movq	%rdi, %r9
 4614 444e 4989C8   		movq	%rcx, %r8
 4615 4451 89D1     		movl	%edx, %ecx
 4616 4453 89F2     		movl	%esi, %edx
 4617 4455 488D3500 		leaq	.LC35(%rip), %rsi
 4617      000000
 4618 445c 4889C7   		movq	%rax, %rdi
 4619 445f B8000000 		movl	$0, %eax
 4619      00
 4620 4464 E8000000 		call	errRender@PLT
 4620      00
 4621 4469 C785E8F2 		movl	$11, -3352(%rbp)
 4621      FFFF0B00 
 4621      0000
 4622 4473 E9130600 		jmp	.L221
 4622      00
 4623              	.L243:
 4624              		.loc 2 585 0 discriminator 2
 4625 4478 0FB695E4 		movzbl	-3356(%rbp), %edx
 4625      F2FFFF
 4626 447f 0FB685E5 		movzbl	-3355(%rbp), %eax
 4626      F2FFFF
 4627 4486 4898     		cltq
 4628 4488 4863D2   		movslq	%edx, %rdx
 4629 448b 48C1E205 		salq	$5, %rdx
 4630 448f 4801D0   		addq	%rdx, %rax
 4631 4492 C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4631      F2FFFF02 
 4631      000000
 586:prog.c        **** 	fStatus = portMap(handle, LP_SS, ssPort, ssBit, error);
 4632              		.loc 2 586 0 is_stmt 1 discriminator 2
 4633 449d 0FB68DE5 		movzbl	-3355(%rbp), %ecx
 4633      F2FFFF
 4634 44a4 0FB695E4 		movzbl	-3356(%rbp), %edx
 4634      F2FFFF
 4635 44ab 488BB5B0 		movq	-3408(%rbp), %rsi
 4635      F2FFFF
 4636 44b2 488B85C8 		movq	-3384(%rbp), %rax
 4636      F2FFFF
 4637 44b9 4989F0   		movq	%rsi, %r8
 4638 44bc BE030000 		movl	$3, %esi
 4638      00
 4639 44c1 4889C7   		movq	%rax, %rdi
 4640 44c4 E875C1FF 		call	portMap
 4640      FF
 4641 44c9 8985ECF2 		movl	%eax, -3348(%rbp)
 4641      FFFF
 587:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4642              		.loc 2 587 0 discriminator 2
 4643 44cf 83BDECF2 		cmpl	$0, -3348(%rbp)
 4643      FFFF00
 4644 44d6 7427     		je	.L244
 4645              		.loc 2 587 0 is_stmt 0 discriminator 1
 4646 44d8 488B85B0 		movq	-3408(%rbp), %rax
 4646      F2FFFF
 4647 44df 488D3500 		leaq	.LC36(%rip), %rsi
 4647      000000
 4648 44e6 4889C7   		movq	%rax, %rdi
 4649 44e9 E8000000 		call	errPrefix@PLT
 4649      00
 4650 44ee 8B85ECF2 		movl	-3348(%rbp), %eax
 4650      FFFF
 4651 44f4 8985E8F2 		movl	%eax, -3352(%rbp)
 4651      FFFF
 4652 44fa E98C0500 		jmp	.L221
 4652      00
 4653              	.L244:
 588:prog.c        **** 
 589:prog.c        **** 	GET_PAIR(sckPort, sckBit, "progOpen");        // SCK/TCK
 4654              		.loc 2 589 0 is_stmt 1
 4655 44ff 488B85B8 		movq	-3400(%rbp), %rax
 4655      F2FFFF
 4656 4506 0FB600   		movzbl	(%rax), %eax
 4657 4509 8885DFF2 		movb	%al, -3361(%rbp)
 4657      FFFF
 4658 450f 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4658      FFFF00
 4659 4516 7553     		jne	.L245
 4660              		.loc 2 589 0 is_stmt 0 discriminator 1
 4661 4518 488B85B8 		movq	-3400(%rbp), %rax
 4661      F2FFFF
 4662 451f 4889C2   		movq	%rax, %rdx
 4663 4522 488B85C0 		movq	-3392(%rbp), %rax
 4663      F2FFFF
 4664 4529 4829C2   		subq	%rax, %rdx
 4665 452c 4889D0   		movq	%rdx, %rax
 4666 452f 4889C7   		movq	%rax, %rdi
 4667 4532 E87FBCFF 		call	spaces
 4667      FF
 4668 4537 4889C1   		movq	%rax, %rcx
 4669 453a 488B95C0 		movq	-3392(%rbp), %rdx
 4669      F2FFFF
 4670 4541 488B85B0 		movq	-3408(%rbp), %rax
 4670      F2FFFF
 4671 4548 488D3500 		leaq	.LC32(%rip), %rsi
 4671      000000
 4672 454f 4889C7   		movq	%rax, %rdi
 4673 4552 B8000000 		movl	$0, %eax
 4673      00
 4674 4557 E8000000 		call	errRender@PLT
 4674      00
 4675 455c C785E8F2 		movl	$11, -3352(%rbp)
 4675      FFFF0B00 
 4675      0000
 4676 4566 E9200500 		jmp	.L221
 4676      00
 4677              	.L245:
 4678              		.loc 2 589 0 discriminator 2
 4679 456b 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4679      FFFF40
 4680 4572 7E09     		jle	.L246
 4681              		.loc 2 589 0 discriminator 4
 4682 4574 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4682      FFFF5A
 4683 457b 7E53     		jle	.L247
 4684              	.L246:
 4685              		.loc 2 589 0 discriminator 5
 4686 457d 488B85B8 		movq	-3400(%rbp), %rax
 4686      F2FFFF
 4687 4584 4889C2   		movq	%rax, %rdx
 4688 4587 488B85C0 		movq	-3392(%rbp), %rax
 4688      F2FFFF
 4689 458e 4829C2   		subq	%rax, %rdx
 4690 4591 4889D0   		movq	%rdx, %rax
 4691 4594 4889C7   		movq	%rax, %rdi
 4692 4597 E81ABCFF 		call	spaces
 4692      FF
 4693 459c 4889C1   		movq	%rax, %rcx
 4694 459f 488B95C0 		movq	-3392(%rbp), %rdx
 4694      F2FFFF
 4695 45a6 488B85B0 		movq	-3408(%rbp), %rax
 4695      F2FFFF
 4696 45ad 488D3500 		leaq	.LC33(%rip), %rsi
 4696      000000
 4697 45b4 4889C7   		movq	%rax, %rdi
 4698 45b7 B8000000 		movl	$0, %eax
 4698      00
 4699 45bc E8000000 		call	errRender@PLT
 4699      00
 4700 45c1 C785E8F2 		movl	$11, -3352(%rbp)
 4700      FFFF0B00 
 4700      0000
 4701 45cb E9BB0400 		jmp	.L221
 4701      00
 4702              	.L247:
 4703              		.loc 2 589 0 discriminator 6
 4704 45d0 0FB685DF 		movzbl	-3361(%rbp), %eax
 4704      F2FFFF
 4705 45d7 83E841   		subl	$65, %eax
 4706 45da 8885E6F2 		movb	%al, -3354(%rbp)
 4706      FFFF
 4707 45e0 488B85B8 		movq	-3400(%rbp), %rax
 4707      F2FFFF
 4708 45e7 4883C001 		addq	$1, %rax
 4709 45eb 488985B8 		movq	%rax, -3400(%rbp)
 4709      F2FFFF
 4710 45f2 488B85B8 		movq	-3400(%rbp), %rax
 4710      F2FFFF
 4711 45f9 0FB600   		movzbl	(%rax), %eax
 4712 45fc 8885DFF2 		movb	%al, -3361(%rbp)
 4712      FFFF
 4713 4602 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4713      FFFF00
 4714 4609 7553     		jne	.L248
 4715              		.loc 2 589 0 discriminator 7
 4716 460b 488B85B8 		movq	-3400(%rbp), %rax
 4716      F2FFFF
 4717 4612 4889C2   		movq	%rax, %rdx
 4718 4615 488B85C0 		movq	-3392(%rbp), %rax
 4718      F2FFFF
 4719 461c 4829C2   		subq	%rax, %rdx
 4720 461f 4889D0   		movq	%rdx, %rax
 4721 4622 4889C7   		movq	%rax, %rdi
 4722 4625 E88CBBFF 		call	spaces
 4722      FF
 4723 462a 4889C1   		movq	%rax, %rcx
 4724 462d 488B95C0 		movq	-3392(%rbp), %rdx
 4724      F2FFFF
 4725 4634 488B85B0 		movq	-3408(%rbp), %rax
 4725      F2FFFF
 4726 463b 488D3500 		leaq	.LC32(%rip), %rsi
 4726      000000
 4727 4642 4889C7   		movq	%rax, %rdi
 4728 4645 B8000000 		movl	$0, %eax
 4728      00
 4729 464a E8000000 		call	errRender@PLT
 4729      00
 4730 464f C785E8F2 		movl	$11, -3352(%rbp)
 4730      FFFF0B00 
 4730      0000
 4731 4659 E92D0400 		jmp	.L221
 4731      00
 4732              	.L248:
 4733              		.loc 2 589 0 discriminator 8
 4734 465e 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4734      FFFF2F
 4735 4665 7E09     		jle	.L249
 4736              		.loc 2 589 0 discriminator 10
 4737 4667 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4737      FFFF39
 4738 466e 7E53     		jle	.L250
 4739              	.L249:
 4740              		.loc 2 589 0 discriminator 11
 4741 4670 488B85B8 		movq	-3400(%rbp), %rax
 4741      F2FFFF
 4742 4677 4889C2   		movq	%rax, %rdx
 4743 467a 488B85C0 		movq	-3392(%rbp), %rax
 4743      F2FFFF
 4744 4681 4829C2   		subq	%rax, %rdx
 4745 4684 4889D0   		movq	%rdx, %rax
 4746 4687 4889C7   		movq	%rax, %rdi
 4747 468a E827BBFF 		call	spaces
 4747      FF
 4748 468f 4889C1   		movq	%rax, %rcx
 4749 4692 488B95C0 		movq	-3392(%rbp), %rdx
 4749      F2FFFF
 4750 4699 488B85B0 		movq	-3408(%rbp), %rax
 4750      F2FFFF
 4751 46a0 488D3500 		leaq	.LC34(%rip), %rsi
 4751      000000
 4752 46a7 4889C7   		movq	%rax, %rdi
 4753 46aa B8000000 		movl	$0, %eax
 4753      00
 4754 46af E8000000 		call	errRender@PLT
 4754      00
 4755 46b4 C785E8F2 		movl	$11, -3352(%rbp)
 4755      FFFF0B00 
 4755      0000
 4756 46be E9C80300 		jmp	.L221
 4756      00
 4757              	.L250:
 4758              		.loc 2 589 0 discriminator 12
 4759 46c3 488B85B8 		movq	-3400(%rbp), %rax
 4759      F2FFFF
 4760 46ca 488D8DB8 		leaq	-3400(%rbp), %rcx
 4760      F2FFFF
 4761 46d1 BA0A0000 		movl	$10, %edx
 4761      00
 4762 46d6 4889CE   		movq	%rcx, %rsi
 4763 46d9 4889C7   		movq	%rax, %rdi
 4764 46dc E8000000 		call	strtoul@PLT
 4764      00
 4765 46e1 8885E7F2 		movb	%al, -3353(%rbp)
 4765      FFFF
 590:prog.c        **** 	SET_BIT(sckPort, sckBit, PIN_LOW, "progOpen");
 4766              		.loc 2 590 0 is_stmt 1 discriminator 12
 4767 46e7 0FB695E6 		movzbl	-3354(%rbp), %edx
 4767      F2FFFF
 4768 46ee 0FB685E7 		movzbl	-3353(%rbp), %eax
 4768      F2FFFF
 4769 46f5 4898     		cltq
 4770 46f7 4863D2   		movslq	%edx, %rdx
 4771 46fa 48C1E205 		salq	$5, %rdx
 4772 46fe 4801D0   		addq	%rdx, %rax
 4773 4701 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4773      F2FFFF
 4774 4708 85C0     		testl	%eax, %eax
 4775 470a 7472     		je	.L251
 4776              		.loc 2 590 0 is_stmt 0 discriminator 1
 4777 470c 488B85B8 		movq	-3400(%rbp), %rax
 4777      F2FFFF
 4778 4713 4889C2   		movq	%rax, %rdx
 4779 4716 488B85C0 		movq	-3392(%rbp), %rax
 4779      F2FFFF
 4780 471d 4829C2   		subq	%rax, %rdx
 4781 4720 4889D0   		movq	%rdx, %rax
 4782 4723 4883E801 		subq	$1, %rax
 4783 4727 4889C7   		movq	%rax, %rdi
 4784 472a E887BAFF 		call	spaces
 4784      FF
 4785 472f 4889C7   		movq	%rax, %rdi
 4786 4732 0FB695E7 		movzbl	-3353(%rbp), %edx
 4786      F2FFFF
 4787 4739 0FB685E6 		movzbl	-3354(%rbp), %eax
 4787      F2FFFF
 4788 4740 8D7041   		leal	65(%rax), %esi
 4789 4743 488B8DC0 		movq	-3392(%rbp), %rcx
 4789      F2FFFF
 4790 474a 488B85B0 		movq	-3408(%rbp), %rax
 4790      F2FFFF
 4791 4751 4989F9   		movq	%rdi, %r9
 4792 4754 4989C8   		movq	%rcx, %r8
 4793 4757 89D1     		movl	%edx, %ecx
 4794 4759 89F2     		movl	%esi, %edx
 4795 475b 488D3500 		leaq	.LC35(%rip), %rsi
 4795      000000
 4796 4762 4889C7   		movq	%rax, %rdi
 4797 4765 B8000000 		movl	$0, %eax
 4797      00
 4798 476a E8000000 		call	errRender@PLT
 4798      00
 4799 476f C785E8F2 		movl	$11, -3352(%rbp)
 4799      FFFF0B00 
 4799      0000
 4800 4779 E90D0300 		jmp	.L221
 4800      00
 4801              	.L251:
 4802              		.loc 2 590 0 discriminator 2
 4803 477e 0FB695E6 		movzbl	-3354(%rbp), %edx
 4803      F2FFFF
 4804 4785 0FB685E7 		movzbl	-3353(%rbp), %eax
 4804      F2FFFF
 4805 478c 4898     		cltq
 4806 478e 4863D2   		movslq	%edx, %rdx
 4807 4791 48C1E205 		salq	$5, %rdx
 4808 4795 4801D0   		addq	%rdx, %rax
 4809 4798 C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4809      F2FFFF02 
 4809      000000
 591:prog.c        **** 	fStatus = portMap(handle, LP_SCK, sckPort, sckBit, error);
 4810              		.loc 2 591 0 is_stmt 1 discriminator 2
 4811 47a3 0FB68DE7 		movzbl	-3353(%rbp), %ecx
 4811      F2FFFF
 4812 47aa 0FB695E6 		movzbl	-3354(%rbp), %edx
 4812      F2FFFF
 4813 47b1 488BB5B0 		movq	-3408(%rbp), %rsi
 4813      F2FFFF
 4814 47b8 488B85C8 		movq	-3384(%rbp), %rax
 4814      F2FFFF
 4815 47bf 4989F0   		movq	%rsi, %r8
 4816 47c2 BE040000 		movl	$4, %esi
 4816      00
 4817 47c7 4889C7   		movq	%rax, %rdi
 4818 47ca E86FBEFF 		call	portMap
 4818      FF
 4819 47cf 8985ECF2 		movl	%eax, -3348(%rbp)
 4819      FFFF
 592:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4820              		.loc 2 592 0 discriminator 2
 4821 47d5 83BDECF2 		cmpl	$0, -3348(%rbp)
 4821      FFFF00
 4822 47dc 7427     		je	.L252
 4823              		.loc 2 592 0 is_stmt 0 discriminator 1
 4824 47de 488B85B0 		movq	-3408(%rbp), %rax
 4824      F2FFFF
 4825 47e5 488D3500 		leaq	.LC36(%rip), %rsi
 4825      000000
 4826 47ec 4889C7   		movq	%rax, %rdi
 4827 47ef E8000000 		call	errPrefix@PLT
 4827      00
 4828 47f4 8B85ECF2 		movl	-3348(%rbp), %eax
 4828      FFFF
 4829 47fa 8985E8F2 		movl	%eax, -3352(%rbp)
 4829      FFFF
 4830 4800 E9860200 		jmp	.L221
 4830      00
 4831              	.L252:
 593:prog.c        **** 
 594:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 4832              		.loc 2 594 0 is_stmt 1
 4833 4805 488B95B0 		movq	-3408(%rbp), %rdx
 4833      F2FFFF
 4834 480c 488B85C8 		movq	-3384(%rbp), %rax
 4834      F2FFFF
 4835 4813 4989D0   		movq	%rdx, %r8
 4836 4816 B9000000 		movl	$0, %ecx
 4836      00
 4837 481b BA000000 		movl	$0, %edx
 4837      00
 4838 4820 BE000000 		movl	$0, %esi
 4838      00
 4839 4825 4889C7   		movq	%rax, %rdi
 4840 4828 E811BEFF 		call	portMap
 4840      FF
 4841 482d 8985ECF2 		movl	%eax, -3348(%rbp)
 4841      FFFF
 595:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4842              		.loc 2 595 0
 4843 4833 83BDECF2 		cmpl	$0, -3348(%rbp)
 4843      FFFF00
 4844 483a 7427     		je	.L253
 4845              		.loc 2 595 0 is_stmt 0 discriminator 1
 4846 483c 488B85B0 		movq	-3408(%rbp), %rax
 4846      F2FFFF
 4847 4843 488D3500 		leaq	.LC36(%rip), %rsi
 4847      000000
 4848 484a 4889C7   		movq	%rax, %rdi
 4849 484d E8000000 		call	errPrefix@PLT
 4849      00
 4850 4852 8B85ECF2 		movl	-3348(%rbp), %eax
 4850      FFFF
 4851 4858 8985E8F2 		movl	%eax, -3352(%rbp)
 4851      FFFF
 4852 485e E9280200 		jmp	.L221
 4852      00
 4853              	.L253:
 596:prog.c        **** 
 597:prog.c        **** 	// Set MISO/TDO as an input and the other three as outputs
 598:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, misoPort, misoBit, PIN_INPUT, NULL, error);
 4854              		.loc 2 598 0 is_stmt 1
 4855 4863 0FB695E1 		movzbl	-3359(%rbp), %edx
 4855      F2FFFF
 4856 486a 0FB6B5E0 		movzbl	-3360(%rbp), %esi
 4856      F2FFFF
 4857 4871 488B8DB0 		movq	-3408(%rbp), %rcx
 4857      F2FFFF
 4858 4878 488B85C8 		movq	-3384(%rbp), %rax
 4858      F2FFFF
 4859 487f 4989C9   		movq	%rcx, %r9
 4860 4882 41B80000 		movl	$0, %r8d
 4860      0000
 4861 4888 B9030000 		movl	$3, %ecx
 4861      00
 4862 488d 4889C7   		movq	%rax, %rdi
 4863 4890 E8000000 		call	flSingleBitPortAccess@PLT
 4863      00
 4864 4895 8985ECF2 		movl	%eax, -3348(%rbp)
 4864      FFFF
 599:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4865              		.loc 2 599 0
 4866 489b 83BDECF2 		cmpl	$0, -3348(%rbp)
 4866      FFFF00
 4867 48a2 7427     		je	.L254
 4868              		.loc 2 599 0 is_stmt 0 discriminator 1
 4869 48a4 488B85B0 		movq	-3408(%rbp), %rax
 4869      F2FFFF
 4870 48ab 488D3500 		leaq	.LC36(%rip), %rsi
 4870      000000
 4871 48b2 4889C7   		movq	%rax, %rdi
 4872 48b5 E8000000 		call	errPrefix@PLT
 4872      00
 4873 48ba 8B85ECF2 		movl	-3348(%rbp), %eax
 4873      FFFF
 4874 48c0 8985E8F2 		movl	%eax, -3352(%rbp)
 4874      FFFF
 4875 48c6 E9C00100 		jmp	.L221
 4875      00
 4876              	.L254:
 600:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, mosiPort, mosiBit, PIN_LOW, NULL, error);
 4877              		.loc 2 600 0 is_stmt 1
 4878 48cb 0FB695E3 		movzbl	-3357(%rbp), %edx
 4878      F2FFFF
 4879 48d2 0FB6B5E2 		movzbl	-3358(%rbp), %esi
 4879      F2FFFF
 4880 48d9 488B8DB0 		movq	-3408(%rbp), %rcx
 4880      F2FFFF
 4881 48e0 488B85C8 		movq	-3384(%rbp), %rax
 4881      F2FFFF
 4882 48e7 4989C9   		movq	%rcx, %r9
 4883 48ea 41B80000 		movl	$0, %r8d
 4883      0000
 4884 48f0 B9020000 		movl	$2, %ecx
 4884      00
 4885 48f5 4889C7   		movq	%rax, %rdi
 4886 48f8 E8000000 		call	flSingleBitPortAccess@PLT
 4886      00
 4887 48fd 8985ECF2 		movl	%eax, -3348(%rbp)
 4887      FFFF
 601:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4888              		.loc 2 601 0
 4889 4903 83BDECF2 		cmpl	$0, -3348(%rbp)
 4889      FFFF00
 4890 490a 7427     		je	.L255
 4891              		.loc 2 601 0 is_stmt 0 discriminator 1
 4892 490c 488B85B0 		movq	-3408(%rbp), %rax
 4892      F2FFFF
 4893 4913 488D3500 		leaq	.LC36(%rip), %rsi
 4893      000000
 4894 491a 4889C7   		movq	%rax, %rdi
 4895 491d E8000000 		call	errPrefix@PLT
 4895      00
 4896 4922 8B85ECF2 		movl	-3348(%rbp), %eax
 4896      FFFF
 4897 4928 8985E8F2 		movl	%eax, -3352(%rbp)
 4897      FFFF
 4898 492e E9580100 		jmp	.L221
 4898      00
 4899              	.L255:
 602:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ssPort, ssBit, PIN_LOW, NULL, error);
 4900              		.loc 2 602 0 is_stmt 1
 4901 4933 0FB695E5 		movzbl	-3355(%rbp), %edx
 4901      F2FFFF
 4902 493a 0FB6B5E4 		movzbl	-3356(%rbp), %esi
 4902      F2FFFF
 4903 4941 488B8DB0 		movq	-3408(%rbp), %rcx
 4903      F2FFFF
 4904 4948 488B85C8 		movq	-3384(%rbp), %rax
 4904      F2FFFF
 4905 494f 4989C9   		movq	%rcx, %r9
 4906 4952 41B80000 		movl	$0, %r8d
 4906      0000
 4907 4958 B9020000 		movl	$2, %ecx
 4907      00
 4908 495d 4889C7   		movq	%rax, %rdi
 4909 4960 E8000000 		call	flSingleBitPortAccess@PLT
 4909      00
 4910 4965 8985ECF2 		movl	%eax, -3348(%rbp)
 4910      FFFF
 603:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4911              		.loc 2 603 0
 4912 496b 83BDECF2 		cmpl	$0, -3348(%rbp)
 4912      FFFF00
 4913 4972 7427     		je	.L256
 4914              		.loc 2 603 0 is_stmt 0 discriminator 1
 4915 4974 488B85B0 		movq	-3408(%rbp), %rax
 4915      F2FFFF
 4916 497b 488D3500 		leaq	.LC36(%rip), %rsi
 4916      000000
 4917 4982 4889C7   		movq	%rax, %rdi
 4918 4985 E8000000 		call	errPrefix@PLT
 4918      00
 4919 498a 8B85ECF2 		movl	-3348(%rbp), %eax
 4919      FFFF
 4920 4990 8985E8F2 		movl	%eax, -3352(%rbp)
 4920      FFFF
 4921 4996 E9F00000 		jmp	.L221
 4921      00
 4922              	.L256:
 604:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, sckPort, sckBit, PIN_LOW, NULL, error);
 4923              		.loc 2 604 0 is_stmt 1
 4924 499b 0FB695E7 		movzbl	-3353(%rbp), %edx
 4924      F2FFFF
 4925 49a2 0FB6B5E6 		movzbl	-3354(%rbp), %esi
 4925      F2FFFF
 4926 49a9 488B8DB0 		movq	-3408(%rbp), %rcx
 4926      F2FFFF
 4927 49b0 488B85C8 		movq	-3384(%rbp), %rax
 4927      F2FFFF
 4928 49b7 4989C9   		movq	%rcx, %r9
 4929 49ba 41B80000 		movl	$0, %r8d
 4929      0000
 4930 49c0 B9020000 		movl	$2, %ecx
 4930      00
 4931 49c5 4889C7   		movq	%rax, %rdi
 4932 49c8 E8000000 		call	flSingleBitPortAccess@PLT
 4932      00
 4933 49cd 8985ECF2 		movl	%eax, -3348(%rbp)
 4933      FFFF
 605:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4934              		.loc 2 605 0
 4935 49d3 83BDECF2 		cmpl	$0, -3348(%rbp)
 4935      FFFF00
 4936 49da 7427     		je	.L257
 4937              		.loc 2 605 0 is_stmt 0 discriminator 1
 4938 49dc 488B85B0 		movq	-3408(%rbp), %rax
 4938      F2FFFF
 4939 49e3 488D3500 		leaq	.LC36(%rip), %rsi
 4939      000000
 4940 49ea 4889C7   		movq	%rax, %rdi
 4941 49ed E8000000 		call	errPrefix@PLT
 4941      00
 4942 49f2 8B85ECF2 		movl	-3348(%rbp), %eax
 4942      FFFF
 4943 49f8 8985E8F2 		movl	%eax, -3352(%rbp)
 4943      FFFF
 4944 49fe E9880000 		jmp	.L221
 4944      00
 4945              	.L257:
 606:prog.c        **** 
 607:prog.c        **** 	// Remember the ports and bits for the benefit of progClose()
 608:prog.c        **** 	handle->misoPort = misoPort;
 4946              		.loc 2 608 0 is_stmt 1
 4947 4a03 488B85C8 		movq	-3384(%rbp), %rax
 4947      F2FFFF
 4948 4a0a 0FB695E0 		movzbl	-3360(%rbp), %edx
 4948      F2FFFF
 4949 4a11 885017   		movb	%dl, 23(%rax)
 609:prog.c        **** 	handle->misoBit = misoBit;
 4950              		.loc 2 609 0
 4951 4a14 488B85C8 		movq	-3384(%rbp), %rax
 4951      F2FFFF
 4952 4a1b 0FB695E1 		movzbl	-3359(%rbp), %edx
 4952      F2FFFF
 4953 4a22 885018   		movb	%dl, 24(%rax)
 610:prog.c        **** 	handle->mosiPort = mosiPort;
 4954              		.loc 2 610 0
 4955 4a25 488B85C8 		movq	-3384(%rbp), %rax
 4955      F2FFFF
 4956 4a2c 0FB695E2 		movzbl	-3358(%rbp), %edx
 4956      F2FFFF
 4957 4a33 885019   		movb	%dl, 25(%rax)
 611:prog.c        **** 	handle->mosiBit = mosiBit;
 4958              		.loc 2 611 0
 4959 4a36 488B85C8 		movq	-3384(%rbp), %rax
 4959      F2FFFF
 4960 4a3d 0FB695E3 		movzbl	-3357(%rbp), %edx
 4960      F2FFFF
 4961 4a44 88501A   		movb	%dl, 26(%rax)
 612:prog.c        **** 	handle->ssPort = ssPort;
 4962              		.loc 2 612 0
 4963 4a47 488B85C8 		movq	-3384(%rbp), %rax
 4963      F2FFFF
 4964 4a4e 0FB695E4 		movzbl	-3356(%rbp), %edx
 4964      F2FFFF
 4965 4a55 88501B   		movb	%dl, 27(%rax)
 613:prog.c        **** 	handle->ssBit = ssBit;
 4966              		.loc 2 613 0
 4967 4a58 488B85C8 		movq	-3384(%rbp), %rax
 4967      F2FFFF
 4968 4a5f 0FB695E5 		movzbl	-3355(%rbp), %edx
 4968      F2FFFF
 4969 4a66 88501C   		movb	%dl, 28(%rax)
 614:prog.c        **** 	handle->sckPort = sckPort;
 4970              		.loc 2 614 0
 4971 4a69 488B85C8 		movq	-3384(%rbp), %rax
 4971      F2FFFF
 4972 4a70 0FB695E6 		movzbl	-3354(%rbp), %edx
 4972      F2FFFF
 4973 4a77 88501D   		movb	%dl, 29(%rax)
 615:prog.c        **** 	handle->sckBit = sckBit;
 4974              		.loc 2 615 0
 4975 4a7a 488B85C8 		movq	-3384(%rbp), %rax
 4975      F2FFFF
 4976 4a81 0FB695E7 		movzbl	-3353(%rbp), %edx
 4976      F2FFFF
 4977 4a88 88501E   		movb	%dl, 30(%rax)
 4978              	.L221:
 616:prog.c        **** cleanup:
 617:prog.c        **** 	return retVal;
 4979              		.loc 2 617 0
 4980 4a8b 8B85E8F2 		movl	-3352(%rbp), %eax
 4980      FFFF
 618:prog.c        **** }
 4981              		.loc 2 618 0
 4982 4a91 488B75F8 		movq	-8(%rbp), %rsi
 4983 4a95 64483334 		xorq	%fs:40, %rsi
 4983      25280000 
 4983      00
 4984 4a9e 7405     		je	.L259
 4985 4aa0 E8000000 		call	__stack_chk_fail@PLT
 4985      00
 4986              	.L259:
 4987 4aa5 C9       		leave
 4988              		.cfi_def_cfa 7, 8
 4989 4aa6 C3       		ret
 4990              		.cfi_endproc
 4991              	.LFE14:
 4993              		.section	.rodata
 4994 0747 00       		.align 8
 4995              	.LC37:
 4996 0748 6A50726F 		.string	"jProgram(): Unexpected end of config string:\n  %s\n  %s^"
 4996      6772616D 
 4996      28293A20 
 4996      556E6578 
 4996      70656374 
 4997              		.align 8
 4998              	.LC38:
 4999 0780 6A50726F 		.string	"jProgram(): Expecting ':':\n  %s\n  %s^"
 4999      6772616D 
 4999      28293A20 
 4999      45787065 
 4999      6374696E 
 5000              	.LC39:
 5001 07a6 6A50726F 		.string	"jProgram()"
 5001      6772616D 
 5001      282900
 5002              		.text
 5004              	jProgram:
 5005              	.LFB15:
 619:prog.c        **** 
 620:prog.c        **** // Program a device over JTAG.
 621:prog.c        **** //
 622:prog.c        **** // Called by:
 623:prog.c        **** //   flProgram() -> jProgram()
 624:prog.c        **** //
 625:prog.c        **** static FLStatus jProgram(struct FLContext *handle, const char *portConfig, const uint8 *csvfData, c
 5006              		.loc 2 625 0
 5007              		.cfi_startproc
 5008 4aa7 55       		pushq	%rbp
 5009              		.cfi_def_cfa_offset 16
 5010              		.cfi_offset 6, -16
 5011 4aa8 4889E5   		movq	%rsp, %rbp
 5012              		.cfi_def_cfa_register 6
 5013 4aab 4883EC40 		subq	$64, %rsp
 5014 4aaf 48897DD8 		movq	%rdi, -40(%rbp)
 5015 4ab3 488975D0 		movq	%rsi, -48(%rbp)
 5016 4ab7 488955C8 		movq	%rdx, -56(%rbp)
 5017 4abb 48894DC0 		movq	%rcx, -64(%rbp)
 626:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5018              		.loc 2 626 0
 5019 4abf C745F000 		movl	$0, -16(%rbp)
 5019      000000
 627:prog.c        **** 	FLStatus fStatus;
 628:prog.c        **** 	const char *ptr = portConfig + 1;
 5020              		.loc 2 628 0
 5021 4ac6 488B45D0 		movq	-48(%rbp), %rax
 5022 4aca 4883C001 		addq	$1, %rax
 5023 4ace 488945F8 		movq	%rax, -8(%rbp)
 629:prog.c        **** 	char ch;
 630:prog.c        **** 	EXPECT_CHAR(':', "jProgram");
 5024              		.loc 2 630 0
 5025 4ad2 488B45F8 		movq	-8(%rbp), %rax
 5026 4ad6 0FB600   		movzbl	(%rax), %eax
 5027 4ad9 8845EF   		movb	%al, -17(%rbp)
 5028 4adc 807DEF00 		cmpb	$0, -17(%rbp)
 5029 4ae0 7541     		jne	.L261
 5030              		.loc 2 630 0 is_stmt 0 discriminator 1
 5031 4ae2 488B55F8 		movq	-8(%rbp), %rdx
 5032 4ae6 488B45D0 		movq	-48(%rbp), %rax
 5033 4aea 4829C2   		subq	%rax, %rdx
 5034 4aed 4889D0   		movq	%rdx, %rax
 5035 4af0 4889C7   		movq	%rax, %rdi
 5036 4af3 E8BEB6FF 		call	spaces
 5036      FF
 5037 4af8 4889C1   		movq	%rax, %rcx
 5038 4afb 488B55D0 		movq	-48(%rbp), %rdx
 5039 4aff 488B45C0 		movq	-64(%rbp), %rax
 5040 4b03 488D3500 		leaq	.LC37(%rip), %rsi
 5040      000000
 5041 4b0a 4889C7   		movq	%rax, %rdi
 5042 4b0d B8000000 		movl	$0, %eax
 5042      00
 5043 4b12 E8000000 		call	errRender@PLT
 5043      00
 5044 4b17 C745F00B 		movl	$11, -16(%rbp)
 5044      000000
 5045 4b1e E9FB0000 		jmp	.L262
 5045      00
 5046              	.L261:
 5047              		.loc 2 630 0 discriminator 2
 5048 4b23 807DEF3A 		cmpb	$58, -17(%rbp)
 5049 4b27 7441     		je	.L263
 5050              		.loc 2 630 0 discriminator 3
 5051 4b29 488B55F8 		movq	-8(%rbp), %rdx
 5052 4b2d 488B45D0 		movq	-48(%rbp), %rax
 5053 4b31 4829C2   		subq	%rax, %rdx
 5054 4b34 4889D0   		movq	%rdx, %rax
 5055 4b37 4889C7   		movq	%rax, %rdi
 5056 4b3a E877B6FF 		call	spaces
 5056      FF
 5057 4b3f 4889C1   		movq	%rax, %rcx
 5058 4b42 488B55D0 		movq	-48(%rbp), %rdx
 5059 4b46 488B45C0 		movq	-64(%rbp), %rax
 5060 4b4a 488D3500 		leaq	.LC38(%rip), %rsi
 5060      000000
 5061 4b51 4889C7   		movq	%rax, %rdi
 5062 4b54 B8000000 		movl	$0, %eax
 5062      00
 5063 4b59 E8000000 		call	errRender@PLT
 5063      00
 5064 4b5e C745F00B 		movl	$11, -16(%rbp)
 5064      000000
 5065 4b65 E9B40000 		jmp	.L262
 5065      00
 5066              	.L263:
 5067              		.loc 2 630 0 discriminator 4
 5068 4b6a 488345F8 		addq	$1, -8(%rbp)
 5068      01
 631:prog.c        **** 	fStatus = progOpenInternal(handle, portConfig, ptr, error);
 5069              		.loc 2 631 0 is_stmt 1 discriminator 4
 5070 4b6f 488B4DC0 		movq	-64(%rbp), %rcx
 5071 4b73 488B55F8 		movq	-8(%rbp), %rdx
 5072 4b77 488B75D0 		movq	-48(%rbp), %rsi
 5073 4b7b 488B45D8 		movq	-40(%rbp), %rax
 5074 4b7f 4889C7   		movq	%rax, %rdi
 5075 4b82 E80FF0FF 		call	progOpenInternal
 5075      FF
 5076 4b87 8945F4   		movl	%eax, -12(%rbp)
 632:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 5077              		.loc 2 632 0 discriminator 4
 5078 4b8a 837DF400 		cmpl	$0, -12(%rbp)
 5079 4b8e 741B     		je	.L264
 5080              		.loc 2 632 0 is_stmt 0 discriminator 1
 5081 4b90 488B45C0 		movq	-64(%rbp), %rax
 5082 4b94 488D3500 		leaq	.LC39(%rip), %rsi
 5082      000000
 5083 4b9b 4889C7   		movq	%rax, %rdi
 5084 4b9e E8000000 		call	errPrefix@PLT
 5084      00
 5085 4ba3 8B45F4   		movl	-12(%rbp), %eax
 5086 4ba6 8945F0   		movl	%eax, -16(%rbp)
 5087 4ba9 EB73     		jmp	.L262
 5088              	.L264:
 633:prog.c        **** 	fStatus = csvfPlay(handle, csvfData, error);
 5089              		.loc 2 633 0 is_stmt 1
 5090 4bab 488B55C0 		movq	-64(%rbp), %rdx
 5091 4baf 488B4DC8 		movq	-56(%rbp), %rcx
 5092 4bb3 488B45D8 		movq	-40(%rbp), %rax
 5093 4bb7 4889CE   		movq	%rcx, %rsi
 5094 4bba 4889C7   		movq	%rax, %rdi
 5095 4bbd E8000000 		call	csvfPlay@PLT
 5095      00
 5096 4bc2 8945F4   		movl	%eax, -12(%rbp)
 634:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 5097              		.loc 2 634 0
 5098 4bc5 837DF400 		cmpl	$0, -12(%rbp)
 5099 4bc9 741B     		je	.L265
 5100              		.loc 2 634 0 is_stmt 0 discriminator 1
 5101 4bcb 488B45C0 		movq	-64(%rbp), %rax
 5102 4bcf 488D3500 		leaq	.LC39(%rip), %rsi
 5102      000000
 5103 4bd6 4889C7   		movq	%rax, %rdi
 5104 4bd9 E8000000 		call	errPrefix@PLT
 5104      00
 5105 4bde 8B45F4   		movl	-12(%rbp), %eax
 5106 4be1 8945F0   		movl	%eax, -16(%rbp)
 5107 4be4 EB38     		jmp	.L262
 5108              	.L265:
 635:prog.c        **** 	fStatus = progClose(handle, error);
 5109              		.loc 2 635 0 is_stmt 1
 5110 4be6 488B55C0 		movq	-64(%rbp), %rdx
 5111 4bea 488B45D8 		movq	-40(%rbp), %rax
 5112 4bee 4889D6   		movq	%rdx, %rsi
 5113 4bf1 4889C7   		movq	%rax, %rdi
 5114 4bf4 E8000000 		call	progClose@PLT
 5114      00
 5115 4bf9 8945F4   		movl	%eax, -12(%rbp)
 636:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 5116              		.loc 2 636 0
 5117 4bfc 837DF400 		cmpl	$0, -12(%rbp)
 5118 4c00 741B     		je	.L267
 5119              		.loc 2 636 0 is_stmt 0 discriminator 1
 5120 4c02 488B45C0 		movq	-64(%rbp), %rax
 5121 4c06 488D3500 		leaq	.LC39(%rip), %rsi
 5121      000000
 5122 4c0d 4889C7   		movq	%rax, %rdi
 5123 4c10 E8000000 		call	errPrefix@PLT
 5123      00
 5124 4c15 8B45F4   		movl	-12(%rbp), %eax
 5125 4c18 8945F0   		movl	%eax, -16(%rbp)
 5126 4c1b EB01     		jmp	.L262
 5127              	.L267:
 637:prog.c        **** cleanup:
 5128              		.loc 2 637 0 is_stmt 1
 5129 4c1d 90       		nop
 5130              	.L262:
 638:prog.c        **** 	return retVal;
 5131              		.loc 2 638 0
 5132 4c1e 8B45F0   		movl	-16(%rbp), %eax
 639:prog.c        **** }
 5133              		.loc 2 639 0
 5134 4c21 C9       		leave
 5135              		.cfi_def_cfa 7, 8
 5136 4c22 C3       		ret
 5137              		.cfi_endproc
 5138              	.LFE15:
 5141              	swap:
 5142              	.LFB16:
 640:prog.c        **** 
 641:prog.c        **** // Reverse the array in-place by swapping the outer items and progressing inward until we meet in
 642:prog.c        **** // the middle.
 643:prog.c        **** //
 644:prog.c        **** // Called by:
 645:prog.c        **** //   jtagScanChain()
 646:prog.c        **** //
 647:prog.c        **** static void swap(uint32 *array, uint32 numWritten) {
 5143              		.loc 2 647 0
 5144              		.cfi_startproc
 5145 4c23 55       		pushq	%rbp
 5146              		.cfi_def_cfa_offset 16
 5147              		.cfi_offset 6, -16
 5148 4c24 4889E5   		movq	%rsp, %rbp
 5149              		.cfi_def_cfa_register 6
 5150 4c27 48897DD8 		movq	%rdi, -40(%rbp)
 5151 4c2b 8975D4   		movl	%esi, -44(%rbp)
 648:prog.c        **** 	uint32 *hiPtr = array + numWritten - 1;  // last one
 5152              		.loc 2 648 0
 5153 4c2e 8B45D4   		movl	-44(%rbp), %eax
 5154 4c31 48C1E002 		salq	$2, %rax
 5155 4c35 488D50FC 		leaq	-4(%rax), %rdx
 5156 4c39 488B45D8 		movq	-40(%rbp), %rax
 5157 4c3d 4801D0   		addq	%rdx, %rax
 5158 4c40 488945F0 		movq	%rax, -16(%rbp)
 649:prog.c        **** 	uint32 *loPtr = array; // first one
 5159              		.loc 2 649 0
 5160 4c44 488B45D8 		movq	-40(%rbp), %rax
 5161 4c48 488945F8 		movq	%rax, -8(%rbp)
 650:prog.c        **** 	uint32 temp;
 651:prog.c        **** 	while ( loPtr < hiPtr ) {
 5162              		.loc 2 651 0
 5163 4c4c EB2E     		jmp	.L269
 5164              	.L270:
 652:prog.c        **** 		temp = *loPtr;
 5165              		.loc 2 652 0
 5166 4c4e 488B45F8 		movq	-8(%rbp), %rax
 5167 4c52 8B00     		movl	(%rax), %eax
 5168 4c54 8945EC   		movl	%eax, -20(%rbp)
 653:prog.c        **** 		*loPtr++ = *hiPtr;
 5169              		.loc 2 653 0
 5170 4c57 488B45F8 		movq	-8(%rbp), %rax
 5171 4c5b 488D5004 		leaq	4(%rax), %rdx
 5172 4c5f 488955F8 		movq	%rdx, -8(%rbp)
 5173 4c63 488B55F0 		movq	-16(%rbp), %rdx
 5174 4c67 8B12     		movl	(%rdx), %edx
 5175 4c69 8910     		movl	%edx, (%rax)
 654:prog.c        **** 		*hiPtr-- = temp;
 5176              		.loc 2 654 0
 5177 4c6b 488B45F0 		movq	-16(%rbp), %rax
 5178 4c6f 488D50FC 		leaq	-4(%rax), %rdx
 5179 4c73 488955F0 		movq	%rdx, -16(%rbp)
 5180 4c77 8B55EC   		movl	-20(%rbp), %edx
 5181 4c7a 8910     		movl	%edx, (%rax)
 5182              	.L269:
 651:prog.c        **** 		temp = *loPtr;
 5183              		.loc 2 651 0
 5184 4c7c 488B45F8 		movq	-8(%rbp), %rax
 5185 4c80 483B45F0 		cmpq	-16(%rbp), %rax
 5186 4c84 72C8     		jb	.L270
 655:prog.c        **** 	}
 656:prog.c        **** }	
 5187              		.loc 2 656 0
 5188 4c86 90       		nop
 5189 4c87 5D       		popq	%rbp
 5190              		.cfi_def_cfa 7, 8
 5191 4c88 C3       		ret
 5192              		.cfi_endproc
 5193              	.LFE16:
 5195              		.globl	progOpen
 5197              	progOpen:
 5198              	.LFB17:
 657:prog.c        **** 
 658:prog.c        **** // ------------------------------------------------------------------------------------------------
 659:prog.c        **** // Implementation of public functions
 660:prog.c        **** // ------------------------------------------------------------------------------------------------
 661:prog.c        **** 
 662:prog.c        **** DLLEXPORT(FLStatus) progOpen(struct FLContext *handle, const char *portConfig, const char **error) 
 5199              		.loc 2 662 0
 5200              		.cfi_startproc
 5201 4c89 55       		pushq	%rbp
 5202              		.cfi_def_cfa_offset 16
 5203              		.cfi_offset 6, -16
 5204 4c8a 4889E5   		movq	%rsp, %rbp
 5205              		.cfi_def_cfa_register 6
 5206 4c8d 4883EC20 		subq	$32, %rsp
 5207 4c91 48897DF8 		movq	%rdi, -8(%rbp)
 5208 4c95 488975F0 		movq	%rsi, -16(%rbp)
 5209 4c99 488955E8 		movq	%rdx, -24(%rbp)
 663:prog.c        **** 	return progOpenInternal(handle, portConfig, portConfig, error);
 5210              		.loc 2 663 0
 5211 4c9d 488B4DE8 		movq	-24(%rbp), %rcx
 5212 4ca1 488B55F0 		movq	-16(%rbp), %rdx
 5213 4ca5 488B75F0 		movq	-16(%rbp), %rsi
 5214 4ca9 488B45F8 		movq	-8(%rbp), %rax
 5215 4cad 4889C7   		movq	%rax, %rdi
 5216 4cb0 E8E1EEFF 		call	progOpenInternal
 5216      FF
 664:prog.c        **** }
 5217              		.loc 2 664 0
 5218 4cb5 C9       		leave
 5219              		.cfi_def_cfa 7, 8
 5220 4cb6 C3       		ret
 5221              		.cfi_endproc
 5222              	.LFE17:
 5224              		.section	.rodata
 5225              	.LC40:
 5226 07b1 70726F67 		.string	"progClose()"
 5226      436C6F73 
 5226      65282900 
 5227              		.text
 5228              		.globl	progClose
 5230              	progClose:
 5231              	.LFB18:
 665:prog.c        **** 
 666:prog.c        **** DLLEXPORT(FLStatus) progClose(struct FLContext *handle, const char **error) {
 5232              		.loc 2 666 0
 5233              		.cfi_startproc
 5234 4cb7 55       		pushq	%rbp
 5235              		.cfi_def_cfa_offset 16
 5236              		.cfi_offset 6, -16
 5237 4cb8 4889E5   		movq	%rsp, %rbp
 5238              		.cfi_def_cfa_register 6
 5239 4cbb 4883EC20 		subq	$32, %rsp
 5240 4cbf 48897DE8 		movq	%rdi, -24(%rbp)
 5241 4cc3 488975E0 		movq	%rsi, -32(%rbp)
 667:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5242              		.loc 2 667 0
 5243 4cc7 C745F800 		movl	$0, -8(%rbp)
 5243      000000
 668:prog.c        **** 	FLStatus fStatus;
 669:prog.c        **** 
 670:prog.c        **** 	// Set MISO/TDO, MOSI/TDI, SS/TMS & SCK/TCK as inputs
 671:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->misoPort, handle->misoBit, PIN_INPUT, NULL, error)
 5244              		.loc 2 671 0
 5245 4cce 488B45E8 		movq	-24(%rbp), %rax
 5246 4cd2 0FB64018 		movzbl	24(%rax), %eax
 5247 4cd6 0FB6D0   		movzbl	%al, %edx
 5248 4cd9 488B45E8 		movq	-24(%rbp), %rax
 5249 4cdd 0FB64017 		movzbl	23(%rax), %eax
 5250 4ce1 0FB6F0   		movzbl	%al, %esi
 5251 4ce4 488B4DE0 		movq	-32(%rbp), %rcx
 5252 4ce8 488B45E8 		movq	-24(%rbp), %rax
 5253 4cec 4989C9   		movq	%rcx, %r9
 5254 4cef 41B80000 		movl	$0, %r8d
 5254      0000
 5255 4cf5 B9030000 		movl	$3, %ecx
 5255      00
 5256 4cfa 4889C7   		movq	%rax, %rdi
 5257 4cfd E8000000 		call	flSingleBitPortAccess@PLT
 5257      00
 5258 4d02 8945FC   		movl	%eax, -4(%rbp)
 672:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5259              		.loc 2 672 0
 5260 4d05 837DFC00 		cmpl	$0, -4(%rbp)
 5261 4d09 741E     		je	.L274
 5262              		.loc 2 672 0 is_stmt 0 discriminator 1
 5263 4d0b 488B45E0 		movq	-32(%rbp), %rax
 5264 4d0f 488D3500 		leaq	.LC40(%rip), %rsi
 5264      000000
 5265 4d16 4889C7   		movq	%rax, %rdi
 5266 4d19 E8000000 		call	errPrefix@PLT
 5266      00
 5267 4d1e 8B45FC   		movl	-4(%rbp), %eax
 5268 4d21 8945F8   		movl	%eax, -8(%rbp)
 5269 4d24 E90C0100 		jmp	.L275
 5269      00
 5270              	.L274:
 673:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->mosiPort, handle->mosiBit, PIN_INPUT, NULL, error)
 5271              		.loc 2 673 0 is_stmt 1
 5272 4d29 488B45E8 		movq	-24(%rbp), %rax
 5273 4d2d 0FB6401A 		movzbl	26(%rax), %eax
 5274 4d31 0FB6D0   		movzbl	%al, %edx
 5275 4d34 488B45E8 		movq	-24(%rbp), %rax
 5276 4d38 0FB64019 		movzbl	25(%rax), %eax
 5277 4d3c 0FB6F0   		movzbl	%al, %esi
 5278 4d3f 488B4DE0 		movq	-32(%rbp), %rcx
 5279 4d43 488B45E8 		movq	-24(%rbp), %rax
 5280 4d47 4989C9   		movq	%rcx, %r9
 5281 4d4a 41B80000 		movl	$0, %r8d
 5281      0000
 5282 4d50 B9030000 		movl	$3, %ecx
 5282      00
 5283 4d55 4889C7   		movq	%rax, %rdi
 5284 4d58 E8000000 		call	flSingleBitPortAccess@PLT
 5284      00
 5285 4d5d 8945FC   		movl	%eax, -4(%rbp)
 674:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5286              		.loc 2 674 0
 5287 4d60 837DFC00 		cmpl	$0, -4(%rbp)
 5288 4d64 741E     		je	.L276
 5289              		.loc 2 674 0 is_stmt 0 discriminator 1
 5290 4d66 488B45E0 		movq	-32(%rbp), %rax
 5291 4d6a 488D3500 		leaq	.LC40(%rip), %rsi
 5291      000000
 5292 4d71 4889C7   		movq	%rax, %rdi
 5293 4d74 E8000000 		call	errPrefix@PLT
 5293      00
 5294 4d79 8B45FC   		movl	-4(%rbp), %eax
 5295 4d7c 8945F8   		movl	%eax, -8(%rbp)
 5296 4d7f E9B10000 		jmp	.L275
 5296      00
 5297              	.L276:
 675:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->ssPort, handle->ssBit, PIN_INPUT, NULL, error);
 5298              		.loc 2 675 0 is_stmt 1
 5299 4d84 488B45E8 		movq	-24(%rbp), %rax
 5300 4d88 0FB6401C 		movzbl	28(%rax), %eax
 5301 4d8c 0FB6D0   		movzbl	%al, %edx
 5302 4d8f 488B45E8 		movq	-24(%rbp), %rax
 5303 4d93 0FB6401B 		movzbl	27(%rax), %eax
 5304 4d97 0FB6F0   		movzbl	%al, %esi
 5305 4d9a 488B4DE0 		movq	-32(%rbp), %rcx
 5306 4d9e 488B45E8 		movq	-24(%rbp), %rax
 5307 4da2 4989C9   		movq	%rcx, %r9
 5308 4da5 41B80000 		movl	$0, %r8d
 5308      0000
 5309 4dab B9030000 		movl	$3, %ecx
 5309      00
 5310 4db0 4889C7   		movq	%rax, %rdi
 5311 4db3 E8000000 		call	flSingleBitPortAccess@PLT
 5311      00
 5312 4db8 8945FC   		movl	%eax, -4(%rbp)
 676:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5313              		.loc 2 676 0
 5314 4dbb 837DFC00 		cmpl	$0, -4(%rbp)
 5315 4dbf 741B     		je	.L277
 5316              		.loc 2 676 0 is_stmt 0 discriminator 1
 5317 4dc1 488B45E0 		movq	-32(%rbp), %rax
 5318 4dc5 488D3500 		leaq	.LC40(%rip), %rsi
 5318      000000
 5319 4dcc 4889C7   		movq	%rax, %rdi
 5320 4dcf E8000000 		call	errPrefix@PLT
 5320      00
 5321 4dd4 8B45FC   		movl	-4(%rbp), %eax
 5322 4dd7 8945F8   		movl	%eax, -8(%rbp)
 5323 4dda EB59     		jmp	.L275
 5324              	.L277:
 677:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->sckPort, handle->sckBit, PIN_INPUT, NULL, error);
 5325              		.loc 2 677 0 is_stmt 1
 5326 4ddc 488B45E8 		movq	-24(%rbp), %rax
 5327 4de0 0FB6401E 		movzbl	30(%rax), %eax
 5328 4de4 0FB6D0   		movzbl	%al, %edx
 5329 4de7 488B45E8 		movq	-24(%rbp), %rax
 5330 4deb 0FB6401D 		movzbl	29(%rax), %eax
 5331 4def 0FB6F0   		movzbl	%al, %esi
 5332 4df2 488B4DE0 		movq	-32(%rbp), %rcx
 5333 4df6 488B45E8 		movq	-24(%rbp), %rax
 5334 4dfa 4989C9   		movq	%rcx, %r9
 5335 4dfd 41B80000 		movl	$0, %r8d
 5335      0000
 5336 4e03 B9030000 		movl	$3, %ecx
 5336      00
 5337 4e08 4889C7   		movq	%rax, %rdi
 5338 4e0b E8000000 		call	flSingleBitPortAccess@PLT
 5338      00
 5339 4e10 8945FC   		movl	%eax, -4(%rbp)
 678:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5340              		.loc 2 678 0
 5341 4e13 837DFC00 		cmpl	$0, -4(%rbp)
 5342 4e17 741B     		je	.L279
 5343              		.loc 2 678 0 is_stmt 0 discriminator 1
 5344 4e19 488B45E0 		movq	-32(%rbp), %rax
 5345 4e1d 488D3500 		leaq	.LC40(%rip), %rsi
 5345      000000
 5346 4e24 4889C7   		movq	%rax, %rdi
 5347 4e27 E8000000 		call	errPrefix@PLT
 5347      00
 5348 4e2c 8B45FC   		movl	-4(%rbp), %eax
 5349 4e2f 8945F8   		movl	%eax, -8(%rbp)
 5350 4e32 EB01     		jmp	.L275
 5351              	.L279:
 679:prog.c        **** cleanup:
 5352              		.loc 2 679 0 is_stmt 1
 5353 4e34 90       		nop
 5354              	.L275:
 680:prog.c        **** 	return retVal;
 5355              		.loc 2 680 0
 5356 4e35 8B45F8   		movl	-8(%rbp), %eax
 681:prog.c        **** }
 5357              		.loc 2 681 0
 5358 4e38 C9       		leave
 5359              		.cfi_def_cfa 7, 8
 5360 4e39 C3       		ret
 5361              		.cfi_endproc
 5362              	.LFE18:
 5364              		.section	.rodata
 5365              	.LC41:
 5366 07bd 6A746167 		.string	"jtagShiftInOut()"
 5366      53686966 
 5366      74496E4F 
 5366      75742829 
 5366      00
 5367              		.text
 5368              		.globl	jtagShiftInOut
 5370              	jtagShiftInOut:
 5371              	.LFB19:
 682:prog.c        **** 
 683:prog.c        **** // Shift data into and out of JTAG chain.
 684:prog.c        **** //   In pointer may be SHIFT_ZEROS (shift in zeros) or SHIFT_ONES (shift in ones).
 685:prog.c        **** //   Out pointer may be NULL (not interested in data shifted out of the chain).
 686:prog.c        **** //
 687:prog.c        **** DLLEXPORT(FLStatus) jtagShiftInOut(
 688:prog.c        **** 	struct FLContext *handle, uint32 numBits, const uint8 *inData, uint8 *outData, uint8 isLast,
 689:prog.c        **** 	const char **error)
 690:prog.c        **** {
 5372              		.loc 2 690 0
 5373              		.cfi_startproc
 5374 4e3a 55       		pushq	%rbp
 5375              		.cfi_def_cfa_offset 16
 5376              		.cfi_offset 6, -16
 5377 4e3b 4889E5   		movq	%rsp, %rbp
 5378              		.cfi_def_cfa_register 6
 5379 4e3e 4883EC40 		subq	$64, %rsp
 5380 4e42 48897DE8 		movq	%rdi, -24(%rbp)
 5381 4e46 8975E4   		movl	%esi, -28(%rbp)
 5382 4e49 488955D8 		movq	%rdx, -40(%rbp)
 5383 4e4d 48894DD0 		movq	%rcx, -48(%rbp)
 5384 4e51 4489C0   		movl	%r8d, %eax
 5385 4e54 4C894DC8 		movq	%r9, -56(%rbp)
 5386 4e58 8845E0   		movb	%al, -32(%rbp)
 691:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 5387              		.loc 2 691 0
 5388 4e5b C745F400 		movl	$0, -12(%rbp)
 5388      000000
 692:prog.c        **** 	uint32 numBytes = bitsToBytes(numBits);
 5389              		.loc 2 692 0
 5390 4e62 8B45E4   		movl	-28(%rbp), %eax
 5391 4e65 C1E803   		shrl	$3, %eax
 5392 4e68 89C2     		movl	%eax, %edx
 5393 4e6a 8B45E4   		movl	-28(%rbp), %eax
 5394 4e6d 83E007   		andl	$7, %eax
 5395 4e70 85C0     		testl	%eax, %eax
 5396 4e72 7407     		je	.L281
 5397              		.loc 2 692 0 is_stmt 0 discriminator 1
 5398 4e74 B8010000 		movl	$1, %eax
 5398      00
 5399 4e79 EB05     		jmp	.L282
 5400              	.L281:
 5401              		.loc 2 692 0 discriminator 2
 5402 4e7b B8000000 		movl	$0, %eax
 5402      00
 5403              	.L282:
 5404              		.loc 2 692 0 discriminator 4
 5405 4e80 01D0     		addl	%edx, %eax
 5406 4e82 8945F8   		movl	%eax, -8(%rbp)
 693:prog.c        **** 	uint16 chunkSize;
 694:prog.c        **** 	uint8 mode = 0x00;
 5407              		.loc 2 694 0 is_stmt 1 discriminator 4
 5408 4e85 C645F000 		movb	$0, -16(%rbp)
 695:prog.c        **** 	bool isSending = false;
 5409              		.loc 2 695 0 discriminator 4
 5410 4e89 C645F100 		movb	$0, -15(%rbp)
 696:prog.c        **** 
 697:prog.c        **** 	if ( inData == SHIFT_ONES ) {
 5411              		.loc 2 697 0 discriminator 4
 5412 4e8d 48837DD8 		cmpq	$-1, -40(%rbp)
 5412      FF
 5413 4e92 7506     		jne	.L283
 698:prog.c        **** 		mode |= bmSENDONES;
 5414              		.loc 2 698 0
 5415 4e94 804DF002 		orb	$2, -16(%rbp)
 5416 4e98 EB0B     		jmp	.L284
 5417              	.L283:
 699:prog.c        **** 	} else if ( inData != SHIFT_ZEROS ) {
 5418              		.loc 2 699 0
 5419 4e9a 48837DD8 		cmpq	$0, -40(%rbp)
 5419      00
 5420 4e9f 7404     		je	.L284
 700:prog.c        **** 		isSending = true;
 5421              		.loc 2 700 0
 5422 4ea1 C645F101 		movb	$1, -15(%rbp)
 5423              	.L284:
 701:prog.c        **** 	}
 702:prog.c        **** 	if ( isLast ) {
 5424              		.loc 2 702 0
 5425 4ea5 807DE000 		cmpb	$0, -32(%rbp)
 5426 4ea9 7404     		je	.L285
 703:prog.c        **** 		mode |= bmISLAST;
 5427              		.loc 2 703 0
 5428 4eab 804DF001 		orb	$1, -16(%rbp)
 5429              	.L285:
 704:prog.c        **** 	}
 705:prog.c        **** 	if ( isSending ) {
 5430              		.loc 2 705 0
 5431 4eaf 807DF100 		cmpb	$0, -15(%rbp)
 5432 4eb3 0F840401 		je	.L286
 5432      0000
 706:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_ISSENDING_ISRECEIVING, mode, error);
 5433              		.loc 2 706 0
 5434 4eb9 0FB655F0 		movzbl	-16(%rbp), %edx
 5435 4ebd 488B4DC8 		movq	-56(%rbp), %rcx
 5436 4ec1 8B75E4   		movl	-28(%rbp), %esi
 5437 4ec4 488B45E8 		movq	-24(%rbp), %rax
 5438 4ec8 4989C8   		movq	%rcx, %r8
 5439 4ecb 89D1     		movl	%edx, %ecx
 5440 4ecd BA010000 		movl	$1, %edx
 5440      00
 5441 4ed2 4889C7   		movq	%rax, %rdi
 5442 4ed5 E832B1FF 		call	beginShift
 5442      FF
 5443 4eda 8945FC   		movl	%eax, -4(%rbp)
 707:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5444              		.loc 2 707 0
 5445 4edd 837DFC00 		cmpl	$0, -4(%rbp)
 5446 4ee1 0F84C700 		je	.L289
 5446      0000
 5447              		.loc 2 707 0 is_stmt 0 discriminator 1
 5448 4ee7 488B45C8 		movq	-56(%rbp), %rax
 5449 4eeb 488D3500 		leaq	.LC41(%rip), %rsi
 5449      000000
 5450 4ef2 4889C7   		movq	%rax, %rdi
 5451 4ef5 E8000000 		call	errPrefix@PLT
 5451      00
 5452 4efa 8B45FC   		movl	-4(%rbp), %eax
 5453 4efd 8945F4   		movl	%eax, -12(%rbp)
 5454 4f00 E9630100 		jmp	.L288
 5454      00
 5455              	.L294:
 708:prog.c        **** 		while ( numBytes ) {
 709:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5456              		.loc 2 709 0 is_stmt 1
 5457 4f05 837DF83F 		cmpl	$63, -8(%rbp)
 5458 4f09 7705     		ja	.L290
 5459              		.loc 2 709 0 is_stmt 0 discriminator 1
 5460 4f0b 8B45F8   		movl	-8(%rbp), %eax
 5461 4f0e EB05     		jmp	.L291
 5462              	.L290:
 5463              		.loc 2 709 0 discriminator 2
 5464 4f10 B8400000 		movl	$64, %eax
 5464      00
 5465              	.L291:
 5466              		.loc 2 709 0 discriminator 4
 5467 4f15 668945F2 		movw	%ax, -14(%rbp)
 710:prog.c        **** 			fStatus = doSend(handle, inData, chunkSize, error);
 5468              		.loc 2 710 0 is_stmt 1 discriminator 4
 5469 4f19 0FB755F2 		movzwl	-14(%rbp), %edx
 5470 4f1d 488B4DC8 		movq	-56(%rbp), %rcx
 5471 4f21 488B75D8 		movq	-40(%rbp), %rsi
 5472 4f25 488B45E8 		movq	-24(%rbp), %rax
 5473 4f29 4889C7   		movq	%rax, %rdi
 5474 4f2c E88FB1FF 		call	doSend
 5474      FF
 5475 4f31 8945FC   		movl	%eax, -4(%rbp)
 711:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5476              		.loc 2 711 0 discriminator 4
 5477 4f34 837DFC00 		cmpl	$0, -4(%rbp)
 5478 4f38 741E     		je	.L292
 5479              		.loc 2 711 0 is_stmt 0 discriminator 1
 5480 4f3a 488B45C8 		movq	-56(%rbp), %rax
 5481 4f3e 488D3500 		leaq	.LC41(%rip), %rsi
 5481      000000
 5482 4f45 4889C7   		movq	%rax, %rdi
 5483 4f48 E8000000 		call	errPrefix@PLT
 5483      00
 5484 4f4d 8B45FC   		movl	-4(%rbp), %eax
 5485 4f50 8945F4   		movl	%eax, -12(%rbp)
 5486 4f53 E9100100 		jmp	.L288
 5486      00
 5487              	.L292:
 712:prog.c        **** 			inData += chunkSize;
 5488              		.loc 2 712 0 is_stmt 1
 5489 4f58 0FB745F2 		movzwl	-14(%rbp), %eax
 5490 4f5c 480145D8 		addq	%rax, -40(%rbp)
 713:prog.c        **** 			fStatus = doReceive(handle, outData, chunkSize, error);
 5491              		.loc 2 713 0
 5492 4f60 0FB755F2 		movzwl	-14(%rbp), %edx
 5493 4f64 488B4DC8 		movq	-56(%rbp), %rcx
 5494 4f68 488B75D0 		movq	-48(%rbp), %rsi
 5495 4f6c 488B45E8 		movq	-24(%rbp), %rax
 5496 4f70 4889C7   		movq	%rax, %rdi
 5497 4f73 E8C3B1FF 		call	doReceive
 5497      FF
 5498 4f78 8945FC   		movl	%eax, -4(%rbp)
 714:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5499              		.loc 2 714 0
 5500 4f7b 837DFC00 		cmpl	$0, -4(%rbp)
 5501 4f7f 741E     		je	.L293
 5502              		.loc 2 714 0 is_stmt 0 discriminator 1
 5503 4f81 488B45C8 		movq	-56(%rbp), %rax
 5504 4f85 488D3500 		leaq	.LC41(%rip), %rsi
 5504      000000
 5505 4f8c 4889C7   		movq	%rax, %rdi
 5506 4f8f E8000000 		call	errPrefix@PLT
 5506      00
 5507 4f94 8B45FC   		movl	-4(%rbp), %eax
 5508 4f97 8945F4   		movl	%eax, -12(%rbp)
 5509 4f9a E9C90000 		jmp	.L288
 5509      00
 5510              	.L293:
 715:prog.c        **** 			outData += chunkSize;
 5511              		.loc 2 715 0 is_stmt 1
 5512 4f9f 0FB745F2 		movzwl	-14(%rbp), %eax
 5513 4fa3 480145D0 		addq	%rax, -48(%rbp)
 716:prog.c        **** 			numBytes -= chunkSize;
 5514              		.loc 2 716 0
 5515 4fa7 0FB745F2 		movzwl	-14(%rbp), %eax
 5516 4fab 2945F8   		subl	%eax, -8(%rbp)
 5517              	.L289:
 708:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5518              		.loc 2 708 0
 5519 4fae 837DF800 		cmpl	$0, -8(%rbp)
 5520 4fb2 0F854DFF 		jne	.L294
 5520      FFFF
 5521 4fb8 E9AB0000 		jmp	.L288
 5521      00
 5522              	.L286:
 717:prog.c        **** 		}
 718:prog.c        **** 	} else {
 719:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_NOTSENDING_ISRECEIVING, mode, error);
 5523              		.loc 2 719 0
 5524 4fbd 0FB655F0 		movzbl	-16(%rbp), %edx
 5525 4fc1 488B4DC8 		movq	-56(%rbp), %rcx
 5526 4fc5 8B75E4   		movl	-28(%rbp), %esi
 5527 4fc8 488B45E8 		movq	-24(%rbp), %rax
 5528 4fcc 4989C8   		movq	%rcx, %r8
 5529 4fcf 89D1     		movl	%edx, %ecx
 5530 4fd1 BA030000 		movl	$3, %edx
 5530      00
 5531 4fd6 4889C7   		movq	%rax, %rdi
 5532 4fd9 E82EB0FF 		call	beginShift
 5532      FF
 5533 4fde 8945FC   		movl	%eax, -4(%rbp)
 720:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5534              		.loc 2 720 0
 5535 4fe1 837DFC00 		cmpl	$0, -4(%rbp)
 5536 4fe5 747A     		je	.L296
 5537              		.loc 2 720 0 is_stmt 0 discriminator 1
 5538 4fe7 488B45C8 		movq	-56(%rbp), %rax
 5539 4feb 488D3500 		leaq	.LC41(%rip), %rsi
 5539      000000
 5540 4ff2 4889C7   		movq	%rax, %rdi
 5541 4ff5 E8000000 		call	errPrefix@PLT
 5541      00
 5542 4ffa 8B45FC   		movl	-4(%rbp), %eax
 5543 4ffd 8945F4   		movl	%eax, -12(%rbp)
 5544 5000 EB66     		jmp	.L288
 5545              	.L300:
 721:prog.c        **** 		while ( numBytes ) {
 722:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5546              		.loc 2 722 0 is_stmt 1
 5547 5002 837DF83F 		cmpl	$63, -8(%rbp)
 5548 5006 7705     		ja	.L297
 5549              		.loc 2 722 0 is_stmt 0 discriminator 1
 5550 5008 8B45F8   		movl	-8(%rbp), %eax
 5551 500b EB05     		jmp	.L298
 5552              	.L297:
 5553              		.loc 2 722 0 discriminator 2
 5554 500d B8400000 		movl	$64, %eax
 5554      00
 5555              	.L298:
 5556              		.loc 2 722 0 discriminator 4
 5557 5012 668945F2 		movw	%ax, -14(%rbp)
 723:prog.c        **** 			fStatus = doReceive(handle, outData, chunkSize, error);
 5558              		.loc 2 723 0 is_stmt 1 discriminator 4
 5559 5016 0FB755F2 		movzwl	-14(%rbp), %edx
 5560 501a 488B4DC8 		movq	-56(%rbp), %rcx
 5561 501e 488B75D0 		movq	-48(%rbp), %rsi
 5562 5022 488B45E8 		movq	-24(%rbp), %rax
 5563 5026 4889C7   		movq	%rax, %rdi
 5564 5029 E80DB1FF 		call	doReceive
 5564      FF
 5565 502e 8945FC   		movl	%eax, -4(%rbp)
 724:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5566              		.loc 2 724 0 discriminator 4
 5567 5031 837DFC00 		cmpl	$0, -4(%rbp)
 5568 5035 741B     		je	.L299
 5569              		.loc 2 724 0 is_stmt 0 discriminator 1
 5570 5037 488B45C8 		movq	-56(%rbp), %rax
 5571 503b 488D3500 		leaq	.LC41(%rip), %rsi
 5571      000000
 5572 5042 4889C7   		movq	%rax, %rdi
 5573 5045 E8000000 		call	errPrefix@PLT
 5573      00
 5574 504a 8B45FC   		movl	-4(%rbp), %eax
 5575 504d 8945F4   		movl	%eax, -12(%rbp)
 5576 5050 EB16     		jmp	.L288
 5577              	.L299:
 725:prog.c        **** 			outData += chunkSize;
 5578              		.loc 2 725 0 is_stmt 1
 5579 5052 0FB745F2 		movzwl	-14(%rbp), %eax
 5580 5056 480145D0 		addq	%rax, -48(%rbp)
 726:prog.c        **** 			numBytes -= chunkSize;
 5581              		.loc 2 726 0
 5582 505a 0FB745F2 		movzwl	-14(%rbp), %eax
 5583 505e 2945F8   		subl	%eax, -8(%rbp)
 5584              	.L296:
 721:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5585              		.loc 2 721 0
 5586 5061 837DF800 		cmpl	$0, -8(%rbp)
 5587 5065 759B     		jne	.L300
 727:prog.c        **** 		}
 728:prog.c        **** 	}
 729:prog.c        **** cleanup:
 5588              		.loc 2 729 0
 5589 5067 90       		nop
 5590              	.L288:
 730:prog.c        **** 	return retVal;
 5591              		.loc 2 730 0
 5592 5068 8B45F4   		movl	-12(%rbp), %eax
 731:prog.c        **** }
 5593              		.loc 2 731 0
 5594 506b C9       		leave
 5595              		.cfi_def_cfa 7, 8
 5596 506c C3       		ret
 5597              		.cfi_endproc
 5598              	.LFE19:
 5600              		.globl	jtagShiftInOnly
 5602              	jtagShiftInOnly:
 5603              	.LFB20:
 732:prog.c        **** 
 733:prog.c        **** DLLEXPORT(FLStatus) jtagShiftInOnly(
 734:prog.c        **** 	struct FLContext *handle, uint32 numBits, const uint8 *inData, uint8 isLast,
 735:prog.c        **** 	const char **error)
 736:prog.c        **** {
 5604              		.loc 2 736 0
 5605              		.cfi_startproc
 5606 506d 55       		pushq	%rbp
 5607              		.cfi_def_cfa_offset 16
 5608              		.cfi_offset 6, -16
 5609 506e 4889E5   		movq	%rsp, %rbp
 5610              		.cfi_def_cfa_register 6
 5611 5071 4883EC30 		subq	$48, %rsp
 5612 5075 48897DE8 		movq	%rdi, -24(%rbp)
 5613 5079 8975E4   		movl	%esi, -28(%rbp)
 5614 507c 488955D8 		movq	%rdx, -40(%rbp)
 5615 5080 89C8     		movl	%ecx, %eax
 5616 5082 4C8945D0 		movq	%r8, -48(%rbp)
 5617 5086 8845E0   		movb	%al, -32(%rbp)
 737:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 5618              		.loc 2 737 0
 5619 5089 C745F400 		movl	$0, -12(%rbp)
 5619      000000
 738:prog.c        **** 	uint32 numBytes = bitsToBytes(numBits);
 5620              		.loc 2 738 0
 5621 5090 8B45E4   		movl	-28(%rbp), %eax
 5622 5093 C1E803   		shrl	$3, %eax
 5623 5096 89C2     		movl	%eax, %edx
 5624 5098 8B45E4   		movl	-28(%rbp), %eax
 5625 509b 83E007   		andl	$7, %eax
 5626 509e 85C0     		testl	%eax, %eax
 5627 50a0 7407     		je	.L303
 5628              		.loc 2 738 0 is_stmt 0 discriminator 1
 5629 50a2 B8010000 		movl	$1, %eax
 5629      00
 5630 50a7 EB05     		jmp	.L304
 5631              	.L303:
 5632              		.loc 2 738 0 discriminator 2
 5633 50a9 B8000000 		movl	$0, %eax
 5633      00
 5634              	.L304:
 5635              		.loc 2 738 0 discriminator 4
 5636 50ae 01D0     		addl	%edx, %eax
 5637 50b0 8945F8   		movl	%eax, -8(%rbp)
 739:prog.c        **** 	uint16 chunkSize;
 740:prog.c        **** 	uint8 mode = 0x00;
 5638              		.loc 2 740 0 is_stmt 1 discriminator 4
 5639 50b3 C645F000 		movb	$0, -16(%rbp)
 741:prog.c        **** 	bool isSending = false;
 5640              		.loc 2 741 0 discriminator 4
 5641 50b7 C645F100 		movb	$0, -15(%rbp)
 742:prog.c        **** 	if ( inData == SHIFT_ONES ) {
 5642              		.loc 2 742 0 discriminator 4
 5643 50bb 48837DD8 		cmpq	$-1, -40(%rbp)
 5643      FF
 5644 50c0 7506     		jne	.L305
 743:prog.c        **** 		mode |= bmSENDONES;
 5645              		.loc 2 743 0
 5646 50c2 804DF002 		orb	$2, -16(%rbp)
 5647 50c6 EB0B     		jmp	.L306
 5648              	.L305:
 744:prog.c        **** 	} else if ( inData != SHIFT_ZEROS ) {
 5649              		.loc 2 744 0
 5650 50c8 48837DD8 		cmpq	$0, -40(%rbp)
 5650      00
 5651 50cd 7404     		je	.L306
 745:prog.c        **** 		isSending = true;
 5652              		.loc 2 745 0
 5653 50cf C645F101 		movb	$1, -15(%rbp)
 5654              	.L306:
 746:prog.c        **** 	}
 747:prog.c        **** 	if ( isLast ) {
 5655              		.loc 2 747 0
 5656 50d3 807DE000 		cmpb	$0, -32(%rbp)
 5657 50d7 7404     		je	.L307
 748:prog.c        **** 		mode |= bmISLAST;
 5658              		.loc 2 748 0
 5659 50d9 804DF001 		orb	$1, -16(%rbp)
 5660              	.L307:
 749:prog.c        **** 	}
 750:prog.c        **** 	if ( isSending ) {
 5661              		.loc 2 750 0
 5662 50dd 807DF100 		cmpb	$0, -15(%rbp)
 5663 50e1 0F84AF00 		je	.L308
 5663      0000
 751:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_ISSENDING_NOTRECEIVING, mode, error);
 5664              		.loc 2 751 0
 5665 50e7 0FB655F0 		movzbl	-16(%rbp), %edx
 5666 50eb 488B4DD0 		movq	-48(%rbp), %rcx
 5667 50ef 8B75E4   		movl	-28(%rbp), %esi
 5668 50f2 488B45E8 		movq	-24(%rbp), %rax
 5669 50f6 4989C8   		movq	%rcx, %r8
 5670 50f9 89D1     		movl	%edx, %ecx
 5671 50fb BA020000 		movl	$2, %edx
 5671      00
 5672 5100 4889C7   		movq	%rax, %rdi
 5673 5103 E804AFFF 		call	beginShift
 5673      FF
 5674 5108 8945FC   		movl	%eax, -4(%rbp)
 752:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5675              		.loc 2 752 0
 5676 510b 837DFC00 		cmpl	$0, -4(%rbp)
 5677 510f 747D     		je	.L311
 5678              		.loc 2 752 0 is_stmt 0 discriminator 1
 5679 5111 488B45D0 		movq	-48(%rbp), %rax
 5680 5115 488D3500 		leaq	.LC41(%rip), %rsi
 5680      000000
 5681 511c 4889C7   		movq	%rax, %rdi
 5682 511f E8000000 		call	errPrefix@PLT
 5682      00
 5683 5124 8B45FC   		movl	-4(%rbp), %eax
 5684 5127 8945F4   		movl	%eax, -12(%rbp)
 5685 512a E9AD0000 		jmp	.L310
 5685      00
 5686              	.L315:
 753:prog.c        **** 		while ( numBytes ) {
 754:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5687              		.loc 2 754 0 is_stmt 1
 5688 512f 837DF83F 		cmpl	$63, -8(%rbp)
 5689 5133 7705     		ja	.L312
 5690              		.loc 2 754 0 is_stmt 0 discriminator 1
 5691 5135 8B45F8   		movl	-8(%rbp), %eax
 5692 5138 EB05     		jmp	.L313
 5693              	.L312:
 5694              		.loc 2 754 0 discriminator 2
 5695 513a B8400000 		movl	$64, %eax
 5695      00
 5696              	.L313:
 5697              		.loc 2 754 0 discriminator 4
 5698 513f 668945F2 		movw	%ax, -14(%rbp)
 755:prog.c        **** 			fStatus = doSend(handle, inData, chunkSize, error);
 5699              		.loc 2 755 0 is_stmt 1 discriminator 4
 5700 5143 0FB755F2 		movzwl	-14(%rbp), %edx
 5701 5147 488B4DD0 		movq	-48(%rbp), %rcx
 5702 514b 488B75D8 		movq	-40(%rbp), %rsi
 5703 514f 488B45E8 		movq	-24(%rbp), %rax
 5704 5153 4889C7   		movq	%rax, %rdi
 5705 5156 E865AFFF 		call	doSend
 5705      FF
 5706 515b 8945FC   		movl	%eax, -4(%rbp)
 756:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5707              		.loc 2 756 0 discriminator 4
 5708 515e 837DFC00 		cmpl	$0, -4(%rbp)
 5709 5162 741B     		je	.L314
 5710              		.loc 2 756 0 is_stmt 0 discriminator 1
 5711 5164 488B45D0 		movq	-48(%rbp), %rax
 5712 5168 488D3500 		leaq	.LC41(%rip), %rsi
 5712      000000
 5713 516f 4889C7   		movq	%rax, %rdi
 5714 5172 E8000000 		call	errPrefix@PLT
 5714      00
 5715 5177 8B45FC   		movl	-4(%rbp), %eax
 5716 517a 8945F4   		movl	%eax, -12(%rbp)
 5717 517d EB5D     		jmp	.L310
 5718              	.L314:
 757:prog.c        **** 			inData += chunkSize;
 5719              		.loc 2 757 0 is_stmt 1
 5720 517f 0FB745F2 		movzwl	-14(%rbp), %eax
 5721 5183 480145D8 		addq	%rax, -40(%rbp)
 758:prog.c        **** 			numBytes -= chunkSize;
 5722              		.loc 2 758 0
 5723 5187 0FB745F2 		movzwl	-14(%rbp), %eax
 5724 518b 2945F8   		subl	%eax, -8(%rbp)
 5725              	.L311:
 753:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5726              		.loc 2 753 0
 5727 518e 837DF800 		cmpl	$0, -8(%rbp)
 5728 5192 759B     		jne	.L315
 5729 5194 EB46     		jmp	.L310
 5730              	.L308:
 759:prog.c        **** 		}
 760:prog.c        **** 	} else {
 761:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_NOTSENDING_NOTRECEIVING, mode, error);
 5731              		.loc 2 761 0
 5732 5196 0FB655F0 		movzbl	-16(%rbp), %edx
 5733 519a 488B4DD0 		movq	-48(%rbp), %rcx
 5734 519e 8B75E4   		movl	-28(%rbp), %esi
 5735 51a1 488B45E8 		movq	-24(%rbp), %rax
 5736 51a5 4989C8   		movq	%rcx, %r8
 5737 51a8 89D1     		movl	%edx, %ecx
 5738 51aa BA040000 		movl	$4, %edx
 5738      00
 5739 51af 4889C7   		movq	%rax, %rdi
 5740 51b2 E855AEFF 		call	beginShift
 5740      FF
 5741 51b7 8945FC   		movl	%eax, -4(%rbp)
 762:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5742              		.loc 2 762 0
 5743 51ba 837DFC00 		cmpl	$0, -4(%rbp)
 5744 51be 741B     		je	.L317
 5745              		.loc 2 762 0 is_stmt 0 discriminator 1
 5746 51c0 488B45D0 		movq	-48(%rbp), %rax
 5747 51c4 488D3500 		leaq	.LC41(%rip), %rsi
 5747      000000
 5748 51cb 4889C7   		movq	%rax, %rdi
 5749 51ce E8000000 		call	errPrefix@PLT
 5749      00
 5750 51d3 8B45FC   		movl	-4(%rbp), %eax
 5751 51d6 8945F4   		movl	%eax, -12(%rbp)
 5752 51d9 EB01     		jmp	.L310
 5753              	.L317:
 763:prog.c        **** 	}
 764:prog.c        **** cleanup:
 5754              		.loc 2 764 0 is_stmt 1
 5755 51db 90       		nop
 5756              	.L310:
 765:prog.c        **** 	return retVal;
 5757              		.loc 2 765 0
 5758 51dc 8B45F4   		movl	-12(%rbp), %eax
 766:prog.c        **** }
 5759              		.loc 2 766 0
 5760 51df C9       		leave
 5761              		.cfi_def_cfa 7, 8
 5762 51e0 C3       		ret
 5763              		.cfi_endproc
 5764              	.LFE20:
 5766              		.section	.rodata
 5767              	.LC42:
 5768 07ce 6A746167 		.string	"jtagClockFSM()"
 5768      436C6F63 
 5768      6B46534D 
 5768      282900
 5769              		.text
 5770              		.globl	jtagClockFSM
 5772              	jtagClockFSM:
 5773              	.LFB21:
 767:prog.c        **** 
 768:prog.c        **** // Apply the supplied bit pattern to SS/TMS, to move the TAP to a specific state.
 769:prog.c        **** //
 770:prog.c        **** DLLEXPORT(FLStatus) jtagClockFSM(
 771:prog.c        **** 	struct FLContext *handle, uint32 bitPattern, uint8 transitionCount, const char **error)
 772:prog.c        **** {
 5774              		.loc 2 772 0
 5775              		.cfi_startproc
 5776 51e1 55       		pushq	%rbp
 5777              		.cfi_def_cfa_offset 16
 5778              		.cfi_offset 6, -16
 5779 51e2 4889E5   		movq	%rsp, %rbp
 5780              		.cfi_def_cfa_register 6
 5781 51e5 4883EC40 		subq	$64, %rsp
 5782 51e9 48897DD8 		movq	%rdi, -40(%rbp)
 5783 51ed 8975D4   		movl	%esi, -44(%rbp)
 5784 51f0 89D0     		movl	%edx, %eax
 5785 51f2 48894DC8 		movq	%rcx, -56(%rbp)
 5786 51f6 8845D0   		movb	%al, -48(%rbp)
 5787              		.loc 2 772 0
 5788 51f9 64488B04 		movq	%fs:40, %rax
 5788      25280000 
 5788      00
 5789 5202 488945F8 		movq	%rax, -8(%rbp)
 5790 5206 31C0     		xorl	%eax, %eax
 773:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5791              		.loc 2 773 0
 5792 5208 C745EC00 		movl	$0, -20(%rbp)
 5792      000000
 774:prog.c        **** 	USBStatus uStatus;
 775:prog.c        **** 	union {
 776:prog.c        **** 		uint32 u32;
 777:prog.c        **** 		uint8 bytes[4];
 778:prog.c        **** 	} lePattern;
 779:prog.c        **** 	lePattern.u32 = littleEndian32(bitPattern);
 5793              		.loc 2 779 0
 5794 520f 8B45D4   		movl	-44(%rbp), %eax
 5795 5212 89C7     		movl	%eax, %edi
 5796 5214 E8E7ADFF 		call	littleEndian32
 5796      FF
 5797 5219 8945F4   		movl	%eax, -12(%rbp)
 780:prog.c        **** 	uStatus = usbControlWrite(
 5798              		.loc 2 780 0
 5799 521c 0FB655D0 		movzbl	-48(%rbp), %edx
 5800 5220 488B45D8 		movq	-40(%rbp), %rax
 5801 5224 488B00   		movq	(%rax), %rax
 5802 5227 488D4DF4 		leaq	-12(%rbp), %rcx
 5803 522b FF75C8   		pushq	-56(%rbp)
 5804 522e 68881300 		pushq	$5000
 5804      00
 5805 5233 41B90400 		movl	$4, %r9d
 5805      0000
 5806 5239 4989C8   		movq	%rcx, %r8
 5807 523c B9000000 		movl	$0, %ecx
 5807      00
 5808 5241 BE820000 		movl	$130, %esi
 5808      00
 5809 5246 4889C7   		movq	%rax, %rdi
 5810 5249 E8000000 		call	usbControlWrite@PLT
 5810      00
 5811 524e 4883C410 		addq	$16, %rsp
 5812 5252 8945F0   		movl	%eax, -16(%rbp)
 781:prog.c        **** 		handle->device,
 782:prog.c        **** 		CMD_JTAG_CLOCK_FSM,       // bRequest
 783:prog.c        **** 		(uint16)transitionCount,  // wValue
 784:prog.c        **** 		0x0000,                   // wIndex
 785:prog.c        **** 		lePattern.bytes,          // bit pattern
 786:prog.c        **** 		4,                        // wLength
 787:prog.c        **** 		5000,                     // timeout (ms)
 788:prog.c        **** 		error
 789:prog.c        **** 	);
 790:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_JTAG_FSM, cleanup, "jtagClockFSM()");
 5813              		.loc 2 790 0
 5814 5255 837DF000 		cmpl	$0, -16(%rbp)
 5815 5259 741C     		je	.L322
 5816              		.loc 2 790 0 is_stmt 0 discriminator 1
 5817 525b 488B45C8 		movq	-56(%rbp), %rax
 5818 525f 488D3500 		leaq	.LC42(%rip), %rsi
 5818      000000
 5819 5266 4889C7   		movq	%rax, %rdi
 5820 5269 E8000000 		call	errPrefix@PLT
 5820      00
 5821 526e C745EC10 		movl	$16, -20(%rbp)
 5821      000000
 5822 5275 EB01     		jmp	.L319
 5823              	.L322:
 791:prog.c        **** cleanup:
 5824              		.loc 2 791 0 is_stmt 1
 5825 5277 90       		nop
 5826              	.L319:
 792:prog.c        **** 	return retVal;
 5827              		.loc 2 792 0
 5828 5278 8B45EC   		movl	-20(%rbp), %eax
 793:prog.c        **** }
 5829              		.loc 2 793 0
 5830 527b 488B75F8 		movq	-8(%rbp), %rsi
 5831 527f 64483334 		xorq	%fs:40, %rsi
 5831      25280000 
 5831      00
 5832 5288 7405     		je	.L321
 5833 528a E8000000 		call	__stack_chk_fail@PLT
 5833      00
 5834              	.L321:
 5835 528f C9       		leave
 5836              		.cfi_def_cfa 7, 8
 5837 5290 C3       		ret
 5838              		.cfi_endproc
 5839              	.LFE21:
 5841              		.section	.rodata
 5842              	.LC43:
 5843 07dd 6A746167 		.string	"jtagClocks()"
 5843      436C6F63 
 5843      6B732829 
 5843      00
 5844              		.text
 5845              		.globl	jtagClocks
 5847              	jtagClocks:
 5848              	.LFB22:
 794:prog.c        **** 
 795:prog.c        **** // Cycle the SCK/TCK line for the given number of times.
 796:prog.c        **** //
 797:prog.c        **** DLLEXPORT(FLStatus) jtagClocks(struct FLContext *handle, uint32 numClocks, const char **error) {
 5849              		.loc 2 797 0
 5850              		.cfi_startproc
 5851 5291 55       		pushq	%rbp
 5852              		.cfi_def_cfa_offset 16
 5853              		.cfi_offset 6, -16
 5854 5292 4889E5   		movq	%rsp, %rbp
 5855              		.cfi_def_cfa_register 6
 5856 5295 4883EC30 		subq	$48, %rsp
 5857 5299 48897DE8 		movq	%rdi, -24(%rbp)
 5858 529d 8975E4   		movl	%esi, -28(%rbp)
 5859 52a0 488955D8 		movq	%rdx, -40(%rbp)
 798:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5860              		.loc 2 798 0
 5861 52a4 C745F800 		movl	$0, -8(%rbp)
 5861      000000
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 800:prog.c        **** 		handle->device,
 801:prog.c        **** 		CMD_JTAG_CLOCK,                // bRequest
 802:prog.c        **** 		(uint16)(numClocks & 0xFFFF),  // wValue
 803:prog.c        **** 		(uint16)(numClocks >> 16),     // wIndex
 5862              		.loc 2 803 0
 5863 52ab 8B45E4   		movl	-28(%rbp), %eax
 5864 52ae C1E810   		shrl	$16, %eax
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 5865              		.loc 2 799 0
 5866 52b1 0FB7C8   		movzwl	%ax, %ecx
 802:prog.c        **** 		(uint16)(numClocks >> 16),     // wIndex
 5867              		.loc 2 802 0
 5868 52b4 8B45E4   		movl	-28(%rbp), %eax
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 5869              		.loc 2 799 0
 5870 52b7 0FB7D0   		movzwl	%ax, %edx
 5871 52ba 488B45E8 		movq	-24(%rbp), %rax
 5872 52be 488B00   		movq	(%rax), %rax
 5873 52c1 FF75D8   		pushq	-40(%rbp)
 5874 52c4 6860EA00 		pushq	$60000
 5874      00
 5875 52c9 41B90000 		movl	$0, %r9d
 5875      0000
 5876 52cf 41B80000 		movl	$0, %r8d
 5876      0000
 5877 52d5 BE830000 		movl	$131, %esi
 5877      00
 5878 52da 4889C7   		movq	%rax, %rdi
 5879 52dd E8000000 		call	usbControlWrite@PLT
 5879      00
 5880 52e2 4883C410 		addq	$16, %rsp
 5881 52e6 8945FC   		movl	%eax, -4(%rbp)
 804:prog.c        **** 		NULL,                          // no data
 805:prog.c        **** 		0,                             // wLength
 806:prog.c        **** 		60000,                         // timeout (ms)
 807:prog.c        **** 		error
 808:prog.c        **** 	);
 809:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_JTAG_CLOCKS, cleanup, "jtagClocks()");
 5882              		.loc 2 809 0
 5883 52e9 837DFC00 		cmpl	$0, -4(%rbp)
 5884 52ed 741C     		je	.L326
 5885              		.loc 2 809 0 is_stmt 0 discriminator 1
 5886 52ef 488B45D8 		movq	-40(%rbp), %rax
 5887 52f3 488D3500 		leaq	.LC43(%rip), %rsi
 5887      000000
 5888 52fa 4889C7   		movq	%rax, %rdi
 5889 52fd E8000000 		call	errPrefix@PLT
 5889      00
 5890 5302 C745F811 		movl	$17, -8(%rbp)
 5890      000000
 5891 5309 EB01     		jmp	.L324
 5892              	.L326:
 810:prog.c        **** cleanup:
 5893              		.loc 2 810 0 is_stmt 1
 5894 530b 90       		nop
 5895              	.L324:
 811:prog.c        **** 	return retVal;
 5896              		.loc 2 811 0
 5897 530c 8B45F8   		movl	-8(%rbp), %eax
 812:prog.c        **** }
 5898              		.loc 2 812 0
 5899 530f C9       		leave
 5900              		.cfi_def_cfa 7, 8
 5901 5310 C3       		ret
 5902              		.cfi_endproc
 5903              	.LFE22:
 5905              		.section	.rodata
 5906              	.LC44:
 5907 07ea 6A746167 		.string	"jtagScanChain()"
 5907      5363616E 
 5907      43686169 
 5907      6E282900 
 5908              		.text
 5909              		.globl	jtagScanChain
 5911              	jtagScanChain:
 5912              	.LFB23:
 813:prog.c        **** 
 814:prog.c        **** // Scan the JTAG chain and return an array of IDCODEs
 815:prog.c        **** //
 816:prog.c        **** DLLEXPORT(FLStatus) jtagScanChain(
 817:prog.c        **** 	struct FLContext *handle, const char *portConfig,
 818:prog.c        **** 	uint32 *numDevices, uint32 *deviceArray, uint32 arraySize,
 819:prog.c        **** 	const char **error)
 820:prog.c        **** {
 5913              		.loc 2 820 0
 5914              		.cfi_startproc
 5915 5311 55       		pushq	%rbp
 5916              		.cfi_def_cfa_offset 16
 5917              		.cfi_offset 6, -16
 5918 5312 4889E5   		movq	%rsp, %rbp
 5919              		.cfi_def_cfa_register 6
 5920 5315 53       		pushq	%rbx
 5921 5316 4883EC58 		subq	$88, %rsp
 5922              		.cfi_offset 3, -24
 5923 531a 48897DC8 		movq	%rdi, -56(%rbp)
 5924 531e 488975C0 		movq	%rsi, -64(%rbp)
 5925 5322 488955B8 		movq	%rdx, -72(%rbp)
 5926 5326 48894DB0 		movq	%rcx, -80(%rbp)
 5927 532a 448945AC 		movl	%r8d, -84(%rbp)
 5928 532e 4C894DA0 		movq	%r9, -96(%rbp)
 5929              		.loc 2 820 0
 5930 5332 64488B04 		movq	%fs:40, %rax
 5930      25280000 
 5930      00
 5931 533b 488945E8 		movq	%rax, -24(%rbp)
 5932 533f 31C0     		xorl	%eax, %eax
 821:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5933              		.loc 2 821 0
 5934 5341 C745D800 		movl	$0, -40(%rbp)
 5934      000000
 822:prog.c        **** 	FLStatus fStatus;
 823:prog.c        **** 	uint32 i = 0;
 5935              		.loc 2 823 0
 5936 5348 C745DC00 		movl	$0, -36(%rbp)
 5936      000000
 824:prog.c        **** 	union {
 825:prog.c        **** 		uint32 idCode;
 826:prog.c        **** 		uint8 bytes[4];
 827:prog.c        **** 	} u;
 828:prog.c        **** 	fStatus = progOpenInternal(handle, portConfig, portConfig, error);
 5937              		.loc 2 828 0
 5938 534f 488B4DA0 		movq	-96(%rbp), %rcx
 5939 5353 488B55C0 		movq	-64(%rbp), %rdx
 5940 5357 488B75C0 		movq	-64(%rbp), %rsi
 5941 535b 488B45C8 		movq	-56(%rbp), %rax
 5942 535f 4889C7   		movq	%rax, %rdi
 5943 5362 E82FE8FF 		call	progOpenInternal
 5943      FF
 5944 5367 8945E0   		movl	%eax, -32(%rbp)
 829:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5945              		.loc 2 829 0
 5946 536a 837DE000 		cmpl	$0, -32(%rbp)
 5947 536e 741E     		je	.L328
 5948              		.loc 2 829 0 is_stmt 0 discriminator 1
 5949 5370 488B45A0 		movq	-96(%rbp), %rax
 5950 5374 488D3500 		leaq	.LC44(%rip), %rsi
 5950      000000
 5951 537b 4889C7   		movq	%rax, %rdi
 5952 537e E8000000 		call	errPrefix@PLT
 5952      00
 5953 5383 8B45E0   		movl	-32(%rbp), %eax
 5954 5386 8945D8   		movl	%eax, -40(%rbp)
 5955 5389 E9510100 		jmp	.L329
 5955      00
 5956              	.L328:
 830:prog.c        **** 
 831:prog.c        **** 	i = 0;
 5957              		.loc 2 831 0 is_stmt 1
 5958 538e C745DC00 		movl	$0, -36(%rbp)
 5958      000000
 832:prog.c        **** 	fStatus = jtagClockFSM(handle, 0x0000005F, 9, error);  // Reset TAP, goto Shift-DR
 5959              		.loc 2 832 0
 5960 5395 488B55A0 		movq	-96(%rbp), %rdx
 5961 5399 488B45C8 		movq	-56(%rbp), %rax
 5962 539d 4889D1   		movq	%rdx, %rcx
 5963 53a0 BA090000 		movl	$9, %edx
 5963      00
 5964 53a5 BE5F0000 		movl	$95, %esi
 5964      00
 5965 53aa 4889C7   		movq	%rax, %rdi
 5966 53ad E8000000 		call	jtagClockFSM@PLT
 5966      00
 5967 53b2 8945E0   		movl	%eax, -32(%rbp)
 833:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5968              		.loc 2 833 0
 5969 53b5 837DE000 		cmpl	$0, -32(%rbp)
 5970 53b9 741E     		je	.L330
 5971              		.loc 2 833 0 is_stmt 0 discriminator 1
 5972 53bb 488B45A0 		movq	-96(%rbp), %rax
 5973 53bf 488D3500 		leaq	.LC44(%rip), %rsi
 5973      000000
 5974 53c6 4889C7   		movq	%rax, %rdi
 5975 53c9 E8000000 		call	errPrefix@PLT
 5975      00
 5976 53ce 8B45E0   		movl	-32(%rbp), %eax
 5977 53d1 8945D8   		movl	%eax, -40(%rbp)
 5978 53d4 E9060100 		jmp	.L329
 5978      00
 5979              	.L330:
 834:prog.c        **** 	for ( ; ; ) {
 835:prog.c        **** 		fStatus = jtagShiftInOut(handle, 32, SHIFT_ZEROS, u.bytes, false, error);
 5980              		.loc 2 835 0 is_stmt 1
 5981 53d9 488B4DA0 		movq	-96(%rbp), %rcx
 5982 53dd 488D55E4 		leaq	-28(%rbp), %rdx
 5983 53e1 488B45C8 		movq	-56(%rbp), %rax
 5984 53e5 4989C9   		movq	%rcx, %r9
 5985 53e8 41B80000 		movl	$0, %r8d
 5985      0000
 5986 53ee 4889D1   		movq	%rdx, %rcx
 5987 53f1 BA000000 		movl	$0, %edx
 5987      00
 5988 53f6 BE200000 		movl	$32, %esi
 5988      00
 5989 53fb 4889C7   		movq	%rax, %rdi
 5990 53fe E8000000 		call	jtagShiftInOut@PLT
 5990      00
 5991 5403 8945E0   		movl	%eax, -32(%rbp)
 836:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5992              		.loc 2 836 0
 5993 5406 837DE000 		cmpl	$0, -32(%rbp)
 5994 540a 741E     		je	.L331
 5995              		.loc 2 836 0 is_stmt 0 discriminator 1
 5996 540c 488B45A0 		movq	-96(%rbp), %rax
 5997 5410 488D3500 		leaq	.LC44(%rip), %rsi
 5997      000000
 5998 5417 4889C7   		movq	%rax, %rdi
 5999 541a E8000000 		call	errPrefix@PLT
 5999      00
 6000 541f 8B45E0   		movl	-32(%rbp), %eax
 6001 5422 8945D8   		movl	%eax, -40(%rbp)
 6002 5425 E9B50000 		jmp	.L329
 6002      00
 6003              	.L331:
 837:prog.c        **** 		if ( u.idCode == 0x00000000 || u.idCode == U32MAX ) {
 6004              		.loc 2 837 0 is_stmt 1
 6005 542a 8B45E4   		movl	-28(%rbp), %eax
 6006 542d 85C0     		testl	%eax, %eax
 6007 542f 743F     		je	.L332
 6008              		.loc 2 837 0 is_stmt 0 discriminator 1
 6009 5431 8B45E4   		movl	-28(%rbp), %eax
 6010 5434 83F8FF   		cmpl	$-1, %eax
 6011 5437 7437     		je	.L332
 838:prog.c        **** 			break;
 839:prog.c        **** 		}
 840:prog.c        **** 		if ( deviceArray && i < arraySize ) {
 6012              		.loc 2 840 0 is_stmt 1
 6013 5439 48837DB0 		cmpq	$0, -80(%rbp)
 6013      00
 6014 543e 7427     		je	.L333
 6015              		.loc 2 840 0 is_stmt 0 discriminator 1
 6016 5440 8B45DC   		movl	-36(%rbp), %eax
 6017 5443 3B45AC   		cmpl	-84(%rbp), %eax
 6018 5446 731F     		jnb	.L333
 841:prog.c        **** 			deviceArray[i] = littleEndian32(u.idCode);
 6019              		.loc 2 841 0 is_stmt 1
 6020 5448 8B45E4   		movl	-28(%rbp), %eax
 6021 544b 8B55DC   		movl	-36(%rbp), %edx
 6022 544e 488D0C95 		leaq	0(,%rdx,4), %rcx
 6022      00000000 
 6023 5456 488B55B0 		movq	-80(%rbp), %rdx
 6024 545a 488D1C11 		leaq	(%rcx,%rdx), %rbx
 6025 545e 89C7     		movl	%eax, %edi
 6026 5460 E89BABFF 		call	littleEndian32
 6026      FF
 6027 5465 8903     		movl	%eax, (%rbx)
 6028              	.L333:
 842:prog.c        **** 		}
 843:prog.c        **** 		i++;
 6029              		.loc 2 843 0
 6030 5467 8345DC01 		addl	$1, -36(%rbp)
 835:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 6031              		.loc 2 835 0
 6032 546b E969FFFF 		jmp	.L330
 6032      FF
 6033              	.L332:
 844:prog.c        **** 	}
 845:prog.c        **** 	if ( deviceArray && i ) {
 6034              		.loc 2 845 0
 6035 5470 48837DB0 		cmpq	$0, -80(%rbp)
 6035      00
 6036 5475 7420     		je	.L334
 6037              		.loc 2 845 0 is_stmt 0 discriminator 1
 6038 5477 837DDC00 		cmpl	$0, -36(%rbp)
 6039 547b 741A     		je	.L334
 846:prog.c        **** 		// The IDCODEs we have are in reverse order, so swap them to get the correct chain order.
 847:prog.c        **** 		swap(deviceArray, (i > arraySize) ? arraySize : i);
 6040              		.loc 2 847 0 is_stmt 1
 6041 547d 8B45AC   		movl	-84(%rbp), %eax
 6042 5480 3945DC   		cmpl	%eax, -36(%rbp)
 6043 5483 0F4645DC 		cmovbe	-36(%rbp), %eax
 6044 5487 89C2     		movl	%eax, %edx
 6045 5489 488B45B0 		movq	-80(%rbp), %rax
 6046 548d 89D6     		movl	%edx, %esi
 6047 548f 4889C7   		movq	%rax, %rdi
 6048 5492 E88CF7FF 		call	swap
 6048      FF
 6049              	.L334:
 848:prog.c        **** 	}
 849:prog.c        **** 	if ( numDevices ) {
 6050              		.loc 2 849 0
 6051 5497 48837DB8 		cmpq	$0, -72(%rbp)
 6051      00
 6052 549c 7409     		je	.L335
 850:prog.c        **** 		*numDevices = i;
 6053              		.loc 2 850 0
 6054 549e 488B45B8 		movq	-72(%rbp), %rax
 6055 54a2 8B55DC   		movl	-36(%rbp), %edx
 6056 54a5 8910     		movl	%edx, (%rax)
 6057              	.L335:
 851:prog.c        **** 	}
 852:prog.c        **** 
 853:prog.c        **** 	fStatus = progClose(handle, error);
 6058              		.loc 2 853 0
 6059 54a7 488B55A0 		movq	-96(%rbp), %rdx
 6060 54ab 488B45C8 		movq	-56(%rbp), %rax
 6061 54af 4889D6   		movq	%rdx, %rsi
 6062 54b2 4889C7   		movq	%rax, %rdi
 6063 54b5 E8000000 		call	progClose@PLT
 6063      00
 6064 54ba 8945E0   		movl	%eax, -32(%rbp)
 854:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 6065              		.loc 2 854 0
 6066 54bd 837DE000 		cmpl	$0, -32(%rbp)
 6067 54c1 741B     		je	.L338
 6068              		.loc 2 854 0 is_stmt 0 discriminator 1
 6069 54c3 488B45A0 		movq	-96(%rbp), %rax
 6070 54c7 488D3500 		leaq	.LC44(%rip), %rsi
 6070      000000
 6071 54ce 4889C7   		movq	%rax, %rdi
 6072 54d1 E8000000 		call	errPrefix@PLT
 6072      00
 6073 54d6 8B45E0   		movl	-32(%rbp), %eax
 6074 54d9 8945D8   		movl	%eax, -40(%rbp)
 6075 54dc EB01     		jmp	.L329
 6076              	.L338:
 855:prog.c        **** 
 856:prog.c        **** cleanup:
 6077              		.loc 2 856 0 is_stmt 1
 6078 54de 90       		nop
 6079              	.L329:
 857:prog.c        **** 	return retVal;
 6080              		.loc 2 857 0
 6081 54df 8B45D8   		movl	-40(%rbp), %eax
 858:prog.c        **** }
 6082              		.loc 2 858 0
 6083 54e2 488B5DE8 		movq	-24(%rbp), %rbx
 6084 54e6 6448331C 		xorq	%fs:40, %rbx
 6084      25280000 
 6084      00
 6085 54ef 7405     		je	.L337
 6086 54f1 E8000000 		call	__stack_chk_fail@PLT
 6086      00
 6087              	.L337:
 6088 54f6 4883C458 		addq	$88, %rsp
 6089 54fa 5B       		popq	%rbx
 6090 54fb 5D       		popq	%rbp
 6091              		.cfi_def_cfa 7, 8
 6092 54fc C3       		ret
 6093              		.cfi_endproc
 6094              	.LFE23:
 6096              		.section	.rodata
 6097 07fa 00000000 		.align 8
 6097      0000
 6098              	.LC45:
 6099 0800 666C5072 		.string	"flProgram(): Missing Xilinx algorithm code"
 6099      6F677261 
 6099      6D28293A 
 6099      204D6973 
 6099      73696E67 
 6100 082b 00000000 		.align 8
 6100      00
 6101              	.LC46:
 6102 0830 666C5072 		.string	"flProgram(): '%c' is not a valid Xilinx algorithm code"
 6102      6F677261 
 6102      6D28293A 
 6102      20272563 
 6102      27206973 
 6103 0867 00       		.align 8
 6104              	.LC47:
 6105 0868 666C5072 		.string	"flProgram(): Missing Altera algorithm code"
 6105      6F677261 
 6105      6D28293A 
 6105      204D6973 
 6105      73696E67 
 6106 0893 00000000 		.align 8
 6106      00
 6107              	.LC48:
 6108 0898 666C5072 		.string	"flProgram(): '%c' is not a valid Altera algorithm code"
 6108      6F677261 
 6108      6D28293A 
 6108      20272563 
 6108      27206973 
 6109 08cf 00       		.align 8
 6110              	.LC49:
 6111 08d0 666C5072 		.string	"flProgram(): Missing algorithm vendor code"
 6111      6F677261 
 6111      6D28293A 
 6111      204D6973 
 6111      73696E67 
 6112 08fb 00000000 		.align 8
 6112      00
 6113              	.LC50:
 6114 0900 666C5072 		.string	"flProgram(): '%c' is not a valid algorithm vendor code"
 6114      6F677261 
 6114      6D28293A 
 6114      20272563 
 6114      27206973 
 6115              		.text
 6116              		.globl	flProgramBlob
 6118              	flProgramBlob:
 6119              	.LFB24:
 859:prog.c        **** 
 860:prog.c        **** // Programs a device using in-memory configuration information
 861:prog.c        **** //
 862:prog.c        **** DLLEXPORT(FLStatus) flProgramBlob(
 863:prog.c        **** 	struct FLContext *handle, const char *portConfig, uint32 blobLength, const uint8 *blobData,
 864:prog.c        **** 	const char **error)
 865:prog.c        **** {
 6120              		.loc 2 865 0
 6121              		.cfi_startproc
 6122 54fd 55       		pushq	%rbp
 6123              		.cfi_def_cfa_offset 16
 6124              		.cfi_offset 6, -16
 6125 54fe 4889E5   		movq	%rsp, %rbp
 6126              		.cfi_def_cfa_register 6
 6127 5501 4883EC40 		subq	$64, %rsp
 6128 5505 48897DE8 		movq	%rdi, -24(%rbp)
 6129 5509 488975E0 		movq	%rsi, -32(%rbp)
 6130 550d 8955DC   		movl	%edx, -36(%rbp)
 6131 5510 48894DD0 		movq	%rcx, -48(%rbp)
 6132 5514 4C8945C8 		movq	%r8, -56(%rbp)
 866:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 6133              		.loc 2 866 0
 6134 5518 C745FC00 		movl	$0, -4(%rbp)
 6134      000000
 867:prog.c        **** 	const char algoVendor = portConfig[0];
 6135              		.loc 2 867 0
 6136 551f 488B45E0 		movq	-32(%rbp), %rax
 6137 5523 0FB600   		movzbl	(%rax), %eax
 6138 5526 8845F9   		movb	%al, -7(%rbp)
 868:prog.c        **** 	if ( algoVendor == 'X' ) {
 6139              		.loc 2 868 0
 6140 5529 807DF958 		cmpb	$88, -7(%rbp)
 6141 552d 0F85BA00 		jne	.L340
 6141      0000
 6142              	.LBB4:
 869:prog.c        **** 		// This is a Xilinx algorithm
 870:prog.c        **** 		const char algoType = portConfig[1];
 6143              		.loc 2 870 0
 6144 5533 488B45E0 		movq	-32(%rbp), %rax
 6145 5537 0FB64001 		movzbl	1(%rax), %eax
 6146 553b 8845FB   		movb	%al, -5(%rbp)
 871:prog.c        **** 		if ( algoType == 'P' ) {
 6147              		.loc 2 871 0
 6148 553e 807DFB50 		cmpb	$80, -5(%rbp)
 6149 5542 752B     		jne	.L341
 872:prog.c        **** 			// This is Xilinx Slave Parallel ("SelectMAP")
 873:prog.c        **** 			return xProgram(handle, PROG_PARALLEL, portConfig, blobData, blobLength, error);
 6150              		.loc 2 873 0
 6151 5544 488B7DC8 		movq	-56(%rbp), %rdi
 6152 5548 8B75DC   		movl	-36(%rbp), %esi
 6153 554b 488B4DD0 		movq	-48(%rbp), %rcx
 6154 554f 488B55E0 		movq	-32(%rbp), %rdx
 6155 5553 488B45E8 		movq	-24(%rbp), %rax
 6156 5557 4989F9   		movq	%rdi, %r9
 6157 555a 4189F0   		movl	%esi, %r8d
 6158 555d BE050000 		movl	$5, %esi
 6158      00
 6159 5562 4889C7   		movq	%rax, %rdi
 6160 5565 E8FBB4FF 		call	xProgram
 6160      FF
 6161 556a E96B0100 		jmp	.L342
 6161      00
 6162              	.L341:
 874:prog.c        **** 		} else if ( algoType == 'S' ) {
 6163              		.loc 2 874 0
 6164 556f 807DFB53 		cmpb	$83, -5(%rbp)
 6165 5573 752B     		jne	.L343
 875:prog.c        **** 			// This is Xilinx Slave Serial
 876:prog.c        **** 			return xProgram(handle, PROG_SPI_SEND, portConfig, blobData, blobLength, error);
 6166              		.loc 2 876 0
 6167 5575 488B7DC8 		movq	-56(%rbp), %rdi
 6168 5579 8B75DC   		movl	-36(%rbp), %esi
 6169 557c 488B4DD0 		movq	-48(%rbp), %rcx
 6170 5580 488B55E0 		movq	-32(%rbp), %rdx
 6171 5584 488B45E8 		movq	-24(%rbp), %rax
 6172 5588 4989F9   		movq	%rdi, %r9
 6173 558b 4189F0   		movl	%esi, %r8d
 6174 558e BE060000 		movl	$6, %esi
 6174      00
 6175 5593 4889C7   		movq	%rax, %rdi
 6176 5596 E8CAB4FF 		call	xProgram
 6176      FF
 6177 559b E93A0100 		jmp	.L342
 6177      00
 6178              	.L343:
 877:prog.c        **** 		} else if ( algoType == '\0' ) {
 6179              		.loc 2 877 0
 6180 55a0 807DFB00 		cmpb	$0, -5(%rbp)
 6181 55a4 751F     		jne	.L344
 878:prog.c        **** 			CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing Xilinx algorithm code");
 6182              		.loc 2 878 0 discriminator 1
 6183 55a6 488B45C8 		movq	-56(%rbp), %rax
 6184 55aa 488D3500 		leaq	.LC45(%rip), %rsi
 6184      000000
 6185 55b1 4889C7   		movq	%rax, %rdi
 6186 55b4 E8000000 		call	errPrefix@PLT
 6186      00
 6187 55b9 C745FC0B 		movl	$11, -4(%rbp)
 6187      000000
 6188 55c0 E9120100 		jmp	.L345
 6188      00
 6189              	.L344:
 879:prog.c        **** 		} else {
 880:prog.c        **** 			CHECK_STATUS(
 6190              		.loc 2 880 0 discriminator 1
 6191 55c5 0FBE55FB 		movsbl	-5(%rbp), %edx
 6192 55c9 488B45C8 		movq	-56(%rbp), %rax
 6193 55cd 488D3500 		leaq	.LC46(%rip), %rsi
 6193      000000
 6194 55d4 4889C7   		movq	%rax, %rdi
 6195 55d7 B8000000 		movl	$0, %eax
 6195      00
 6196 55dc E8000000 		call	errRender@PLT
 6196      00
 6197 55e1 C745FC0B 		movl	$11, -4(%rbp)
 6197      000000
 6198 55e8 E9EA0000 		jmp	.L345
 6198      00
 6199              	.L340:
 6200              	.LBE4:
 881:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 882:prog.c        **** 				"flProgram(): '%c' is not a valid Xilinx algorithm code", algoType);
 883:prog.c        **** 		}
 884:prog.c        **** 	} else if ( algoVendor == 'A' ) {
 6201              		.loc 2 884 0
 6202 55ed 807DF941 		cmpb	$65, -7(%rbp)
 6203 55f1 757E     		jne	.L346
 6204              	.LBB5:
 885:prog.c        **** 		// This is an Altera algorithm
 886:prog.c        **** 		const char algoType = portConfig[1];
 6205              		.loc 2 886 0
 6206 55f3 488B45E0 		movq	-32(%rbp), %rax
 6207 55f7 0FB64001 		movzbl	1(%rax), %eax
 6208 55fb 8845FA   		movb	%al, -6(%rbp)
 887:prog.c        **** 		if ( algoType == 'S' ) {
 6209              		.loc 2 887 0
 6210 55fe 807DFA53 		cmpb	$83, -6(%rbp)
 6211 5602 7523     		jne	.L347
 888:prog.c        **** 			// This is Altera Passive Serial
 889:prog.c        **** 			return aProgram(handle, portConfig, blobData, blobLength, error);
 6212              		.loc 2 889 0
 6213 5604 488B7DC8 		movq	-56(%rbp), %rdi
 6214 5608 8B4DDC   		movl	-36(%rbp), %ecx
 6215 560b 488B55D0 		movq	-48(%rbp), %rdx
 6216 560f 488B75E0 		movq	-32(%rbp), %rsi
 6217 5613 488B45E8 		movq	-24(%rbp), %rax
 6218 5617 4989F8   		movq	%rdi, %r8
 6219 561a 4889C7   		movq	%rax, %rdi
 6220 561d E8ABD1FF 		call	aProgram
 6220      FF
 6221 5622 E9B30000 		jmp	.L342
 6221      00
 6222              	.L347:
 890:prog.c        **** 		} else if ( algoType == '\0' ) {
 6223              		.loc 2 890 0
 6224 5627 807DFA00 		cmpb	$0, -6(%rbp)
 6225 562b 751F     		jne	.L348
 891:prog.c        **** 			CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing Altera algorithm code");
 6226              		.loc 2 891 0 discriminator 1
 6227 562d 488B45C8 		movq	-56(%rbp), %rax
 6228 5631 488D3500 		leaq	.LC47(%rip), %rsi
 6228      000000
 6229 5638 4889C7   		movq	%rax, %rdi
 6230 563b E8000000 		call	errPrefix@PLT
 6230      00
 6231 5640 C745FC0B 		movl	$11, -4(%rbp)
 6231      000000
 6232 5647 E98B0000 		jmp	.L345
 6232      00
 6233              	.L348:
 892:prog.c        **** 		} else {
 893:prog.c        **** 			CHECK_STATUS(
 6234              		.loc 2 893 0 discriminator 1
 6235 564c 0FBE55FA 		movsbl	-6(%rbp), %edx
 6236 5650 488B45C8 		movq	-56(%rbp), %rax
 6237 5654 488D3500 		leaq	.LC48(%rip), %rsi
 6237      000000
 6238 565b 4889C7   		movq	%rax, %rdi
 6239 565e B8000000 		movl	$0, %eax
 6239      00
 6240 5663 E8000000 		call	errRender@PLT
 6240      00
 6241 5668 C745FC0B 		movl	$11, -4(%rbp)
 6241      000000
 6242 566f EB66     		jmp	.L345
 6243              	.L346:
 6244              	.LBE5:
 894:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 895:prog.c        **** 				"flProgram(): '%c' is not a valid Altera algorithm code", algoType);
 896:prog.c        **** 		}
 897:prog.c        **** 	} else if ( algoVendor == 'J' ) {
 6245              		.loc 2 897 0
 6246 5671 807DF94A 		cmpb	$74, -7(%rbp)
 6247 5675 751A     		jne	.L349
 898:prog.c        **** 		// This is a JTAG algorithm
 899:prog.c        **** 		return jProgram(handle, portConfig, blobData, error);
 6248              		.loc 2 899 0
 6249 5677 488B4DC8 		movq	-56(%rbp), %rcx
 6250 567b 488B55D0 		movq	-48(%rbp), %rdx
 6251 567f 488B75E0 		movq	-32(%rbp), %rsi
 6252 5683 488B45E8 		movq	-24(%rbp), %rax
 6253 5687 4889C7   		movq	%rax, %rdi
 6254 568a E818F4FF 		call	jProgram
 6254      FF
 6255 568f EB49     		jmp	.L342
 6256              	.L349:
 900:prog.c        **** 	} else if ( algoVendor == '\0' ) {
 6257              		.loc 2 900 0
 6258 5691 807DF900 		cmpb	$0, -7(%rbp)
 6259 5695 751C     		jne	.L350
 901:prog.c        **** 		CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing algorithm vendor code");
 6260              		.loc 2 901 0 discriminator 1
 6261 5697 488B45C8 		movq	-56(%rbp), %rax
 6262 569b 488D3500 		leaq	.LC49(%rip), %rsi
 6262      000000
 6263 56a2 4889C7   		movq	%rax, %rdi
 6264 56a5 E8000000 		call	errPrefix@PLT
 6264      00
 6265 56aa C745FC0B 		movl	$11, -4(%rbp)
 6265      000000
 6266 56b1 EB24     		jmp	.L345
 6267              	.L350:
 902:prog.c        **** 	} else {
 903:prog.c        **** 		CHECK_STATUS(
 6268              		.loc 2 903 0 discriminator 1
 6269 56b3 0FBE55F9 		movsbl	-7(%rbp), %edx
 6270 56b7 488B45C8 		movq	-56(%rbp), %rax
 6271 56bb 488D3500 		leaq	.LC50(%rip), %rsi
 6271      000000
 6272 56c2 4889C7   		movq	%rax, %rdi
 6273 56c5 B8000000 		movl	$0, %eax
 6273      00
 6274 56ca E8000000 		call	errRender@PLT
 6274      00
 6275 56cf C745FC0B 		movl	$11, -4(%rbp)
 6275      000000
 6276 56d6 90       		nop
 6277              	.L345:
 904:prog.c        **** 			true, FL_CONF_FORMAT, cleanup,
 905:prog.c        **** 			"flProgram(): '%c' is not a valid algorithm vendor code", algoVendor);
 906:prog.c        **** 	}
 907:prog.c        **** cleanup:
 908:prog.c        **** 	return retVal;
 6278              		.loc 2 908 0
 6279 56d7 8B45FC   		movl	-4(%rbp), %eax
 6280              	.L342:
 909:prog.c        **** }
 6281              		.loc 2 909 0
 6282 56da C9       		leave
 6283              		.cfi_def_cfa 7, 8
 6284 56db C3       		ret
 6285              		.cfi_endproc
 6286              	.LFE24:
 6288              		.section	.rodata
 6289              	.LC51:
 6290 0937 706C6179 		.string	"playSVF()"
 6290      53564628 
 6290      2900
 6291 0941 00000000 		.align 8
 6291      000000
 6292              	.LC52:
 6293 0948 666C5072 		.string	"flProgram(): portConfig terminated before first ':'"
 6293      6F677261 
 6293      6D28293A 
 6293      20706F72 
 6293      74436F6E 
 6294 097c 00000000 		.align 8
 6295              	.LC53:
 6296 0980 666C5072 		.string	"flProgram(): progFile was NULL, and portConfig didn't specify a file"
 6296      6F677261 
 6296      6D28293A 
 6296      2070726F 
 6296      6746696C 
 6297              	.LC54:
 6298 09c5 2E737666 		.string	".svf"
 6298      00
 6299              	.LC55:
 6300 09ca 666C5072 		.string	"flProgram()"
 6300      6F677261 
 6300      6D282900 
 6301              	.LC56:
 6302 09d6 2E787376 		.string	".xsvf"
 6302      6600
 6303              	.LC57:
 6304 09dc 2E637376 		.string	".csvf"
 6304      6600
 6305 09e2 00000000 		.align 8
 6305      0000
 6306              	.LC58:
 6307 09e8 666C5072 		.string	"flProgram(): JTAG files should have .svf, .xsvf or .csvf extension"
 6307      6F677261 
 6307      6D28293A 
 6307      204A5441 
 6307      47206669 
 6308              		.text
 6309              		.globl	flProgram
 6311              	flProgram:
 6312              	.LFB25:
 910:prog.c        **** 	
 911:prog.c        **** // Programs a device using configuration information loaded from a file. If progFile is NULL,
 912:prog.c        **** // it expects to find a filename at the end of portConfig.
 913:prog.c        **** //
 914:prog.c        **** DLLEXPORT(FLStatus) flProgram(
 915:prog.c        **** 	struct FLContext *handle, const char *portConfig, const char *progFile, const char **error) {
 6313              		.loc 2 915 0
 6314              		.cfi_startproc
 6315 56dc 55       		pushq	%rbp
 6316              		.cfi_def_cfa_offset 16
 6317              		.cfi_offset 6, -16
 6318 56dd 4889E5   		movq	%rsp, %rbp
 6319              		.cfi_def_cfa_register 6
 6320 56e0 4883EC70 		subq	$112, %rsp
 6321 56e4 48897DA8 		movq	%rdi, -88(%rbp)
 6322 56e8 488975A0 		movq	%rsi, -96(%rbp)
 6323 56ec 48895598 		movq	%rdx, -104(%rbp)
 6324 56f0 48894D90 		movq	%rcx, -112(%rbp)
 6325              		.loc 2 915 0
 6326 56f4 64488B04 		movq	%fs:40, %rax
 6326      25280000 
 6326      00
 6327 56fd 488945F8 		movq	%rax, -8(%rbp)
 6328 5701 31C0     		xorl	%eax, %eax
 916:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 6329              		.loc 2 916 0
 6330 5703 C745BC00 		movl	$0, -68(%rbp)
 6330      000000
 917:prog.c        **** 	const char algoVendor = portConfig[0];
 6331              		.loc 2 917 0
 6332 570a 488B45A0 		movq	-96(%rbp), %rax
 6333 570e 0FB600   		movzbl	(%rax), %eax
 6334 5711 8845BB   		movb	%al, -69(%rbp)
 918:prog.c        **** 	struct Buffer fileBuf = {0,};
 6335              		.loc 2 918 0
 6336 5714 48C745D0 		movq	$0, -48(%rbp)
 6336      00000000 
 6337 571c 48C745D8 		movq	$0, -40(%rbp)
 6337      00000000 
 6338 5724 48C745E0 		movq	$0, -32(%rbp)
 6338      00000000 
 6339 572c 48C745E8 		movq	$0, -24(%rbp)
 6339      00000000 
 919:prog.c        **** 	BufferStatus bStatus = bufInitialise(&fileBuf, 0x20000, 0, error);
 6340              		.loc 2 919 0
 6341 5734 488B5590 		movq	-112(%rbp), %rdx
 6342 5738 488D45D0 		leaq	-48(%rbp), %rax
 6343 573c 4889D1   		movq	%rdx, %rcx
 6344 573f BA000000 		movl	$0, %edx
 6344      00
 6345 5744 BE000002 		movl	$131072, %esi
 6345      00
 6346 5749 4889C7   		movq	%rax, %rdi
 6347 574c E8000000 		call	bufInitialise@PLT
 6347      00
 6348 5751 8945C0   		movl	%eax, -64(%rbp)
 920:prog.c        **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "playSVF()");
 6349              		.loc 2 920 0
 6350 5754 837DC000 		cmpl	$0, -64(%rbp)
 6351 5758 741F     		je	.L352
 6352              		.loc 2 920 0 is_stmt 0 discriminator 1
 6353 575a 488B4590 		movq	-112(%rbp), %rax
 6354 575e 488D3500 		leaq	.LC51(%rip), %rsi
 6354      000000
 6355 5765 4889C7   		movq	%rax, %rdi
 6356 5768 E8000000 		call	errPrefix@PLT
 6356      00
 6357 576d C745BC01 		movl	$1, -68(%rbp)
 6357      000000
 6358 5774 E98C0200 		jmp	.L353
 6358      00
 6359              	.L352:
 921:prog.c        **** 	if ( progFile == NULL ) {
 6360              		.loc 2 921 0 is_stmt 1
 6361 5779 48837D98 		cmpq	$0, -104(%rbp)
 6361      00
 6362 577e 0F85A000 		jne	.L354
 6362      0000
 922:prog.c        **** 		// Expect to find prog file at the end of portConfig
 923:prog.c        **** 		progFile = portConfig;
 6363              		.loc 2 923 0
 6364 5784 488B45A0 		movq	-96(%rbp), %rax
 6365 5788 48894598 		movq	%rax, -104(%rbp)
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6366              		.loc 2 924 0
 6367 578c EB05     		jmp	.L355
 6368              	.L357:
 925:prog.c        **** 			progFile++;
 6369              		.loc 2 925 0
 6370 578e 48834598 		addq	$1, -104(%rbp)
 6370      01
 6371              	.L355:
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6372              		.loc 2 924 0
 6373 5793 488B4598 		movq	-104(%rbp), %rax
 6374 5797 0FB600   		movzbl	(%rax), %eax
 6375 579a 84C0     		testb	%al, %al
 6376 579c 740B     		je	.L356
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6377              		.loc 2 924 0 is_stmt 0 discriminator 1
 6378 579e 488B4598 		movq	-104(%rbp), %rax
 6379 57a2 0FB600   		movzbl	(%rax), %eax
 6380 57a5 3C3A     		cmpb	$58, %al
 6381 57a7 75E5     		jne	.L357
 6382              	.L356:
 926:prog.c        **** 		}
 927:prog.c        **** 		CHECK_STATUS(
 6383              		.loc 2 927 0 is_stmt 1
 6384 57a9 488B4598 		movq	-104(%rbp), %rax
 6385 57ad 0FB600   		movzbl	(%rax), %eax
 6386 57b0 84C0     		testb	%al, %al
 6387 57b2 751F     		jne	.L358
 6388              		.loc 2 927 0 is_stmt 0 discriminator 1
 6389 57b4 488B4590 		movq	-112(%rbp), %rax
 6390 57b8 488D3500 		leaq	.LC52(%rip), %rsi
 6390      000000
 6391 57bf 4889C7   		movq	%rax, %rdi
 6392 57c2 E8000000 		call	errPrefix@PLT
 6392      00
 6393 57c7 C745BC0B 		movl	$11, -68(%rbp)
 6393      000000
 6394 57ce E9320200 		jmp	.L353
 6394      00
 6395              	.L358:
 928:prog.c        **** 			*progFile == '\0', FL_CONF_FORMAT, cleanup,
 929:prog.c        **** 			"flProgram(): portConfig terminated before first ':'");
 930:prog.c        **** 		progFile++;
 6396              		.loc 2 930 0 is_stmt 1
 6397 57d3 48834598 		addq	$1, -104(%rbp)
 6397      01
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6398              		.loc 2 931 0
 6399 57d8 EB05     		jmp	.L359
 6400              	.L361:
 932:prog.c        **** 			progFile++;
 6401              		.loc 2 932 0
 6402 57da 48834598 		addq	$1, -104(%rbp)
 6402      01
 6403              	.L359:
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6404              		.loc 2 931 0
 6405 57df 488B4598 		movq	-104(%rbp), %rax
 6406 57e3 0FB600   		movzbl	(%rax), %eax
 6407 57e6 84C0     		testb	%al, %al
 6408 57e8 740B     		je	.L360
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6409              		.loc 2 931 0 is_stmt 0 discriminator 1
 6410 57ea 488B4598 		movq	-104(%rbp), %rax
 6411 57ee 0FB600   		movzbl	(%rax), %eax
 6412 57f1 3C3A     		cmpb	$58, %al
 6413 57f3 75E5     		jne	.L361
 6414              	.L360:
 933:prog.c        **** 		}
 934:prog.c        **** 		CHECK_STATUS(
 6415              		.loc 2 934 0 is_stmt 1
 6416 57f5 488B4598 		movq	-104(%rbp), %rax
 6417 57f9 0FB600   		movzbl	(%rax), %eax
 6418 57fc 84C0     		testb	%al, %al
 6419 57fe 751F     		jne	.L362
 6420              		.loc 2 934 0 is_stmt 0 discriminator 1
 6421 5800 488B4590 		movq	-112(%rbp), %rax
 6422 5804 488D3500 		leaq	.LC53(%rip), %rsi
 6422      000000
 6423 580b 4889C7   		movq	%rax, %rdi
 6424 580e E8000000 		call	errPrefix@PLT
 6424      00
 6425 5813 C745BC0B 		movl	$11, -68(%rbp)
 6425      000000
 6426 581a E9E60100 		jmp	.L353
 6426      00
 6427              	.L362:
 935:prog.c        **** 			*progFile == '\0', FL_CONF_FORMAT, cleanup,
 936:prog.c        **** 			"flProgram(): progFile was NULL, and portConfig didn't specify a file");
 937:prog.c        **** 		progFile++;
 6428              		.loc 2 937 0 is_stmt 1
 6429 581f 48834598 		addq	$1, -104(%rbp)
 6429      01
 6430              	.L354:
 938:prog.c        **** 	}
 939:prog.c        **** 	if ( algoVendor == 'J' ) {
 6431              		.loc 2 939 0
 6432 5824 807DBB4A 		cmpb	$74, -69(%rbp)
 6433 5828 0F855001 		jne	.L363
 6433      0000
 6434              	.LBB6:
 940:prog.c        **** 		// JTAG file
 941:prog.c        **** 		const char *const ext = progFile + strlen(progFile) - 5;
 6435              		.loc 2 941 0
 6436 582e 488B4598 		movq	-104(%rbp), %rax
 6437 5832 4889C7   		movq	%rax, %rdi
 6438 5835 E8000000 		call	strlen@PLT
 6438      00
 6439 583a 488D50FB 		leaq	-5(%rax), %rdx
 6440 583e 488B4598 		movq	-104(%rbp), %rax
 6441 5842 4801D0   		addq	%rdx, %rax
 6442 5845 488945C8 		movq	%rax, -56(%rbp)
 942:prog.c        **** 		if ( strcmp(".svf", ext+1) == 0 ) {
 6443              		.loc 2 942 0
 6444 5849 488B45C8 		movq	-56(%rbp), %rax
 6445 584d 4883C001 		addq	$1, %rax
 6446 5851 4889C6   		movq	%rax, %rsi
 6447 5854 488D3D00 		leaq	.LC54(%rip), %rdi
 6447      000000
 6448 585b E8000000 		call	strcmp@PLT
 6448      00
 6449 5860 85C0     		testl	%eax, %eax
 6450 5862 7547     		jne	.L364
 943:prog.c        **** 			fStatus = flLoadSvfAndConvertToCsvf(progFile, &fileBuf, NULL, error);
 6451              		.loc 2 943 0
 6452 5864 488B5590 		movq	-112(%rbp), %rdx
 6453 5868 488D75D0 		leaq	-48(%rbp), %rsi
 6454 586c 488B4598 		movq	-104(%rbp), %rax
 6455 5870 4889D1   		movq	%rdx, %rcx
 6456 5873 BA000000 		movl	$0, %edx
 6456      00
 6457 5878 4889C7   		movq	%rax, %rdi
 6458 587b E8000000 		call	flLoadSvfAndConvertToCsvf@PLT
 6458      00
 6459 5880 8945C4   		movl	%eax, -60(%rbp)
 944:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6460              		.loc 2 944 0
 6461 5883 837DC400 		cmpl	$0, -60(%rbp)
 6462 5887 0F842D01 		je	.L368
 6462      0000
 6463              		.loc 2 944 0 is_stmt 0 discriminator 1
 6464 588d 488B4590 		movq	-112(%rbp), %rax
 6465 5891 488D3500 		leaq	.LC55(%rip), %rsi
 6465      000000
 6466 5898 4889C7   		movq	%rax, %rdi
 6467 589b E8000000 		call	errPrefix@PLT
 6467      00
 6468 58a0 8B45C4   		movl	-60(%rbp), %eax
 6469 58a3 8945BC   		movl	%eax, -68(%rbp)
 6470 58a6 E95A0100 		jmp	.L353
 6470      00
 6471              	.L364:
 945:prog.c        **** 		} else if ( strcmp(".xsvf", ext) == 0 ) {
 6472              		.loc 2 945 0 is_stmt 1
 6473 58ab 488B45C8 		movq	-56(%rbp), %rax
 6474 58af 4889C6   		movq	%rax, %rsi
 6475 58b2 488D3D00 		leaq	.LC56(%rip), %rdi
 6475      000000
 6476 58b9 E8000000 		call	strcmp@PLT
 6476      00
 6477 58be 85C0     		testl	%eax, %eax
 6478 58c0 7547     		jne	.L366
 946:prog.c        **** 			fStatus = flLoadXsvfAndConvertToCsvf(progFile, &fileBuf, NULL, error);
 6479              		.loc 2 946 0
 6480 58c2 488B5590 		movq	-112(%rbp), %rdx
 6481 58c6 488D75D0 		leaq	-48(%rbp), %rsi
 6482 58ca 488B4598 		movq	-104(%rbp), %rax
 6483 58ce 4889D1   		movq	%rdx, %rcx
 6484 58d1 BA000000 		movl	$0, %edx
 6484      00
 6485 58d6 4889C7   		movq	%rax, %rdi
 6486 58d9 E8000000 		call	flLoadXsvfAndConvertToCsvf@PLT
 6486      00
 6487 58de 8945C4   		movl	%eax, -60(%rbp)
 947:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6488              		.loc 2 947 0
 6489 58e1 837DC400 		cmpl	$0, -60(%rbp)
 6490 58e5 0F84CF00 		je	.L368
 6490      0000
 6491              		.loc 2 947 0 is_stmt 0 discriminator 1
 6492 58eb 488B4590 		movq	-112(%rbp), %rax
 6493 58ef 488D3500 		leaq	.LC55(%rip), %rsi
 6493      000000
 6494 58f6 4889C7   		movq	%rax, %rdi
 6495 58f9 E8000000 		call	errPrefix@PLT
 6495      00
 6496 58fe 8B45C4   		movl	-60(%rbp), %eax
 6497 5901 8945BC   		movl	%eax, -68(%rbp)
 6498 5904 E9FC0000 		jmp	.L353
 6498      00
 6499              	.L366:
 948:prog.c        **** 		} else if ( strcmp(".csvf", ext) == 0 ) {
 6500              		.loc 2 948 0 is_stmt 1
 6501 5909 488B45C8 		movq	-56(%rbp), %rax
 6502 590d 4889C6   		movq	%rax, %rsi
 6503 5910 488D3D00 		leaq	.LC57(%rip), %rdi
 6503      000000
 6504 5917 E8000000 		call	strcmp@PLT
 6504      00
 6505 591c 85C0     		testl	%eax, %eax
 6506 591e 753F     		jne	.L367
 949:prog.c        **** 			bStatus = bufAppendFromBinaryFile(&fileBuf, progFile, error);
 6507              		.loc 2 949 0
 6508 5920 488B5590 		movq	-112(%rbp), %rdx
 6509 5924 488B4D98 		movq	-104(%rbp), %rcx
 6510 5928 488D45D0 		leaq	-48(%rbp), %rax
 6511 592c 4889CE   		movq	%rcx, %rsi
 6512 592f 4889C7   		movq	%rax, %rdi
 6513 5932 E8000000 		call	bufAppendFromBinaryFile@PLT
 6513      00
 6514 5937 8945C0   		movl	%eax, -64(%rbp)
 950:prog.c        **** 			CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flProgram()");
 6515              		.loc 2 950 0
 6516 593a 837DC000 		cmpl	$0, -64(%rbp)
 6517 593e 747A     		je	.L368
 6518              		.loc 2 950 0 is_stmt 0 discriminator 1
 6519 5940 488B4590 		movq	-112(%rbp), %rax
 6520 5944 488D3500 		leaq	.LC55(%rip), %rsi
 6520      000000
 6521 594b 4889C7   		movq	%rax, %rdi
 6522 594e E8000000 		call	errPrefix@PLT
 6522      00
 6523 5953 C745BC06 		movl	$6, -68(%rbp)
 6523      000000
 6524 595a E9A60000 		jmp	.L353
 6524      00
 6525              	.L367:
 951:prog.c        **** 		} else {
 952:prog.c        **** 			CHECK_STATUS(
 6526              		.loc 2 952 0 is_stmt 1 discriminator 1
 6527 595f 488B4590 		movq	-112(%rbp), %rax
 6528 5963 488D3500 		leaq	.LC58(%rip), %rsi
 6528      000000
 6529 596a 4889C7   		movq	%rax, %rdi
 6530 596d E8000000 		call	errPrefix@PLT
 6530      00
 6531 5972 C745BC06 		movl	$6, -68(%rbp)
 6531      000000
 6532 5979 E9870000 		jmp	.L353
 6532      00
 6533              	.L363:
 6534              	.LBE6:
 953:prog.c        **** 				true, FL_FILE_ERR, cleanup,
 954:prog.c        **** 				"flProgram(): JTAG files should have .svf, .xsvf or .csvf extension");
 955:prog.c        **** 		}
 956:prog.c        **** 	} else {
 957:prog.c        **** 		// Just load it
 958:prog.c        **** 		bStatus = bufAppendFromBinaryFile(&fileBuf, progFile, error);
 6535              		.loc 2 958 0
 6536 597e 488B5590 		movq	-112(%rbp), %rdx
 6537 5982 488B4D98 		movq	-104(%rbp), %rcx
 6538 5986 488D45D0 		leaq	-48(%rbp), %rax
 6539 598a 4889CE   		movq	%rcx, %rsi
 6540 598d 4889C7   		movq	%rax, %rdi
 6541 5990 E8000000 		call	bufAppendFromBinaryFile@PLT
 6541      00
 6542 5995 8945C0   		movl	%eax, -64(%rbp)
 959:prog.c        **** 		CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flProgram()");
 6543              		.loc 2 959 0
 6544 5998 837DC000 		cmpl	$0, -64(%rbp)
 6545 599c 741C     		je	.L368
 6546              		.loc 2 959 0 is_stmt 0 discriminator 1
 6547 599e 488B4590 		movq	-112(%rbp), %rax
 6548 59a2 488D3500 		leaq	.LC55(%rip), %rsi
 6548      000000
 6549 59a9 4889C7   		movq	%rax, %rdi
 6550 59ac E8000000 		call	errPrefix@PLT
 6550      00
 6551 59b1 C745BC06 		movl	$6, -68(%rbp)
 6551      000000
 6552 59b8 EB4B     		jmp	.L353
 6553              	.L368:
 960:prog.c        **** 	}
 961:prog.c        **** 	fStatus = flProgramBlob(handle, portConfig, (uint32)fileBuf.length, fileBuf.data, error);
 6554              		.loc 2 961 0 is_stmt 1
 6555 59ba 488B55D0 		movq	-48(%rbp), %rdx
 6556 59be 488B45D8 		movq	-40(%rbp), %rax
 6557 59c2 89C7     		movl	%eax, %edi
 6558 59c4 488B4D90 		movq	-112(%rbp), %rcx
 6559 59c8 488B75A0 		movq	-96(%rbp), %rsi
 6560 59cc 488B45A8 		movq	-88(%rbp), %rax
 6561 59d0 4989C8   		movq	%rcx, %r8
 6562 59d3 4889D1   		movq	%rdx, %rcx
 6563 59d6 89FA     		movl	%edi, %edx
 6564 59d8 4889C7   		movq	%rax, %rdi
 6565 59db E8000000 		call	flProgramBlob@PLT
 6565      00
 6566 59e0 8945C4   		movl	%eax, -60(%rbp)
 962:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6567              		.loc 2 962 0
 6568 59e3 837DC400 		cmpl	$0, -60(%rbp)
 6569 59e7 741B     		je	.L371
 6570              		.loc 2 962 0 is_stmt 0 discriminator 1
 6571 59e9 488B4590 		movq	-112(%rbp), %rax
 6572 59ed 488D3500 		leaq	.LC55(%rip), %rsi
 6572      000000
 6573 59f4 4889C7   		movq	%rax, %rdi
 6574 59f7 E8000000 		call	errPrefix@PLT
 6574      00
 6575 59fc 8B45C4   		movl	-60(%rbp), %eax
 6576 59ff 8945BC   		movl	%eax, -68(%rbp)
 6577 5a02 EB01     		jmp	.L353
 6578              	.L371:
 963:prog.c        **** cleanup:
 6579              		.loc 2 963 0 is_stmt 1
 6580 5a04 90       		nop
 6581              	.L353:
 964:prog.c        **** 	bufDestroy(&fileBuf);
 6582              		.loc 2 964 0
 6583 5a05 488D45D0 		leaq	-48(%rbp), %rax
 6584 5a09 4889C7   		movq	%rax, %rdi
 6585 5a0c E8000000 		call	bufDestroy@PLT
 6585      00
 965:prog.c        **** 	return retVal;
 6586              		.loc 2 965 0
 6587 5a11 8B45BC   		movl	-68(%rbp), %eax
 966:prog.c        **** }
 6588              		.loc 2 966 0
 6589 5a14 488B4DF8 		movq	-8(%rbp), %rcx
 6590 5a18 6448330C 		xorq	%fs:40, %rcx
 6590      25280000 
 6590      00
 6591 5a21 7405     		je	.L370
 6592 5a23 E8000000 		call	__stack_chk_fail@PLT
 6592      00
 6593              	.L370:
 6594 5a28 C9       		leave
 6595              		.cfi_def_cfa 7, 8
 6596 5a29 C3       		ret
 6597              		.cfi_endproc
 6598              	.LFE25:
 6600              		.section	.rodata
 6601 0a2b 00000000 		.align 8
 6601      00
 6604              	indexValues:
 6609              	.LC59:
 6610 0a38 666C5369 		.string	"flSingleBitPortAccess()"
 6610      6E676C65 
 6610      42697450 
 6610      6F727441 
 6610      63636573 
 6611              		.text
 6612              		.globl	flSingleBitPortAccess
 6614              	flSingleBitPortAccess:
 6615              	.LFB26:
 967:prog.c        **** 
 968:prog.c        **** // Actual values to send to microcontroller for PIN_UNUSED, PIN_HIGH, PIN_LOW and PIN_INPUT:
 969:prog.c        **** static const uint16 indexValues[] = {0xFFFF, 0x0101, 0x0001, 0x0000};
 970:prog.c        **** 
 971:prog.c        **** DLLEXPORT(FLStatus) flSingleBitPortAccess(
 972:prog.c        **** 	struct FLContext *handle, uint8 portNumber, uint8 bitNumber,
 973:prog.c        ****    uint8 pinConfig, uint8 *pinRead, const char **error)
 974:prog.c        **** {
 6616              		.loc 2 974 0
 6617              		.cfi_startproc
 6618 5a2a 55       		pushq	%rbp
 6619              		.cfi_def_cfa_offset 16
 6620              		.cfi_offset 6, -16
 6621 5a2b 4889E5   		movq	%rsp, %rbp
 6622              		.cfi_def_cfa_register 6
 6623 5a2e 4883EC50 		subq	$80, %rsp
 6624 5a32 48897DD8 		movq	%rdi, -40(%rbp)
 6625 5a36 89C8     		movl	%ecx, %eax
 6626 5a38 4C8945C0 		movq	%r8, -64(%rbp)
 6627 5a3c 4C894DB8 		movq	%r9, -72(%rbp)
 6628 5a40 89F1     		movl	%esi, %ecx
 6629 5a42 884DD4   		movb	%cl, -44(%rbp)
 6630 5a45 8855D0   		movb	%dl, -48(%rbp)
 6631 5a48 8845CC   		movb	%al, -52(%rbp)
 6632              		.loc 2 974 0
 6633 5a4b 64488B04 		movq	%fs:40, %rax
 6633      25280000 
 6633      00
 6634 5a54 488945F8 		movq	%rax, -8(%rbp)
 6635 5a58 31C0     		xorl	%eax, %eax
 975:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 6636              		.loc 2 975 0
 6637 5a5a C745F000 		movl	$0, -16(%rbp)
 6637      000000
 976:prog.c        **** 	USBStatus uStatus;
 977:prog.c        **** 	uint8 byte;
 978:prog.c        **** 	const uint16 value = (uint16)((bitNumber << 8) | portNumber);
 6638              		.loc 2 978 0
 6639 5a61 0FB645D0 		movzbl	-48(%rbp), %eax
 6640 5a65 C1E008   		sall	$8, %eax
 6641 5a68 89C2     		movl	%eax, %edx
 6642 5a6a 0FB645D4 		movzbl	-44(%rbp), %eax
 6643 5a6e 09D0     		orl	%edx, %eax
 6644 5a70 668945EC 		movw	%ax, -20(%rbp)
 979:prog.c        **** 	const uint16 index = indexValues[pinConfig];
 6645              		.loc 2 979 0
 6646 5a74 0FB645CC 		movzbl	-52(%rbp), %eax
 6647 5a78 4898     		cltq
 6648 5a7a 488D1400 		leaq	(%rax,%rax), %rdx
 6649 5a7e 488D0500 		leaq	indexValues(%rip), %rax
 6649      000000
 6650 5a85 0FB70402 		movzwl	(%rdx,%rax), %eax
 6651 5a89 668945EE 		movw	%ax, -18(%rbp)
 980:prog.c        **** 	uStatus = usbControlRead(
 6652              		.loc 2 980 0
 6653 5a8d 0FB74DEE 		movzwl	-18(%rbp), %ecx
 6654 5a91 0FB755EC 		movzwl	-20(%rbp), %edx
 6655 5a95 488B45D8 		movq	-40(%rbp), %rax
 6656 5a99 488B00   		movq	(%rax), %rax
 6657 5a9c 488D75EB 		leaq	-21(%rbp), %rsi
 6658 5aa0 FF75B8   		pushq	-72(%rbp)
 6659 5aa3 68E80300 		pushq	$1000
 6659      00
 6660 5aa8 41B90100 		movl	$1, %r9d
 6660      0000
 6661 5aae 4989F0   		movq	%rsi, %r8
 6662 5ab1 BE850000 		movl	$133, %esi
 6662      00
 6663 5ab6 4889C7   		movq	%rax, %rdi
 6664 5ab9 E8000000 		call	usbControlRead@PLT
 6664      00
 6665 5abe 4883C410 		addq	$16, %rsp
 6666 5ac2 8945F4   		movl	%eax, -12(%rbp)
 981:prog.c        **** 		handle->device,
 982:prog.c        **** 		CMD_PORT_BIT_IO, // bRequest
 983:prog.c        **** 		value,           // wValue
 984:prog.c        **** 		index,           // wIndex
 985:prog.c        **** 		&byte,           // buffer to receive current state of ports
 986:prog.c        **** 		1,               // wLength
 987:prog.c        **** 		1000,            // timeout (ms)
 988:prog.c        **** 		error
 989:prog.c        **** 	);
 990:prog.c        **** 	CHECK_STATUS(uStatus, FL_PORT_IO, cleanup, "flSingleBitPortAccess()");
 6667              		.loc 2 990 0
 6668 5ac5 837DF400 		cmpl	$0, -12(%rbp)
 6669 5ac9 741C     		je	.L373
 6670              		.loc 2 990 0 is_stmt 0 discriminator 1
 6671 5acb 488B45B8 		movq	-72(%rbp), %rax
 6672 5acf 488D3500 		leaq	.LC59(%rip), %rsi
 6672      000000
 6673 5ad6 4889C7   		movq	%rax, %rdi
 6674 5ad9 E8000000 		call	errPrefix@PLT
 6674      00
 6675 5ade C745F015 		movl	$21, -16(%rbp)
 6675      000000
 6676 5ae5 EB14     		jmp	.L374
 6677              	.L373:
 991:prog.c        **** 	if ( pinRead ) {
 6678              		.loc 2 991 0 is_stmt 1
 6679 5ae7 48837DC0 		cmpq	$0, -64(%rbp)
 6679      00
 6680 5aec 740C     		je	.L377
 992:prog.c        **** 		*pinRead = byte;
 6681              		.loc 2 992 0
 6682 5aee 0FB655EB 		movzbl	-21(%rbp), %edx
 6683 5af2 488B45C0 		movq	-64(%rbp), %rax
 6684 5af6 8810     		movb	%dl, (%rax)
 6685 5af8 EB01     		jmp	.L374
 6686              	.L377:
 993:prog.c        **** 	}
 994:prog.c        **** cleanup:
 6687              		.loc 2 994 0
 6688 5afa 90       		nop
 6689              	.L374:
 995:prog.c        **** 	return retVal;
 6690              		.loc 2 995 0
 6691 5afb 8B45F0   		movl	-16(%rbp), %eax
 996:prog.c        **** }
 6692              		.loc 2 996 0
 6693 5afe 488B7DF8 		movq	-8(%rbp), %rdi
 6694 5b02 6448333C 		xorq	%fs:40, %rdi
 6694      25280000 
 6694      00
 6695 5b0b 7405     		je	.L376
 6696 5b0d E8000000 		call	__stack_chk_fail@PLT
 6696      00
 6697              	.L376:
 6698 5b12 C9       		leave
 6699              		.cfi_def_cfa 7, 8
 6700 5b13 C3       		ret
 6701              		.cfi_endproc
 6702              	.LFE26:
 6704              		.section	.rodata
 6705              		.align 8
 6706              	.LC60:
 6707 0a50 666C4D75 		.string	"flMultiBitPortAccess(): Unexpected end of config string:\n  %s\n  %s^"
 6707      6C746942 
 6707      6974506F 
 6707      72744163 
 6707      63657373 
 6708 0a94 00000000 		.align 8
 6709              	.LC61:
 6710 0a98 666C4D75 		.string	"flMultiBitPortAccess(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 6710      6C746942 
 6710      6974506F 
 6710      72744163 
 6710      63657373 
 6711 0ae7 00       		.align 8
 6712              	.LC62:
 6713 0ae8 666C4D75 		.string	"flMultiBitPortAccess(): Bit number is not valid:\n  %s\n  %s^"
 6713      6C746942 
 6713      6974506F 
 6713      72744163 
 6713      63657373 
 6714 0b24 00000000 		.align 8
 6715              	.LC63:
 6716 0b28 666C4D75 		.string	"flMultiBitPortAccess(): Expecting '+', '-' or '?':\n  %s\n  %s^"
 6716      6C746942 
 6716      6974506F 
 6716      72744163 
 6716      63657373 
 6717 0b66 0000     		.align 8
 6718              	.LC64:
 6719 0b68 666C4D75 		.string	"flMultiBitPortAccess(): Expecting ',' or '\\0' here:\n  %s\n  %s^"
 6719      6C746942 
 6719      6974506F 
 6719      72744163 
 6719      63657373 
 6720              		.text
 6721              		.globl	flMultiBitPortAccess
 6723              	flMultiBitPortAccess:
 6724              	.LFB27:
 997:prog.c        **** 
 998:prog.c        **** DLLEXPORT(FLStatus) flMultiBitPortAccess(
 999:prog.c        **** 	struct FLContext *handle, const char *portConfig, uint32 *readState, const char **error)
1000:prog.c        **** {
 6725              		.loc 2 1000 0
 6726              		.cfi_startproc
 6727 5b14 55       		pushq	%rbp
 6728              		.cfi_def_cfa_offset 16
 6729              		.cfi_offset 6, -16
 6730 5b15 4889E5   		movq	%rsp, %rbp
 6731              		.cfi_def_cfa_register 6
 6732 5b18 4883EC50 		subq	$80, %rsp
 6733 5b1c 48897DC8 		movq	%rdi, -56(%rbp)
 6734 5b20 488975C0 		movq	%rsi, -64(%rbp)
 6735 5b24 488955B8 		movq	%rdx, -72(%rbp)
 6736 5b28 48894DB0 		movq	%rcx, -80(%rbp)
 6737              		.loc 2 1000 0
 6738 5b2c 64488B04 		movq	%fs:40, %rax
 6738      25280000 
 6738      00
 6739 5b35 488945F8 		movq	%rax, -8(%rbp)
 6740 5b39 31C0     		xorl	%eax, %eax
1001:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 6741              		.loc 2 1001 0
 6742 5b3b C745E000 		movl	$0, -32(%rbp)
 6742      000000
1002:prog.c        **** 	const char *ptr = portConfig;
 6743              		.loc 2 1002 0
 6744 5b42 488B45C0 		movq	-64(%rbp), %rax
 6745 5b46 488945F0 		movq	%rax, -16(%rbp)
1003:prog.c        **** 	uint32 result = 0;
 6746              		.loc 2 1003 0
 6747 5b4a C745E400 		movl	$0, -28(%rbp)
 6747      000000
 6748              	.L393:
1004:prog.c        **** 	uint8 thisPort, thisBit;
1005:prog.c        **** 	char ch;
1006:prog.c        **** 	PinConfig pinConfig;
1007:prog.c        **** 	uint8 bitState;
1008:prog.c        **** 	do {
1009:prog.c        **** 		GET_PAIR(thisPort, thisBit, "flMultiBitPortAccess");
 6749              		.loc 2 1009 0
 6750 5b51 488B45F0 		movq	-16(%rbp), %rax
 6751 5b55 0FB600   		movzbl	(%rax), %eax
 6752 5b58 8845DD   		movb	%al, -35(%rbp)
 6753 5b5b 807DDD00 		cmpb	$0, -35(%rbp)
 6754 5b5f 7544     		jne	.L379
 6755              		.loc 2 1009 0 is_stmt 0 discriminator 1
 6756 5b61 488B45F0 		movq	-16(%rbp), %rax
 6757 5b65 4889C2   		movq	%rax, %rdx
 6758 5b68 488B45C0 		movq	-64(%rbp), %rax
 6759 5b6c 4829C2   		subq	%rax, %rdx
 6760 5b6f 4889D0   		movq	%rdx, %rax
 6761 5b72 4889C7   		movq	%rax, %rdi
 6762 5b75 E83CA6FF 		call	spaces
 6762      FF
 6763 5b7a 4889C1   		movq	%rax, %rcx
 6764 5b7d 488B55C0 		movq	-64(%rbp), %rdx
 6765 5b81 488B45B0 		movq	-80(%rbp), %rax
 6766 5b85 488D3500 		leaq	.LC60(%rip), %rsi
 6766      000000
 6767 5b8c 4889C7   		movq	%rax, %rdi
 6768 5b8f B8000000 		movl	$0, %eax
 6768      00
 6769 5b94 E8000000 		call	errRender@PLT
 6769      00
 6770 5b99 C745E00B 		movl	$11, -32(%rbp)
 6770      000000
 6771 5ba0 E9BB0200 		jmp	.L380
 6771      00
 6772              	.L379:
 6773              		.loc 2 1009 0 discriminator 2
 6774 5ba5 807DDD40 		cmpb	$64, -35(%rbp)
 6775 5ba9 7E06     		jle	.L381
 6776              		.loc 2 1009 0 discriminator 4
 6777 5bab 807DDD5A 		cmpb	$90, -35(%rbp)
 6778 5baf 7E44     		jle	.L382
 6779              	.L381:
 6780              		.loc 2 1009 0 discriminator 5
 6781 5bb1 488B45F0 		movq	-16(%rbp), %rax
 6782 5bb5 4889C2   		movq	%rax, %rdx
 6783 5bb8 488B45C0 		movq	-64(%rbp), %rax
 6784 5bbc 4829C2   		subq	%rax, %rdx
 6785 5bbf 4889D0   		movq	%rdx, %rax
 6786 5bc2 4889C7   		movq	%rax, %rdi
 6787 5bc5 E8ECA5FF 		call	spaces
 6787      FF
 6788 5bca 4889C1   		movq	%rax, %rcx
 6789 5bcd 488B55C0 		movq	-64(%rbp), %rdx
 6790 5bd1 488B45B0 		movq	-80(%rbp), %rax
 6791 5bd5 488D3500 		leaq	.LC61(%rip), %rsi
 6791      000000
 6792 5bdc 4889C7   		movq	%rax, %rdi
 6793 5bdf B8000000 		movl	$0, %eax
 6793      00
 6794 5be4 E8000000 		call	errRender@PLT
 6794      00
 6795 5be9 C745E00B 		movl	$11, -32(%rbp)
 6795      000000
 6796 5bf0 E96B0200 		jmp	.L380
 6796      00
 6797              	.L382:
 6798              		.loc 2 1009 0 discriminator 6
 6799 5bf5 0FB645DD 		movzbl	-35(%rbp), %eax
 6800 5bf9 83E841   		subl	$65, %eax
 6801 5bfc 8845DE   		movb	%al, -34(%rbp)
 6802 5bff 488B45F0 		movq	-16(%rbp), %rax
 6803 5c03 4883C001 		addq	$1, %rax
 6804 5c07 488945F0 		movq	%rax, -16(%rbp)
 6805 5c0b 488B45F0 		movq	-16(%rbp), %rax
 6806 5c0f 0FB600   		movzbl	(%rax), %eax
 6807 5c12 8845DD   		movb	%al, -35(%rbp)
 6808 5c15 807DDD00 		cmpb	$0, -35(%rbp)
 6809 5c19 7544     		jne	.L383
 6810              		.loc 2 1009 0 discriminator 7
 6811 5c1b 488B45F0 		movq	-16(%rbp), %rax
 6812 5c1f 4889C2   		movq	%rax, %rdx
 6813 5c22 488B45C0 		movq	-64(%rbp), %rax
 6814 5c26 4829C2   		subq	%rax, %rdx
 6815 5c29 4889D0   		movq	%rdx, %rax
 6816 5c2c 4889C7   		movq	%rax, %rdi
 6817 5c2f E882A5FF 		call	spaces
 6817      FF
 6818 5c34 4889C1   		movq	%rax, %rcx
 6819 5c37 488B55C0 		movq	-64(%rbp), %rdx
 6820 5c3b 488B45B0 		movq	-80(%rbp), %rax
 6821 5c3f 488D3500 		leaq	.LC60(%rip), %rsi
 6821      000000
 6822 5c46 4889C7   		movq	%rax, %rdi
 6823 5c49 B8000000 		movl	$0, %eax
 6823      00
 6824 5c4e E8000000 		call	errRender@PLT
 6824      00
 6825 5c53 C745E00B 		movl	$11, -32(%rbp)
 6825      000000
 6826 5c5a E9010200 		jmp	.L380
 6826      00
 6827              	.L383:
 6828              		.loc 2 1009 0 discriminator 8
 6829 5c5f 807DDD2F 		cmpb	$47, -35(%rbp)
 6830 5c63 7E06     		jle	.L384
 6831              		.loc 2 1009 0 discriminator 10
 6832 5c65 807DDD39 		cmpb	$57, -35(%rbp)
 6833 5c69 7E44     		jle	.L385
 6834              	.L384:
 6835              		.loc 2 1009 0 discriminator 11
 6836 5c6b 488B45F0 		movq	-16(%rbp), %rax
 6837 5c6f 4889C2   		movq	%rax, %rdx
 6838 5c72 488B45C0 		movq	-64(%rbp), %rax
 6839 5c76 4829C2   		subq	%rax, %rdx
 6840 5c79 4889D0   		movq	%rdx, %rax
 6841 5c7c 4889C7   		movq	%rax, %rdi
 6842 5c7f E832A5FF 		call	spaces
 6842      FF
 6843 5c84 4889C1   		movq	%rax, %rcx
 6844 5c87 488B55C0 		movq	-64(%rbp), %rdx
 6845 5c8b 488B45B0 		movq	-80(%rbp), %rax
 6846 5c8f 488D3500 		leaq	.LC62(%rip), %rsi
 6846      000000
 6847 5c96 4889C7   		movq	%rax, %rdi
 6848 5c99 B8000000 		movl	$0, %eax
 6848      00
 6849 5c9e E8000000 		call	errRender@PLT
 6849      00
 6850 5ca3 C745E00B 		movl	$11, -32(%rbp)
 6850      000000
 6851 5caa E9B10100 		jmp	.L380
 6851      00
 6852              	.L385:
 6853              		.loc 2 1009 0 discriminator 12
 6854 5caf 488B45F0 		movq	-16(%rbp), %rax
 6855 5cb3 488D4DF0 		leaq	-16(%rbp), %rcx
 6856 5cb7 BA0A0000 		movl	$10, %edx
 6856      00
 6857 5cbc 4889CE   		movq	%rcx, %rsi
 6858 5cbf 4889C7   		movq	%rax, %rdi
 6859 5cc2 E8000000 		call	strtoul@PLT
 6859      00
 6860 5cc7 8845DF   		movb	%al, -33(%rbp)
1010:prog.c        **** 		GET_CHAR("flMultiBitPortAccess");
 6861              		.loc 2 1010 0 is_stmt 1 discriminator 12
 6862 5cca 488B45F0 		movq	-16(%rbp), %rax
 6863 5cce 0FB600   		movzbl	(%rax), %eax
 6864 5cd1 8845DD   		movb	%al, -35(%rbp)
 6865 5cd4 807DDD00 		cmpb	$0, -35(%rbp)
 6866 5cd8 7544     		jne	.L386
 6867              		.loc 2 1010 0 is_stmt 0 discriminator 1
 6868 5cda 488B45F0 		movq	-16(%rbp), %rax
 6869 5cde 4889C2   		movq	%rax, %rdx
 6870 5ce1 488B45C0 		movq	-64(%rbp), %rax
 6871 5ce5 4829C2   		subq	%rax, %rdx
 6872 5ce8 4889D0   		movq	%rdx, %rax
 6873 5ceb 4889C7   		movq	%rax, %rdi
 6874 5cee E8C3A4FF 		call	spaces
 6874      FF
 6875 5cf3 4889C1   		movq	%rax, %rcx
 6876 5cf6 488B55C0 		movq	-64(%rbp), %rdx
 6877 5cfa 488B45B0 		movq	-80(%rbp), %rax
 6878 5cfe 488D3500 		leaq	.LC60(%rip), %rsi
 6878      000000
 6879 5d05 4889C7   		movq	%rax, %rdi
 6880 5d08 B8000000 		movl	$0, %eax
 6880      00
 6881 5d0d E8000000 		call	errRender@PLT
 6881      00
 6882 5d12 C745E00B 		movl	$11, -32(%rbp)
 6882      000000
 6883 5d19 E9420100 		jmp	.L380
 6883      00
 6884              	.L386:
1011:prog.c        **** 		if ( ch == '+' ) {
 6885              		.loc 2 1011 0 is_stmt 1
 6886 5d1e 807DDD2B 		cmpb	$43, -35(%rbp)
 6887 5d22 7509     		jne	.L387
1012:prog.c        **** 			pinConfig = PIN_HIGH;
 6888              		.loc 2 1012 0
 6889 5d24 C745E801 		movl	$1, -24(%rbp)
 6889      000000
 6890 5d2b EB62     		jmp	.L388
 6891              	.L387:
1013:prog.c        **** 		} else if ( ch == '-' ) {
 6892              		.loc 2 1013 0
 6893 5d2d 807DDD2D 		cmpb	$45, -35(%rbp)
 6894 5d31 7509     		jne	.L389
1014:prog.c        **** 			pinConfig = PIN_LOW;
 6895              		.loc 2 1014 0
 6896 5d33 C745E802 		movl	$2, -24(%rbp)
 6896      000000
 6897 5d3a EB53     		jmp	.L388
 6898              	.L389:
1015:prog.c        **** 		} else if ( ch == '?' ) {
 6899              		.loc 2 1015 0
 6900 5d3c 807DDD3F 		cmpb	$63, -35(%rbp)
 6901 5d40 7509     		jne	.L390
1016:prog.c        **** 			pinConfig = PIN_INPUT;
 6902              		.loc 2 1016 0
 6903 5d42 C745E803 		movl	$3, -24(%rbp)
 6903      000000
 6904 5d49 EB44     		jmp	.L388
 6905              	.L390:
1017:prog.c        **** 		} else {
1018:prog.c        **** 			CHECK_STATUS(
 6906              		.loc 2 1018 0 discriminator 1
 6907 5d4b 488B45F0 		movq	-16(%rbp), %rax
 6908 5d4f 4889C2   		movq	%rax, %rdx
 6909 5d52 488B45C0 		movq	-64(%rbp), %rax
 6910 5d56 4829C2   		subq	%rax, %rdx
 6911 5d59 4889D0   		movq	%rdx, %rax
 6912 5d5c 4889C7   		movq	%rax, %rdi
 6913 5d5f E852A4FF 		call	spaces
 6913      FF
 6914 5d64 4889C1   		movq	%rax, %rcx
 6915 5d67 488B55C0 		movq	-64(%rbp), %rdx
 6916 5d6b 488B45B0 		movq	-80(%rbp), %rax
 6917 5d6f 488D3500 		leaq	.LC63(%rip), %rsi
 6917      000000
 6918 5d76 4889C7   		movq	%rax, %rdi
 6919 5d79 B8000000 		movl	$0, %eax
 6919      00
 6920 5d7e E8000000 		call	errRender@PLT
 6920      00
 6921 5d83 C745E00B 		movl	$11, -32(%rbp)
 6921      000000
 6922 5d8a E9D10000 		jmp	.L380
 6922      00
 6923              	.L388:
1019:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
1020:prog.c        **** 				"flMultiBitPortAccess(): Expecting '+', '-' or '?':\n  %s\n  %s^", portConfig, spaces(ptr-portC
1021:prog.c        **** 		}
1022:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, thisPort, thisBit, pinConfig, &bitState, error);
 6924              		.loc 2 1022 0
 6925 5d8f 8B45E8   		movl	-24(%rbp), %eax
 6926 5d92 0FB6C8   		movzbl	%al, %ecx
 6927 5d95 0FB655DF 		movzbl	-33(%rbp), %edx
 6928 5d99 0FB675DE 		movzbl	-34(%rbp), %esi
 6929 5d9d 4C8B45B0 		movq	-80(%rbp), %r8
 6930 5da1 488D7DDC 		leaq	-36(%rbp), %rdi
 6931 5da5 488B45C8 		movq	-56(%rbp), %rax
 6932 5da9 4D89C1   		movq	%r8, %r9
 6933 5dac 4989F8   		movq	%rdi, %r8
 6934 5daf 4889C7   		movq	%rax, %rdi
 6935 5db2 E8000000 		call	flSingleBitPortAccess@PLT
 6935      00
 6936 5db7 8945EC   		movl	%eax, -20(%rbp)
1023:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup);
 6937              		.loc 2 1023 0
 6938 5dba 837DEC00 		cmpl	$0, -20(%rbp)
 6939 5dbe 740B     		je	.L391
 6940              		.loc 2 1023 0 is_stmt 0 discriminator 1
 6941 5dc0 8B45EC   		movl	-20(%rbp), %eax
 6942 5dc3 8945E0   		movl	%eax, -32(%rbp)
 6943 5dc6 E9950000 		jmp	.L380
 6943      00
 6944              	.L391:
1024:prog.c        **** 		result <<= 1;
 6945              		.loc 2 1024 0 is_stmt 1
 6946 5dcb D165E4   		sall	-28(%rbp)
1025:prog.c        **** 		if ( bitState ) {
 6947              		.loc 2 1025 0
 6948 5dce 0FB645DC 		movzbl	-36(%rbp), %eax
 6949 5dd2 84C0     		testb	%al, %al
 6950 5dd4 7404     		je	.L392
1026:prog.c        **** 			result |= 1;
 6951              		.loc 2 1026 0
 6952 5dd6 834DE401 		orl	$1, -28(%rbp)
 6953              	.L392:
1027:prog.c        **** 		}
1028:prog.c        **** 		ptr++;
 6954              		.loc 2 1028 0
 6955 5dda 488B45F0 		movq	-16(%rbp), %rax
 6956 5dde 4883C001 		addq	$1, %rax
 6957 5de2 488945F0 		movq	%rax, -16(%rbp)
1029:prog.c        **** 		ch = *ptr++;
 6958              		.loc 2 1029 0
 6959 5de6 488B45F0 		movq	-16(%rbp), %rax
 6960 5dea 488D5001 		leaq	1(%rax), %rdx
 6961 5dee 488955F0 		movq	%rdx, -16(%rbp)
 6962 5df2 0FB600   		movzbl	(%rax), %eax
 6963 5df5 8845DD   		movb	%al, -35(%rbp)
1030:prog.c        **** 	} while ( ch == ',' );
 6964              		.loc 2 1030 0
 6965 5df8 807DDD2C 		cmpb	$44, -35(%rbp)
 6966 5dfc 0F844FFD 		je	.L393
 6966      FFFF
1031:prog.c        **** 	CHECK_STATUS(
 6967              		.loc 2 1031 0
 6968 5e02 807DDD00 		cmpb	$0, -35(%rbp)
 6969 5e06 7445     		je	.L394
 6970              		.loc 2 1031 0 is_stmt 0 discriminator 1
 6971 5e08 488B45F0 		movq	-16(%rbp), %rax
 6972 5e0c 4889C2   		movq	%rax, %rdx
 6973 5e0f 488B45C0 		movq	-64(%rbp), %rax
 6974 5e13 4829C2   		subq	%rax, %rdx
 6975 5e16 4889D0   		movq	%rdx, %rax
 6976 5e19 4883E801 		subq	$1, %rax
 6977 5e1d 4889C7   		movq	%rax, %rdi
 6978 5e20 E891A3FF 		call	spaces
 6978      FF
 6979 5e25 4889C1   		movq	%rax, %rcx
 6980 5e28 488B55C0 		movq	-64(%rbp), %rdx
 6981 5e2c 488B45B0 		movq	-80(%rbp), %rax
 6982 5e30 488D3500 		leaq	.LC64(%rip), %rsi
 6982      000000
 6983 5e37 4889C7   		movq	%rax, %rdi
 6984 5e3a B8000000 		movl	$0, %eax
 6984      00
 6985 5e3f E8000000 		call	errRender@PLT
 6985      00
 6986 5e44 C745E00B 		movl	$11, -32(%rbp)
 6986      000000
 6987 5e4b EB13     		jmp	.L380
 6988              	.L394:
1032:prog.c        **** 		ch != '\0', FL_CONF_FORMAT, cleanup,
1033:prog.c        **** 		"flMultiBitPortAccess(): Expecting ',' or '\\0' here:\n  %s\n  %s^", portConfig, spaces(ptr-portC
1034:prog.c        **** 	if ( readState ) {
 6989              		.loc 2 1034 0 is_stmt 1
 6990 5e4d 48837DB8 		cmpq	$0, -72(%rbp)
 6990      00
 6991 5e52 740B     		je	.L397
1035:prog.c        **** 		*readState = result;
 6992              		.loc 2 1035 0
 6993 5e54 488B45B8 		movq	-72(%rbp), %rax
 6994 5e58 8B55E4   		movl	-28(%rbp), %edx
 6995 5e5b 8910     		movl	%edx, (%rax)
 6996 5e5d EB01     		jmp	.L380
 6997              	.L397:
1036:prog.c        **** 	}
1037:prog.c        **** cleanup:
 6998              		.loc 2 1037 0
 6999 5e5f 90       		nop
 7000              	.L380:
1038:prog.c        **** 	return retVal;
 7001              		.loc 2 1038 0
 7002 5e60 8B45E0   		movl	-32(%rbp), %eax
1039:prog.c        **** }
 7003              		.loc 2 1039 0
 7004 5e63 488B75F8 		movq	-8(%rbp), %rsi
 7005 5e67 64483334 		xorq	%fs:40, %rsi
 7005      25280000 
 7005      00
 7006 5e70 7405     		je	.L396
 7007 5e72 E8000000 		call	__stack_chk_fail@PLT
 7007      00
 7008              	.L396:
 7009 5e77 C9       		leave
 7010              		.cfi_def_cfa 7, 8
 7011 5e78 C3       		ret
 7012              		.cfi_endproc
 7013              	.LFE27:
 7015              	.Letext0:
 7016              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 7017              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 7018              		.file 5 "/usr/include/libio.h"
 7019              		.file 6 "/usr/include/stdio.h"
 7020              		.file 7 "/home/gani/eval/20140524/makestuff/libs/libusbwrap/libusbwrap.h"
 7021              		.file 8 "libfpgalink.h"
 7022              		.file 9 "/home/gani/eval/20140524/makestuff/libs/libbuffer/libbuffer.h"
 7023              		.file 10 "firmware.h"
 7024              		.file 11 "private.h"
 7025              		.file 12 "vendorCommands.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 prog.c
     /tmp/ccdyM8fF.s:5      .text:0000000000000000 littleEndian32
     /tmp/ccdyM8fF.s:30     .text:000000000000000c beginShift
     /tmp/ccdyM8fF.s:108    .text:00000000000000c0 doSend
     /tmp/ccdyM8fF.s:169    .text:000000000000013b doReceive
     /tmp/ccdyM8fF.s:231    .text:00000000000001b6 spaces
     /tmp/ccdyM8fF.s:275    .text:00000000000001de populateMap
     /tmp/ccdyM8fF.s:635    .text:000000000000063e portMap
     /tmp/ccdyM8fF.s:701    .text:00000000000006d9 makeLookup
     /tmp/ccdyM8fF.s:896    .text:0000000000000895 dataWrite
     /tmp/ccdyM8fF.s:1114   .text:0000000000000a65 xProgram
     /tmp/ccdyM8fF.s:6614   .text:0000000000005a2a flSingleBitPortAccess
     /tmp/ccdyM8fF.s:2892   .text:00000000000027cd aProgram
     /tmp/ccdyM8fF.s:4094   .text:0000000000003b96 progOpenInternal
     /tmp/ccdyM8fF.s:5004   .text:0000000000004aa7 jProgram
     /tmp/ccdyM8fF.s:5230   .text:0000000000004cb7 progClose
     /tmp/ccdyM8fF.s:5141   .text:0000000000004c23 swap
     /tmp/ccdyM8fF.s:5197   .text:0000000000004c89 progOpen
     /tmp/ccdyM8fF.s:5370   .text:0000000000004e3a jtagShiftInOut
     /tmp/ccdyM8fF.s:5602   .text:000000000000506d jtagShiftInOnly
     /tmp/ccdyM8fF.s:5772   .text:00000000000051e1 jtagClockFSM
     /tmp/ccdyM8fF.s:5847   .text:0000000000005291 jtagClocks
     /tmp/ccdyM8fF.s:5911   .text:0000000000005311 jtagScanChain
     /tmp/ccdyM8fF.s:6118   .text:00000000000054fd flProgramBlob
     /tmp/ccdyM8fF.s:6311   .text:00000000000056dc flProgram
     /tmp/ccdyM8fF.s:6604   .rodata:0000000000000a30 indexValues
     /tmp/ccdyM8fF.s:6723   .text:0000000000005b14 flMultiBitPortAccess

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
usbControlWrite
errPrefix
__stack_chk_fail
usbBulkWrite
usbBulkRead
errRender
strtoul
flSelectConduit
csvfPlay
bufInitialise
strlen
strcmp
flLoadSvfAndConvertToCsvf
flLoadXsvfAndConvertToCsvf
bufAppendFromBinaryFile
bufDestroy
usbControlRead
