   1              		.file	"svf2csvf.c"
   2              		.text
   3              	.Ltext0:
   5              	getHexNibble:
   6              	.LFB4:
   7              		.file 1 "svf2csvf.c"
   1:svf2csvf.c    **** /*
   2:svf2csvf.c    ****  * Copyright (C) 2009-2012 Chris McClelland
   3:svf2csvf.c    ****  *
   4:svf2csvf.c    ****  * This program is free software: you can redistribute it and/or modify
   5:svf2csvf.c    ****  * it under the terms of the GNU Lesser General Public License as published by
   6:svf2csvf.c    ****  * the Free Software Foundation, either version 3 of the License, or
   7:svf2csvf.c    ****  * (at your option) any later version.
   8:svf2csvf.c    ****  *
   9:svf2csvf.c    ****  * This program is distributed in the hope that it will be useful,
  10:svf2csvf.c    ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:svf2csvf.c    ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:svf2csvf.c    ****  * GNU Lesser General Public License for more details.
  13:svf2csvf.c    ****  *
  14:svf2csvf.c    ****  * You should have received a copy of the GNU Lesser General Public License
  15:svf2csvf.c    ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:svf2csvf.c    ****  */
  17:svf2csvf.c    **** #include <stdlib.h>
  18:svf2csvf.c    **** #include <string.h>
  19:svf2csvf.c    **** #include <makestuff.h>
  20:svf2csvf.c    **** #include <libbuffer.h>
  21:svf2csvf.c    **** #include <liberror.h>
  22:svf2csvf.c    **** #include "svf2csvf.h"
  23:svf2csvf.c    **** #include "xsvf.h"
  24:svf2csvf.c    **** #include "private.h"
  25:svf2csvf.c    **** 
  26:svf2csvf.c    **** static FLStatus shiftLeft(
  27:svf2csvf.c    **** 	struct Buffer *buffer, uint32 numBits, uint32 shiftCount, const char **error
  28:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  29:svf2csvf.c    **** 
  30:svf2csvf.c    **** static FLStatus initBitStore(
  31:svf2csvf.c    **** 	struct BitStore *store, const char **error
  32:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  33:svf2csvf.c    **** 
  34:svf2csvf.c    **** static FLStatus processLine(
  35:svf2csvf.c    **** 	struct BitStore *store,
  36:svf2csvf.c    **** 	uint32 newLength, const char *tdi, const char *tdo, const char *mask,
  37:svf2csvf.c    **** 	const char **error
  38:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  39:svf2csvf.c    **** 
  40:svf2csvf.c    **** static FLStatus appendSwapped(
  41:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *src, uint32 count, const char **error
  42:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  43:svf2csvf.c    **** 
  44:svf2csvf.c    **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
   8              		.loc 1 44 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 89F8     		movl	%edi, %eax
  16 0006 488975F0 		movq	%rsi, -16(%rbp)
  17 000a 8845FC   		movb	%al, -4(%rbp)
  45:svf2csvf.c    **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
  18              		.loc 1 45 0
  19 000d 807DFC2F 		cmpb	$47, -4(%rbp)
  20 0011 7E1A     		jle	.L2
  21              		.loc 1 45 0 is_stmt 0 discriminator 1
  22 0013 807DFC39 		cmpb	$57, -4(%rbp)
  23 0017 7F14     		jg	.L2
  46:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - '0');
  24              		.loc 1 46 0 is_stmt 1
  25 0019 0FB645FC 		movzbl	-4(%rbp), %eax
  26 001d 8D50D0   		leal	-48(%rax), %edx
  27 0020 488B45F0 		movq	-16(%rbp), %rax
  28 0024 8810     		movb	%dl, (%rax)
  47:svf2csvf.c    **** 		return false;
  29              		.loc 1 47 0
  30 0026 B8000000 		movl	$0, %eax
  30      00
  31 002b EB45     		jmp	.L3
  32              	.L2:
  48:svf2csvf.c    **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
  33              		.loc 1 48 0
  34 002d 807DFC60 		cmpb	$96, -4(%rbp)
  35 0031 7E1A     		jle	.L4
  36              		.loc 1 48 0 is_stmt 0 discriminator 1
  37 0033 807DFC66 		cmpb	$102, -4(%rbp)
  38 0037 7F14     		jg	.L4
  49:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
  39              		.loc 1 49 0 is_stmt 1
  40 0039 0FB645FC 		movzbl	-4(%rbp), %eax
  41 003d 8D50A9   		leal	-87(%rax), %edx
  42 0040 488B45F0 		movq	-16(%rbp), %rax
  43 0044 8810     		movb	%dl, (%rax)
  50:svf2csvf.c    **** 		return false;
  44              		.loc 1 50 0
  45 0046 B8000000 		movl	$0, %eax
  45      00
  46 004b EB25     		jmp	.L3
  47              	.L4:
  51:svf2csvf.c    **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
  48              		.loc 1 51 0
  49 004d 807DFC40 		cmpb	$64, -4(%rbp)
  50 0051 7E1A     		jle	.L5
  51              		.loc 1 51 0 is_stmt 0 discriminator 1
  52 0053 807DFC46 		cmpb	$70, -4(%rbp)
  53 0057 7F14     		jg	.L5
  52:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
  54              		.loc 1 52 0 is_stmt 1
  55 0059 0FB645FC 		movzbl	-4(%rbp), %eax
  56 005d 8D50C9   		leal	-55(%rax), %edx
  57 0060 488B45F0 		movq	-16(%rbp), %rax
  58 0064 8810     		movb	%dl, (%rax)
  53:svf2csvf.c    **** 		return false;
  59              		.loc 1 53 0
  60 0066 B8000000 		movl	$0, %eax
  60      00
  61 006b EB05     		jmp	.L3
  62              	.L5:
  54:svf2csvf.c    **** 	} else {
  55:svf2csvf.c    **** 		return true;
  63              		.loc 1 55 0
  64 006d B8010000 		movl	$1, %eax
  64      00
  65              	.L3:
  56:svf2csvf.c    **** 	}
  57:svf2csvf.c    **** }
  66              		.loc 1 57 0
  67 0072 5D       		popq	%rbp
  68              		.cfi_def_cfa 7, 8
  69 0073 C3       		ret
  70              		.cfi_endproc
  71              	.LFE4:
  74              	getHexByte:
  75              	.LFB5:
  58:svf2csvf.c    **** 
  59:svf2csvf.c    **** static int getHexByte(const char *p, uint8 *byte) {
  76              		.loc 1 59 0
  77              		.cfi_startproc
  78 0074 55       		pushq	%rbp
  79              		.cfi_def_cfa_offset 16
  80              		.cfi_offset 6, -16
  81 0075 4889E5   		movq	%rsp, %rbp
  82              		.cfi_def_cfa_register 6
  83 0078 4883EC20 		subq	$32, %rsp
  84 007c 48897DE8 		movq	%rdi, -24(%rbp)
  85 0080 488975E0 		movq	%rsi, -32(%rbp)
  86              		.loc 1 59 0
  87 0084 64488B04 		movq	%fs:40, %rax
  87      25280000 
  87      00
  88 008d 488945F8 		movq	%rax, -8(%rbp)
  89 0091 31C0     		xorl	%eax, %eax
  60:svf2csvf.c    **** 	uint8 upperNibble;
  61:svf2csvf.c    **** 	uint8 lowerNibble;
  62:svf2csvf.c    **** 	if ( !getHexNibble(p[0], &upperNibble) && !getHexNibble(p[1], &lowerNibble) ) {
  90              		.loc 1 62 0
  91 0093 488B45E8 		movq	-24(%rbp), %rax
  92 0097 0FB600   		movzbl	(%rax), %eax
  93 009a 0FBEC0   		movsbl	%al, %eax
  94 009d 488D55F6 		leaq	-10(%rbp), %rdx
  95 00a1 4889D6   		movq	%rdx, %rsi
  96 00a4 89C7     		movl	%eax, %edi
  97 00a6 E855FFFF 		call	getHexNibble
  97      FF
  98 00ab 83F001   		xorl	$1, %eax
  99 00ae 84C0     		testb	%al, %al
 100 00b0 7449     		je	.L7
 101              		.loc 1 62 0 is_stmt 0 discriminator 1
 102 00b2 488B45E8 		movq	-24(%rbp), %rax
 103 00b6 4883C001 		addq	$1, %rax
 104 00ba 0FB600   		movzbl	(%rax), %eax
 105 00bd 0FBEC0   		movsbl	%al, %eax
 106 00c0 488D55F7 		leaq	-9(%rbp), %rdx
 107 00c4 4889D6   		movq	%rdx, %rsi
 108 00c7 89C7     		movl	%eax, %edi
 109 00c9 E832FFFF 		call	getHexNibble
 109      FF
 110 00ce 83F001   		xorl	$1, %eax
 111 00d1 84C0     		testb	%al, %al
 112 00d3 7426     		je	.L7
  63:svf2csvf.c    **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 113              		.loc 1 63 0 is_stmt 1
 114 00d5 0FB645F6 		movzbl	-10(%rbp), %eax
 115 00d9 0FB6C0   		movzbl	%al, %eax
 116 00dc C1E004   		sall	$4, %eax
 117 00df 89C2     		movl	%eax, %edx
 118 00e1 0FB645F7 		movzbl	-9(%rbp), %eax
 119 00e5 09D0     		orl	%edx, %eax
 120 00e7 89C2     		movl	%eax, %edx
 121 00e9 488B45E0 		movq	-32(%rbp), %rax
 122 00ed 8810     		movb	%dl, (%rax)
  64:svf2csvf.c    **** 		byte += 2;
 123              		.loc 1 64 0
 124 00ef 488345E0 		addq	$2, -32(%rbp)
 124      02
  65:svf2csvf.c    **** 		return 0;
 125              		.loc 1 65 0
 126 00f4 B8000000 		movl	$0, %eax
 126      00
 127 00f9 EB05     		jmp	.L9
 128              	.L7:
  66:svf2csvf.c    **** 	} else {
  67:svf2csvf.c    **** 		return 1;
 129              		.loc 1 67 0
 130 00fb B8010000 		movl	$1, %eax
 130      00
 131              	.L9:
  68:svf2csvf.c    **** 	}
  69:svf2csvf.c    **** }
 132              		.loc 1 69 0 discriminator 1
 133 0100 488B4DF8 		movq	-8(%rbp), %rcx
 134 0104 6448330C 		xorq	%fs:40, %rcx
 134      25280000 
 134      00
 135 010d 7405     		je	.L10
 136              		.loc 1 69 0 is_stmt 0
 137 010f E8000000 		call	__stack_chk_fail@PLT
 137      00
 138              	.L10:
 139 0114 C9       		leave
 140              		.cfi_def_cfa 7, 8
 141 0115 C3       		ret
 142              		.cfi_endproc
 143              	.LFE5:
 145              		.globl	readLongBE
 147              	readLongBE:
 148              	.LFB6:
  70:svf2csvf.c    **** 
  71:svf2csvf.c    **** uint32 readLongBE(const uint8 *p) {
 149              		.loc 1 71 0 is_stmt 1
 150              		.cfi_startproc
 151 0116 55       		pushq	%rbp
 152              		.cfi_def_cfa_offset 16
 153              		.cfi_offset 6, -16
 154 0117 4889E5   		movq	%rsp, %rbp
 155              		.cfi_def_cfa_register 6
 156 011a 48897DE8 		movq	%rdi, -24(%rbp)
  72:svf2csvf.c    **** 	uint32 result;
  73:svf2csvf.c    **** 	result = p[0];
 157              		.loc 1 73 0
 158 011e 488B45E8 		movq	-24(%rbp), %rax
 159 0122 0FB600   		movzbl	(%rax), %eax
 160 0125 0FB6C0   		movzbl	%al, %eax
 161 0128 8945FC   		movl	%eax, -4(%rbp)
  74:svf2csvf.c    **** 	result <<= 8;
 162              		.loc 1 74 0
 163 012b C165FC08 		sall	$8, -4(%rbp)
  75:svf2csvf.c    **** 	result |= p[1];
 164              		.loc 1 75 0
 165 012f 488B45E8 		movq	-24(%rbp), %rax
 166 0133 4883C001 		addq	$1, %rax
 167 0137 0FB600   		movzbl	(%rax), %eax
 168 013a 0FB6C0   		movzbl	%al, %eax
 169 013d 0945FC   		orl	%eax, -4(%rbp)
  76:svf2csvf.c    **** 	result <<= 8;
 170              		.loc 1 76 0
 171 0140 C165FC08 		sall	$8, -4(%rbp)
  77:svf2csvf.c    **** 	result |= p[2];
 172              		.loc 1 77 0
 173 0144 488B45E8 		movq	-24(%rbp), %rax
 174 0148 4883C002 		addq	$2, %rax
 175 014c 0FB600   		movzbl	(%rax), %eax
 176 014f 0FB6C0   		movzbl	%al, %eax
 177 0152 0945FC   		orl	%eax, -4(%rbp)
  78:svf2csvf.c    **** 	result <<= 8;
 178              		.loc 1 78 0
 179 0155 C165FC08 		sall	$8, -4(%rbp)
  79:svf2csvf.c    **** 	result |= p[3];
 180              		.loc 1 79 0
 181 0159 488B45E8 		movq	-24(%rbp), %rax
 182 015d 4883C003 		addq	$3, %rax
 183 0161 0FB600   		movzbl	(%rax), %eax
 184 0164 0FB6C0   		movzbl	%al, %eax
 185 0167 0945FC   		orl	%eax, -4(%rbp)
  80:svf2csvf.c    **** 	return result;
 186              		.loc 1 80 0
 187 016a 8B45FC   		movl	-4(%rbp), %eax
  81:svf2csvf.c    **** }
 188              		.loc 1 81 0
 189 016d 5D       		popq	%rbp
 190              		.cfi_def_cfa 7, 8
 191 016e C3       		ret
 192              		.cfi_endproc
 193              	.LFE6:
 195              		.section	.rodata
 196              		.align 8
 197              	.LC0:
 198 0000 72656164 		.string	"readBytes(): I need an even number of hex digits"
 198      42797465 
 198      7328293A 
 198      2049206E 
 198      65656420 
 199              	.LC1:
 200 0031 72656164 		.string	"readBytes()"
 200      42797465 
 200      73282900 
 201              		.text
 202              		.globl	readBytes
 204              	readBytes:
 205              	.LFB7:
  82:svf2csvf.c    **** 
  83:svf2csvf.c    **** FLStatus readBytes(
  84:svf2csvf.c    **** 	struct Buffer *buffer, const char *hexDigits, const char **error)
  85:svf2csvf.c    **** {
 206              		.loc 1 85 0
 207              		.cfi_startproc
 208 016f 55       		pushq	%rbp
 209              		.cfi_def_cfa_offset 16
 210              		.cfi_offset 6, -16
 211 0170 4889E5   		movq	%rsp, %rbp
 212              		.cfi_def_cfa_register 6
 213 0173 4883EC40 		subq	$64, %rsp
 214 0177 48897DD8 		movq	%rdi, -40(%rbp)
 215 017b 488975D0 		movq	%rsi, -48(%rbp)
 216 017f 488955C8 		movq	%rdx, -56(%rbp)
  86:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 217              		.loc 1 86 0
 218 0183 C745EC00 		movl	$0, -20(%rbp)
 218      000000
  87:svf2csvf.c    **** 	uint32 length = (uint32)strlen(hexDigits);
 219              		.loc 1 87 0
 220 018a 488B45D0 		movq	-48(%rbp), %rax
 221 018e 4889C7   		movq	%rax, %rdi
 222 0191 E8000000 		call	strlen@PLT
 222      00
 223 0196 8945F0   		movl	%eax, -16(%rbp)
  88:svf2csvf.c    **** 	uint8 *p = buffer->data;
 224              		.loc 1 88 0
 225 0199 488B45D8 		movq	-40(%rbp), %rax
 226 019d 488B00   		movq	(%rax), %rax
 227 01a0 488945F8 		movq	%rax, -8(%rbp)
  89:svf2csvf.c    **** 	BufferStatus bStatus;
  90:svf2csvf.c    **** 	CHECK_STATUS(
 228              		.loc 1 90 0
 229 01a4 8B45F0   		movl	-16(%rbp), %eax
 230 01a7 83E001   		andl	$1, %eax
 231 01aa 85C0     		testl	%eax, %eax
 232 01ac 741F     		je	.L14
 233              		.loc 1 90 0 is_stmt 0 discriminator 1
 234 01ae 488B45C8 		movq	-56(%rbp), %rax
 235 01b2 488D3500 		leaq	.LC0(%rip), %rsi
 235      000000
 236 01b9 4889C7   		movq	%rax, %rdi
 237 01bc E8000000 		call	errPrefix@PLT
 237      00
 238 01c1 C745EC0A 		movl	$10, -20(%rbp)
 238      000000
 239 01c8 E99A0000 		jmp	.L15
 239      00
 240              	.L14:
  91:svf2csvf.c    **** 		length & 1, FL_SVF_PARSE_ERR, cleanup,
  92:svf2csvf.c    **** 		"readBytes(): I need an even number of hex digits");
  93:svf2csvf.c    **** 	bufZeroLength(buffer);
 241              		.loc 1 93 0 is_stmt 1
 242 01cd 488B45D8 		movq	-40(%rbp), %rax
 243 01d1 4889C7   		movq	%rax, %rdi
 244 01d4 E8000000 		call	bufZeroLength@PLT
 244      00
  94:svf2csvf.c    **** 	length >>= 1;  // Number of bytes
 245              		.loc 1 94 0
 246 01d9 D16DF0   		shrl	-16(%rbp)
  95:svf2csvf.c    **** 	bStatus = bufAppendConst(buffer, 0x00, length, error);
 247              		.loc 1 95 0
 248 01dc 8B55F0   		movl	-16(%rbp), %edx
 249 01df 488B4DC8 		movq	-56(%rbp), %rcx
 250 01e3 488B45D8 		movq	-40(%rbp), %rax
 251 01e7 BE000000 		movl	$0, %esi
 251      00
 252 01ec 4889C7   		movq	%rax, %rdi
 253 01ef E8000000 		call	bufAppendConst@PLT
 253      00
 254 01f4 8945F4   		movl	%eax, -12(%rbp)
  96:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "readBytes()");
 255              		.loc 1 96 0
 256 01f7 837DF400 		cmpl	$0, -12(%rbp)
 257 01fb 745C     		je	.L17
 258              		.loc 1 96 0 is_stmt 0 discriminator 1
 259 01fd 488B45C8 		movq	-56(%rbp), %rax
 260 0201 488D3500 		leaq	.LC1(%rip), %rsi
 260      000000
 261 0208 4889C7   		movq	%rax, %rdi
 262 020b E8000000 		call	errPrefix@PLT
 262      00
 263 0210 C745EC01 		movl	$1, -20(%rbp)
 263      000000
 264 0217 EB4E     		jmp	.L15
 265              	.L19:
  97:svf2csvf.c    **** 	while ( length-- ) {
  98:svf2csvf.c    **** 		CHECK_STATUS(getHexByte(hexDigits, p++), FL_SVF_PARSE_ERR, cleanup, "readBytes()");
 266              		.loc 1 98 0 is_stmt 1
 267 0219 488B45F8 		movq	-8(%rbp), %rax
 268 021d 488D5001 		leaq	1(%rax), %rdx
 269 0221 488955F8 		movq	%rdx, -8(%rbp)
 270 0225 488B55D0 		movq	-48(%rbp), %rdx
 271 0229 4889C6   		movq	%rax, %rsi
 272 022c 4889D7   		movq	%rdx, %rdi
 273 022f E840FEFF 		call	getHexByte
 273      FF
 274 0234 85C0     		testl	%eax, %eax
 275 0236 741C     		je	.L18
 276              		.loc 1 98 0 is_stmt 0 discriminator 1
 277 0238 488B45C8 		movq	-56(%rbp), %rax
 278 023c 488D3500 		leaq	.LC1(%rip), %rsi
 278      000000
 279 0243 4889C7   		movq	%rax, %rdi
 280 0246 E8000000 		call	errPrefix@PLT
 280      00
 281 024b C745EC0A 		movl	$10, -20(%rbp)
 281      000000
 282 0252 EB13     		jmp	.L15
 283              	.L18:
  99:svf2csvf.c    **** 		hexDigits += 2;
 284              		.loc 1 99 0 is_stmt 1
 285 0254 488345D0 		addq	$2, -48(%rbp)
 285      02
 286              	.L17:
  97:svf2csvf.c    **** 	while ( length-- ) {
 287              		.loc 1 97 0
 288 0259 8B45F0   		movl	-16(%rbp), %eax
 289 025c 8D50FF   		leal	-1(%rax), %edx
 290 025f 8955F0   		movl	%edx, -16(%rbp)
 291 0262 85C0     		testl	%eax, %eax
 292 0264 75B3     		jne	.L19
 100:svf2csvf.c    **** 	}
 101:svf2csvf.c    **** cleanup:
 293              		.loc 1 101 0
 294 0266 90       		nop
 295              	.L15:
 102:svf2csvf.c    **** 	return retVal;
 296              		.loc 1 102 0
 297 0267 8B45EC   		movl	-20(%rbp), %eax
 103:svf2csvf.c    **** }
 298              		.loc 1 103 0
 299 026a C9       		leave
 300              		.cfi_def_cfa 7, 8
 301 026b C3       		ret
 302              		.cfi_endproc
 303              	.LFE7:
 305              		.section	.rodata
 306              	.LC2:
 307 003d 73686966 		.string	"shiftLeft()"
 307      744C6566 
 307      74282900 
 308              		.text
 310              	shiftLeft:
 311              	.LFB8:
 104:svf2csvf.c    **** 
 105:svf2csvf.c    **** static FLStatus shiftLeft(
 106:svf2csvf.c    **** 	struct Buffer *buffer, uint32 numBits, uint32 shiftCount, const char **error)
 107:svf2csvf.c    **** {
 312              		.loc 1 107 0
 313              		.cfi_startproc
 314 026c 55       		pushq	%rbp
 315              		.cfi_def_cfa_offset 16
 316              		.cfi_offset 6, -16
 317 026d 4889E5   		movq	%rsp, %rbp
 318              		.cfi_def_cfa_register 6
 319 0270 4883C480 		addq	$-128, %rsp
 320 0274 48897D98 		movq	%rdi, -104(%rbp)
 321 0278 897594   		movl	%esi, -108(%rbp)
 322 027b 895590   		movl	%edx, -112(%rbp)
 323 027e 48894D88 		movq	%rcx, -120(%rbp)
 324              		.loc 1 107 0
 325 0282 64488B04 		movq	%fs:40, %rax
 325      25280000 
 325      00
 326 028b 488945F8 		movq	%rax, -8(%rbp)
 327 028f 31C0     		xorl	%eax, %eax
 108:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 328              		.loc 1 108 0
 329 0291 C745B000 		movl	$0, -80(%rbp)
 329      000000
 109:svf2csvf.c    **** 	uint32 shiftBytes = shiftCount>>3;
 330              		.loc 1 109 0
 331 0298 8B4590   		movl	-112(%rbp), %eax
 332 029b C1E803   		shrl	$3, %eax
 333 029e 8945B4   		movl	%eax, -76(%rbp)
 110:svf2csvf.c    **** 	uint32 shiftBits = shiftCount&7;
 334              		.loc 1 110 0
 335 02a1 8B4590   		movl	-112(%rbp), %eax
 336 02a4 83E007   		andl	$7, %eax
 337 02a7 8945B8   		movl	%eax, -72(%rbp)
 111:svf2csvf.c    **** 	uint16 accum;
 112:svf2csvf.c    **** 	const uint8 *p = buffer->data;
 338              		.loc 1 112 0
 339 02aa 488B4598 		movq	-104(%rbp), %rax
 340 02ae 488B00   		movq	(%rax), %rax
 341 02b1 488945C0 		movq	%rax, -64(%rbp)
 113:svf2csvf.c    **** 	const uint8 *const end = buffer->data + buffer->length;
 342              		.loc 1 113 0
 343 02b5 488B4598 		movq	-104(%rbp), %rax
 344 02b9 488B10   		movq	(%rax), %rdx
 345 02bc 488B4598 		movq	-104(%rbp), %rax
 346 02c0 488B4008 		movq	8(%rax), %rax
 347 02c4 4801D0   		addq	%rdx, %rax
 348 02c7 488945C8 		movq	%rax, -56(%rbp)
 114:svf2csvf.c    **** 	struct Buffer newBuffer = {0,};
 349              		.loc 1 114 0
 350 02cb 48C745D0 		movq	$0, -48(%rbp)
 350      00000000 
 351 02d3 48C745D8 		movq	$0, -40(%rbp)
 351      00000000 
 352 02db 48C745E0 		movq	$0, -32(%rbp)
 352      00000000 
 353 02e3 48C745E8 		movq	$0, -24(%rbp)
 353      00000000 
 115:svf2csvf.c    **** 	BufferStatus bStatus;
 116:svf2csvf.c    **** 	if ( shiftBits ) {
 354              		.loc 1 116 0
 355 02eb 837DB800 		cmpl	$0, -72(%rbp)
 356 02ef 0F84F901 		je	.L22
 356      0000
 117:svf2csvf.c    **** 		bStatus = bufInitialise(&newBuffer, 1024, 0x00, error);
 357              		.loc 1 117 0
 358 02f5 488B5588 		movq	-120(%rbp), %rdx
 359 02f9 488D45D0 		leaq	-48(%rbp), %rax
 360 02fd 4889D1   		movq	%rdx, %rcx
 361 0300 BA000000 		movl	$0, %edx
 361      00
 362 0305 BE000400 		movl	$1024, %esi
 362      00
 363 030a 4889C7   		movq	%rax, %rdi
 364 030d E8000000 		call	bufInitialise@PLT
 364      00
 365 0312 8945BC   		movl	%eax, -68(%rbp)
 118:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 366              		.loc 1 118 0
 367 0315 837DBC00 		cmpl	$0, -68(%rbp)
 368 0319 741F     		je	.L23
 369              		.loc 1 118 0 is_stmt 0 discriminator 1
 370 031b 488B4588 		movq	-120(%rbp), %rax
 371 031f 488D3500 		leaq	.LC2(%rip), %rsi
 371      000000
 372 0326 4889C7   		movq	%rax, %rdi
 373 0329 E8000000 		call	errPrefix@PLT
 373      00
 374 032e C745B001 		movl	$1, -80(%rbp)
 374      000000
 375 0335 E9F80100 		jmp	.L24
 375      00
 376              	.L23:
 119:svf2csvf.c    **** 		numBits &= 7;  // Now the number of significant bits in first byte.
 377              		.loc 1 119 0 is_stmt 1
 378 033a 83659407 		andl	$7, -108(%rbp)
 120:svf2csvf.c    **** 		if ( numBits ) {
 379              		.loc 1 120 0
 380 033e 837D9400 		cmpl	$0, -108(%rbp)
 381 0342 740B     		je	.L25
 121:svf2csvf.c    **** 			numBits = 8 - numBits; // Now the number of insignificant bits in first byte.
 382              		.loc 1 121 0
 383 0344 B8080000 		movl	$8, %eax
 383      00
 384 0349 2B4594   		subl	-108(%rbp), %eax
 385 034c 894594   		movl	%eax, -108(%rbp)
 386              	.L25:
 122:svf2csvf.c    **** 		}
 123:svf2csvf.c    **** 		accum = p[0];
 387              		.loc 1 123 0
 388 034f 488B45C0 		movq	-64(%rbp), %rax
 389 0353 0FB600   		movzbl	(%rax), %eax
 390 0356 0FB6C0   		movzbl	%al, %eax
 391 0359 668945AE 		movw	%ax, -82(%rbp)
 124:svf2csvf.c    **** 		if ( p < end ) {
 392              		.loc 1 124 0
 393 035d 488B45C0 		movq	-64(%rbp), %rax
 394 0361 483B45C8 		cmpq	-56(%rbp), %rax
 395 0365 0F831601 		jnb	.L26
 395      0000
 125:svf2csvf.c    **** 			accum = (uint16)(accum >> (8-shiftBits));
 396              		.loc 1 125 0
 397 036b 0FB755AE 		movzwl	-82(%rbp), %edx
 398 036f B8080000 		movl	$8, %eax
 398      00
 399 0374 2B45B8   		subl	-72(%rbp), %eax
 400 0377 89C1     		movl	%eax, %ecx
 401 0379 D3FA     		sarl	%cl, %edx
 402 037b 89D0     		movl	%edx, %eax
 403 037d 668945AE 		movw	%ax, -82(%rbp)
 126:svf2csvf.c    **** 			if ( shiftBits > numBits ) {
 404              		.loc 1 126 0
 405 0381 8B45B8   		movl	-72(%rbp), %eax
 406 0384 3B4594   		cmpl	-108(%rbp), %eax
 407 0387 7641     		jbe	.L27
 127:svf2csvf.c    **** 				// We're shifting by more than the number of insignificant bits
 128:svf2csvf.c    **** 				bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 408              		.loc 1 128 0
 409 0389 0FB745AE 		movzwl	-82(%rbp), %eax
 410 038d 0FB6C8   		movzbl	%al, %ecx
 411 0390 488B5588 		movq	-120(%rbp), %rdx
 412 0394 488D45D0 		leaq	-48(%rbp), %rax
 413 0398 89CE     		movl	%ecx, %esi
 414 039a 4889C7   		movq	%rax, %rdi
 415 039d E8000000 		call	bufAppendByte@PLT
 415      00
 416 03a2 8945BC   		movl	%eax, -68(%rbp)
 129:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 417              		.loc 1 129 0
 418 03a5 837DBC00 		cmpl	$0, -68(%rbp)
 419 03a9 741F     		je	.L27
 420              		.loc 1 129 0 is_stmt 0 discriminator 1
 421 03ab 488B4588 		movq	-120(%rbp), %rax
 422 03af 488D3500 		leaq	.LC2(%rip), %rsi
 422      000000
 423 03b6 4889C7   		movq	%rax, %rdi
 424 03b9 E8000000 		call	errPrefix@PLT
 424      00
 425 03be C745B001 		movl	$1, -80(%rbp)
 425      000000
 426 03c5 E9680100 		jmp	.L24
 426      00
 427              	.L27:
 130:svf2csvf.c    **** 			}
 131:svf2csvf.c    **** 			accum = (uint16)((p[0]<<8) + p[1]);
 428              		.loc 1 131 0 is_stmt 1
 429 03ca 488B45C0 		movq	-64(%rbp), %rax
 430 03ce 0FB600   		movzbl	(%rax), %eax
 431 03d1 0FB6C0   		movzbl	%al, %eax
 432 03d4 C1E008   		sall	$8, %eax
 433 03d7 89C2     		movl	%eax, %edx
 434 03d9 488B45C0 		movq	-64(%rbp), %rax
 435 03dd 4883C001 		addq	$1, %rax
 436 03e1 0FB600   		movzbl	(%rax), %eax
 437 03e4 0FB6C0   		movzbl	%al, %eax
 438 03e7 01D0     		addl	%edx, %eax
 439 03e9 668945AE 		movw	%ax, -82(%rbp)
 132:svf2csvf.c    **** 			p++;
 440              		.loc 1 132 0
 441 03ed 488345C0 		addq	$1, -64(%rbp)
 441      01
 133:svf2csvf.c    **** 			while ( p < end ) {
 442              		.loc 1 133 0
 443 03f2 EB7F     		jmp	.L28
 444              	.L30:
 134:svf2csvf.c    **** 				accum = (uint16)(accum >> (8-shiftBits));
 445              		.loc 1 134 0
 446 03f4 0FB755AE 		movzwl	-82(%rbp), %edx
 447 03f8 B8080000 		movl	$8, %eax
 447      00
 448 03fd 2B45B8   		subl	-72(%rbp), %eax
 449 0400 89C1     		movl	%eax, %ecx
 450 0402 D3FA     		sarl	%cl, %edx
 451 0404 89D0     		movl	%edx, %eax
 452 0406 668945AE 		movw	%ax, -82(%rbp)
 135:svf2csvf.c    **** 				bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 453              		.loc 1 135 0
 454 040a 0FB745AE 		movzwl	-82(%rbp), %eax
 455 040e 0FB6C8   		movzbl	%al, %ecx
 456 0411 488B5588 		movq	-120(%rbp), %rdx
 457 0415 488D45D0 		leaq	-48(%rbp), %rax
 458 0419 89CE     		movl	%ecx, %esi
 459 041b 4889C7   		movq	%rax, %rdi
 460 041e E8000000 		call	bufAppendByte@PLT
 460      00
 461 0423 8945BC   		movl	%eax, -68(%rbp)
 136:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 462              		.loc 1 136 0
 463 0426 837DBC00 		cmpl	$0, -68(%rbp)
 464 042a 741F     		je	.L29
 465              		.loc 1 136 0 is_stmt 0 discriminator 1
 466 042c 488B4588 		movq	-120(%rbp), %rax
 467 0430 488D3500 		leaq	.LC2(%rip), %rsi
 467      000000
 468 0437 4889C7   		movq	%rax, %rdi
 469 043a E8000000 		call	errPrefix@PLT
 469      00
 470 043f C745B001 		movl	$1, -80(%rbp)
 470      000000
 471 0446 E9E70000 		jmp	.L24
 471      00
 472              	.L29:
 137:svf2csvf.c    **** 				accum = (uint16)((p[0]<<8) + p[1]);
 473              		.loc 1 137 0 is_stmt 1
 474 044b 488B45C0 		movq	-64(%rbp), %rax
 475 044f 0FB600   		movzbl	(%rax), %eax
 476 0452 0FB6C0   		movzbl	%al, %eax
 477 0455 C1E008   		sall	$8, %eax
 478 0458 89C2     		movl	%eax, %edx
 479 045a 488B45C0 		movq	-64(%rbp), %rax
 480 045e 4883C001 		addq	$1, %rax
 481 0462 0FB600   		movzbl	(%rax), %eax
 482 0465 0FB6C0   		movzbl	%al, %eax
 483 0468 01D0     		addl	%edx, %eax
 484 046a 668945AE 		movw	%ax, -82(%rbp)
 138:svf2csvf.c    **** 				p++;
 485              		.loc 1 138 0
 486 046e 488345C0 		addq	$1, -64(%rbp)
 486      01
 487              	.L28:
 133:svf2csvf.c    **** 				accum = (uint16)(accum >> (8-shiftBits));
 488              		.loc 1 133 0
 489 0473 488B45C0 		movq	-64(%rbp), %rax
 490 0477 483B45C8 		cmpq	-56(%rbp), %rax
 491 047b 0F8273FF 		jb	.L30
 491      FFFF
 492              	.L26:
 139:svf2csvf.c    **** 			}
 140:svf2csvf.c    **** 		}
 141:svf2csvf.c    **** 		accum &= 0xFF00;
 493              		.loc 1 141 0
 494 0481 668165AE 		andw	$-256, -82(%rbp)
 494      00FF
 142:svf2csvf.c    **** 		accum = (uint16)(accum >> (8-shiftBits));
 495              		.loc 1 142 0
 496 0487 0FB755AE 		movzwl	-82(%rbp), %edx
 497 048b B8080000 		movl	$8, %eax
 497      00
 498 0490 2B45B8   		subl	-72(%rbp), %eax
 499 0493 89C1     		movl	%eax, %ecx
 500 0495 D3FA     		sarl	%cl, %edx
 501 0497 89D0     		movl	%edx, %eax
 502 0499 668945AE 		movw	%ax, -82(%rbp)
 143:svf2csvf.c    **** 		bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 503              		.loc 1 143 0
 504 049d 0FB745AE 		movzwl	-82(%rbp), %eax
 505 04a1 0FB6C8   		movzbl	%al, %ecx
 506 04a4 488B5588 		movq	-120(%rbp), %rdx
 507 04a8 488D45D0 		leaq	-48(%rbp), %rax
 508 04ac 89CE     		movl	%ecx, %esi
 509 04ae 4889C7   		movq	%rax, %rdi
 510 04b1 E8000000 		call	bufAppendByte@PLT
 510      00
 511 04b6 8945BC   		movl	%eax, -68(%rbp)
 144:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 512              		.loc 1 144 0
 513 04b9 837DBC00 		cmpl	$0, -68(%rbp)
 514 04bd 741C     		je	.L31
 515              		.loc 1 144 0 is_stmt 0 discriminator 1
 516 04bf 488B4588 		movq	-120(%rbp), %rax
 517 04c3 488D3500 		leaq	.LC2(%rip), %rsi
 517      000000
 518 04ca 4889C7   		movq	%rax, %rdi
 519 04cd E8000000 		call	errPrefix@PLT
 519      00
 520 04d2 C745B001 		movl	$1, -80(%rbp)
 520      000000
 521 04d9 EB57     		jmp	.L24
 522              	.L31:
 145:svf2csvf.c    **** 		bufSwap(&newBuffer, buffer);
 523              		.loc 1 145 0 is_stmt 1
 524 04db 488B5598 		movq	-104(%rbp), %rdx
 525 04df 488D45D0 		leaq	-48(%rbp), %rax
 526 04e3 4889D6   		movq	%rdx, %rsi
 527 04e6 4889C7   		movq	%rax, %rdi
 528 04e9 E8000000 		call	bufSwap@PLT
 528      00
 529              	.L22:
 146:svf2csvf.c    **** 	}
 147:svf2csvf.c    **** 	if ( shiftBytes ) {
 530              		.loc 1 147 0
 531 04ee 837DB400 		cmpl	$0, -76(%rbp)
 532 04f2 743D     		je	.L34
 148:svf2csvf.c    **** 		bStatus = bufAppendConst(buffer, 0x00, shiftBytes, error);
 533              		.loc 1 148 0
 534 04f4 8B55B4   		movl	-76(%rbp), %edx
 535 04f7 488B4D88 		movq	-120(%rbp), %rcx
 536 04fb 488B4598 		movq	-104(%rbp), %rax
 537 04ff BE000000 		movl	$0, %esi
 537      00
 538 0504 4889C7   		movq	%rax, %rdi
 539 0507 E8000000 		call	bufAppendConst@PLT
 539      00
 540 050c 8945BC   		movl	%eax, -68(%rbp)
 149:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 541              		.loc 1 149 0
 542 050f 837DBC00 		cmpl	$0, -68(%rbp)
 543 0513 741C     		je	.L34
 544              		.loc 1 149 0 is_stmt 0 discriminator 1
 545 0515 488B4588 		movq	-120(%rbp), %rax
 546 0519 488D3500 		leaq	.LC2(%rip), %rsi
 546      000000
 547 0520 4889C7   		movq	%rax, %rdi
 548 0523 E8000000 		call	errPrefix@PLT
 548      00
 549 0528 C745B001 		movl	$1, -80(%rbp)
 549      000000
 550 052f EB01     		jmp	.L24
 551              	.L34:
 150:svf2csvf.c    **** 	}
 151:svf2csvf.c    **** cleanup:
 552              		.loc 1 151 0 is_stmt 1
 553 0531 90       		nop
 554              	.L24:
 152:svf2csvf.c    **** 	bufDestroy(&newBuffer);
 555              		.loc 1 152 0
 556 0532 488D45D0 		leaq	-48(%rbp), %rax
 557 0536 4889C7   		movq	%rax, %rdi
 558 0539 E8000000 		call	bufDestroy@PLT
 558      00
 153:svf2csvf.c    **** 	return retVal;
 559              		.loc 1 153 0
 560 053e 8B45B0   		movl	-80(%rbp), %eax
 154:svf2csvf.c    **** }
 561              		.loc 1 154 0
 562 0541 488B75F8 		movq	-8(%rbp), %rsi
 563 0545 64483334 		xorq	%fs:40, %rsi
 563      25280000 
 563      00
 564 054e 7405     		je	.L33
 565 0550 E8000000 		call	__stack_chk_fail@PLT
 565      00
 566              	.L33:
 567 0555 C9       		leave
 568              		.cfi_def_cfa 7, 8
 569 0556 C3       		ret
 570              		.cfi_endproc
 571              	.LFE8:
 573              		.section	.rodata
 574              	.LC3:
 575 0049 68656164 		.string	"headTail()"
 575      5461696C 
 575      282900
 576              	.LC4:
 577 0054 68656164 		.string	"headTail(): Internal error"
 577      5461696C 
 577      28293A20 
 577      496E7465 
 577      726E616C 
 578              		.text
 579              		.globl	headTail
 581              	headTail:
 582              	.LFB9:
 155:svf2csvf.c    **** 
 156:svf2csvf.c    **** FLStatus headTail(
 157:svf2csvf.c    **** 	struct Buffer *dataBuf, struct Buffer *headBuf, struct Buffer *tailBuf,
 158:svf2csvf.c    **** 	uint32 dataBits, uint32 headBits, uint32 tailBits, const char **error)
 159:svf2csvf.c    **** {
 583              		.loc 1 159 0
 584              		.cfi_startproc
 585 0557 55       		pushq	%rbp
 586              		.cfi_def_cfa_offset 16
 587              		.cfi_offset 6, -16
 588 0558 4889E5   		movq	%rsp, %rbp
 589              		.cfi_def_cfa_register 6
 590 055b 4881EC90 		subq	$144, %rsp
 590      000000
 591 0562 48897D98 		movq	%rdi, -104(%rbp)
 592 0566 48897590 		movq	%rsi, -112(%rbp)
 593 056a 48895588 		movq	%rdx, -120(%rbp)
 594 056e 894D84   		movl	%ecx, -124(%rbp)
 595 0571 44894580 		movl	%r8d, -128(%rbp)
 596 0575 44898D7C 		movl	%r9d, -132(%rbp)
 596      FFFFFF
 597 057c 488B4510 		movq	16(%rbp), %rax
 598 0580 48898570 		movq	%rax, -144(%rbp)
 598      FFFFFF
 599              		.loc 1 159 0
 600 0587 64488B04 		movq	%fs:40, %rax
 600      25280000 
 600      00
 601 0590 488945F8 		movq	%rax, -8(%rbp)
 602 0594 31C0     		xorl	%eax, %eax
 160:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 603              		.loc 1 160 0
 604 0596 C745A400 		movl	$0, -92(%rbp)
 604      000000
 161:svf2csvf.c    **** 	const uint8 *src = headBuf->data;
 605              		.loc 1 161 0
 606 059d 488B4590 		movq	-112(%rbp), %rax
 607 05a1 488B00   		movq	(%rax), %rax
 608 05a4 488945B8 		movq	%rax, -72(%rbp)
 162:svf2csvf.c    **** 	const uint8 *dstEnd;
 163:svf2csvf.c    **** 	uint8 *dst;
 164:svf2csvf.c    **** 	struct Buffer newBuffer = {0,};
 609              		.loc 1 164 0
 610 05a8 48C745D0 		movq	$0, -48(%rbp)
 610      00000000 
 611 05b0 48C745D8 		movq	$0, -40(%rbp)
 611      00000000 
 612 05b8 48C745E0 		movq	$0, -32(%rbp)
 612      00000000 
 613 05c0 48C745E8 		movq	$0, -24(%rbp)
 613      00000000 
 165:svf2csvf.c    **** 	BufferStatus bStatus;
 166:svf2csvf.c    **** 
 167:svf2csvf.c    **** 	// Shift data left by headBits
 168:svf2csvf.c    **** 	fStatus = shiftLeft(dataBuf, dataBits, headBits, error);
 614              		.loc 1 168 0
 615 05c8 488B8D70 		movq	-144(%rbp), %rcx
 615      FFFFFF
 616 05cf 8B5580   		movl	-128(%rbp), %edx
 617 05d2 8B7584   		movl	-124(%rbp), %esi
 618 05d5 488B4598 		movq	-104(%rbp), %rax
 619 05d9 4889C7   		movq	%rax, %rdi
 620 05dc E88BFCFF 		call	shiftLeft
 620      FF
 621 05e1 8945A8   		movl	%eax, -88(%rbp)
 169:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "headTail()");
 622              		.loc 1 169 0
 623 05e4 837DA800 		cmpl	$0, -88(%rbp)
 624 05e8 7421     		je	.L36
 625              		.loc 1 169 0 is_stmt 0 discriminator 1
 626 05ea 488B8570 		movq	-144(%rbp), %rax
 626      FFFFFF
 627 05f1 488D3500 		leaq	.LC3(%rip), %rsi
 627      000000
 628 05f8 4889C7   		movq	%rax, %rdi
 629 05fb E8000000 		call	errPrefix@PLT
 629      00
 630 0600 8B45A8   		movl	-88(%rbp), %eax
 631 0603 8945A4   		movl	%eax, -92(%rbp)
 632 0606 E96C0300 		jmp	.L37
 632      00
 633              	.L36:
 170:svf2csvf.c    **** 
 171:svf2csvf.c    **** 	//dumpSimple(dataBuf->data, dataBuf->length);
 172:svf2csvf.c    **** 
 173:svf2csvf.c    **** 	// Add headBits to dataBits to get the new total
 174:svf2csvf.c    **** 	dataBits += headBits;
 634              		.loc 1 174 0 is_stmt 1
 635 060b 8B4580   		movl	-128(%rbp), %eax
 636 060e 014584   		addl	%eax, -124(%rbp)
 175:svf2csvf.c    **** 
 176:svf2csvf.c    **** 	// Add header
 177:svf2csvf.c    **** 	dstEnd = dst = dataBuf->data + dataBuf->length;
 637              		.loc 1 177 0
 638 0611 488B4598 		movq	-104(%rbp), %rax
 639 0615 488B10   		movq	(%rax), %rdx
 640 0618 488B4598 		movq	-104(%rbp), %rax
 641 061c 488B4008 		movq	8(%rax), %rax
 642 0620 4801D0   		addq	%rdx, %rax
 643 0623 488945C0 		movq	%rax, -64(%rbp)
 644 0627 488B45C0 		movq	-64(%rbp), %rax
 645 062b 488945C8 		movq	%rax, -56(%rbp)
 178:svf2csvf.c    **** 	dst -= headBuf->length;
 646              		.loc 1 178 0
 647 062f 488B4590 		movq	-112(%rbp), %rax
 648 0633 488B4008 		movq	8(%rax), %rax
 649 0637 48F7D8   		negq	%rax
 650 063a 480145C0 		addq	%rax, -64(%rbp)
 179:svf2csvf.c    **** 	while ( dst < dstEnd ) {
 651              		.loc 1 179 0
 652 063e EB22     		jmp	.L38
 653              	.L39:
 180:svf2csvf.c    **** 		*dst++ |= *src++;
 654              		.loc 1 180 0
 655 0640 488B45B8 		movq	-72(%rbp), %rax
 656 0644 488D5001 		leaq	1(%rax), %rdx
 657 0648 488955B8 		movq	%rdx, -72(%rbp)
 658 064c 0FB608   		movzbl	(%rax), %ecx
 659 064f 488B45C0 		movq	-64(%rbp), %rax
 660 0653 488D5001 		leaq	1(%rax), %rdx
 661 0657 488955C0 		movq	%rdx, -64(%rbp)
 662 065b 0FB610   		movzbl	(%rax), %edx
 663 065e 09CA     		orl	%ecx, %edx
 664 0660 8810     		movb	%dl, (%rax)
 665              	.L38:
 179:svf2csvf.c    **** 	while ( dst < dstEnd ) {
 666              		.loc 1 179 0
 667 0662 488B45C0 		movq	-64(%rbp), %rax
 668 0666 483B45C8 		cmpq	-56(%rbp), %rax
 669 066a 72D4     		jb	.L39
 181:svf2csvf.c    **** 	}
 182:svf2csvf.c    **** 
 183:svf2csvf.c    **** 	if ( tailBits ) {
 670              		.loc 1 183 0
 671 066c 83BD7CFF 		cmpl	$0, -132(%rbp)
 671      FFFF00
 672 0673 0F84FD02 		je	.L54
 672      0000
 673              	.LBB2:
 184:svf2csvf.c    **** 		uint32 tailShift = dataBits & 7;
 674              		.loc 1 184 0
 675 0679 8B4584   		movl	-124(%rbp), %eax
 676 067c 83E007   		andl	$7, %eax
 677 067f 8945AC   		movl	%eax, -84(%rbp)
 185:svf2csvf.c    **** 		uint32 bytesFromTail;
 186:svf2csvf.c    **** 		// Shift the tail to align with the MSB of the data
 187:svf2csvf.c    **** 		if ( tailShift ) {
 678              		.loc 1 187 0
 679 0682 837DAC00 		cmpl	$0, -84(%rbp)
 680 0686 7446     		je	.L40
 188:svf2csvf.c    **** 			fStatus = shiftLeft(tailBuf, tailBits, tailShift, error);
 681              		.loc 1 188 0
 682 0688 488B8D70 		movq	-144(%rbp), %rcx
 682      FFFFFF
 683 068f 8B55AC   		movl	-84(%rbp), %edx
 684 0692 8BB57CFF 		movl	-132(%rbp), %esi
 684      FFFF
 685 0698 488B4588 		movq	-120(%rbp), %rax
 686 069c 4889C7   		movq	%rax, %rdi
 687 069f E8C8FBFF 		call	shiftLeft
 687      FF
 688 06a4 8945A8   		movl	%eax, -88(%rbp)
 189:svf2csvf.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "headTail()");
 689              		.loc 1 189 0
 690 06a7 837DA800 		cmpl	$0, -88(%rbp)
 691 06ab 7421     		je	.L40
 692              		.loc 1 189 0 is_stmt 0 discriminator 1
 693 06ad 488B8570 		movq	-144(%rbp), %rax
 693      FFFFFF
 694 06b4 488D3500 		leaq	.LC3(%rip), %rsi
 694      000000
 695 06bb 4889C7   		movq	%rax, %rdi
 696 06be E8000000 		call	errPrefix@PLT
 696      00
 697 06c3 8B45A8   		movl	-88(%rbp), %eax
 698 06c6 8945A4   		movl	%eax, -92(%rbp)
 699 06c9 E9A90200 		jmp	.L37
 699      00
 700              	.L40:
 190:svf2csvf.c    **** 		}
 191:svf2csvf.c    **** 
 192:svf2csvf.c    **** 		// How much data do we need to copy from the tail?
 193:svf2csvf.c    **** 		bytesFromTail = (uint32)tailBuf->length;
 701              		.loc 1 193 0 is_stmt 1
 702 06ce 488B4588 		movq	-120(%rbp), %rax
 703 06d2 488B4008 		movq	8(%rax), %rax
 704 06d6 8945B0   		movl	%eax, -80(%rbp)
 194:svf2csvf.c    **** 		src = tailBuf->data;
 705              		.loc 1 194 0
 706 06d9 488B4588 		movq	-120(%rbp), %rax
 707 06dd 488B00   		movq	(%rax), %rax
 708 06e0 488945B8 		movq	%rax, -72(%rbp)
 195:svf2csvf.c    **** 
 196:svf2csvf.c    **** 		// Init new buffer
 197:svf2csvf.c    **** 		bStatus = bufInitialise(&newBuffer, 1024, 0x00, error);
 709              		.loc 1 197 0
 710 06e4 488B9570 		movq	-144(%rbp), %rdx
 710      FFFFFF
 711 06eb 488D45D0 		leaq	-48(%rbp), %rax
 712 06ef 4889D1   		movq	%rdx, %rcx
 713 06f2 BA000000 		movl	$0, %edx
 713      00
 714 06f7 BE000400 		movl	$1024, %esi
 714      00
 715 06fc 4889C7   		movq	%rax, %rdi
 716 06ff E8000000 		call	bufInitialise@PLT
 716      00
 717 0704 8945B4   		movl	%eax, -76(%rbp)
 198:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 718              		.loc 1 198 0
 719 0707 837DB400 		cmpl	$0, -76(%rbp)
 720 070b 7422     		je	.L41
 721              		.loc 1 198 0 is_stmt 0 discriminator 1
 722 070d 488B8570 		movq	-144(%rbp), %rax
 722      FFFFFF
 723 0714 488D3500 		leaq	.LC3(%rip), %rsi
 723      000000
 724 071b 4889C7   		movq	%rax, %rdi
 725 071e E8000000 		call	errPrefix@PLT
 725      00
 726 0723 C745A401 		movl	$1, -92(%rbp)
 726      000000
 727 072a E9480200 		jmp	.L37
 727      00
 728              	.L41:
 199:svf2csvf.c    **** 
 200:svf2csvf.c    **** 		dataBits += tailBits;
 729              		.loc 1 200 0 is_stmt 1
 730 072f 8B857CFF 		movl	-132(%rbp), %eax
 730      FFFF
 731 0735 014584   		addl	%eax, -124(%rbp)
 201:svf2csvf.c    **** 		if ( bitsToBytes(dataBits) == dataBuf->length + bytesFromTail ) {
 732              		.loc 1 201 0
 733 0738 8B4584   		movl	-124(%rbp), %eax
 734 073b C1E803   		shrl	$3, %eax
 735 073e 89C2     		movl	%eax, %edx
 736 0740 8B4584   		movl	-124(%rbp), %eax
 737 0743 83E007   		andl	$7, %eax
 738 0746 85C0     		testl	%eax, %eax
 739 0748 7407     		je	.L42
 740              		.loc 1 201 0 is_stmt 0 discriminator 1
 741 074a B8010000 		movl	$1, %eax
 741      00
 742 074f EB05     		jmp	.L43
 743              	.L42:
 744              		.loc 1 201 0 discriminator 2
 745 0751 B8000000 		movl	$0, %eax
 745      00
 746              	.L43:
 747              		.loc 1 201 0 discriminator 4
 748 0756 01D0     		addl	%edx, %eax
 749 0758 89C1     		movl	%eax, %ecx
 750 075a 488B4598 		movq	-104(%rbp), %rax
 751 075e 488B5008 		movq	8(%rax), %rdx
 752 0762 8B45B0   		movl	-80(%rbp), %eax
 753 0765 4801D0   		addq	%rdx, %rax
 754 0768 4839C1   		cmpq	%rax, %rcx
 755 076b 0F859600 		jne	.L44
 755      0000
 202:svf2csvf.c    **** 			// There's no overlap, so copy back-to-back
 203:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuffer, src, bytesFromTail, error);
 756              		.loc 1 203 0 is_stmt 1
 757 0771 8B55B0   		movl	-80(%rbp), %edx
 758 0774 488B8D70 		movq	-144(%rbp), %rcx
 758      FFFFFF
 759 077b 488B75B8 		movq	-72(%rbp), %rsi
 760 077f 488D45D0 		leaq	-48(%rbp), %rax
 761 0783 4889C7   		movq	%rax, %rdi
 762 0786 E8000000 		call	bufAppendBlock@PLT
 762      00
 763 078b 8945B4   		movl	%eax, -76(%rbp)
 204:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 764              		.loc 1 204 0
 765 078e 837DB400 		cmpl	$0, -76(%rbp)
 766 0792 7422     		je	.L45
 767              		.loc 1 204 0 is_stmt 0 discriminator 1
 768 0794 488B8570 		movq	-144(%rbp), %rax
 768      FFFFFF
 769 079b 488D3500 		leaq	.LC3(%rip), %rsi
 769      000000
 770 07a2 4889C7   		movq	%rax, %rdi
 771 07a5 E8000000 		call	errPrefix@PLT
 771      00
 772 07aa C745A401 		movl	$1, -92(%rbp)
 772      000000
 773 07b1 E9C10100 		jmp	.L37
 773      00
 774              	.L45:
 205:svf2csvf.c    **** 			bStatus = bufAppendByte(&newBuffer, *dataBuf->data, error);
 775              		.loc 1 205 0 is_stmt 1
 776 07b6 488B4598 		movq	-104(%rbp), %rax
 777 07ba 488B00   		movq	(%rax), %rax
 778 07bd 0FB600   		movzbl	(%rax), %eax
 779 07c0 0FB6C8   		movzbl	%al, %ecx
 780 07c3 488B9570 		movq	-144(%rbp), %rdx
 780      FFFFFF
 781 07ca 488D45D0 		leaq	-48(%rbp), %rax
 782 07ce 89CE     		movl	%ecx, %esi
 783 07d0 4889C7   		movq	%rax, %rdi
 784 07d3 E8000000 		call	bufAppendByte@PLT
 784      00
 785 07d8 8945B4   		movl	%eax, -76(%rbp)
 206:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 786              		.loc 1 206 0
 787 07db 837DB400 		cmpl	$0, -76(%rbp)
 788 07df 0F842401 		je	.L46
 788      0000
 789              		.loc 1 206 0 is_stmt 0 discriminator 1
 790 07e5 488B8570 		movq	-144(%rbp), %rax
 790      FFFFFF
 791 07ec 488D3500 		leaq	.LC3(%rip), %rsi
 791      000000
 792 07f3 4889C7   		movq	%rax, %rdi
 793 07f6 E8000000 		call	errPrefix@PLT
 793      00
 794 07fb C745A401 		movl	$1, -92(%rbp)
 794      000000
 795 0802 E9700100 		jmp	.L37
 795      00
 796              	.L44:
 207:svf2csvf.c    **** 		} else if ( bitsToBytes(dataBits) == dataBuf->length + bytesFromTail - 1 ) {
 797              		.loc 1 207 0 is_stmt 1
 798 0807 8B4584   		movl	-124(%rbp), %eax
 799 080a C1E803   		shrl	$3, %eax
 800 080d 89C2     		movl	%eax, %edx
 801 080f 8B4584   		movl	-124(%rbp), %eax
 802 0812 83E007   		andl	$7, %eax
 803 0815 85C0     		testl	%eax, %eax
 804 0817 7407     		je	.L47
 805              		.loc 1 207 0 is_stmt 0 discriminator 1
 806 0819 B8010000 		movl	$1, %eax
 806      00
 807 081e EB05     		jmp	.L48
 808              	.L47:
 809              		.loc 1 207 0 discriminator 2
 810 0820 B8000000 		movl	$0, %eax
 810      00
 811              	.L48:
 812              		.loc 1 207 0 discriminator 4
 813 0825 01D0     		addl	%edx, %eax
 814 0827 89C1     		movl	%eax, %ecx
 815 0829 488B4598 		movq	-104(%rbp), %rax
 816 082d 488B5008 		movq	8(%rax), %rdx
 817 0831 8B45B0   		movl	-80(%rbp), %eax
 818 0834 4801D0   		addq	%rdx, %rax
 819 0837 4883E801 		subq	$1, %rax
 820 083b 4839C1   		cmpq	%rax, %rcx
 821 083e 0F85A600 		jne	.L49
 821      0000
 208:svf2csvf.c    **** 			// There's a single byte overlap, so OR the overlap byte
 209:svf2csvf.c    **** 			bytesFromTail--;
 822              		.loc 1 209 0 is_stmt 1
 823 0844 836DB001 		subl	$1, -80(%rbp)
 210:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuffer, src, bytesFromTail, error);
 824              		.loc 1 210 0
 825 0848 8B55B0   		movl	-80(%rbp), %edx
 826 084b 488B8D70 		movq	-144(%rbp), %rcx
 826      FFFFFF
 827 0852 488B75B8 		movq	-72(%rbp), %rsi
 828 0856 488D45D0 		leaq	-48(%rbp), %rax
 829 085a 4889C7   		movq	%rax, %rdi
 830 085d E8000000 		call	bufAppendBlock@PLT
 830      00
 831 0862 8945B4   		movl	%eax, -76(%rbp)
 211:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 832              		.loc 1 211 0
 833 0865 837DB400 		cmpl	$0, -76(%rbp)
 834 0869 7422     		je	.L50
 835              		.loc 1 211 0 is_stmt 0 discriminator 1
 836 086b 488B8570 		movq	-144(%rbp), %rax
 836      FFFFFF
 837 0872 488D3500 		leaq	.LC3(%rip), %rsi
 837      000000
 838 0879 4889C7   		movq	%rax, %rdi
 839 087c E8000000 		call	errPrefix@PLT
 839      00
 840 0881 C745A401 		movl	$1, -92(%rbp)
 840      000000
 841 0888 E9EA0000 		jmp	.L37
 841      00
 842              	.L50:
 212:svf2csvf.c    **** 			src += bytesFromTail;
 843              		.loc 1 212 0 is_stmt 1
 844 088d 8B45B0   		movl	-80(%rbp), %eax
 845 0890 480145B8 		addq	%rax, -72(%rbp)
 213:svf2csvf.c    **** 			bStatus = bufAppendByte(&newBuffer, *src | *dataBuf->data, error);
 846              		.loc 1 213 0
 847 0894 488B45B8 		movq	-72(%rbp), %rax
 848 0898 0FB610   		movzbl	(%rax), %edx
 849 089b 488B4598 		movq	-104(%rbp), %rax
 850 089f 488B00   		movq	(%rax), %rax
 851 08a2 0FB600   		movzbl	(%rax), %eax
 852 08a5 09D0     		orl	%edx, %eax
 853 08a7 0FB6C8   		movzbl	%al, %ecx
 854 08aa 488B9570 		movq	-144(%rbp), %rdx
 854      FFFFFF
 855 08b1 488D45D0 		leaq	-48(%rbp), %rax
 856 08b5 89CE     		movl	%ecx, %esi
 857 08b7 4889C7   		movq	%rax, %rdi
 858 08ba E8000000 		call	bufAppendByte@PLT
 858      00
 859 08bf 8945B4   		movl	%eax, -76(%rbp)
 214:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 860              		.loc 1 214 0
 861 08c2 837DB400 		cmpl	$0, -76(%rbp)
 862 08c6 7441     		je	.L46
 863              		.loc 1 214 0 is_stmt 0 discriminator 1
 864 08c8 488B8570 		movq	-144(%rbp), %rax
 864      FFFFFF
 865 08cf 488D3500 		leaq	.LC3(%rip), %rsi
 865      000000
 866 08d6 4889C7   		movq	%rax, %rdi
 867 08d9 E8000000 		call	errPrefix@PLT
 867      00
 868 08de C745A401 		movl	$1, -92(%rbp)
 868      000000
 869 08e5 E98D0000 		jmp	.L37
 869      00
 870              	.L49:
 215:svf2csvf.c    **** 		} else {
 216:svf2csvf.c    **** 			// Ooops, this should never happen!
 217:svf2csvf.c    **** 			CHECK_STATUS(true, FL_INTERNAL_ERR, cleanup, "headTail(): Internal error");
 871              		.loc 1 217 0 is_stmt 1 discriminator 1
 872 08ea 488B8570 		movq	-144(%rbp), %rax
 872      FFFFFF
 873 08f1 488D3500 		leaq	.LC4(%rip), %rsi
 873      000000
 874 08f8 4889C7   		movq	%rax, %rdi
 875 08fb E8000000 		call	errPrefix@PLT
 875      00
 876 0900 C745A417 		movl	$23, -92(%rbp)
 876      000000
 877 0907 EB6E     		jmp	.L37
 878              	.L46:
 218:svf2csvf.c    **** 		}
 219:svf2csvf.c    **** 		bStatus = bufAppendBlock(&newBuffer, dataBuf->data+1, dataBuf->length-1, error);
 879              		.loc 1 219 0
 880 0909 488B4598 		movq	-104(%rbp), %rax
 881 090d 488B4008 		movq	8(%rax), %rax
 882 0911 488D78FF 		leaq	-1(%rax), %rdi
 883 0915 488B4598 		movq	-104(%rbp), %rax
 884 0919 488B00   		movq	(%rax), %rax
 885 091c 488D7001 		leaq	1(%rax), %rsi
 886 0920 488B9570 		movq	-144(%rbp), %rdx
 886      FFFFFF
 887 0927 488D45D0 		leaq	-48(%rbp), %rax
 888 092b 4889D1   		movq	%rdx, %rcx
 889 092e 4889FA   		movq	%rdi, %rdx
 890 0931 4889C7   		movq	%rax, %rdi
 891 0934 E8000000 		call	bufAppendBlock@PLT
 891      00
 892 0939 8945B4   		movl	%eax, -76(%rbp)
 220:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 893              		.loc 1 220 0
 894 093c 837DB400 		cmpl	$0, -76(%rbp)
 895 0940 741F     		je	.L51
 896              		.loc 1 220 0 is_stmt 0 discriminator 1
 897 0942 488B8570 		movq	-144(%rbp), %rax
 897      FFFFFF
 898 0949 488D3500 		leaq	.LC3(%rip), %rsi
 898      000000
 899 0950 4889C7   		movq	%rax, %rdi
 900 0953 E8000000 		call	errPrefix@PLT
 900      00
 901 0958 C745A401 		movl	$1, -92(%rbp)
 901      000000
 902 095f EB16     		jmp	.L37
 903              	.L51:
 221:svf2csvf.c    **** 		bufSwap(&newBuffer, dataBuf);
 904              		.loc 1 221 0 is_stmt 1
 905 0961 488B5598 		movq	-104(%rbp), %rdx
 906 0965 488D45D0 		leaq	-48(%rbp), %rax
 907 0969 4889D6   		movq	%rdx, %rsi
 908 096c 4889C7   		movq	%rax, %rdi
 909 096f E8000000 		call	bufSwap@PLT
 909      00
 910 0974 EB01     		jmp	.L37
 911              	.L54:
 912              	.LBE2:
 222:svf2csvf.c    **** 	}
 223:svf2csvf.c    **** 	
 224:svf2csvf.c    **** cleanup:
 913              		.loc 1 224 0
 914 0976 90       		nop
 915              	.L37:
 225:svf2csvf.c    **** 	bufDestroy(&newBuffer);
 916              		.loc 1 225 0
 917 0977 488D45D0 		leaq	-48(%rbp), %rax
 918 097b 4889C7   		movq	%rax, %rdi
 919 097e E8000000 		call	bufDestroy@PLT
 919      00
 226:svf2csvf.c    **** 	return retVal;
 920              		.loc 1 226 0
 921 0983 8B45A4   		movl	-92(%rbp), %eax
 227:svf2csvf.c    **** }
 922              		.loc 1 227 0
 923 0986 488B7DF8 		movq	-8(%rbp), %rdi
 924 098a 6448333C 		xorq	%fs:40, %rdi
 924      25280000 
 924      00
 925 0993 7405     		je	.L53
 926 0995 E8000000 		call	__stack_chk_fail@PLT
 926      00
 927              	.L53:
 928 099a C9       		leave
 929              		.cfi_def_cfa 7, 8
 930 099b C3       		ret
 931              		.cfi_endproc
 932              	.LFE9:
 934              		.section	.rodata
 935              	.LC5:
 936 006f 696E6974 		.string	"initBitStore()"
 936      42697453 
 936      746F7265 
 936      282900
 937              		.text
 939              	initBitStore:
 940              	.LFB10:
 228:svf2csvf.c    **** 
 229:svf2csvf.c    **** static FLStatus initBitStore(struct BitStore *store, const char **error) {
 941              		.loc 1 229 0
 942              		.cfi_startproc
 943 099c 55       		pushq	%rbp
 944              		.cfi_def_cfa_offset 16
 945              		.cfi_offset 6, -16
 946 099d 4889E5   		movq	%rsp, %rbp
 947              		.cfi_def_cfa_register 6
 948 09a0 4883EC20 		subq	$32, %rsp
 949 09a4 48897DE8 		movq	%rdi, -24(%rbp)
 950 09a8 488975E0 		movq	%rsi, -32(%rbp)
 230:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 951              		.loc 1 230 0
 952 09ac C745F800 		movl	$0, -8(%rbp)
 952      000000
 231:svf2csvf.c    **** 	BufferStatus bStatus;
 232:svf2csvf.c    **** 	store->numBits = 0;
 953              		.loc 1 232 0
 954 09b3 488B45E8 		movq	-24(%rbp), %rax
 955 09b7 C7000000 		movl	$0, (%rax)
 955      0000
 233:svf2csvf.c    **** 	bStatus = bufInitialise(&store->tdi, 1024, 0x00, error);
 956              		.loc 1 233 0
 957 09bd 488B45E8 		movq	-24(%rbp), %rax
 958 09c1 488D7808 		leaq	8(%rax), %rdi
 959 09c5 488B45E0 		movq	-32(%rbp), %rax
 960 09c9 4889C1   		movq	%rax, %rcx
 961 09cc BA000000 		movl	$0, %edx
 961      00
 962 09d1 BE000400 		movl	$1024, %esi
 962      00
 963 09d6 E8000000 		call	bufInitialise@PLT
 963      00
 964 09db 8945FC   		movl	%eax, -4(%rbp)
 234:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 965              		.loc 1 234 0
 966 09de 837DFC00 		cmpl	$0, -4(%rbp)
 967 09e2 741F     		je	.L56
 968              		.loc 1 234 0 is_stmt 0 discriminator 1
 969 09e4 488B45E0 		movq	-32(%rbp), %rax
 970 09e8 488D3500 		leaq	.LC5(%rip), %rsi
 970      000000
 971 09ef 4889C7   		movq	%rax, %rdi
 972 09f2 E8000000 		call	errPrefix@PLT
 972      00
 973 09f7 C745F801 		movl	$1, -8(%rbp)
 973      000000
 974 09fe E9870000 		jmp	.L57
 974      00
 975              	.L56:
 235:svf2csvf.c    **** 	bStatus = bufInitialise(&store->tdo, 1024, 0x00, error);
 976              		.loc 1 235 0 is_stmt 1
 977 0a03 488B45E8 		movq	-24(%rbp), %rax
 978 0a07 488D7828 		leaq	40(%rax), %rdi
 979 0a0b 488B45E0 		movq	-32(%rbp), %rax
 980 0a0f 4889C1   		movq	%rax, %rcx
 981 0a12 BA000000 		movl	$0, %edx
 981      00
 982 0a17 BE000400 		movl	$1024, %esi
 982      00
 983 0a1c E8000000 		call	bufInitialise@PLT
 983      00
 984 0a21 8945FC   		movl	%eax, -4(%rbp)
 236:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 985              		.loc 1 236 0
 986 0a24 837DFC00 		cmpl	$0, -4(%rbp)
 987 0a28 741C     		je	.L58
 988              		.loc 1 236 0 is_stmt 0 discriminator 1
 989 0a2a 488B45E0 		movq	-32(%rbp), %rax
 990 0a2e 488D3500 		leaq	.LC5(%rip), %rsi
 990      000000
 991 0a35 4889C7   		movq	%rax, %rdi
 992 0a38 E8000000 		call	errPrefix@PLT
 992      00
 993 0a3d C745F801 		movl	$1, -8(%rbp)
 993      000000
 994 0a44 EB44     		jmp	.L57
 995              	.L58:
 237:svf2csvf.c    **** 	bStatus = bufInitialise(&store->mask, 1024, 0x00, error);
 996              		.loc 1 237 0 is_stmt 1
 997 0a46 488B45E8 		movq	-24(%rbp), %rax
 998 0a4a 488D7848 		leaq	72(%rax), %rdi
 999 0a4e 488B45E0 		movq	-32(%rbp), %rax
 1000 0a52 4889C1   		movq	%rax, %rcx
 1001 0a55 BA000000 		movl	$0, %edx
 1001      00
 1002 0a5a BE000400 		movl	$1024, %esi
 1002      00
 1003 0a5f E8000000 		call	bufInitialise@PLT
 1003      00
 1004 0a64 8945FC   		movl	%eax, -4(%rbp)
 238:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 1005              		.loc 1 238 0
 1006 0a67 837DFC00 		cmpl	$0, -4(%rbp)
 1007 0a6b 741C     		je	.L60
 1008              		.loc 1 238 0 is_stmt 0 discriminator 1
 1009 0a6d 488B45E0 		movq	-32(%rbp), %rax
 1010 0a71 488D3500 		leaq	.LC5(%rip), %rsi
 1010      000000
 1011 0a78 4889C7   		movq	%rax, %rdi
 1012 0a7b E8000000 		call	errPrefix@PLT
 1012      00
 1013 0a80 C745F801 		movl	$1, -8(%rbp)
 1013      000000
 1014 0a87 EB01     		jmp	.L57
 1015              	.L60:
 239:svf2csvf.c    **** cleanup:
 1016              		.loc 1 239 0 is_stmt 1
 1017 0a89 90       		nop
 1018              	.L57:
 240:svf2csvf.c    **** 	return retVal;
 1019              		.loc 1 240 0
 1020 0a8a 8B45F8   		movl	-8(%rbp), %eax
 241:svf2csvf.c    **** }
 1021              		.loc 1 241 0
 1022 0a8d C9       		leave
 1023              		.cfi_def_cfa 7, 8
 1024 0a8e C3       		ret
 1025              		.cfi_endproc
 1026              	.LFE10:
 1029              	destroyBitStore:
 1030              	.LFB11:
 242:svf2csvf.c    **** 
 243:svf2csvf.c    **** static void destroyBitStore(struct BitStore *store) {
 1031              		.loc 1 243 0
 1032              		.cfi_startproc
 1033 0a8f 55       		pushq	%rbp
 1034              		.cfi_def_cfa_offset 16
 1035              		.cfi_offset 6, -16
 1036 0a90 4889E5   		movq	%rsp, %rbp
 1037              		.cfi_def_cfa_register 6
 1038 0a93 4883EC10 		subq	$16, %rsp
 1039 0a97 48897DF8 		movq	%rdi, -8(%rbp)
 244:svf2csvf.c    **** 	store->numBits = 0;
 1040              		.loc 1 244 0
 1041 0a9b 488B45F8 		movq	-8(%rbp), %rax
 1042 0a9f C7000000 		movl	$0, (%rax)
 1042      0000
 245:svf2csvf.c    **** 	bufDestroy(&store->tdi);
 1043              		.loc 1 245 0
 1044 0aa5 488B45F8 		movq	-8(%rbp), %rax
 1045 0aa9 4883C008 		addq	$8, %rax
 1046 0aad 4889C7   		movq	%rax, %rdi
 1047 0ab0 E8000000 		call	bufDestroy@PLT
 1047      00
 246:svf2csvf.c    **** 	bufDestroy(&store->tdo);
 1048              		.loc 1 246 0
 1049 0ab5 488B45F8 		movq	-8(%rbp), %rax
 1050 0ab9 4883C028 		addq	$40, %rax
 1051 0abd 4889C7   		movq	%rax, %rdi
 1052 0ac0 E8000000 		call	bufDestroy@PLT
 1052      00
 247:svf2csvf.c    **** 	bufDestroy(&store->mask);
 1053              		.loc 1 247 0
 1054 0ac5 488B45F8 		movq	-8(%rbp), %rax
 1055 0ac9 4883C048 		addq	$72, %rax
 1056 0acd 4889C7   		movq	%rax, %rdi
 1057 0ad0 E8000000 		call	bufDestroy@PLT
 1057      00
 248:svf2csvf.c    **** }
 1058              		.loc 1 248 0
 1059 0ad5 90       		nop
 1060 0ad6 C9       		leave
 1061              		.cfi_def_cfa 7, 8
 1062 0ad7 C3       		ret
 1063              		.cfi_endproc
 1064              	.LFE11:
 1066              		.section	.rodata
 1067              	.LC6:
 1068 007e 63787449 		.string	"cxtInitialise()"
 1068      6E697469 
 1068      616C6973 
 1068      65282900 
 1069              		.text
 1070              		.globl	cxtInitialise
 1072              	cxtInitialise:
 1073              	.LFB12:
 249:svf2csvf.c    **** 
 250:svf2csvf.c    **** FLStatus cxtInitialise(struct ParseContext *cxt, const char **error) {
 1074              		.loc 1 250 0
 1075              		.cfi_startproc
 1076 0ad8 55       		pushq	%rbp
 1077              		.cfi_def_cfa_offset 16
 1078              		.cfi_offset 6, -16
 1079 0ad9 4889E5   		movq	%rsp, %rbp
 1080              		.cfi_def_cfa_register 6
 1081 0adc 4883EC20 		subq	$32, %rsp
 1082 0ae0 48897DE8 		movq	%rdi, -24(%rbp)
 1083 0ae4 488975E0 		movq	%rsi, -32(%rbp)
 251:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1084              		.loc 1 251 0
 1085 0ae8 C745F400 		movl	$0, -12(%rbp)
 1085      000000
 252:svf2csvf.c    **** 	BufferStatus bStatus;
 253:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataHead, error);
 1086              		.loc 1 253 0
 1087 0aef 488B45E8 		movq	-24(%rbp), %rax
 1088 0af3 488B55E0 		movq	-32(%rbp), %rdx
 1089 0af7 4889D6   		movq	%rdx, %rsi
 1090 0afa 4889C7   		movq	%rax, %rdi
 1091 0afd E89AFEFF 		call	initBitStore
 1091      FF
 1092 0b02 8945F8   		movl	%eax, -8(%rbp)
 254:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1093              		.loc 1 254 0
 1094 0b05 837DF800 		cmpl	$0, -8(%rbp)
 1095 0b09 741E     		je	.L63
 1096              		.loc 1 254 0 is_stmt 0 discriminator 1
 1097 0b0b 488B45E0 		movq	-32(%rbp), %rax
 1098 0b0f 488D3500 		leaq	.LC6(%rip), %rsi
 1098      000000
 1099 0b16 4889C7   		movq	%rax, %rdi
 1100 0b19 E8000000 		call	errPrefix@PLT
 1100      00
 1101 0b1e 8B45F8   		movl	-8(%rbp), %eax
 1102 0b21 8945F4   		movl	%eax, -12(%rbp)
 1103 0b24 E9BA0100 		jmp	.L64
 1103      00
 1104              	.L63:
 255:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataBody, error);
 1105              		.loc 1 255 0 is_stmt 1
 1106 0b29 488B45E8 		movq	-24(%rbp), %rax
 1107 0b2d 488D90D0 		leaq	208(%rax), %rdx
 1107      000000
 1108 0b34 488B45E0 		movq	-32(%rbp), %rax
 1109 0b38 4889C6   		movq	%rax, %rsi
 1110 0b3b 4889D7   		movq	%rdx, %rdi
 1111 0b3e E859FEFF 		call	initBitStore
 1111      FF
 1112 0b43 8945F8   		movl	%eax, -8(%rbp)
 256:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1113              		.loc 1 256 0
 1114 0b46 837DF800 		cmpl	$0, -8(%rbp)
 1115 0b4a 741E     		je	.L65
 1116              		.loc 1 256 0 is_stmt 0 discriminator 1
 1117 0b4c 488B45E0 		movq	-32(%rbp), %rax
 1118 0b50 488D3500 		leaq	.LC6(%rip), %rsi
 1118      000000
 1119 0b57 4889C7   		movq	%rax, %rdi
 1120 0b5a E8000000 		call	errPrefix@PLT
 1120      00
 1121 0b5f 8B45F8   		movl	-8(%rbp), %eax
 1122 0b62 8945F4   		movl	%eax, -12(%rbp)
 1123 0b65 E9790100 		jmp	.L64
 1123      00
 1124              	.L65:
 257:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataTail, error);
 1125              		.loc 1 257 0 is_stmt 1
 1126 0b6a 488B45E8 		movq	-24(%rbp), %rax
 1127 0b6e 488D90A0 		leaq	416(%rax), %rdx
 1127      010000
 1128 0b75 488B45E0 		movq	-32(%rbp), %rax
 1129 0b79 4889C6   		movq	%rax, %rsi
 1130 0b7c 4889D7   		movq	%rdx, %rdi
 1131 0b7f E818FEFF 		call	initBitStore
 1131      FF
 1132 0b84 8945F8   		movl	%eax, -8(%rbp)
 258:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1133              		.loc 1 258 0
 1134 0b87 837DF800 		cmpl	$0, -8(%rbp)
 1135 0b8b 741E     		je	.L66
 1136              		.loc 1 258 0 is_stmt 0 discriminator 1
 1137 0b8d 488B45E0 		movq	-32(%rbp), %rax
 1138 0b91 488D3500 		leaq	.LC6(%rip), %rsi
 1138      000000
 1139 0b98 4889C7   		movq	%rax, %rdi
 1140 0b9b E8000000 		call	errPrefix@PLT
 1140      00
 1141 0ba0 8B45F8   		movl	-8(%rbp), %eax
 1142 0ba3 8945F4   		movl	%eax, -12(%rbp)
 1143 0ba6 E9380100 		jmp	.L64
 1143      00
 1144              	.L66:
 259:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnHead, error);
 1145              		.loc 1 259 0 is_stmt 1
 1146 0bab 488B45E8 		movq	-24(%rbp), %rax
 1147 0baf 488D5068 		leaq	104(%rax), %rdx
 1148 0bb3 488B45E0 		movq	-32(%rbp), %rax
 1149 0bb7 4889C6   		movq	%rax, %rsi
 1150 0bba 4889D7   		movq	%rdx, %rdi
 1151 0bbd E8DAFDFF 		call	initBitStore
 1151      FF
 1152 0bc2 8945F8   		movl	%eax, -8(%rbp)
 260:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1153              		.loc 1 260 0
 1154 0bc5 837DF800 		cmpl	$0, -8(%rbp)
 1155 0bc9 741E     		je	.L67
 1156              		.loc 1 260 0 is_stmt 0 discriminator 1
 1157 0bcb 488B45E0 		movq	-32(%rbp), %rax
 1158 0bcf 488D3500 		leaq	.LC6(%rip), %rsi
 1158      000000
 1159 0bd6 4889C7   		movq	%rax, %rdi
 1160 0bd9 E8000000 		call	errPrefix@PLT
 1160      00
 1161 0bde 8B45F8   		movl	-8(%rbp), %eax
 1162 0be1 8945F4   		movl	%eax, -12(%rbp)
 1163 0be4 E9FA0000 		jmp	.L64
 1163      00
 1164              	.L67:
 261:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnBody, error);
 1165              		.loc 1 261 0 is_stmt 1
 1166 0be9 488B45E8 		movq	-24(%rbp), %rax
 1167 0bed 488D9038 		leaq	312(%rax), %rdx
 1167      010000
 1168 0bf4 488B45E0 		movq	-32(%rbp), %rax
 1169 0bf8 4889C6   		movq	%rax, %rsi
 1170 0bfb 4889D7   		movq	%rdx, %rdi
 1171 0bfe E899FDFF 		call	initBitStore
 1171      FF
 1172 0c03 8945F8   		movl	%eax, -8(%rbp)
 262:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1173              		.loc 1 262 0
 1174 0c06 837DF800 		cmpl	$0, -8(%rbp)
 1175 0c0a 741E     		je	.L68
 1176              		.loc 1 262 0 is_stmt 0 discriminator 1
 1177 0c0c 488B45E0 		movq	-32(%rbp), %rax
 1178 0c10 488D3500 		leaq	.LC6(%rip), %rsi
 1178      000000
 1179 0c17 4889C7   		movq	%rax, %rdi
 1180 0c1a E8000000 		call	errPrefix@PLT
 1180      00
 1181 0c1f 8B45F8   		movl	-8(%rbp), %eax
 1182 0c22 8945F4   		movl	%eax, -12(%rbp)
 1183 0c25 E9B90000 		jmp	.L64
 1183      00
 1184              	.L68:
 263:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnTail, error);
 1185              		.loc 1 263 0 is_stmt 1
 1186 0c2a 488B45E8 		movq	-24(%rbp), %rax
 1187 0c2e 488D9008 		leaq	520(%rax), %rdx
 1187      020000
 1188 0c35 488B45E0 		movq	-32(%rbp), %rax
 1189 0c39 4889C6   		movq	%rax, %rsi
 1190 0c3c 4889D7   		movq	%rdx, %rdi
 1191 0c3f E858FDFF 		call	initBitStore
 1191      FF
 1192 0c44 8945F8   		movl	%eax, -8(%rbp)
 264:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1193              		.loc 1 264 0
 1194 0c47 837DF800 		cmpl	$0, -8(%rbp)
 1195 0c4b 741B     		je	.L69
 1196              		.loc 1 264 0 is_stmt 0 discriminator 1
 1197 0c4d 488B45E0 		movq	-32(%rbp), %rax
 1198 0c51 488D3500 		leaq	.LC6(%rip), %rsi
 1198      000000
 1199 0c58 4889C7   		movq	%rax, %rdi
 1200 0c5b E8000000 		call	errPrefix@PLT
 1200      00
 1201 0c60 8B45F8   		movl	-8(%rbp), %eax
 1202 0c63 8945F4   		movl	%eax, -12(%rbp)
 1203 0c66 EB7B     		jmp	.L64
 1204              	.L69:
 265:svf2csvf.c    **** 	cxt->curLength = 0;
 1205              		.loc 1 265 0 is_stmt 1
 1206 0c68 488B45E8 		movq	-24(%rbp), %rax
 1207 0c6c C7807002 		movl	$0, 624(%rax)
 1207      00000000 
 1207      0000
 266:svf2csvf.c    **** 	bStatus = bufInitialise(&cxt->curMaskBuf, 1024, 0x00, error);
 1208              		.loc 1 266 0
 1209 0c76 488B45E8 		movq	-24(%rbp), %rax
 1210 0c7a 488DB878 		leaq	632(%rax), %rdi
 1210      020000
 1211 0c81 488B45E0 		movq	-32(%rbp), %rax
 1212 0c85 4889C1   		movq	%rax, %rcx
 1213 0c88 BA000000 		movl	$0, %edx
 1213      00
 1214 0c8d BE000400 		movl	$1024, %esi
 1214      00
 1215 0c92 E8000000 		call	bufInitialise@PLT
 1215      00
 1216 0c97 8945FC   		movl	%eax, -4(%rbp)
 267:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "cxtInitialise()");
 1217              		.loc 1 267 0
 1218 0c9a 837DFC00 		cmpl	$0, -4(%rbp)
 1219 0c9e 741C     		je	.L70
 1220              		.loc 1 267 0 is_stmt 0 discriminator 1
 1221 0ca0 488B45E0 		movq	-32(%rbp), %rax
 1222 0ca4 488D3500 		leaq	.LC6(%rip), %rsi
 1222      000000
 1223 0cab 4889C7   		movq	%rax, %rdi
 1224 0cae E8000000 		call	errPrefix@PLT
 1224      00
 1225 0cb3 C745F401 		movl	$1, -12(%rbp)
 1225      000000
 1226 0cba EB27     		jmp	.L64
 1227              	.L70:
 268:svf2csvf.c    **** 	cxt->curMaskBits = 0;
 1228              		.loc 1 268 0 is_stmt 1
 1229 0cbc 488B45E8 		movq	-24(%rbp), %rax
 1230 0cc0 C7809802 		movl	$0, 664(%rax)
 1230      00000000 
 1230      0000
 269:svf2csvf.c    **** 	cxt->numCommands = 0;
 1231              		.loc 1 269 0
 1232 0cca 488B45E8 		movq	-24(%rbp), %rax
 1233 0cce C7809C02 		movl	$0, 668(%rax)
 1233      00000000 
 1233      0000
 270:svf2csvf.c    **** 	cxt->newMaskWritten = false;
 1234              		.loc 1 270 0
 1235 0cd8 488B45E8 		movq	-24(%rbp), %rax
 1236 0cdc C680A002 		movb	$0, 672(%rax)
 1236      000000
 1237              	.L64:
 271:svf2csvf.c    **** cleanup:
 272:svf2csvf.c    **** 	return retVal;
 1238              		.loc 1 272 0
 1239 0ce3 8B45F4   		movl	-12(%rbp), %eax
 273:svf2csvf.c    **** }
 1240              		.loc 1 273 0
 1241 0ce6 C9       		leave
 1242              		.cfi_def_cfa 7, 8
 1243 0ce7 C3       		ret
 1244              		.cfi_endproc
 1245              	.LFE12:
 1247              		.globl	cxtDestroy
 1249              	cxtDestroy:
 1250              	.LFB13:
 274:svf2csvf.c    **** 
 275:svf2csvf.c    **** void cxtDestroy(struct ParseContext *cxt) {
 1251              		.loc 1 275 0
 1252              		.cfi_startproc
 1253 0ce8 55       		pushq	%rbp
 1254              		.cfi_def_cfa_offset 16
 1255              		.cfi_offset 6, -16
 1256 0ce9 4889E5   		movq	%rsp, %rbp
 1257              		.cfi_def_cfa_register 6
 1258 0cec 4883EC10 		subq	$16, %rsp
 1259 0cf0 48897DF8 		movq	%rdi, -8(%rbp)
 276:svf2csvf.c    **** 	destroyBitStore(&cxt->dataHead);
 1260              		.loc 1 276 0
 1261 0cf4 488B45F8 		movq	-8(%rbp), %rax
 1262 0cf8 4889C7   		movq	%rax, %rdi
 1263 0cfb E88FFDFF 		call	destroyBitStore
 1263      FF
 277:svf2csvf.c    **** 	destroyBitStore(&cxt->dataBody);
 1264              		.loc 1 277 0
 1265 0d00 488B45F8 		movq	-8(%rbp), %rax
 1266 0d04 4805D000 		addq	$208, %rax
 1266      0000
 1267 0d0a 4889C7   		movq	%rax, %rdi
 1268 0d0d E87DFDFF 		call	destroyBitStore
 1268      FF
 278:svf2csvf.c    **** 	destroyBitStore(&cxt->dataTail);
 1269              		.loc 1 278 0
 1270 0d12 488B45F8 		movq	-8(%rbp), %rax
 1271 0d16 4805A001 		addq	$416, %rax
 1271      0000
 1272 0d1c 4889C7   		movq	%rax, %rdi
 1273 0d1f E86BFDFF 		call	destroyBitStore
 1273      FF
 279:svf2csvf.c    **** 	destroyBitStore(&cxt->insnHead);
 1274              		.loc 1 279 0
 1275 0d24 488B45F8 		movq	-8(%rbp), %rax
 1276 0d28 4883C068 		addq	$104, %rax
 1277 0d2c 4889C7   		movq	%rax, %rdi
 1278 0d2f E85BFDFF 		call	destroyBitStore
 1278      FF
 280:svf2csvf.c    **** 	destroyBitStore(&cxt->insnBody);
 1279              		.loc 1 280 0
 1280 0d34 488B45F8 		movq	-8(%rbp), %rax
 1281 0d38 48053801 		addq	$312, %rax
 1281      0000
 1282 0d3e 4889C7   		movq	%rax, %rdi
 1283 0d41 E849FDFF 		call	destroyBitStore
 1283      FF
 281:svf2csvf.c    **** 	destroyBitStore(&cxt->insnTail);
 1284              		.loc 1 281 0
 1285 0d46 488B45F8 		movq	-8(%rbp), %rax
 1286 0d4a 48050802 		addq	$520, %rax
 1286      0000
 1287 0d50 4889C7   		movq	%rax, %rdi
 1288 0d53 E837FDFF 		call	destroyBitStore
 1288      FF
 282:svf2csvf.c    **** 	bufDestroy(&cxt->curMaskBuf);
 1289              		.loc 1 282 0
 1290 0d58 488B45F8 		movq	-8(%rbp), %rax
 1291 0d5c 48057802 		addq	$632, %rax
 1291      0000
 1292 0d62 4889C7   		movq	%rax, %rdi
 1293 0d65 E8000000 		call	bufDestroy@PLT
 1293      00
 283:svf2csvf.c    **** }
 1294              		.loc 1 283 0
 1295 0d6a 90       		nop
 1296 0d6b C9       		leave
 1297              		.cfi_def_cfa 7, 8
 1298 0d6c C3       		ret
 1299              		.cfi_endproc
 1300              	.LFE13:
 1302              		.section	.rodata
 1303              	.LC7:
 1304 008e 70726F63 		.string	"processLine()"
 1304      6573734C 
 1304      696E6528 
 1304      2900
 1305              		.text
 1307              	processLine:
 1308              	.LFB14:
 284:svf2csvf.c    **** 
 285:svf2csvf.c    **** typedef enum {
 286:svf2csvf.c    **** 	HEAD = 'H',
 287:svf2csvf.c    **** 	TAIL = 'T',
 288:svf2csvf.c    **** 	BODY = 'S'
 289:svf2csvf.c    **** } ShiftOperation;
 290:svf2csvf.c    **** 
 291:svf2csvf.c    **** /**
 292:svf2csvf.c    ****  * Read the data from the tdi, tdo and mask ASCII hex byte sequences into the supplied BitStore as
 293:svf2csvf.c    ****  * binary data.
 294:svf2csvf.c    ****  */
 295:svf2csvf.c    **** static FLStatus processLine(
 296:svf2csvf.c    **** 	struct BitStore *store,
 297:svf2csvf.c    **** 	uint32 newLength, const char *tdi, const char *tdo, const char *mask,
 298:svf2csvf.c    **** 	const char **error)
 299:svf2csvf.c    **** {
 1309              		.loc 1 299 0
 1310              		.cfi_startproc
 1311 0d6d 55       		pushq	%rbp
 1312              		.cfi_def_cfa_offset 16
 1313              		.cfi_offset 6, -16
 1314 0d6e 4889E5   		movq	%rsp, %rbp
 1315              		.cfi_def_cfa_register 6
 1316 0d71 4883EC40 		subq	$64, %rsp
 1317 0d75 48897DE8 		movq	%rdi, -24(%rbp)
 1318 0d79 8975E4   		movl	%esi, -28(%rbp)
 1319 0d7c 488955D8 		movq	%rdx, -40(%rbp)
 1320 0d80 48894DD0 		movq	%rcx, -48(%rbp)
 1321 0d84 4C8945C8 		movq	%r8, -56(%rbp)
 1322 0d88 4C894DC0 		movq	%r9, -64(%rbp)
 300:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1323              		.loc 1 300 0
 1324 0d8c C745F400 		movl	$0, -12(%rbp)
 1324      000000
 301:svf2csvf.c    **** 	BufferStatus bStatus;
 302:svf2csvf.c    **** 
 303:svf2csvf.c    **** 	// The TDI & MASK values are remembered; the TDO value defaults to all zeros. If the length
 304:svf2csvf.c    **** 	// changes, all remembered values are forgotten.
 305:svf2csvf.c    **** 	bufZeroLength(&store->tdo);
 1325              		.loc 1 305 0
 1326 0d93 488B45E8 		movq	-24(%rbp), %rax
 1327 0d97 4883C028 		addq	$40, %rax
 1328 0d9b 4889C7   		movq	%rax, %rdi
 1329 0d9e E8000000 		call	bufZeroLength@PLT
 1329      00
 306:svf2csvf.c    **** 	if ( newLength ) {
 1330              		.loc 1 306 0
 1331 0da3 837DE400 		cmpl	$0, -28(%rbp)
 1332 0da7 7463     		je	.L74
 307:svf2csvf.c    **** 		bStatus = bufAppendConst(&store->tdo, 0x00, bitsToBytes(newLength), error);
 1333              		.loc 1 307 0
 1334 0da9 8B45E4   		movl	-28(%rbp), %eax
 1335 0dac C1E803   		shrl	$3, %eax
 1336 0daf 89C2     		movl	%eax, %edx
 1337 0db1 8B45E4   		movl	-28(%rbp), %eax
 1338 0db4 83E007   		andl	$7, %eax
 1339 0db7 85C0     		testl	%eax, %eax
 1340 0db9 7407     		je	.L75
 1341              		.loc 1 307 0 is_stmt 0 discriminator 1
 1342 0dbb B8010000 		movl	$1, %eax
 1342      00
 1343 0dc0 EB05     		jmp	.L76
 1344              	.L75:
 1345              		.loc 1 307 0 discriminator 2
 1346 0dc2 B8000000 		movl	$0, %eax
 1346      00
 1347              	.L76:
 1348              		.loc 1 307 0 discriminator 4
 1349 0dc7 01D0     		addl	%edx, %eax
 1350 0dc9 89C2     		movl	%eax, %edx
 1351 0dcb 488B45E8 		movq	-24(%rbp), %rax
 1352 0dcf 488D7828 		leaq	40(%rax), %rdi
 1353 0dd3 488B45C0 		movq	-64(%rbp), %rax
 1354 0dd7 4889C1   		movq	%rax, %rcx
 1355 0dda BE000000 		movl	$0, %esi
 1355      00
 1356 0ddf E8000000 		call	bufAppendConst@PLT
 1356      00
 1357 0de4 8945F8   		movl	%eax, -8(%rbp)
 308:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1358              		.loc 1 308 0 is_stmt 1 discriminator 4
 1359 0de7 837DF800 		cmpl	$0, -8(%rbp)
 1360 0deb 741F     		je	.L74
 1361              		.loc 1 308 0 is_stmt 0 discriminator 1
 1362 0ded 488B45C0 		movq	-64(%rbp), %rax
 1363 0df1 488D3500 		leaq	.LC7(%rip), %rsi
 1363      000000
 1364 0df8 4889C7   		movq	%rax, %rdi
 1365 0dfb E8000000 		call	errPrefix@PLT
 1365      00
 1366 0e00 C745F401 		movl	$1, -12(%rbp)
 1366      000000
 1367 0e07 E9DE0100 		jmp	.L77
 1367      00
 1368              	.L74:
 309:svf2csvf.c    **** 	}
 310:svf2csvf.c    **** 	if ( store->numBits != newLength ) {
 1369              		.loc 1 310 0 is_stmt 1
 1370 0e0c 488B45E8 		movq	-24(%rbp), %rax
 1371 0e10 8B00     		movl	(%rax), %eax
 1372 0e12 3945E4   		cmpl	%eax, -28(%rbp)
 1373 0e15 0F84F000 		je	.L78
 1373      0000
 311:svf2csvf.c    **** 		// The length changed, so we can't reuse previous values, and new TDI data is required:
 312:svf2csvf.c    **** 		// "The TDI parameter must be explicitly specified for the first command or when the
 313:svf2csvf.c    **** 		// length changes."
 314:svf2csvf.c    **** 		bufZeroLength(&store->tdi);
 1374              		.loc 1 314 0
 1375 0e1b 488B45E8 		movq	-24(%rbp), %rax
 1376 0e1f 4883C008 		addq	$8, %rax
 1377 0e23 4889C7   		movq	%rax, %rdi
 1378 0e26 E8000000 		call	bufZeroLength@PLT
 1378      00
 315:svf2csvf.c    **** 		bufZeroLength(&store->mask);
 1379              		.loc 1 315 0
 1380 0e2b 488B45E8 		movq	-24(%rbp), %rax
 1381 0e2f 4883C048 		addq	$72, %rax
 1382 0e33 4889C7   		movq	%rax, %rdi
 1383 0e36 E8000000 		call	bufZeroLength@PLT
 1383      00
 316:svf2csvf.c    **** 		if ( newLength ) {
 1384              		.loc 1 316 0
 1385 0e3b 837DE400 		cmpl	$0, -28(%rbp)
 1386 0e3f 0F84C600 		je	.L78
 1386      0000
 317:svf2csvf.c    **** 			bStatus = bufAppendConst(&store->tdi, 0x00, bitsToBytes(newLength), error);
 1387              		.loc 1 317 0
 1388 0e45 8B45E4   		movl	-28(%rbp), %eax
 1389 0e48 C1E803   		shrl	$3, %eax
 1390 0e4b 89C2     		movl	%eax, %edx
 1391 0e4d 8B45E4   		movl	-28(%rbp), %eax
 1392 0e50 83E007   		andl	$7, %eax
 1393 0e53 85C0     		testl	%eax, %eax
 1394 0e55 7407     		je	.L79
 1395              		.loc 1 317 0 is_stmt 0 discriminator 1
 1396 0e57 B8010000 		movl	$1, %eax
 1396      00
 1397 0e5c EB05     		jmp	.L80
 1398              	.L79:
 1399              		.loc 1 317 0 discriminator 2
 1400 0e5e B8000000 		movl	$0, %eax
 1400      00
 1401              	.L80:
 1402              		.loc 1 317 0 discriminator 4
 1403 0e63 01D0     		addl	%edx, %eax
 1404 0e65 89C2     		movl	%eax, %edx
 1405 0e67 488B45E8 		movq	-24(%rbp), %rax
 1406 0e6b 488D7808 		leaq	8(%rax), %rdi
 1407 0e6f 488B45C0 		movq	-64(%rbp), %rax
 1408 0e73 4889C1   		movq	%rax, %rcx
 1409 0e76 BE000000 		movl	$0, %esi
 1409      00
 1410 0e7b E8000000 		call	bufAppendConst@PLT
 1410      00
 1411 0e80 8945F8   		movl	%eax, -8(%rbp)
 318:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1412              		.loc 1 318 0 is_stmt 1 discriminator 4
 1413 0e83 837DF800 		cmpl	$0, -8(%rbp)
 1414 0e87 741F     		je	.L81
 1415              		.loc 1 318 0 is_stmt 0 discriminator 1
 1416 0e89 488B45C0 		movq	-64(%rbp), %rax
 1417 0e8d 488D3500 		leaq	.LC7(%rip), %rsi
 1417      000000
 1418 0e94 4889C7   		movq	%rax, %rdi
 1419 0e97 E8000000 		call	errPrefix@PLT
 1419      00
 1420 0e9c C745F401 		movl	$1, -12(%rbp)
 1420      000000
 1421 0ea3 E9420100 		jmp	.L77
 1421      00
 1422              	.L81:
 319:svf2csvf.c    **** 			bStatus = bufAppendConst(&store->mask, 0xFF, bitsToBytes(newLength), error);
 1423              		.loc 1 319 0 is_stmt 1
 1424 0ea8 8B45E4   		movl	-28(%rbp), %eax
 1425 0eab C1E803   		shrl	$3, %eax
 1426 0eae 89C2     		movl	%eax, %edx
 1427 0eb0 8B45E4   		movl	-28(%rbp), %eax
 1428 0eb3 83E007   		andl	$7, %eax
 1429 0eb6 85C0     		testl	%eax, %eax
 1430 0eb8 7407     		je	.L82
 1431              		.loc 1 319 0 is_stmt 0 discriminator 1
 1432 0eba B8010000 		movl	$1, %eax
 1432      00
 1433 0ebf EB05     		jmp	.L83
 1434              	.L82:
 1435              		.loc 1 319 0 discriminator 2
 1436 0ec1 B8000000 		movl	$0, %eax
 1436      00
 1437              	.L83:
 1438              		.loc 1 319 0 discriminator 4
 1439 0ec6 01D0     		addl	%edx, %eax
 1440 0ec8 89C2     		movl	%eax, %edx
 1441 0eca 488B45E8 		movq	-24(%rbp), %rax
 1442 0ece 488D7848 		leaq	72(%rax), %rdi
 1443 0ed2 488B45C0 		movq	-64(%rbp), %rax
 1444 0ed6 4889C1   		movq	%rax, %rcx
 1445 0ed9 BEFF0000 		movl	$255, %esi
 1445      00
 1446 0ede E8000000 		call	bufAppendConst@PLT
 1446      00
 1447 0ee3 8945F8   		movl	%eax, -8(%rbp)
 320:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1448              		.loc 1 320 0 is_stmt 1 discriminator 4
 1449 0ee6 837DF800 		cmpl	$0, -8(%rbp)
 1450 0eea 741F     		je	.L78
 1451              		.loc 1 320 0 is_stmt 0 discriminator 1
 1452 0eec 488B45C0 		movq	-64(%rbp), %rax
 1453 0ef0 488D3500 		leaq	.LC7(%rip), %rsi
 1453      000000
 1454 0ef7 4889C7   		movq	%rax, %rdi
 1455 0efa E8000000 		call	errPrefix@PLT
 1455      00
 1456 0eff C745F401 		movl	$1, -12(%rbp)
 1456      000000
 1457 0f06 E9DF0000 		jmp	.L77
 1457      00
 1458              	.L78:
 321:svf2csvf.c    **** 		}
 322:svf2csvf.c    **** 	}
 323:svf2csvf.c    **** 	store->numBits = newLength;
 1459              		.loc 1 323 0 is_stmt 1
 1460 0f0b 488B45E8 		movq	-24(%rbp), %rax
 1461 0f0f 8B55E4   		movl	-28(%rbp), %edx
 1462 0f12 8910     		movl	%edx, (%rax)
 324:svf2csvf.c    **** 	if ( tdi ) {
 1463              		.loc 1 324 0
 1464 0f14 48837DD8 		cmpq	$0, -40(%rbp)
 1464      00
 1465 0f19 7442     		je	.L84
 325:svf2csvf.c    **** 		fStatus = readBytes(&store->tdi, tdi, error);
 1466              		.loc 1 325 0
 1467 0f1b 488B45E8 		movq	-24(%rbp), %rax
 1468 0f1f 488D4808 		leaq	8(%rax), %rcx
 1469 0f23 488B55C0 		movq	-64(%rbp), %rdx
 1470 0f27 488B45D8 		movq	-40(%rbp), %rax
 1471 0f2b 4889C6   		movq	%rax, %rsi
 1472 0f2e 4889CF   		movq	%rcx, %rdi
 1473 0f31 E8000000 		call	readBytes@PLT
 1473      00
 1474 0f36 8945FC   		movl	%eax, -4(%rbp)
 326:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1475              		.loc 1 326 0
 1476 0f39 837DFC00 		cmpl	$0, -4(%rbp)
 1477 0f3d 741E     		je	.L84
 1478              		.loc 1 326 0 is_stmt 0 discriminator 1
 1479 0f3f 488B45C0 		movq	-64(%rbp), %rax
 1480 0f43 488D3500 		leaq	.LC7(%rip), %rsi
 1480      000000
 1481 0f4a 4889C7   		movq	%rax, %rdi
 1482 0f4d E8000000 		call	errPrefix@PLT
 1482      00
 1483 0f52 8B45FC   		movl	-4(%rbp), %eax
 1484 0f55 8945F4   		movl	%eax, -12(%rbp)
 1485 0f58 E98D0000 		jmp	.L77
 1485      00
 1486              	.L84:
 327:svf2csvf.c    **** 	}
 328:svf2csvf.c    **** 	if ( tdo ) {
 1487              		.loc 1 328 0 is_stmt 1
 1488 0f5d 48837DD0 		cmpq	$0, -48(%rbp)
 1488      00
 1489 0f62 743F     		je	.L85
 329:svf2csvf.c    **** 		fStatus = readBytes(&store->tdo, tdo, error);
 1490              		.loc 1 329 0
 1491 0f64 488B45E8 		movq	-24(%rbp), %rax
 1492 0f68 488D4828 		leaq	40(%rax), %rcx
 1493 0f6c 488B55C0 		movq	-64(%rbp), %rdx
 1494 0f70 488B45D0 		movq	-48(%rbp), %rax
 1495 0f74 4889C6   		movq	%rax, %rsi
 1496 0f77 4889CF   		movq	%rcx, %rdi
 1497 0f7a E8000000 		call	readBytes@PLT
 1497      00
 1498 0f7f 8945FC   		movl	%eax, -4(%rbp)
 330:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1499              		.loc 1 330 0
 1500 0f82 837DFC00 		cmpl	$0, -4(%rbp)
 1501 0f86 741B     		je	.L85
 1502              		.loc 1 330 0 is_stmt 0 discriminator 1
 1503 0f88 488B45C0 		movq	-64(%rbp), %rax
 1504 0f8c 488D3500 		leaq	.LC7(%rip), %rsi
 1504      000000
 1505 0f93 4889C7   		movq	%rax, %rdi
 1506 0f96 E8000000 		call	errPrefix@PLT
 1506      00
 1507 0f9b 8B45FC   		movl	-4(%rbp), %eax
 1508 0f9e 8945F4   		movl	%eax, -12(%rbp)
 1509 0fa1 EB47     		jmp	.L77
 1510              	.L85:
 331:svf2csvf.c    **** 	}
 332:svf2csvf.c    **** 	if ( mask ) {
 1511              		.loc 1 332 0 is_stmt 1
 1512 0fa3 48837DC8 		cmpq	$0, -56(%rbp)
 1512      00
 1513 0fa8 743F     		je	.L87
 333:svf2csvf.c    **** 		fStatus = readBytes(&store->mask, mask, error);
 1514              		.loc 1 333 0
 1515 0faa 488B45E8 		movq	-24(%rbp), %rax
 1516 0fae 488D4848 		leaq	72(%rax), %rcx
 1517 0fb2 488B55C0 		movq	-64(%rbp), %rdx
 1518 0fb6 488B45C8 		movq	-56(%rbp), %rax
 1519 0fba 4889C6   		movq	%rax, %rsi
 1520 0fbd 4889CF   		movq	%rcx, %rdi
 1521 0fc0 E8000000 		call	readBytes@PLT
 1521      00
 1522 0fc5 8945FC   		movl	%eax, -4(%rbp)
 334:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1523              		.loc 1 334 0
 1524 0fc8 837DFC00 		cmpl	$0, -4(%rbp)
 1525 0fcc 741B     		je	.L87
 1526              		.loc 1 334 0 is_stmt 0 discriminator 1
 1527 0fce 488B45C0 		movq	-64(%rbp), %rax
 1528 0fd2 488D3500 		leaq	.LC7(%rip), %rsi
 1528      000000
 1529 0fd9 4889C7   		movq	%rax, %rdi
 1530 0fdc E8000000 		call	errPrefix@PLT
 1530      00
 1531 0fe1 8B45FC   		movl	-4(%rbp), %eax
 1532 0fe4 8945F4   		movl	%eax, -12(%rbp)
 1533 0fe7 EB01     		jmp	.L77
 1534              	.L87:
 335:svf2csvf.c    **** 	}
 336:svf2csvf.c    **** 
 337:svf2csvf.c    **** cleanup:
 1535              		.loc 1 337 0 is_stmt 1
 1536 0fe9 90       		nop
 1537              	.L77:
 338:svf2csvf.c    **** 	return retVal;
 1538              		.loc 1 338 0
 1539 0fea 8B45F4   		movl	-12(%rbp), %eax
 339:svf2csvf.c    **** }
 1540              		.loc 1 339 0
 1541 0fed C9       		leave
 1542              		.cfi_def_cfa 7, 8
 1543 0fee C3       		ret
 1544              		.cfi_endproc
 1545              	.LFE14:
 1548              	isAllZero:
 1549              	.LFB15:
 340:svf2csvf.c    **** 
 341:svf2csvf.c    **** /**
 342:svf2csvf.c    ****  * Return true if the buffer is all zeros
 343:svf2csvf.c    ****  */
 344:svf2csvf.c    **** static bool isAllZero(struct Buffer *buf) {
 1550              		.loc 1 344 0
 1551              		.cfi_startproc
 1552 0fef 55       		pushq	%rbp
 1553              		.cfi_def_cfa_offset 16
 1554              		.cfi_offset 6, -16
 1555 0ff0 4889E5   		movq	%rsp, %rbp
 1556              		.cfi_def_cfa_register 6
 1557 0ff3 48897DE8 		movq	%rdi, -24(%rbp)
 345:svf2csvf.c    **** 	const uint8 *p = buf->data;
 1558              		.loc 1 345 0
 1559 0ff7 488B45E8 		movq	-24(%rbp), %rax
 1560 0ffb 488B00   		movq	(%rax), %rax
 1561 0ffe 488945F8 		movq	%rax, -8(%rbp)
 346:svf2csvf.c    **** 	uint32 length = (uint32)buf->length;
 1562              		.loc 1 346 0
 1563 1002 488B45E8 		movq	-24(%rbp), %rax
 1564 1006 488B4008 		movq	8(%rax), %rax
 1565 100a 8945F4   		movl	%eax, -12(%rbp)
 347:svf2csvf.c    **** 	while ( length-- ) {
 1566              		.loc 1 347 0
 1567 100d EB1A     		jmp	.L89
 1568              	.L91:
 348:svf2csvf.c    **** 		if ( *p++ ) {
 1569              		.loc 1 348 0
 1570 100f 488B45F8 		movq	-8(%rbp), %rax
 1571 1013 488D5001 		leaq	1(%rax), %rdx
 1572 1017 488955F8 		movq	%rdx, -8(%rbp)
 1573 101b 0FB600   		movzbl	(%rax), %eax
 1574 101e 84C0     		testb	%al, %al
 1575 1020 7407     		je	.L89
 349:svf2csvf.c    **** 			return false;
 1576              		.loc 1 349 0
 1577 1022 B8000000 		movl	$0, %eax
 1577      00
 1578 1027 EB12     		jmp	.L90
 1579              	.L89:
 347:svf2csvf.c    **** 	while ( length-- ) {
 1580              		.loc 1 347 0
 1581 1029 8B45F4   		movl	-12(%rbp), %eax
 1582 102c 8D50FF   		leal	-1(%rax), %edx
 1583 102f 8955F4   		movl	%edx, -12(%rbp)
 1584 1032 85C0     		testl	%eax, %eax
 1585 1034 75D9     		jne	.L91
 350:svf2csvf.c    **** 		}
 351:svf2csvf.c    **** 	}
 352:svf2csvf.c    **** 	return true;
 1586              		.loc 1 352 0
 1587 1036 B8010000 		movl	$1, %eax
 1587      00
 1588              	.L90:
 353:svf2csvf.c    **** }
 1589              		.loc 1 353 0
 1590 103b 5D       		popq	%rbp
 1591              		.cfi_def_cfa 7, 8
 1592 103c C3       		ret
 1593              		.cfi_endproc
 1594              	.LFE15:
 1596              		.section	.rodata
 1597              	.LC8:
 1598 009c 61707065 		.string	"appendSwapped()"
 1598      6E645377 
 1598      61707065 
 1598      64282900 
 1599              		.text
 1601              	appendSwappedAndInterleaved:
 1602              	.LFB16:
 354:svf2csvf.c    **** 
 355:svf2csvf.c    **** // Reverse and interleave the incoming tdi, tdoExpected arrays:
 356:svf2csvf.c    **** // 0123456789ABCDEFGHIJ -> 9J8I7H6G5F4E3D2C1B0A
 357:svf2csvf.c    **** //
 358:svf2csvf.c    **** static FLStatus appendSwappedAndInterleaved(
 359:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *tdi, const uint8 *exp, uint32 count, const char **error)
 360:svf2csvf.c    **** {
 1603              		.loc 1 360 0
 1604              		.cfi_startproc
 1605 103d 55       		pushq	%rbp
 1606              		.cfi_def_cfa_offset 16
 1607              		.cfi_offset 6, -16
 1608 103e 4889E5   		movq	%rsp, %rbp
 1609              		.cfi_def_cfa_register 6
 1610 1041 4883EC50 		subq	$80, %rsp
 1611 1045 48897DD8 		movq	%rdi, -40(%rbp)
 1612 1049 488975D0 		movq	%rsi, -48(%rbp)
 1613 104d 488955C8 		movq	%rdx, -56(%rbp)
 1614 1051 894DC4   		movl	%ecx, -60(%rbp)
 1615 1054 4C8945B8 		movq	%r8, -72(%rbp)
 361:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1616              		.loc 1 361 0
 1617 1058 C745E800 		movl	$0, -24(%rbp)
 1617      000000
 362:svf2csvf.c    **** 	BufferStatus bStatus;
 363:svf2csvf.c    **** 	const uint8 *tdiPtr = tdi + count - 1;
 1618              		.loc 1 363 0
 1619 105f 8B45C4   		movl	-60(%rbp), %eax
 1620 1062 488D50FF 		leaq	-1(%rax), %rdx
 1621 1066 488B45D0 		movq	-48(%rbp), %rax
 1622 106a 4801D0   		addq	%rdx, %rax
 1623 106d 488945F0 		movq	%rax, -16(%rbp)
 364:svf2csvf.c    **** 	const uint8 *expPtr = exp + count - 1;
 1624              		.loc 1 364 0
 1625 1071 8B45C4   		movl	-60(%rbp), %eax
 1626 1074 488D50FF 		leaq	-1(%rax), %rdx
 1627 1078 488B45C8 		movq	-56(%rbp), %rax
 1628 107c 4801D0   		addq	%rdx, %rax
 1629 107f 488945F8 		movq	%rax, -8(%rbp)
 365:svf2csvf.c    **** 	while ( count-- ) {
 1630              		.loc 1 365 0
 1631 1083 E9920000 		jmp	.L93
 1631      00
 1632              	.L96:
 366:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1633              		.loc 1 366 0
 1634 1088 488B45F0 		movq	-16(%rbp), %rax
 1635 108c 488D50FF 		leaq	-1(%rax), %rdx
 1636 1090 488955F0 		movq	%rdx, -16(%rbp)
 1637 1094 0FB600   		movzbl	(%rax), %eax
 1638 1097 0FB6C8   		movzbl	%al, %ecx
 1639 109a 488B55B8 		movq	-72(%rbp), %rdx
 1640 109e 488B45D8 		movq	-40(%rbp), %rax
 1641 10a2 89CE     		movl	%ecx, %esi
 1642 10a4 4889C7   		movq	%rax, %rdi
 1643 10a7 E8000000 		call	bufAppendByte@PLT
 1643      00
 1644 10ac 8945EC   		movl	%eax, -20(%rbp)
 367:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1645              		.loc 1 367 0
 1646 10af 837DEC00 		cmpl	$0, -20(%rbp)
 1647 10b3 741C     		je	.L94
 1648              		.loc 1 367 0 is_stmt 0 discriminator 1
 1649 10b5 488B45B8 		movq	-72(%rbp), %rax
 1650 10b9 488D3500 		leaq	.LC8(%rip), %rsi
 1650      000000
 1651 10c0 4889C7   		movq	%rax, %rdi
 1652 10c3 E8000000 		call	errPrefix@PLT
 1652      00
 1653 10c8 C745E801 		movl	$1, -24(%rbp)
 1653      000000
 1654 10cf EB5B     		jmp	.L95
 1655              	.L94:
 368:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *expPtr--, error);
 1656              		.loc 1 368 0 is_stmt 1
 1657 10d1 488B45F8 		movq	-8(%rbp), %rax
 1658 10d5 488D50FF 		leaq	-1(%rax), %rdx
 1659 10d9 488955F8 		movq	%rdx, -8(%rbp)
 1660 10dd 0FB600   		movzbl	(%rax), %eax
 1661 10e0 0FB6C8   		movzbl	%al, %ecx
 1662 10e3 488B55B8 		movq	-72(%rbp), %rdx
 1663 10e7 488B45D8 		movq	-40(%rbp), %rax
 1664 10eb 89CE     		movl	%ecx, %esi
 1665 10ed 4889C7   		movq	%rax, %rdi
 1666 10f0 E8000000 		call	bufAppendByte@PLT
 1666      00
 1667 10f5 8945EC   		movl	%eax, -20(%rbp)
 369:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1668              		.loc 1 369 0
 1669 10f8 837DEC00 		cmpl	$0, -20(%rbp)
 1670 10fc 741C     		je	.L93
 1671              		.loc 1 369 0 is_stmt 0 discriminator 1
 1672 10fe 488B45B8 		movq	-72(%rbp), %rax
 1673 1102 488D3500 		leaq	.LC8(%rip), %rsi
 1673      000000
 1674 1109 4889C7   		movq	%rax, %rdi
 1675 110c E8000000 		call	errPrefix@PLT
 1675      00
 1676 1111 C745E801 		movl	$1, -24(%rbp)
 1676      000000
 1677 1118 EB12     		jmp	.L95
 1678              	.L93:
 365:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1679              		.loc 1 365 0 is_stmt 1
 1680 111a 8B45C4   		movl	-60(%rbp), %eax
 1681 111d 8D50FF   		leal	-1(%rax), %edx
 1682 1120 8955C4   		movl	%edx, -60(%rbp)
 1683 1123 85C0     		testl	%eax, %eax
 1684 1125 0F855DFF 		jne	.L96
 1684      FFFF
 370:svf2csvf.c    **** 	}
 371:svf2csvf.c    **** cleanup:
 1685              		.loc 1 371 0
 1686 112b 90       		nop
 1687              	.L95:
 372:svf2csvf.c    **** 	return retVal;
 1688              		.loc 1 372 0
 1689 112c 8B45E8   		movl	-24(%rbp), %eax
 373:svf2csvf.c    **** }
 1690              		.loc 1 373 0
 1691 112f C9       		leave
 1692              		.cfi_def_cfa 7, 8
 1693 1130 C3       		ret
 1694              		.cfi_endproc
 1695              	.LFE16:
 1698              	appendSwapped:
 1699              	.LFB17:
 374:svf2csvf.c    **** 
 375:svf2csvf.c    **** static FLStatus appendSwapped(
 376:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *src, uint32 count, const char **error)
 377:svf2csvf.c    **** {
 1700              		.loc 1 377 0
 1701              		.cfi_startproc
 1702 1131 55       		pushq	%rbp
 1703              		.cfi_def_cfa_offset 16
 1704              		.cfi_offset 6, -16
 1705 1132 4889E5   		movq	%rsp, %rbp
 1706              		.cfi_def_cfa_register 6
 1707 1135 4883EC30 		subq	$48, %rsp
 1708 1139 48897DE8 		movq	%rdi, -24(%rbp)
 1709 113d 488975E0 		movq	%rsi, -32(%rbp)
 1710 1141 8955DC   		movl	%edx, -36(%rbp)
 1711 1144 48894DD0 		movq	%rcx, -48(%rbp)
 378:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1712              		.loc 1 378 0
 1713 1148 C745F800 		movl	$0, -8(%rbp)
 1713      000000
 379:svf2csvf.c    **** 	BufferStatus bStatus;
 380:svf2csvf.c    **** 	src += count - 1;
 1714              		.loc 1 380 0
 1715 114f 8B45DC   		movl	-36(%rbp), %eax
 1716 1152 83E801   		subl	$1, %eax
 1717 1155 89C0     		movl	%eax, %eax
 1718 1157 480145E0 		addq	%rax, -32(%rbp)
 381:svf2csvf.c    **** 	while ( count-- ) {
 1719              		.loc 1 381 0
 1720 115b EB49     		jmp	.L99
 1721              	.L101:
 382:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *src--, error);
 1722              		.loc 1 382 0
 1723 115d 488B45E0 		movq	-32(%rbp), %rax
 1724 1161 488D50FF 		leaq	-1(%rax), %rdx
 1725 1165 488955E0 		movq	%rdx, -32(%rbp)
 1726 1169 0FB600   		movzbl	(%rax), %eax
 1727 116c 0FB6C8   		movzbl	%al, %ecx
 1728 116f 488B55D0 		movq	-48(%rbp), %rdx
 1729 1173 488B45E8 		movq	-24(%rbp), %rax
 1730 1177 89CE     		movl	%ecx, %esi
 1731 1179 4889C7   		movq	%rax, %rdi
 1732 117c E8000000 		call	bufAppendByte@PLT
 1732      00
 1733 1181 8945FC   		movl	%eax, -4(%rbp)
 383:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1734              		.loc 1 383 0
 1735 1184 837DFC00 		cmpl	$0, -4(%rbp)
 1736 1188 741C     		je	.L99
 1737              		.loc 1 383 0 is_stmt 0 discriminator 1
 1738 118a 488B45D0 		movq	-48(%rbp), %rax
 1739 118e 488D3500 		leaq	.LC8(%rip), %rsi
 1739      000000
 1740 1195 4889C7   		movq	%rax, %rdi
 1741 1198 E8000000 		call	errPrefix@PLT
 1741      00
 1742 119d C745F801 		movl	$1, -8(%rbp)
 1742      000000
 1743 11a4 EB0E     		jmp	.L100
 1744              	.L99:
 381:svf2csvf.c    **** 	while ( count-- ) {
 1745              		.loc 1 381 0 is_stmt 1
 1746 11a6 8B45DC   		movl	-36(%rbp), %eax
 1747 11a9 8D50FF   		leal	-1(%rax), %edx
 1748 11ac 8955DC   		movl	%edx, -36(%rbp)
 1749 11af 85C0     		testl	%eax, %eax
 1750 11b1 75AA     		jne	.L101
 384:svf2csvf.c    **** 	}
 385:svf2csvf.c    **** cleanup:
 1751              		.loc 1 385 0
 1752 11b3 90       		nop
 1753              	.L100:
 386:svf2csvf.c    **** 	return retVal;
 1754              		.loc 1 386 0
 1755 11b4 8B45F8   		movl	-8(%rbp), %eax
 387:svf2csvf.c    **** }
 1756              		.loc 1 387 0
 1757 11b7 C9       		leave
 1758              		.cfi_def_cfa 7, 8
 1759 11b8 C3       		ret
 1760              		.cfi_endproc
 1761              	.LFE17:
 1763              		.section	.rodata
 1764              	.LC9:
 1765 00ac 52554E54 		.string	"RUNTEST"
 1765      45535400 
 1766              	.LC10:
 1767 00b4 49444C45 		.string	"IDLE"
 1767      00
 1768              	.LC11:
 1769 00b9 54434B00 		.string	"TCK"
 1770              	.LC12:
 1771 00bd 53454300 		.string	"SEC"
 1772 00c1 00000000 		.align 8
 1772      000000
 1773              	.LC14:
 1774 00c8 70617273 		.string	"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|
 1774      654C696E 
 1774      6528293A 
 1774      2052554E 
 1774      54455354 
 1775              	.LC15:
 1776 0136 454E4453 		.string	"ENDSTATE IDLE"
 1776      54415445 
 1776      2049444C 
 1776      4500
 1777              	.LC16:
 1778 0144 70617273 		.string	"parseLine()"
 1778      654C696E 
 1778      65282900 
 1779              	.LC17:
 1780 0150 54444900 		.string	"TDI"
 1781 0154 00000000 		.align 8
 1782              	.LC18:
 1783 0158 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... TDI (<tdi>)\""
 1783      654C696E 
 1783      6528293A 
 1783      20257352 
 1783      206D7573 
 1784              	.LC19:
 1785 0193 534D4153 		.string	"SMASK"
 1785      4B00
 1786 0199 00000000 		.align 8
 1786      000000
 1787              	.LC20:
 1788 01a0 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... SMASK (<smask>)\""
 1788      654C696E 
 1788      6528293A 
 1788      20257352 
 1788      206D7573 
 1789              	.LC21:
 1790 01df 54444F00 		.string	"TDO"
 1791 01e3 00000000 		.align 8
 1791      00
 1792              	.LC22:
 1793 01e8 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... TDO (<tdo>)\""
 1793      654C696E 
 1793      6528293A 
 1793      20257352 
 1793      206D7573 
 1794              	.LC23:
 1795 0223 4D41534B 		.string	"MASK"
 1795      00
 1796              		.align 8
 1797              	.LC24:
 1798 0228 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... MASK (<mask>)\""
 1798      654C696E 
 1798      6528293A 
 1798      20257352 
 1798      206D7573 
 1799 0265 000000   		.align 8
 1800              	.LC25:
 1801 0268 70617273 		.string	"parseLine(): Junk in [HTS][IR]R line at column %d"
 1801      654C696E 
 1801      6528293A 
 1801      204A756E 
 1801      6B20696E 
 1802 029a 00000000 		.align 8
 1802      0000
 1803              	.LC26:
 1804 02a0 70617273 		.string	"parseLine(): Unrecognised command \"%s\"\n"
 1804      654C696E 
 1804      6528293A 
 1804      20556E72 
 1804      65636F67 
 1805              		.text
 1806              		.globl	parseLine
 1808              	parseLine:
 1809              	.LFB18:
 388:svf2csvf.c    **** 
 389:svf2csvf.c    **** /**
 390:svf2csvf.c    ****  * Parse the supplied SVF line, calling processLine() for shift operations as necessary.
 391:svf2csvf.c    ****  */
 392:svf2csvf.c    **** FLStatus parseLine(
 393:svf2csvf.c    **** 	struct ParseContext *cxt, const struct Buffer *lineBuf, struct Buffer *csvfBuf,
 394:svf2csvf.c    **** 	uint32 *maxBufSize, const char **error)
 395:svf2csvf.c    **** {
 1810              		.loc 1 395 0
 1811              		.cfi_startproc
 1812 11b9 55       		pushq	%rbp
 1813              		.cfi_def_cfa_offset 16
 1814              		.cfi_offset 6, -16
 1815 11ba 4889E5   		movq	%rsp, %rbp
 1816              		.cfi_def_cfa_register 6
 1817 11bd 4881EC30 		subq	$304, %rsp
 1817      010000
 1818 11c4 4889BDF8 		movq	%rdi, -264(%rbp)
 1818      FEFFFF
 1819 11cb 4889B5F0 		movq	%rsi, -272(%rbp)
 1819      FEFFFF
 1820 11d2 488995E8 		movq	%rdx, -280(%rbp)
 1820      FEFFFF
 1821 11d9 48898DE0 		movq	%rcx, -288(%rbp)
 1821      FEFFFF
 1822 11e0 4C8985D8 		movq	%r8, -296(%rbp)
 1822      FEFFFF
 1823              		.loc 1 395 0
 1824 11e7 64488B04 		movq	%fs:40, %rax
 1824      25280000 
 1824      00
 1825 11f0 488945F8 		movq	%rax, -8(%rbp)
 1826 11f4 31C0     		xorl	%eax, %eax
 396:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1827              		.loc 1 396 0
 1828 11f6 C78504FF 		movl	$0, -252(%rbp)
 1828      FFFF0000 
 1828      0000
 397:svf2csvf.c    **** 	BufferStatus bStatus;
 398:svf2csvf.c    **** 	char *const line = (char *)lineBuf->data;
 1829              		.loc 1 398 0
 1830 1200 488B85F0 		movq	-272(%rbp), %rax
 1830      FEFFFF
 1831 1207 488B00   		movq	(%rax), %rax
 1832 120a 48898558 		movq	%rax, -168(%rbp)
 1832      FFFFFF
 399:svf2csvf.c    **** 	char *const lineEnd = (char *)lineBuf->data + lineBuf->length - 1;  // Space for NUL-terminator
 1833              		.loc 1 399 0
 1834 1211 488B85F0 		movq	-272(%rbp), %rax
 1834      FEFFFF
 1835 1218 488B10   		movq	(%rax), %rdx
 1836 121b 488B85F0 		movq	-272(%rbp), %rax
 1836      FEFFFF
 1837 1222 488B4008 		movq	8(%rax), %rax
 1838 1226 4883E801 		subq	$1, %rax
 1839 122a 4801D0   		addq	%rdx, %rax
 1840 122d 48898560 		movq	%rax, -160(%rbp)
 1840      FFFFFF
 400:svf2csvf.c    **** 	struct Buffer tmpHead = {0,};
 1841              		.loc 1 400 0
 1842 1234 48C78570 		movq	$0, -144(%rbp)
 1842      FFFFFF00 
 1842      000000
 1843 123f 48C78578 		movq	$0, -136(%rbp)
 1843      FFFFFF00 
 1843      000000
 1844 124a 48C74580 		movq	$0, -128(%rbp)
 1844      00000000 
 1845 1252 48C74588 		movq	$0, -120(%rbp)
 1845      00000000 
 401:svf2csvf.c    **** 	struct Buffer tmpBody1 = {0,};
 1846              		.loc 1 401 0
 1847 125a 48C74590 		movq	$0, -112(%rbp)
 1847      00000000 
 1848 1262 48C74598 		movq	$0, -104(%rbp)
 1848      00000000 
 1849 126a 48C745A0 		movq	$0, -96(%rbp)
 1849      00000000 
 1850 1272 48C745A8 		movq	$0, -88(%rbp)
 1850      00000000 
 402:svf2csvf.c    **** 	struct Buffer tmpBody2 = {0,};
 1851              		.loc 1 402 0
 1852 127a 48C745B0 		movq	$0, -80(%rbp)
 1852      00000000 
 1853 1282 48C745B8 		movq	$0, -72(%rbp)
 1853      00000000 
 1854 128a 48C745C0 		movq	$0, -64(%rbp)
 1854      00000000 
 1855 1292 48C745C8 		movq	$0, -56(%rbp)
 1855      00000000 
 403:svf2csvf.c    **** 	struct Buffer tmpTail = {0,};
 1856              		.loc 1 403 0
 1857 129a 48C745D0 		movq	$0, -48(%rbp)
 1857      00000000 
 1858 12a2 48C745D8 		movq	$0, -40(%rbp)
 1858      00000000 
 1859 12aa 48C745E0 		movq	$0, -32(%rbp)
 1859      00000000 
 1860 12b2 48C745E8 		movq	$0, -24(%rbp)
 1860      00000000 
 404:svf2csvf.c    **** 	if ( !strncmp(line, "RUNTEST", 7) ) {
 1861              		.loc 1 404 0
 1862 12ba 488B8558 		movq	-168(%rbp), %rax
 1862      FFFFFF
 1863 12c1 BA070000 		movl	$7, %edx
 1863      00
 1864 12c6 488D3500 		leaq	.LC9(%rip), %rsi
 1864      000000
 1865 12cd 4889C7   		movq	%rax, %rdi
 1866 12d0 E8000000 		call	strncmp@PLT
 1866      00
 1867 12d5 85C0     		testl	%eax, %eax
 1868 12d7 0F855504 		jne	.L104
 1868      0000
 1869              	.LBB3:
 405:svf2csvf.c    **** 		// RUNTEST line is of the form "RUNTEST [IDLE] <count> TCK [ENDSTATE IDLE]"
 406:svf2csvf.c    **** 		const char *p = line + 7;
 1870              		.loc 1 406 0
 1871 12dd 488B8558 		movq	-168(%rbp), %rax
 1871      FFFFFF
 1872 12e4 4883C007 		addq	$7, %rax
 1873 12e8 48898520 		movq	%rax, -224(%rbp)
 1873      FFFFFF
 407:svf2csvf.c    **** 		char *end;
 408:svf2csvf.c    **** 		double count1, count2;
 409:svf2csvf.c    **** 		CHOMP();
 1874              		.loc 1 409 0
 1875 12ef EB08     		jmp	.L105
 1876              	.L106:
 1877              		.loc 1 409 0 is_stmt 0 discriminator 4
 1878 12f1 48838520 		addq	$1, -224(%rbp)
 1878      FFFFFF01 
 1879              	.L105:
 1880              		.loc 1 409 0 discriminator 1
 1881 12f9 488B8520 		movq	-224(%rbp), %rax
 1881      FFFFFF
 1882 1300 0FB600   		movzbl	(%rax), %eax
 1883 1303 3C20     		cmpb	$32, %al
 1884 1305 74EA     		je	.L106
 1885              		.loc 1 409 0 discriminator 3
 1886 1307 488B8520 		movq	-224(%rbp), %rax
 1886      FFFFFF
 1887 130e 0FB600   		movzbl	(%rax), %eax
 1888 1311 3C09     		cmpb	$9, %al
 1889 1313 74DC     		je	.L106
 410:svf2csvf.c    **** 		if ( !strncmp(p, "IDLE", 4) ) {
 1890              		.loc 1 410 0 is_stmt 1
 1891 1315 488B8520 		movq	-224(%rbp), %rax
 1891      FFFFFF
 1892 131c BA040000 		movl	$4, %edx
 1892      00
 1893 1321 488D3500 		leaq	.LC10(%rip), %rsi
 1893      000000
 1894 1328 4889C7   		movq	%rax, %rdi
 1895 132b E8000000 		call	strncmp@PLT
 1895      00
 1896 1330 85C0     		testl	%eax, %eax
 1897 1332 752E     		jne	.L107
 411:svf2csvf.c    **** 			p += 4;
 1898              		.loc 1 411 0
 1899 1334 48838520 		addq	$4, -224(%rbp)
 1899      FFFFFF04 
 412:svf2csvf.c    **** 			CHOMP();
 1900              		.loc 1 412 0
 1901 133c EB08     		jmp	.L108
 1902              	.L109:
 1903              		.loc 1 412 0 is_stmt 0 discriminator 4
 1904 133e 48838520 		addq	$1, -224(%rbp)
 1904      FFFFFF01 
 1905              	.L108:
 1906              		.loc 1 412 0 discriminator 1
 1907 1346 488B8520 		movq	-224(%rbp), %rax
 1907      FFFFFF
 1908 134d 0FB600   		movzbl	(%rax), %eax
 1909 1350 3C20     		cmpb	$32, %al
 1910 1352 74EA     		je	.L109
 1911              		.loc 1 412 0 discriminator 3
 1912 1354 488B8520 		movq	-224(%rbp), %rax
 1912      FFFFFF
 1913 135b 0FB600   		movzbl	(%rax), %eax
 1914 135e 3C09     		cmpb	$9, %al
 1915 1360 74DC     		je	.L109
 1916              	.L107:
 413:svf2csvf.c    **** 		}
 414:svf2csvf.c    **** 		count1 = strtod(p, &end);
 1917              		.loc 1 414 0 is_stmt 1
 1918 1362 488D9518 		leaq	-232(%rbp), %rdx
 1918      FFFFFF
 1919 1369 488B8520 		movq	-224(%rbp), %rax
 1919      FFFFFF
 1920 1370 4889D6   		movq	%rdx, %rsi
 1921 1373 4889C7   		movq	%rax, %rdi
 1922 1376 E8000000 		call	strtod@PLT
 1922      00
 1923 137b 66480F7E 		movq	%xmm0, %rax
 1923      C0
 1924 1380 48898528 		movq	%rax, -216(%rbp)
 1924      FFFFFF
 415:svf2csvf.c    **** 		p = end;
 1925              		.loc 1 415 0
 1926 1387 488B8518 		movq	-232(%rbp), %rax
 1926      FFFFFF
 1927 138e 48898520 		movq	%rax, -224(%rbp)
 1927      FFFFFF
 416:svf2csvf.c    **** 		CHOMP();
 1928              		.loc 1 416 0
 1929 1395 EB08     		jmp	.L110
 1930              	.L111:
 1931              		.loc 1 416 0 is_stmt 0 discriminator 4
 1932 1397 48838520 		addq	$1, -224(%rbp)
 1932      FFFFFF01 
 1933              	.L110:
 1934              		.loc 1 416 0 discriminator 1
 1935 139f 488B8520 		movq	-224(%rbp), %rax
 1935      FFFFFF
 1936 13a6 0FB600   		movzbl	(%rax), %eax
 1937 13a9 3C20     		cmpb	$32, %al
 1938 13ab 74EA     		je	.L111
 1939              		.loc 1 416 0 discriminator 3
 1940 13ad 488B8520 		movq	-224(%rbp), %rax
 1940      FFFFFF
 1941 13b4 0FB600   		movzbl	(%rax), %eax
 1942 13b7 3C09     		cmpb	$9, %al
 1943 13b9 74DC     		je	.L111
 417:svf2csvf.c    **** 		if ( !strncmp(p, "TCK", 3) ) {
 1944              		.loc 1 417 0 is_stmt 1
 1945 13bb 488B8520 		movq	-224(%rbp), %rax
 1945      FFFFFF
 1946 13c2 BA030000 		movl	$3, %edx
 1946      00
 1947 13c7 488D3500 		leaq	.LC11(%rip), %rsi
 1947      000000
 1948 13ce 4889C7   		movq	%rax, %rdi
 1949 13d1 E8000000 		call	strncmp@PLT
 1949      00
 1950 13d6 85C0     		testl	%eax, %eax
 1951 13d8 7533     		jne	.L112
 418:svf2csvf.c    **** 			p += 3;
 1952              		.loc 1 418 0
 1953 13da 48838520 		addq	$3, -224(%rbp)
 1953      FFFFFF03 
 419:svf2csvf.c    **** 			CHOMP();
 1954              		.loc 1 419 0
 1955 13e2 EB08     		jmp	.L113
 1956              	.L114:
 1957              		.loc 1 419 0 is_stmt 0 discriminator 4
 1958 13e4 48838520 		addq	$1, -224(%rbp)
 1958      FFFFFF01 
 1959              	.L113:
 1960              		.loc 1 419 0 discriminator 1
 1961 13ec 488B8520 		movq	-224(%rbp), %rax
 1961      FFFFFF
 1962 13f3 0FB600   		movzbl	(%rax), %eax
 1963 13f6 3C20     		cmpb	$32, %al
 1964 13f8 74EA     		je	.L114
 1965              		.loc 1 419 0 discriminator 3
 1966 13fa 488B8520 		movq	-224(%rbp), %rax
 1966      FFFFFF
 1967 1401 0FB600   		movzbl	(%rax), %eax
 1968 1404 3C09     		cmpb	$9, %al
 1969 1406 74DC     		je	.L114
 1970 1408 E9900000 		jmp	.L115
 1970      00
 1971              	.L112:
 420:svf2csvf.c    **** 		} else if ( !strncmp(p, "SEC", 3) ) {
 1972              		.loc 1 420 0 is_stmt 1
 1973 140d 488B8520 		movq	-224(%rbp), %rax
 1973      FFFFFF
 1974 1414 BA030000 		movl	$3, %edx
 1974      00
 1975 1419 488D3500 		leaq	.LC12(%rip), %rsi
 1975      000000
 1976 1420 4889C7   		movq	%rax, %rdi
 1977 1423 E8000000 		call	strncmp@PLT
 1977      00
 1978 1428 85C0     		testl	%eax, %eax
 1979 142a 754C     		jne	.L116
 421:svf2csvf.c    **** 			count1 *= 1000000.0;
 1980              		.loc 1 421 0
 1981 142c F20F108D 		movsd	-216(%rbp), %xmm1
 1981      28FFFFFF 
 1982 1434 F20F1005 		movsd	.LC13(%rip), %xmm0
 1982      00000000 
 1983 143c F20F59C1 		mulsd	%xmm1, %xmm0
 1984 1440 F20F1185 		movsd	%xmm0, -216(%rbp)
 1984      28FFFFFF 
 422:svf2csvf.c    **** 			p += 3;
 1985              		.loc 1 422 0
 1986 1448 48838520 		addq	$3, -224(%rbp)
 1986      FFFFFF03 
 423:svf2csvf.c    **** 			CHOMP();
 1987              		.loc 1 423 0
 1988 1450 EB08     		jmp	.L117
 1989              	.L118:
 1990              		.loc 1 423 0 is_stmt 0 discriminator 4
 1991 1452 48838520 		addq	$1, -224(%rbp)
 1991      FFFFFF01 
 1992              	.L117:
 1993              		.loc 1 423 0 discriminator 1
 1994 145a 488B8520 		movq	-224(%rbp), %rax
 1994      FFFFFF
 1995 1461 0FB600   		movzbl	(%rax), %eax
 1996 1464 3C20     		cmpb	$32, %al
 1997 1466 74EA     		je	.L118
 1998              		.loc 1 423 0 discriminator 3
 1999 1468 488B8520 		movq	-224(%rbp), %rax
 1999      FFFFFF
 2000 146f 0FB600   		movzbl	(%rax), %eax
 2001 1472 3C09     		cmpb	$9, %al
 2002 1474 74DC     		je	.L118
 2003 1476 EB25     		jmp	.L115
 2004              	.L116:
 424:svf2csvf.c    **** 		} else {
 425:svf2csvf.c    **** 			CHECK_STATUS(
 2005              		.loc 1 425 0 is_stmt 1 discriminator 1
 2006 1478 488B85D8 		movq	-296(%rbp), %rax
 2006      FEFFFF
 2007 147f 488D3500 		leaq	.LC14(%rip), %rsi
 2007      000000
 2008 1486 4889C7   		movq	%rax, %rdi
 2009 1489 E8000000 		call	errPrefix@PLT
 2009      00
 2010 148e C78504FF 		movl	$10, -252(%rbp)
 2010      FFFF0A00 
 2010      0000
 2011 1498 E91F1900 		jmp	.L136
 2011      00
 2012              	.L115:
 426:svf2csvf.c    **** 				true, FL_SVF_PARSE_ERR, cleanup,
 427:svf2csvf.c    **** 				"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|SEC] 
 428:svf2csvf.c    **** 		}
 429:svf2csvf.c    **** 		count2 = strtod(p, &end);
 2013              		.loc 1 429 0
 2014 149d 488D9518 		leaq	-232(%rbp), %rdx
 2014      FFFFFF
 2015 14a4 488B8520 		movq	-224(%rbp), %rax
 2015      FFFFFF
 2016 14ab 4889D6   		movq	%rdx, %rsi
 2017 14ae 4889C7   		movq	%rax, %rdi
 2018 14b1 E8000000 		call	strtod@PLT
 2018      00
 2019 14b6 66480F7E 		movq	%xmm0, %rax
 2019      C0
 2020 14bb 48898530 		movq	%rax, -208(%rbp)
 2020      FFFFFF
 430:svf2csvf.c    **** 		if ( end != p ) {
 2021              		.loc 1 430 0
 2022 14c2 488B8518 		movq	-232(%rbp), %rax
 2022      FFFFFF
 2023 14c9 48398520 		cmpq	%rax, -224(%rbp)
 2023      FFFFFF
 2024 14d0 0F84EC00 		je	.L120
 2024      0000
 431:svf2csvf.c    **** 			p = end;
 2025              		.loc 1 431 0
 2026 14d6 488B8518 		movq	-232(%rbp), %rax
 2026      FFFFFF
 2027 14dd 48898520 		movq	%rax, -224(%rbp)
 2027      FFFFFF
 432:svf2csvf.c    **** 			CHOMP();
 2028              		.loc 1 432 0
 2029 14e4 EB08     		jmp	.L121
 2030              	.L122:
 2031              		.loc 1 432 0 is_stmt 0 discriminator 4
 2032 14e6 48838520 		addq	$1, -224(%rbp)
 2032      FFFFFF01 
 2033              	.L121:
 2034              		.loc 1 432 0 discriminator 1
 2035 14ee 488B8520 		movq	-224(%rbp), %rax
 2035      FFFFFF
 2036 14f5 0FB600   		movzbl	(%rax), %eax
 2037 14f8 3C20     		cmpb	$32, %al
 2038 14fa 74EA     		je	.L122
 2039              		.loc 1 432 0 discriminator 3
 2040 14fc 488B8520 		movq	-224(%rbp), %rax
 2040      FFFFFF
 2041 1503 0FB600   		movzbl	(%rax), %eax
 2042 1506 3C09     		cmpb	$9, %al
 2043 1508 74DC     		je	.L122
 433:svf2csvf.c    **** 			if ( !strncmp(p, "TCK", 3) ) {
 2044              		.loc 1 433 0 is_stmt 1
 2045 150a 488B8520 		movq	-224(%rbp), %rax
 2045      FFFFFF
 2046 1511 BA030000 		movl	$3, %edx
 2046      00
 2047 1516 488D3500 		leaq	.LC11(%rip), %rsi
 2047      000000
 2048 151d 4889C7   		movq	%rax, %rdi
 2049 1520 E8000000 		call	strncmp@PLT
 2049      00
 2050 1525 85C0     		testl	%eax, %eax
 2051 1527 7530     		jne	.L123
 434:svf2csvf.c    **** 				p += 3;
 2052              		.loc 1 434 0
 2053 1529 48838520 		addq	$3, -224(%rbp)
 2053      FFFFFF03 
 435:svf2csvf.c    **** 				CHOMP();
 2054              		.loc 1 435 0
 2055 1531 EB08     		jmp	.L124
 2056              	.L125:
 2057              		.loc 1 435 0 is_stmt 0 discriminator 4
 2058 1533 48838520 		addq	$1, -224(%rbp)
 2058      FFFFFF01 
 2059              	.L124:
 2060              		.loc 1 435 0 discriminator 1
 2061 153b 488B8520 		movq	-224(%rbp), %rax
 2061      FFFFFF
 2062 1542 0FB600   		movzbl	(%rax), %eax
 2063 1545 3C20     		cmpb	$32, %al
 2064 1547 74EA     		je	.L125
 2065              		.loc 1 435 0 discriminator 3
 2066 1549 488B8520 		movq	-224(%rbp), %rax
 2066      FFFFFF
 2067 1550 0FB600   		movzbl	(%rax), %eax
 2068 1553 3C09     		cmpb	$9, %al
 2069 1555 74DC     		je	.L125
 2070 1557 EB69     		jmp	.L120
 2071              	.L123:
 436:svf2csvf.c    **** 			} else if ( !strncmp(p, "SEC", 3) ) {
 2072              		.loc 1 436 0 is_stmt 1
 2073 1559 488B8520 		movq	-224(%rbp), %rax
 2073      FFFFFF
 2074 1560 BA030000 		movl	$3, %edx
 2074      00
 2075 1565 488D3500 		leaq	.LC12(%rip), %rsi
 2075      000000
 2076 156c 4889C7   		movq	%rax, %rdi
 2077 156f E8000000 		call	strncmp@PLT
 2077      00
 2078 1574 85C0     		testl	%eax, %eax
 2079 1576 754A     		jne	.L120
 437:svf2csvf.c    **** 				count2 *= 1000000.0;
 2080              		.loc 1 437 0
 2081 1578 F20F108D 		movsd	-208(%rbp), %xmm1
 2081      30FFFFFF 
 2082 1580 F20F1005 		movsd	.LC13(%rip), %xmm0
 2082      00000000 
 2083 1588 F20F59C1 		mulsd	%xmm1, %xmm0
 2084 158c F20F1185 		movsd	%xmm0, -208(%rbp)
 2084      30FFFFFF 
 438:svf2csvf.c    **** 				p += 3;
 2085              		.loc 1 438 0
 2086 1594 48838520 		addq	$3, -224(%rbp)
 2086      FFFFFF03 
 439:svf2csvf.c    **** 				CHOMP();
 2087              		.loc 1 439 0
 2088 159c EB08     		jmp	.L126
 2089              	.L127:
 2090              		.loc 1 439 0 is_stmt 0 discriminator 4
 2091 159e 48838520 		addq	$1, -224(%rbp)
 2091      FFFFFF01 
 2092              	.L126:
 2093              		.loc 1 439 0 discriminator 1
 2094 15a6 488B8520 		movq	-224(%rbp), %rax
 2094      FFFFFF
 2095 15ad 0FB600   		movzbl	(%rax), %eax
 2096 15b0 3C20     		cmpb	$32, %al
 2097 15b2 74EA     		je	.L127
 2098              		.loc 1 439 0 discriminator 3
 2099 15b4 488B8520 		movq	-224(%rbp), %rax
 2099      FFFFFF
 2100 15bb 0FB600   		movzbl	(%rax), %eax
 2101 15be 3C09     		cmpb	$9, %al
 2102 15c0 74DC     		je	.L127
 2103              	.L120:
 440:svf2csvf.c    **** 			}
 441:svf2csvf.c    **** 		}
 442:svf2csvf.c    **** 		if ( !strncmp(p, "ENDSTATE IDLE", 13) ) {
 2104              		.loc 1 442 0 is_stmt 1
 2105 15c2 488B8520 		movq	-224(%rbp), %rax
 2105      FFFFFF
 2106 15c9 BA0D0000 		movl	$13, %edx
 2106      00
 2107 15ce 488D3500 		leaq	.LC15(%rip), %rsi
 2107      000000
 2108 15d5 4889C7   		movq	%rax, %rdi
 2109 15d8 E8000000 		call	strncmp@PLT
 2109      00
 2110 15dd 85C0     		testl	%eax, %eax
 2111 15df 7512     		jne	.L129
 443:svf2csvf.c    **** 			p += 13;
 2112              		.loc 1 443 0
 2113 15e1 48838520 		addq	$13, -224(%rbp)
 2113      FFFFFF0D 
 444:svf2csvf.c    **** 		}
 445:svf2csvf.c    **** 		CHOMP();
 2114              		.loc 1 445 0
 2115 15e9 EB08     		jmp	.L129
 2116              	.L130:
 2117              		.loc 1 445 0 is_stmt 0 discriminator 4
 2118 15eb 48838520 		addq	$1, -224(%rbp)
 2118      FFFFFF01 
 2119              	.L129:
 2120              		.loc 1 445 0 discriminator 1
 2121 15f3 488B8520 		movq	-224(%rbp), %rax
 2121      FFFFFF
 2122 15fa 0FB600   		movzbl	(%rax), %eax
 2123 15fd 3C20     		cmpb	$32, %al
 2124 15ff 74EA     		je	.L130
 2125              		.loc 1 445 0 discriminator 3
 2126 1601 488B8520 		movq	-224(%rbp), %rax
 2126      FFFFFF
 2127 1608 0FB600   		movzbl	(%rax), %eax
 2128 160b 3C09     		cmpb	$9, %al
 2129 160d 74DC     		je	.L130
 446:svf2csvf.c    **** 		if ( count2 > count1 ) {
 2130              		.loc 1 446 0 is_stmt 1
 2131 160f F20F1085 		movsd	-208(%rbp), %xmm0
 2131      30FFFFFF 
 2132 1617 660F2E85 		ucomisd	-216(%rbp), %xmm0
 2132      28FFFFFF 
 2133 161f 7610     		jbe	.L131
 447:svf2csvf.c    **** 			count1 = count2;
 2134              		.loc 1 447 0
 2135 1621 F20F1085 		movsd	-208(%rbp), %xmm0
 2135      30FFFFFF 
 2136 1629 F20F1185 		movsd	%xmm0, -216(%rbp)
 2136      28FFFFFF 
 2137              	.L131:
 448:svf2csvf.c    **** 		}
 449:svf2csvf.c    **** 		CHECK_STATUS(
 2138              		.loc 1 449 0
 2139 1631 488B8520 		movq	-224(%rbp), %rax
 2139      FFFFFF
 2140 1638 483B8560 		cmpq	-160(%rbp), %rax
 2140      FFFFFF
 2141 163f 7425     		je	.L133
 2142              		.loc 1 449 0 is_stmt 0 discriminator 1
 2143 1641 488B85D8 		movq	-296(%rbp), %rax
 2143      FEFFFF
 2144 1648 488D3500 		leaq	.LC14(%rip), %rsi
 2144      000000
 2145 164f 4889C7   		movq	%rax, %rdi
 2146 1652 E8000000 		call	errPrefix@PLT
 2146      00
 2147 1657 C78504FF 		movl	$10, -252(%rbp)
 2147      FFFF0A00 
 2147      0000
 2148 1661 E9561700 		jmp	.L136
 2148      00
 2149              	.L133:
 450:svf2csvf.c    **** 			p != lineEnd, FL_SVF_PARSE_ERR, cleanup,
 451:svf2csvf.c    **** 			"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|SEC] [
 452:svf2csvf.c    **** 		cxt->numCommands++;
 2150              		.loc 1 452 0 is_stmt 1
 2151 1666 488B85F8 		movq	-264(%rbp), %rax
 2151      FEFFFF
 2152 166d 8B809C02 		movl	668(%rax), %eax
 2152      0000
 2153 1673 8D5001   		leal	1(%rax), %edx
 2154 1676 488B85F8 		movq	-264(%rbp), %rax
 2154      FEFFFF
 2155 167d 89909C02 		movl	%edx, 668(%rax)
 2155      0000
 453:svf2csvf.c    **** 		bStatus = bufAppendByte(csvfBuf, XRUNTEST, error);
 2156              		.loc 1 453 0
 2157 1683 488B95D8 		movq	-296(%rbp), %rdx
 2157      FEFFFF
 2158 168a 488B85E8 		movq	-280(%rbp), %rax
 2158      FEFFFF
 2159 1691 BE040000 		movl	$4, %esi
 2159      00
 2160 1696 4889C7   		movq	%rax, %rdi
 2161 1699 E8000000 		call	bufAppendByte@PLT
 2161      00
 2162 169e 898514FF 		movl	%eax, -236(%rbp)
 2162      FFFF
 454:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2163              		.loc 1 454 0
 2164 16a4 83BD14FF 		cmpl	$0, -236(%rbp)
 2164      FFFF00
 2165 16ab 7425     		je	.L134
 2166              		.loc 1 454 0 is_stmt 0 discriminator 1
 2167 16ad 488B85D8 		movq	-296(%rbp), %rax
 2167      FEFFFF
 2168 16b4 488D3500 		leaq	.LC16(%rip), %rsi
 2168      000000
 2169 16bb 4889C7   		movq	%rax, %rdi
 2170 16be E8000000 		call	errPrefix@PLT
 2170      00
 2171 16c3 C78504FF 		movl	$1, -252(%rbp)
 2171      FFFF0100 
 2171      0000
 2172 16cd E9EA1600 		jmp	.L136
 2172      00
 2173              	.L134:
 455:svf2csvf.c    **** 		bStatus = bufAppendLongBE(csvfBuf, (uint32)count1, error);
 2174              		.loc 1 455 0 is_stmt 1
 2175 16d2 F20F1085 		movsd	-216(%rbp), %xmm0
 2175      28FFFFFF 
 2176 16da F2480F2C 		cvttsd2siq	%xmm0, %rax
 2176      C0
 2177 16df 89C1     		movl	%eax, %ecx
 2178 16e1 488B95D8 		movq	-296(%rbp), %rdx
 2178      FEFFFF
 2179 16e8 488B85E8 		movq	-280(%rbp), %rax
 2179      FEFFFF
 2180 16ef 89CE     		movl	%ecx, %esi
 2181 16f1 4889C7   		movq	%rax, %rdi
 2182 16f4 E8000000 		call	bufAppendLongBE@PLT
 2182      00
 2183 16f9 898514FF 		movl	%eax, -236(%rbp)
 2183      FFFF
 456:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2184              		.loc 1 456 0
 2185 16ff 83BD14FF 		cmpl	$0, -236(%rbp)
 2185      FFFF00
 2186 1706 0F84B016 		je	.L136
 2186      0000
 2187              		.loc 1 456 0 is_stmt 0 discriminator 1
 2188 170c 488B85D8 		movq	-296(%rbp), %rax
 2188      FEFFFF
 2189 1713 488D3500 		leaq	.LC16(%rip), %rsi
 2189      000000
 2190 171a 4889C7   		movq	%rax, %rdi
 2191 171d E8000000 		call	errPrefix@PLT
 2191      00
 2192 1722 C78504FF 		movl	$1, -252(%rbp)
 2192      FFFF0100 
 2192      0000
 2193 172c 90       		nop
 2194 172d E98A1600 		jmp	.L136
 2194      00
 2195              	.L104:
 2196              	.LBE3:
 457:svf2csvf.c    **** 	} else if (
 458:svf2csvf.c    **** 		(line[0] == 'H' || line[0] == 'S' || line[0] == 'T') &&
 2197              		.loc 1 458 0 is_stmt 1
 2198 1732 488B8558 		movq	-168(%rbp), %rax
 2198      FFFFFF
 2199 1739 0FB600   		movzbl	(%rax), %eax
 457:svf2csvf.c    **** 	} else if (
 2200              		.loc 1 457 0
 2201 173c 3C48     		cmpb	$72, %al
 2202 173e 7420     		je	.L137
 2203              		.loc 1 458 0
 2204 1740 488B8558 		movq	-168(%rbp), %rax
 2204      FFFFFF
 2205 1747 0FB600   		movzbl	(%rax), %eax
 2206 174a 3C53     		cmpb	$83, %al
 2207 174c 7412     		je	.L137
 2208              		.loc 1 458 0 is_stmt 0 discriminator 2
 2209 174e 488B8558 		movq	-168(%rbp), %rax
 2209      FFFFFF
 2210 1755 0FB600   		movzbl	(%rax), %eax
 2211 1758 3C54     		cmpb	$84, %al
 2212 175a 0F852F16 		jne	.L138
 2212      0000
 2213              	.L137:
 459:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2214              		.loc 1 459 0 is_stmt 1 discriminator 3
 2215 1760 488B8558 		movq	-168(%rbp), %rax
 2215      FFFFFF
 2216 1767 4883C001 		addq	$1, %rax
 2217 176b 0FB600   		movzbl	(%rax), %eax
 458:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2218              		.loc 1 458 0 discriminator 3
 2219 176e 3C49     		cmpb	$73, %al
 2220 1770 7416     		je	.L139
 2221              		.loc 1 459 0
 2222 1772 488B8558 		movq	-168(%rbp), %rax
 2222      FFFFFF
 2223 1779 4883C001 		addq	$1, %rax
 2224 177d 0FB600   		movzbl	(%rax), %eax
 2225 1780 3C44     		cmpb	$68, %al
 2226 1782 0F850716 		jne	.L138
 2226      0000
 2227              	.L139:
 460:svf2csvf.c    **** 		line[2] == 'R' && (line[3] == ' ' || line[3] == '\t')
 2228              		.loc 1 460 0 discriminator 1
 2229 1788 488B8558 		movq	-168(%rbp), %rax
 2229      FFFFFF
 2230 178f 4883C002 		addq	$2, %rax
 2231 1793 0FB600   		movzbl	(%rax), %eax
 459:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2232              		.loc 1 459 0 discriminator 1
 2233 1796 3C52     		cmpb	$82, %al
 2234 1798 0F85F115 		jne	.L138
 2234      0000
 2235              		.loc 1 460 0
 2236 179e 488B8558 		movq	-168(%rbp), %rax
 2236      FFFFFF
 2237 17a5 4883C003 		addq	$3, %rax
 2238 17a9 0FB600   		movzbl	(%rax), %eax
 2239 17ac 3C20     		cmpb	$32, %al
 2240 17ae 7416     		je	.L140
 2241              		.loc 1 460 0 is_stmt 0 discriminator 1
 2242 17b0 488B8558 		movq	-168(%rbp), %rax
 2242      FFFFFF
 2243 17b7 4883C003 		addq	$3, %rax
 2244 17bb 0FB600   		movzbl	(%rax), %eax
 2245 17be 3C09     		cmpb	$9, %al
 2246 17c0 0F85C915 		jne	.L138
 2246      0000
 2247              	.L140:
 2248              	.LBB4:
 461:svf2csvf.c    **** 	) {
 462:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 463:svf2csvf.c    **** 		char *p = line + 3;
 2249              		.loc 1 463 0 is_stmt 1
 2250 17c6 488B8558 		movq	-168(%rbp), %rax
 2250      FFFFFF
 2251 17cd 4883C003 		addq	$3, %rax
 2252 17d1 48898538 		movq	%rax, -200(%rbp)
 2252      FFFFFF
 464:svf2csvf.c    **** 		char *tmp;
 465:svf2csvf.c    **** 		const char *tdi = NULL, *tdo =  NULL, *mask = NULL, *smask = NULL;
 2253              		.loc 1 465 0
 2254 17d8 48C78540 		movq	$0, -192(%rbp)
 2254      FFFFFF00 
 2254      000000
 2255 17e3 48C78548 		movq	$0, -184(%rbp)
 2255      FFFFFF00 
 2255      000000
 2256 17ee 48C78550 		movq	$0, -176(%rbp)
 2256      FFFFFF00 
 2256      000000
 2257 17f9 48C78568 		movq	$0, -152(%rbp)
 2257      FFFFFF00 
 2257      000000
 466:svf2csvf.c    **** 		uint32 length;
 467:svf2csvf.c    **** 		const bool isDataReg = (line[1] == 'D');
 2258              		.loc 1 467 0
 2259 1804 488B8558 		movq	-168(%rbp), %rax
 2259      FFFFFF
 2260 180b 4883C001 		addq	$1, %rax
 2261 180f 0FB600   		movzbl	(%rax), %eax
 2262 1812 3C44     		cmpb	$68, %al
 2263 1814 0F94C0   		sete	%al
 2264 1817 888502FF 		movb	%al, -254(%rbp)
 2264      FFFF
 468:svf2csvf.c    **** 		ShiftOperation op;
 469:svf2csvf.c    **** 		line[2] = '\0';
 2265              		.loc 1 469 0
 2266 181d 488B8558 		movq	-168(%rbp), %rax
 2266      FFFFFF
 2267 1824 4883C002 		addq	$2, %rax
 2268 1828 C60000   		movb	$0, (%rax)
 470:svf2csvf.c    **** 		switch ( line[0] ) {
 2269              		.loc 1 470 0
 2270 182b 488B8558 		movq	-168(%rbp), %rax
 2270      FFFFFF
 2271 1832 0FB600   		movzbl	(%rax), %eax
 2272 1835 0FBEC0   		movsbl	%al, %eax
 2273 1838 83F848   		cmpl	$72, %eax
 2274 183b 7407     		je	.L142
 2275 183d 83F854   		cmpl	$84, %eax
 2276 1840 740E     		je	.L143
 2277 1842 EB18     		jmp	.L238
 2278              	.L142:
 471:svf2csvf.c    **** 		case 'H':
 472:svf2csvf.c    **** 			op = HEAD;
 2279              		.loc 1 472 0
 2280 1844 C78508FF 		movl	$72, -248(%rbp)
 2280      FFFF4800 
 2280      0000
 473:svf2csvf.c    **** 			break;
 2281              		.loc 1 473 0
 2282 184e EB17     		jmp	.L144
 2283              	.L143:
 474:svf2csvf.c    **** 		case 'T':
 475:svf2csvf.c    **** 			op = TAIL;
 2284              		.loc 1 475 0
 2285 1850 C78508FF 		movl	$84, -248(%rbp)
 2285      FFFF5400 
 2285      0000
 476:svf2csvf.c    **** 			break;
 2286              		.loc 1 476 0
 2287 185a EB0B     		jmp	.L144
 2288              	.L238:
 477:svf2csvf.c    **** 		default:
 478:svf2csvf.c    **** 			op = BODY;
 2289              		.loc 1 478 0
 2290 185c C78508FF 		movl	$83, -248(%rbp)
 2290      FFFF5300 
 2290      0000
 479:svf2csvf.c    **** 			break;
 2291              		.loc 1 479 0
 2292 1866 90       		nop
 2293              	.L144:
 480:svf2csvf.c    **** 		}
 481:svf2csvf.c    **** 		CHOMP();
 2294              		.loc 1 481 0
 2295 1867 EB08     		jmp	.L145
 2296              	.L146:
 2297              		.loc 1 481 0 is_stmt 0 discriminator 5
 2298 1869 48838538 		addq	$1, -200(%rbp)
 2298      FFFFFF01 
 2299              	.L145:
 2300              		.loc 1 481 0 discriminator 1
 2301 1871 488B8538 		movq	-200(%rbp), %rax
 2301      FFFFFF
 2302 1878 0FB600   		movzbl	(%rax), %eax
 2303 187b 3C20     		cmpb	$32, %al
 2304 187d 74EA     		je	.L146
 2305              		.loc 1 481 0 discriminator 4
 2306 187f 488B8538 		movq	-200(%rbp), %rax
 2306      FFFFFF
 2307 1886 0FB600   		movzbl	(%rax), %eax
 2308 1889 3C09     		cmpb	$9, %al
 2309 188b 74DC     		je	.L146
 482:svf2csvf.c    **** 		length = (uint32)strtoul(p, &tmp, 10);
 2310              		.loc 1 482 0 is_stmt 1
 2311 188d 488D8D18 		leaq	-232(%rbp), %rcx
 2311      FFFFFF
 2312 1894 488B8538 		movq	-200(%rbp), %rax
 2312      FFFFFF
 2313 189b BA0A0000 		movl	$10, %edx
 2313      00
 2314 18a0 4889CE   		movq	%rcx, %rsi
 2315 18a3 4889C7   		movq	%rax, %rdi
 2316 18a6 E8000000 		call	strtoul@PLT
 2316      00
 2317 18ab 89850CFF 		movl	%eax, -244(%rbp)
 2317      FFFF
 483:svf2csvf.c    **** 		p = tmp;
 2318              		.loc 1 483 0
 2319 18b1 488B8518 		movq	-232(%rbp), %rax
 2319      FFFFFF
 2320 18b8 48898538 		movq	%rax, -200(%rbp)
 2320      FFFFFF
 484:svf2csvf.c    **** 		CHOMP();
 2321              		.loc 1 484 0
 2322 18bf EB08     		jmp	.L147
 2323              	.L148:
 2324              		.loc 1 484 0 is_stmt 0 discriminator 4
 2325 18c1 48838538 		addq	$1, -200(%rbp)
 2325      FFFFFF01 
 2326              	.L147:
 2327              		.loc 1 484 0 discriminator 1
 2328 18c9 488B8538 		movq	-200(%rbp), %rax
 2328      FFFFFF
 2329 18d0 0FB600   		movzbl	(%rax), %eax
 2330 18d3 3C20     		cmpb	$32, %al
 2331 18d5 74EA     		je	.L148
 2332              		.loc 1 484 0 discriminator 3
 2333 18d7 488B8538 		movq	-200(%rbp), %rax
 2333      FFFFFF
 2334 18de 0FB600   		movzbl	(%rax), %eax
 2335 18e1 3C09     		cmpb	$9, %al
 2336 18e3 74DC     		je	.L148
 485:svf2csvf.c    **** 		while ( *p ) {
 2337              		.loc 1 485 0 is_stmt 1
 2338 18e5 E9180600 		jmp	.L149
 2338      00
 2339              	.L190:
 486:svf2csvf.c    **** 			if ( !strncmp(p, "TDI", 3) ) {
 2340              		.loc 1 486 0
 2341 18ea 488B8538 		movq	-200(%rbp), %rax
 2341      FFFFFF
 2342 18f1 BA030000 		movl	$3, %edx
 2342      00
 2343 18f6 488D3500 		leaq	.LC17(%rip), %rsi
 2343      000000
 2344 18fd 4889C7   		movq	%rax, %rdi
 2345 1900 E8000000 		call	strncmp@PLT
 2345      00
 2346 1905 85C0     		testl	%eax, %eax
 2347 1907 0F854D01 		jne	.L150
 2347      0000
 487:svf2csvf.c    **** 				p += 3;
 2348              		.loc 1 487 0
 2349 190d 48838538 		addq	$3, -200(%rbp)
 2349      FFFFFF03 
 488:svf2csvf.c    **** 				CHOMP();
 2350              		.loc 1 488 0
 2351 1915 EB08     		jmp	.L151
 2352              	.L152:
 2353              		.loc 1 488 0 is_stmt 0 discriminator 4
 2354 1917 48838538 		addq	$1, -200(%rbp)
 2354      FFFFFF01 
 2355              	.L151:
 2356              		.loc 1 488 0 discriminator 1
 2357 191f 488B8538 		movq	-200(%rbp), %rax
 2357      FFFFFF
 2358 1926 0FB600   		movzbl	(%rax), %eax
 2359 1929 3C20     		cmpb	$32, %al
 2360 192b 74EA     		je	.L152
 2361              		.loc 1 488 0 discriminator 3
 2362 192d 488B8538 		movq	-200(%rbp), %rax
 2362      FFFFFF
 2363 1934 0FB600   		movzbl	(%rax), %eax
 2364 1937 3C09     		cmpb	$9, %al
 2365 1939 74DC     		je	.L152
 489:svf2csvf.c    **** 				#define EXPECT_CHAR(x, y) \
 490:svf2csvf.c    **** 					CHECK_STATUS( \
 491:svf2csvf.c    **** 						*p != x, FL_SVF_PARSE_ERR, cleanup, \
 492:svf2csvf.c    **** 						"parseLine(): %sR must be of the form \"%sR ... " y "\"", line, line);
 493:svf2csvf.c    **** 				#define FIX_ODD(x) \
 494:svf2csvf.c    **** 					if ( strlen(x) & 1 ) { \
 495:svf2csvf.c    **** 						x--; \
 496:svf2csvf.c    **** 					}
 497:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDI (<tdi>)");
 2366              		.loc 1 497 0 is_stmt 1
 2367 193b 488B8538 		movq	-200(%rbp), %rax
 2367      FFFFFF
 2368 1942 0FB600   		movzbl	(%rax), %eax
 2369 1945 3C28     		cmpb	$40, %al
 2370 1947 7438     		je	.L153
 2371              		.loc 1 497 0 is_stmt 0 discriminator 1
 2372 1949 488B8D58 		movq	-168(%rbp), %rcx
 2372      FFFFFF
 2373 1950 488B9558 		movq	-168(%rbp), %rdx
 2373      FFFFFF
 2374 1957 488B85D8 		movq	-296(%rbp), %rax
 2374      FEFFFF
 2375 195e 488D3500 		leaq	.LC18(%rip), %rsi
 2375      000000
 2376 1965 4889C7   		movq	%rax, %rdi
 2377 1968 B8000000 		movl	$0, %eax
 2377      00
 2378 196d E8000000 		call	errRender@PLT
 2378      00
 2379 1972 C78504FF 		movl	$10, -252(%rbp)
 2379      FFFF0A00 
 2379      0000
 2380 197c E93B1400 		jmp	.L136
 2380      00
 2381              	.L153:
 498:svf2csvf.c    **** 				*p++ = '0';
 2382              		.loc 1 498 0 is_stmt 1
 2383 1981 488B8538 		movq	-200(%rbp), %rax
 2383      FFFFFF
 2384 1988 488D5001 		leaq	1(%rax), %rdx
 2385 198c 48899538 		movq	%rdx, -200(%rbp)
 2385      FFFFFF
 2386 1993 C60030   		movb	$48, (%rax)
 499:svf2csvf.c    **** 				tdi = p++;
 2387              		.loc 1 499 0
 2388 1996 488B8538 		movq	-200(%rbp), %rax
 2388      FFFFFF
 2389 199d 488D5001 		leaq	1(%rax), %rdx
 2390 19a1 48899538 		movq	%rdx, -200(%rbp)
 2390      FFFFFF
 2391 19a8 48898540 		movq	%rax, -192(%rbp)
 2391      FFFFFF
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2392              		.loc 1 500 0
 2393 19af EB08     		jmp	.L155
 2394              	.L157:
 501:svf2csvf.c    **** 					p++;
 2395              		.loc 1 501 0
 2396 19b1 48838538 		addq	$1, -200(%rbp)
 2396      FFFFFF01 
 2397              	.L155:
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2398              		.loc 1 500 0
 2399 19b9 488B8538 		movq	-200(%rbp), %rax
 2399      FFFFFF
 2400 19c0 483B8560 		cmpq	-160(%rbp), %rax
 2400      FFFFFF
 2401 19c7 730E     		jnb	.L156
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2402              		.loc 1 500 0 is_stmt 0 discriminator 1
 2403 19c9 488B8538 		movq	-200(%rbp), %rax
 2403      FFFFFF
 2404 19d0 0FB600   		movzbl	(%rax), %eax
 2405 19d3 3C29     		cmpb	$41, %al
 2406 19d5 75DA     		jne	.L157
 2407              	.L156:
 502:svf2csvf.c    **** 				}
 503:svf2csvf.c    **** 				EXPECT_CHAR(')', "TDI (<tdi>)");
 2408              		.loc 1 503 0 is_stmt 1
 2409 19d7 488B8538 		movq	-200(%rbp), %rax
 2409      FFFFFF
 2410 19de 0FB600   		movzbl	(%rax), %eax
 2411 19e1 3C29     		cmpb	$41, %al
 2412 19e3 7438     		je	.L158
 2413              		.loc 1 503 0 is_stmt 0 discriminator 1
 2414 19e5 488B8D58 		movq	-168(%rbp), %rcx
 2414      FFFFFF
 2415 19ec 488B9558 		movq	-168(%rbp), %rdx
 2415      FFFFFF
 2416 19f3 488B85D8 		movq	-296(%rbp), %rax
 2416      FEFFFF
 2417 19fa 488D3500 		leaq	.LC18(%rip), %rsi
 2417      000000
 2418 1a01 4889C7   		movq	%rax, %rdi
 2419 1a04 B8000000 		movl	$0, %eax
 2419      00
 2420 1a09 E8000000 		call	errRender@PLT
 2420      00
 2421 1a0e C78504FF 		movl	$10, -252(%rbp)
 2421      FFFF0A00 
 2421      0000
 2422 1a18 E99F1300 		jmp	.L136
 2422      00
 2423              	.L158:
 504:svf2csvf.c    **** 				*p++ = '\0';
 2424              		.loc 1 504 0 is_stmt 1
 2425 1a1d 488B8538 		movq	-200(%rbp), %rax
 2425      FFFFFF
 2426 1a24 488D5001 		leaq	1(%rax), %rdx
 2427 1a28 48899538 		movq	%rdx, -200(%rbp)
 2427      FFFFFF
 2428 1a2f C60000   		movb	$0, (%rax)
 505:svf2csvf.c    **** 				FIX_ODD(tdi);
 2429              		.loc 1 505 0
 2430 1a32 488B8540 		movq	-192(%rbp), %rax
 2430      FFFFFF
 2431 1a39 4889C7   		movq	%rax, %rdi
 2432 1a3c E8000000 		call	strlen@PLT
 2432      00
 2433 1a41 83E001   		andl	$1, %eax
 2434 1a44 4885C0   		testq	%rax, %rax
 2435 1a47 0F849904 		je	.L188
 2435      0000
 2436              		.loc 1 505 0 is_stmt 0 discriminator 1
 2437 1a4d 4883AD40 		subq	$1, -192(%rbp)
 2437      FFFFFF01 
 2438 1a55 E98C0400 		jmp	.L188
 2438      00
 2439              	.L150:
 506:svf2csvf.c    **** 			} else if ( !strncmp(p, "SMASK", 5) ) {
 2440              		.loc 1 506 0 is_stmt 1
 2441 1a5a 488B8538 		movq	-200(%rbp), %rax
 2441      FFFFFF
 2442 1a61 BA050000 		movl	$5, %edx
 2442      00
 2443 1a66 488D3500 		leaq	.LC19(%rip), %rsi
 2443      000000
 2444 1a6d 4889C7   		movq	%rax, %rdi
 2445 1a70 E8000000 		call	strncmp@PLT
 2445      00
 2446 1a75 85C0     		testl	%eax, %eax
 2447 1a77 0F854D01 		jne	.L161
 2447      0000
 507:svf2csvf.c    **** 				p += 5;
 2448              		.loc 1 507 0
 2449 1a7d 48838538 		addq	$5, -200(%rbp)
 2449      FFFFFF05 
 508:svf2csvf.c    **** 				CHOMP();
 2450              		.loc 1 508 0
 2451 1a85 EB08     		jmp	.L162
 2452              	.L163:
 2453              		.loc 1 508 0 is_stmt 0 discriminator 4
 2454 1a87 48838538 		addq	$1, -200(%rbp)
 2454      FFFFFF01 
 2455              	.L162:
 2456              		.loc 1 508 0 discriminator 1
 2457 1a8f 488B8538 		movq	-200(%rbp), %rax
 2457      FFFFFF
 2458 1a96 0FB600   		movzbl	(%rax), %eax
 2459 1a99 3C20     		cmpb	$32, %al
 2460 1a9b 74EA     		je	.L163
 2461              		.loc 1 508 0 discriminator 3
 2462 1a9d 488B8538 		movq	-200(%rbp), %rax
 2462      FFFFFF
 2463 1aa4 0FB600   		movzbl	(%rax), %eax
 2464 1aa7 3C09     		cmpb	$9, %al
 2465 1aa9 74DC     		je	.L163
 509:svf2csvf.c    **** 				EXPECT_CHAR('(', "SMASK (<smask>)");
 2466              		.loc 1 509 0 is_stmt 1
 2467 1aab 488B8538 		movq	-200(%rbp), %rax
 2467      FFFFFF
 2468 1ab2 0FB600   		movzbl	(%rax), %eax
 2469 1ab5 3C28     		cmpb	$40, %al
 2470 1ab7 7438     		je	.L164
 2471              		.loc 1 509 0 is_stmt 0 discriminator 1
 2472 1ab9 488B8D58 		movq	-168(%rbp), %rcx
 2472      FFFFFF
 2473 1ac0 488B9558 		movq	-168(%rbp), %rdx
 2473      FFFFFF
 2474 1ac7 488B85D8 		movq	-296(%rbp), %rax
 2474      FEFFFF
 2475 1ace 488D3500 		leaq	.LC20(%rip), %rsi
 2475      000000
 2476 1ad5 4889C7   		movq	%rax, %rdi
 2477 1ad8 B8000000 		movl	$0, %eax
 2477      00
 2478 1add E8000000 		call	errRender@PLT
 2478      00
 2479 1ae2 C78504FF 		movl	$10, -252(%rbp)
 2479      FFFF0A00 
 2479      0000
 2480 1aec E9CB1200 		jmp	.L136
 2480      00
 2481              	.L164:
 510:svf2csvf.c    **** 				*p++ = '0';
 2482              		.loc 1 510 0 is_stmt 1
 2483 1af1 488B8538 		movq	-200(%rbp), %rax
 2483      FFFFFF
 2484 1af8 488D5001 		leaq	1(%rax), %rdx
 2485 1afc 48899538 		movq	%rdx, -200(%rbp)
 2485      FFFFFF
 2486 1b03 C60030   		movb	$48, (%rax)
 511:svf2csvf.c    **** 				smask = p++;
 2487              		.loc 1 511 0
 2488 1b06 488B8538 		movq	-200(%rbp), %rax
 2488      FFFFFF
 2489 1b0d 488D5001 		leaq	1(%rax), %rdx
 2490 1b11 48899538 		movq	%rdx, -200(%rbp)
 2490      FFFFFF
 2491 1b18 48898568 		movq	%rax, -152(%rbp)
 2491      FFFFFF
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2492              		.loc 1 512 0
 2493 1b1f EB08     		jmp	.L165
 2494              	.L167:
 513:svf2csvf.c    **** 					p++;
 2495              		.loc 1 513 0
 2496 1b21 48838538 		addq	$1, -200(%rbp)
 2496      FFFFFF01 
 2497              	.L165:
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2498              		.loc 1 512 0
 2499 1b29 488B8538 		movq	-200(%rbp), %rax
 2499      FFFFFF
 2500 1b30 483B8560 		cmpq	-160(%rbp), %rax
 2500      FFFFFF
 2501 1b37 730E     		jnb	.L166
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2502              		.loc 1 512 0 is_stmt 0 discriminator 1
 2503 1b39 488B8538 		movq	-200(%rbp), %rax
 2503      FFFFFF
 2504 1b40 0FB600   		movzbl	(%rax), %eax
 2505 1b43 3C29     		cmpb	$41, %al
 2506 1b45 75DA     		jne	.L167
 2507              	.L166:
 514:svf2csvf.c    **** 				}
 515:svf2csvf.c    **** 				EXPECT_CHAR(')', "SMASK (<smask>)");
 2508              		.loc 1 515 0 is_stmt 1
 2509 1b47 488B8538 		movq	-200(%rbp), %rax
 2509      FFFFFF
 2510 1b4e 0FB600   		movzbl	(%rax), %eax
 2511 1b51 3C29     		cmpb	$41, %al
 2512 1b53 7438     		je	.L168
 2513              		.loc 1 515 0 is_stmt 0 discriminator 1
 2514 1b55 488B8D58 		movq	-168(%rbp), %rcx
 2514      FFFFFF
 2515 1b5c 488B9558 		movq	-168(%rbp), %rdx
 2515      FFFFFF
 2516 1b63 488B85D8 		movq	-296(%rbp), %rax
 2516      FEFFFF
 2517 1b6a 488D3500 		leaq	.LC20(%rip), %rsi
 2517      000000
 2518 1b71 4889C7   		movq	%rax, %rdi
 2519 1b74 B8000000 		movl	$0, %eax
 2519      00
 2520 1b79 E8000000 		call	errRender@PLT
 2520      00
 2521 1b7e C78504FF 		movl	$10, -252(%rbp)
 2521      FFFF0A00 
 2521      0000
 2522 1b88 E92F1200 		jmp	.L136
 2522      00
 2523              	.L168:
 516:svf2csvf.c    **** 				*p++ = '\0';
 2524              		.loc 1 516 0 is_stmt 1
 2525 1b8d 488B8538 		movq	-200(%rbp), %rax
 2525      FFFFFF
 2526 1b94 488D5001 		leaq	1(%rax), %rdx
 2527 1b98 48899538 		movq	%rdx, -200(%rbp)
 2527      FFFFFF
 2528 1b9f C60000   		movb	$0, (%rax)
 517:svf2csvf.c    **** 				FIX_ODD(smask);
 2529              		.loc 1 517 0
 2530 1ba2 488B8568 		movq	-152(%rbp), %rax
 2530      FFFFFF
 2531 1ba9 4889C7   		movq	%rax, %rdi
 2532 1bac E8000000 		call	strlen@PLT
 2532      00
 2533 1bb1 83E001   		andl	$1, %eax
 2534 1bb4 4885C0   		testq	%rax, %rax
 2535 1bb7 0F842903 		je	.L188
 2535      0000
 2536              		.loc 1 517 0 is_stmt 0 discriminator 1
 2537 1bbd 4883AD68 		subq	$1, -152(%rbp)
 2537      FFFFFF01 
 2538 1bc5 E91C0300 		jmp	.L188
 2538      00
 2539              	.L161:
 518:svf2csvf.c    **** 			} else if ( !strncmp(p, "TDO", 3) ) {
 2540              		.loc 1 518 0 is_stmt 1
 2541 1bca 488B8538 		movq	-200(%rbp), %rax
 2541      FFFFFF
 2542 1bd1 BA030000 		movl	$3, %edx
 2542      00
 2543 1bd6 488D3500 		leaq	.LC21(%rip), %rsi
 2543      000000
 2544 1bdd 4889C7   		movq	%rax, %rdi
 2545 1be0 E8000000 		call	strncmp@PLT
 2545      00
 2546 1be5 85C0     		testl	%eax, %eax
 2547 1be7 0F854D01 		jne	.L170
 2547      0000
 519:svf2csvf.c    **** 				p += 3;
 2548              		.loc 1 519 0
 2549 1bed 48838538 		addq	$3, -200(%rbp)
 2549      FFFFFF03 
 520:svf2csvf.c    **** 				CHOMP();
 2550              		.loc 1 520 0
 2551 1bf5 EB08     		jmp	.L171
 2552              	.L172:
 2553              		.loc 1 520 0 is_stmt 0 discriminator 4
 2554 1bf7 48838538 		addq	$1, -200(%rbp)
 2554      FFFFFF01 
 2555              	.L171:
 2556              		.loc 1 520 0 discriminator 1
 2557 1bff 488B8538 		movq	-200(%rbp), %rax
 2557      FFFFFF
 2558 1c06 0FB600   		movzbl	(%rax), %eax
 2559 1c09 3C20     		cmpb	$32, %al
 2560 1c0b 74EA     		je	.L172
 2561              		.loc 1 520 0 discriminator 3
 2562 1c0d 488B8538 		movq	-200(%rbp), %rax
 2562      FFFFFF
 2563 1c14 0FB600   		movzbl	(%rax), %eax
 2564 1c17 3C09     		cmpb	$9, %al
 2565 1c19 74DC     		je	.L172
 521:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDO (<tdo>)");
 2566              		.loc 1 521 0 is_stmt 1
 2567 1c1b 488B8538 		movq	-200(%rbp), %rax
 2567      FFFFFF
 2568 1c22 0FB600   		movzbl	(%rax), %eax
 2569 1c25 3C28     		cmpb	$40, %al
 2570 1c27 7438     		je	.L173
 2571              		.loc 1 521 0 is_stmt 0 discriminator 1
 2572 1c29 488B8D58 		movq	-168(%rbp), %rcx
 2572      FFFFFF
 2573 1c30 488B9558 		movq	-168(%rbp), %rdx
 2573      FFFFFF
 2574 1c37 488B85D8 		movq	-296(%rbp), %rax
 2574      FEFFFF
 2575 1c3e 488D3500 		leaq	.LC22(%rip), %rsi
 2575      000000
 2576 1c45 4889C7   		movq	%rax, %rdi
 2577 1c48 B8000000 		movl	$0, %eax
 2577      00
 2578 1c4d E8000000 		call	errRender@PLT
 2578      00
 2579 1c52 C78504FF 		movl	$10, -252(%rbp)
 2579      FFFF0A00 
 2579      0000
 2580 1c5c E95B1100 		jmp	.L136
 2580      00
 2581              	.L173:
 522:svf2csvf.c    **** 				*p++ = '0';
 2582              		.loc 1 522 0 is_stmt 1
 2583 1c61 488B8538 		movq	-200(%rbp), %rax
 2583      FFFFFF
 2584 1c68 488D5001 		leaq	1(%rax), %rdx
 2585 1c6c 48899538 		movq	%rdx, -200(%rbp)
 2585      FFFFFF
 2586 1c73 C60030   		movb	$48, (%rax)
 523:svf2csvf.c    **** 				tdo = p++;
 2587              		.loc 1 523 0
 2588 1c76 488B8538 		movq	-200(%rbp), %rax
 2588      FFFFFF
 2589 1c7d 488D5001 		leaq	1(%rax), %rdx
 2590 1c81 48899538 		movq	%rdx, -200(%rbp)
 2590      FFFFFF
 2591 1c88 48898548 		movq	%rax, -184(%rbp)
 2591      FFFFFF
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2592              		.loc 1 524 0
 2593 1c8f EB08     		jmp	.L174
 2594              	.L176:
 525:svf2csvf.c    **** 					p++;
 2595              		.loc 1 525 0
 2596 1c91 48838538 		addq	$1, -200(%rbp)
 2596      FFFFFF01 
 2597              	.L174:
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2598              		.loc 1 524 0
 2599 1c99 488B8538 		movq	-200(%rbp), %rax
 2599      FFFFFF
 2600 1ca0 483B8560 		cmpq	-160(%rbp), %rax
 2600      FFFFFF
 2601 1ca7 730E     		jnb	.L175
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2602              		.loc 1 524 0 is_stmt 0 discriminator 1
 2603 1ca9 488B8538 		movq	-200(%rbp), %rax
 2603      FFFFFF
 2604 1cb0 0FB600   		movzbl	(%rax), %eax
 2605 1cb3 3C29     		cmpb	$41, %al
 2606 1cb5 75DA     		jne	.L176
 2607              	.L175:
 526:svf2csvf.c    **** 				}
 527:svf2csvf.c    **** 				EXPECT_CHAR(')', "TDO (<tdo>)");
 2608              		.loc 1 527 0 is_stmt 1
 2609 1cb7 488B8538 		movq	-200(%rbp), %rax
 2609      FFFFFF
 2610 1cbe 0FB600   		movzbl	(%rax), %eax
 2611 1cc1 3C29     		cmpb	$41, %al
 2612 1cc3 7438     		je	.L177
 2613              		.loc 1 527 0 is_stmt 0 discriminator 1
 2614 1cc5 488B8D58 		movq	-168(%rbp), %rcx
 2614      FFFFFF
 2615 1ccc 488B9558 		movq	-168(%rbp), %rdx
 2615      FFFFFF
 2616 1cd3 488B85D8 		movq	-296(%rbp), %rax
 2616      FEFFFF
 2617 1cda 488D3500 		leaq	.LC22(%rip), %rsi
 2617      000000
 2618 1ce1 4889C7   		movq	%rax, %rdi
 2619 1ce4 B8000000 		movl	$0, %eax
 2619      00
 2620 1ce9 E8000000 		call	errRender@PLT
 2620      00
 2621 1cee C78504FF 		movl	$10, -252(%rbp)
 2621      FFFF0A00 
 2621      0000
 2622 1cf8 E9BF1000 		jmp	.L136
 2622      00
 2623              	.L177:
 528:svf2csvf.c    **** 				*p++ = '\0';
 2624              		.loc 1 528 0 is_stmt 1
 2625 1cfd 488B8538 		movq	-200(%rbp), %rax
 2625      FFFFFF
 2626 1d04 488D5001 		leaq	1(%rax), %rdx
 2627 1d08 48899538 		movq	%rdx, -200(%rbp)
 2627      FFFFFF
 2628 1d0f C60000   		movb	$0, (%rax)
 529:svf2csvf.c    **** 				FIX_ODD(tdo);
 2629              		.loc 1 529 0
 2630 1d12 488B8548 		movq	-184(%rbp), %rax
 2630      FFFFFF
 2631 1d19 4889C7   		movq	%rax, %rdi
 2632 1d1c E8000000 		call	strlen@PLT
 2632      00
 2633 1d21 83E001   		andl	$1, %eax
 2634 1d24 4885C0   		testq	%rax, %rax
 2635 1d27 0F84B901 		je	.L188
 2635      0000
 2636              		.loc 1 529 0 is_stmt 0 discriminator 1
 2637 1d2d 4883AD48 		subq	$1, -184(%rbp)
 2637      FFFFFF01 
 2638 1d35 E9AC0100 		jmp	.L188
 2638      00
 2639              	.L170:
 530:svf2csvf.c    **** 			} else if ( !strncmp(p, "MASK", 4) ) {
 2640              		.loc 1 530 0 is_stmt 1
 2641 1d3a 488B8538 		movq	-200(%rbp), %rax
 2641      FFFFFF
 2642 1d41 BA040000 		movl	$4, %edx
 2642      00
 2643 1d46 488D3500 		leaq	.LC23(%rip), %rsi
 2643      000000
 2644 1d4d 4889C7   		movq	%rax, %rdi
 2645 1d50 E8000000 		call	strncmp@PLT
 2645      00
 2646 1d55 85C0     		testl	%eax, %eax
 2647 1d57 0F854601 		jne	.L179
 2647      0000
 531:svf2csvf.c    **** 				p += 4;
 2648              		.loc 1 531 0
 2649 1d5d 48838538 		addq	$4, -200(%rbp)
 2649      FFFFFF04 
 532:svf2csvf.c    **** 				CHOMP();
 2650              		.loc 1 532 0
 2651 1d65 EB08     		jmp	.L180
 2652              	.L181:
 2653              		.loc 1 532 0 is_stmt 0 discriminator 4
 2654 1d67 48838538 		addq	$1, -200(%rbp)
 2654      FFFFFF01 
 2655              	.L180:
 2656              		.loc 1 532 0 discriminator 1
 2657 1d6f 488B8538 		movq	-200(%rbp), %rax
 2657      FFFFFF
 2658 1d76 0FB600   		movzbl	(%rax), %eax
 2659 1d79 3C20     		cmpb	$32, %al
 2660 1d7b 74EA     		je	.L181
 2661              		.loc 1 532 0 discriminator 3
 2662 1d7d 488B8538 		movq	-200(%rbp), %rax
 2662      FFFFFF
 2663 1d84 0FB600   		movzbl	(%rax), %eax
 2664 1d87 3C09     		cmpb	$9, %al
 2665 1d89 74DC     		je	.L181
 533:svf2csvf.c    **** 				EXPECT_CHAR('(', "MASK (<mask>)");
 2666              		.loc 1 533 0 is_stmt 1
 2667 1d8b 488B8538 		movq	-200(%rbp), %rax
 2667      FFFFFF
 2668 1d92 0FB600   		movzbl	(%rax), %eax
 2669 1d95 3C28     		cmpb	$40, %al
 2670 1d97 7438     		je	.L182
 2671              		.loc 1 533 0 is_stmt 0 discriminator 1
 2672 1d99 488B8D58 		movq	-168(%rbp), %rcx
 2672      FFFFFF
 2673 1da0 488B9558 		movq	-168(%rbp), %rdx
 2673      FFFFFF
 2674 1da7 488B85D8 		movq	-296(%rbp), %rax
 2674      FEFFFF
 2675 1dae 488D3500 		leaq	.LC24(%rip), %rsi
 2675      000000
 2676 1db5 4889C7   		movq	%rax, %rdi
 2677 1db8 B8000000 		movl	$0, %eax
 2677      00
 2678 1dbd E8000000 		call	errRender@PLT
 2678      00
 2679 1dc2 C78504FF 		movl	$10, -252(%rbp)
 2679      FFFF0A00 
 2679      0000
 2680 1dcc E9EB0F00 		jmp	.L136
 2680      00
 2681              	.L182:
 534:svf2csvf.c    **** 				*p++ = '0';
 2682              		.loc 1 534 0 is_stmt 1
 2683 1dd1 488B8538 		movq	-200(%rbp), %rax
 2683      FFFFFF
 2684 1dd8 488D5001 		leaq	1(%rax), %rdx
 2685 1ddc 48899538 		movq	%rdx, -200(%rbp)
 2685      FFFFFF
 2686 1de3 C60030   		movb	$48, (%rax)
 535:svf2csvf.c    **** 				mask = p++;
 2687              		.loc 1 535 0
 2688 1de6 488B8538 		movq	-200(%rbp), %rax
 2688      FFFFFF
 2689 1ded 488D5001 		leaq	1(%rax), %rdx
 2690 1df1 48899538 		movq	%rdx, -200(%rbp)
 2690      FFFFFF
 2691 1df8 48898550 		movq	%rax, -176(%rbp)
 2691      FFFFFF
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2692              		.loc 1 536 0
 2693 1dff EB08     		jmp	.L183
 2694              	.L185:
 537:svf2csvf.c    **** 					p++;
 2695              		.loc 1 537 0
 2696 1e01 48838538 		addq	$1, -200(%rbp)
 2696      FFFFFF01 
 2697              	.L183:
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2698              		.loc 1 536 0
 2699 1e09 488B8538 		movq	-200(%rbp), %rax
 2699      FFFFFF
 2700 1e10 483B8560 		cmpq	-160(%rbp), %rax
 2700      FFFFFF
 2701 1e17 730E     		jnb	.L184
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2702              		.loc 1 536 0 is_stmt 0 discriminator 1
 2703 1e19 488B8538 		movq	-200(%rbp), %rax
 2703      FFFFFF
 2704 1e20 0FB600   		movzbl	(%rax), %eax
 2705 1e23 3C29     		cmpb	$41, %al
 2706 1e25 75DA     		jne	.L185
 2707              	.L184:
 538:svf2csvf.c    **** 				}
 539:svf2csvf.c    **** 				EXPECT_CHAR(')', "MASK (<mask>)");
 2708              		.loc 1 539 0 is_stmt 1
 2709 1e27 488B8538 		movq	-200(%rbp), %rax
 2709      FFFFFF
 2710 1e2e 0FB600   		movzbl	(%rax), %eax
 2711 1e31 3C29     		cmpb	$41, %al
 2712 1e33 7438     		je	.L186
 2713              		.loc 1 539 0 is_stmt 0 discriminator 1
 2714 1e35 488B8D58 		movq	-168(%rbp), %rcx
 2714      FFFFFF
 2715 1e3c 488B9558 		movq	-168(%rbp), %rdx
 2715      FFFFFF
 2716 1e43 488B85D8 		movq	-296(%rbp), %rax
 2716      FEFFFF
 2717 1e4a 488D3500 		leaq	.LC24(%rip), %rsi
 2717      000000
 2718 1e51 4889C7   		movq	%rax, %rdi
 2719 1e54 B8000000 		movl	$0, %eax
 2719      00
 2720 1e59 E8000000 		call	errRender@PLT
 2720      00
 2721 1e5e C78504FF 		movl	$10, -252(%rbp)
 2721      FFFF0A00 
 2721      0000
 2722 1e68 E94F0F00 		jmp	.L136
 2722      00
 2723              	.L186:
 540:svf2csvf.c    **** 				*p++ = '\0';
 2724              		.loc 1 540 0 is_stmt 1
 2725 1e6d 488B8538 		movq	-200(%rbp), %rax
 2725      FFFFFF
 2726 1e74 488D5001 		leaq	1(%rax), %rdx
 2727 1e78 48899538 		movq	%rdx, -200(%rbp)
 2727      FFFFFF
 2728 1e7f C60000   		movb	$0, (%rax)
 541:svf2csvf.c    **** 				FIX_ODD(mask);
 2729              		.loc 1 541 0
 2730 1e82 488B8550 		movq	-176(%rbp), %rax
 2730      FFFFFF
 2731 1e89 4889C7   		movq	%rax, %rdi
 2732 1e8c E8000000 		call	strlen@PLT
 2732      00
 2733 1e91 83E001   		andl	$1, %eax
 2734 1e94 4885C0   		testq	%rax, %rax
 2735 1e97 744D     		je	.L188
 2736              		.loc 1 541 0 is_stmt 0 discriminator 1
 2737 1e99 4883AD50 		subq	$1, -176(%rbp)
 2737      FFFFFF01 
 2738 1ea1 EB43     		jmp	.L188
 2739              	.L179:
 542:svf2csvf.c    **** 			} else {
 543:svf2csvf.c    **** 				CHECK_STATUS(
 2740              		.loc 1 543 0 is_stmt 1 discriminator 1
 2741 1ea3 488B9538 		movq	-200(%rbp), %rdx
 2741      FFFFFF
 2742 1eaa 488B8558 		movq	-168(%rbp), %rax
 2742      FFFFFF
 2743 1eb1 4829C2   		subq	%rax, %rdx
 2744 1eb4 488B85D8 		movq	-296(%rbp), %rax
 2744      FEFFFF
 2745 1ebb 488D3500 		leaq	.LC25(%rip), %rsi
 2745      000000
 2746 1ec2 4889C7   		movq	%rax, %rdi
 2747 1ec5 B8000000 		movl	$0, %eax
 2747      00
 2748 1eca E8000000 		call	errRender@PLT
 2748      00
 2749 1ecf C78504FF 		movl	$10, -252(%rbp)
 2749      FFFF0A00 
 2749      0000
 2750 1ed9 E9DE0E00 		jmp	.L136
 2750      00
 2751              	.L189:
 544:svf2csvf.c    **** 					true, FL_SVF_PARSE_ERR, cleanup,
 545:svf2csvf.c    **** 					"parseLine(): Junk in [HTS][IR]R line at column %d", p-line);
 546:svf2csvf.c    **** 			}
 547:svf2csvf.c    **** 			CHOMP();
 2752              		.loc 1 547 0 discriminator 4
 2753 1ede 48838538 		addq	$1, -200(%rbp)
 2753      FFFFFF01 
 2754              	.L188:
 2755              		.loc 1 547 0 is_stmt 0 discriminator 1
 2756 1ee6 488B8538 		movq	-200(%rbp), %rax
 2756      FFFFFF
 2757 1eed 0FB600   		movzbl	(%rax), %eax
 2758 1ef0 3C20     		cmpb	$32, %al
 2759 1ef2 74EA     		je	.L189
 2760              		.loc 1 547 0 discriminator 3
 2761 1ef4 488B8538 		movq	-200(%rbp), %rax
 2761      FFFFFF
 2762 1efb 0FB600   		movzbl	(%rax), %eax
 2763 1efe 3C09     		cmpb	$9, %al
 2764 1f00 74DC     		je	.L189
 2765              	.L149:
 485:svf2csvf.c    **** 			if ( !strncmp(p, "TDI", 3) ) {
 2766              		.loc 1 485 0 is_stmt 1
 2767 1f02 488B8538 		movq	-200(%rbp), %rax
 2767      FFFFFF
 2768 1f09 0FB600   		movzbl	(%rax), %eax
 2769 1f0c 84C0     		testb	%al, %al
 2770 1f0e 0F85D6F9 		jne	.L190
 2770      FFFF
 548:svf2csvf.c    **** 		}
 549:svf2csvf.c    **** 		if ( isDataReg ) {
 2771              		.loc 1 549 0
 2772 1f14 80BD02FF 		cmpb	$0, -254(%rbp)
 2772      FFFF00
 2773 1f1b 0F84440A 		je	.L191
 2773      0000
 2774              	.LBB5:
 550:svf2csvf.c    **** 			bool zeroMask;
 551:svf2csvf.c    **** 			switch ( op ) {
 2775              		.loc 1 551 0
 2776 1f21 8B8508FF 		movl	-248(%rbp), %eax
 2776      FFFF
 2777 1f27 83F853   		cmpl	$83, %eax
 2778 1f2a 0F84F700 		je	.L193
 2778      0000
 2779 1f30 83F854   		cmpl	$84, %eax
 2780 1f33 747B     		je	.L194
 2781 1f35 83F848   		cmpl	$72, %eax
 2782 1f38 7405     		je	.L195
 2783              	.LBE5:
 2784              	.LBE4:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 2785              		.loc 1 461 0
 2786 1f3a E97D0E00 		jmp	.L136
 2786      00
 2787              	.L195:
 2788              	.LBB8:
 2789              	.LBB6:
 552:svf2csvf.c    **** 			case HEAD:
 553:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataHead, length, tdi, tdo, mask, error);
 2790              		.loc 1 553 0
 2791 1f3f 488B85F8 		movq	-264(%rbp), %rax
 2791      FEFFFF
 2792 1f46 4C8B85D8 		movq	-296(%rbp), %r8
 2792      FEFFFF
 2793 1f4d 488BBD50 		movq	-176(%rbp), %rdi
 2793      FFFFFF
 2794 1f54 488B8D48 		movq	-184(%rbp), %rcx
 2794      FFFFFF
 2795 1f5b 488B9540 		movq	-192(%rbp), %rdx
 2795      FFFFFF
 2796 1f62 8BB50CFF 		movl	-244(%rbp), %esi
 2796      FFFF
 2797 1f68 4D89C1   		movq	%r8, %r9
 2798 1f6b 4989F8   		movq	%rdi, %r8
 2799 1f6e 4889C7   		movq	%rax, %rdi
 2800 1f71 E8F7EDFF 		call	processLine
 2800      FF
 2801 1f76 898510FF 		movl	%eax, -240(%rbp)
 2801      FFFF
 554:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2802              		.loc 1 554 0
 2803 1f7c 83BD10FF 		cmpl	$0, -240(%rbp)
 2803      FFFF00
 2804 1f83 0F84F40D 		je	.L239
 2804      0000
 2805              		.loc 1 554 0 is_stmt 0 discriminator 1
 2806 1f89 488B85D8 		movq	-296(%rbp), %rax
 2806      FEFFFF
 2807 1f90 488D3500 		leaq	.LC16(%rip), %rsi
 2807      000000
 2808 1f97 4889C7   		movq	%rax, %rdi
 2809 1f9a E8000000 		call	errPrefix@PLT
 2809      00
 2810 1f9f 8B8510FF 		movl	-240(%rbp), %eax
 2810      FFFF
 2811 1fa5 898504FF 		movl	%eax, -252(%rbp)
 2811      FFFF
 2812 1fab E90C0E00 		jmp	.L136
 2812      00
 2813              	.L194:
 555:svf2csvf.c    **** 				break;
 556:svf2csvf.c    **** 			case TAIL:
 557:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataTail, length, tdi, tdo, mask, error);
 2814              		.loc 1 557 0 is_stmt 1
 2815 1fb0 488B85F8 		movq	-264(%rbp), %rax
 2815      FEFFFF
 2816 1fb7 488DB8A0 		leaq	416(%rax), %rdi
 2816      010000
 2817 1fbe 4C8B85D8 		movq	-296(%rbp), %r8
 2817      FEFFFF
 2818 1fc5 488BB550 		movq	-176(%rbp), %rsi
 2818      FFFFFF
 2819 1fcc 488B8D48 		movq	-184(%rbp), %rcx
 2819      FFFFFF
 2820 1fd3 488B9540 		movq	-192(%rbp), %rdx
 2820      FFFFFF
 2821 1fda 8B850CFF 		movl	-244(%rbp), %eax
 2821      FFFF
 2822 1fe0 4D89C1   		movq	%r8, %r9
 2823 1fe3 4989F0   		movq	%rsi, %r8
 2824 1fe6 89C6     		movl	%eax, %esi
 2825 1fe8 E880EDFF 		call	processLine
 2825      FF
 2826 1fed 898510FF 		movl	%eax, -240(%rbp)
 2826      FFFF
 558:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2827              		.loc 1 558 0
 2828 1ff3 83BD10FF 		cmpl	$0, -240(%rbp)
 2828      FFFF00
 2829 1ffa 0F84800D 		je	.L240
 2829      0000
 2830              		.loc 1 558 0 is_stmt 0 discriminator 1
 2831 2000 488B85D8 		movq	-296(%rbp), %rax
 2831      FEFFFF
 2832 2007 488D3500 		leaq	.LC16(%rip), %rsi
 2832      000000
 2833 200e 4889C7   		movq	%rax, %rdi
 2834 2011 E8000000 		call	errPrefix@PLT
 2834      00
 2835 2016 8B8510FF 		movl	-240(%rbp), %eax
 2835      FFFF
 2836 201c 898504FF 		movl	%eax, -252(%rbp)
 2836      FFFF
 2837 2022 E9950D00 		jmp	.L136
 2837      00
 2838              	.L193:
 559:svf2csvf.c    **** 				break;
 560:svf2csvf.c    **** 			case BODY:
 561:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataBody, length, tdi, tdo, mask, error);
 2839              		.loc 1 561 0 is_stmt 1
 2840 2027 488B85F8 		movq	-264(%rbp), %rax
 2840      FEFFFF
 2841 202e 488DB8D0 		leaq	208(%rax), %rdi
 2841      000000
 2842 2035 4C8B85D8 		movq	-296(%rbp), %r8
 2842      FEFFFF
 2843 203c 488BB550 		movq	-176(%rbp), %rsi
 2843      FFFFFF
 2844 2043 488B8D48 		movq	-184(%rbp), %rcx
 2844      FFFFFF
 2845 204a 488B9540 		movq	-192(%rbp), %rdx
 2845      FFFFFF
 2846 2051 8B850CFF 		movl	-244(%rbp), %eax
 2846      FFFF
 2847 2057 4D89C1   		movq	%r8, %r9
 2848 205a 4989F0   		movq	%rsi, %r8
 2849 205d 89C6     		movl	%eax, %esi
 2850 205f E809EDFF 		call	processLine
 2850      FF
 2851 2064 898510FF 		movl	%eax, -240(%rbp)
 2851      FFFF
 562:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2852              		.loc 1 562 0
 2853 206a 83BD10FF 		cmpl	$0, -240(%rbp)
 2853      FFFF00
 2854 2071 7427     		je	.L198
 2855              		.loc 1 562 0 is_stmt 0 discriminator 1
 2856 2073 488B85D8 		movq	-296(%rbp), %rax
 2856      FEFFFF
 2857 207a 488D3500 		leaq	.LC16(%rip), %rsi
 2857      000000
 2858 2081 4889C7   		movq	%rax, %rdi
 2859 2084 E8000000 		call	errPrefix@PLT
 2859      00
 2860 2089 8B8510FF 		movl	-240(%rbp), %eax
 2860      FFFF
 2861 208f 898504FF 		movl	%eax, -252(%rbp)
 2861      FFFF
 2862 2095 E9220D00 		jmp	.L136
 2862      00
 2863              	.L198:
 563:svf2csvf.c    **** 				if (
 564:svf2csvf.c    **** 					cxt->dataHead.numBits + cxt->dataBody.numBits + cxt->dataTail.numBits
 2864              		.loc 1 564 0 is_stmt 1
 2865 209a 488B85F8 		movq	-264(%rbp), %rax
 2865      FEFFFF
 2866 20a1 8B10     		movl	(%rax), %edx
 2867 20a3 488B85F8 		movq	-264(%rbp), %rax
 2867      FEFFFF
 2868 20aa 8B80D000 		movl	208(%rax), %eax
 2868      0000
 2869 20b0 01C2     		addl	%eax, %edx
 2870 20b2 488B85F8 		movq	-264(%rbp), %rax
 2870      FEFFFF
 2871 20b9 8B80A001 		movl	416(%rax), %eax
 2871      0000
 2872 20bf 01C2     		addl	%eax, %edx
 565:svf2csvf.c    **** 					!= cxt->curLength
 2873              		.loc 1 565 0
 2874 20c1 488B85F8 		movq	-264(%rbp), %rax
 2874      FEFFFF
 2875 20c8 8B807002 		movl	624(%rax), %eax
 2875      0000
 563:svf2csvf.c    **** 				if (
 2876              		.loc 1 563 0
 2877 20ce 39C2     		cmpl	%eax, %edx
 2878 20d0 0F84F900 		je	.L199
 2878      0000
 566:svf2csvf.c    **** 				) {
 567:svf2csvf.c    **** 					cxt->curLength = cxt->dataHead.numBits + cxt->dataBody.numBits + cxt->dataTail.numBits;
 2879              		.loc 1 567 0
 2880 20d6 488B85F8 		movq	-264(%rbp), %rax
 2880      FEFFFF
 2881 20dd 8B10     		movl	(%rax), %edx
 2882 20df 488B85F8 		movq	-264(%rbp), %rax
 2882      FEFFFF
 2883 20e6 8B80D000 		movl	208(%rax), %eax
 2883      0000
 2884 20ec 01C2     		addl	%eax, %edx
 2885 20ee 488B85F8 		movq	-264(%rbp), %rax
 2885      FEFFFF
 2886 20f5 8B80A001 		movl	416(%rax), %eax
 2886      0000
 2887 20fb 01C2     		addl	%eax, %edx
 2888 20fd 488B85F8 		movq	-264(%rbp), %rax
 2888      FEFFFF
 2889 2104 89907002 		movl	%edx, 624(%rax)
 2889      0000
 568:svf2csvf.c    **** 					cxt->numCommands++;
 2890              		.loc 1 568 0
 2891 210a 488B85F8 		movq	-264(%rbp), %rax
 2891      FEFFFF
 2892 2111 8B809C02 		movl	668(%rax), %eax
 2892      0000
 2893 2117 8D5001   		leal	1(%rax), %edx
 2894 211a 488B85F8 		movq	-264(%rbp), %rax
 2894      FEFFFF
 2895 2121 89909C02 		movl	%edx, 668(%rax)
 2895      0000
 569:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDRSIZE, error);
 2896              		.loc 1 569 0
 2897 2127 488B95D8 		movq	-296(%rbp), %rdx
 2897      FEFFFF
 2898 212e 488B85E8 		movq	-280(%rbp), %rax
 2898      FEFFFF
 2899 2135 BE080000 		movl	$8, %esi
 2899      00
 2900 213a 4889C7   		movq	%rax, %rdi
 2901 213d E8000000 		call	bufAppendByte@PLT
 2901      00
 2902 2142 898514FF 		movl	%eax, -236(%rbp)
 2902      FFFF
 570:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2903              		.loc 1 570 0
 2904 2148 83BD14FF 		cmpl	$0, -236(%rbp)
 2904      FFFF00
 2905 214f 7425     		je	.L200
 2906              		.loc 1 570 0 is_stmt 0 discriminator 1
 2907 2151 488B85D8 		movq	-296(%rbp), %rax
 2907      FEFFFF
 2908 2158 488D3500 		leaq	.LC16(%rip), %rsi
 2908      000000
 2909 215f 4889C7   		movq	%rax, %rdi
 2910 2162 E8000000 		call	errPrefix@PLT
 2910      00
 2911 2167 C78504FF 		movl	$1, -252(%rbp)
 2911      FFFF0100 
 2911      0000
 2912 2171 E9460C00 		jmp	.L136
 2912      00
 2913              	.L200:
 571:svf2csvf.c    **** 					bStatus = bufAppendLongBE(csvfBuf, cxt->curLength, error);
 2914              		.loc 1 571 0 is_stmt 1
 2915 2176 488B85F8 		movq	-264(%rbp), %rax
 2915      FEFFFF
 2916 217d 8B887002 		movl	624(%rax), %ecx
 2916      0000
 2917 2183 488B95D8 		movq	-296(%rbp), %rdx
 2917      FEFFFF
 2918 218a 488B85E8 		movq	-280(%rbp), %rax
 2918      FEFFFF
 2919 2191 89CE     		movl	%ecx, %esi
 2920 2193 4889C7   		movq	%rax, %rdi
 2921 2196 E8000000 		call	bufAppendLongBE@PLT
 2921      00
 2922 219b 898514FF 		movl	%eax, -236(%rbp)
 2922      FFFF
 572:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2923              		.loc 1 572 0
 2924 21a1 83BD14FF 		cmpl	$0, -236(%rbp)
 2924      FFFF00
 2925 21a8 7425     		je	.L199
 2926              		.loc 1 572 0 is_stmt 0 discriminator 1
 2927 21aa 488B85D8 		movq	-296(%rbp), %rax
 2927      FEFFFF
 2928 21b1 488D3500 		leaq	.LC16(%rip), %rsi
 2928      000000
 2929 21b8 4889C7   		movq	%rax, %rdi
 2930 21bb E8000000 		call	errPrefix@PLT
 2930      00
 2931 21c0 C78504FF 		movl	$1, -252(%rbp)
 2931      FFFF0100 
 2931      0000
 2932 21ca E9ED0B00 		jmp	.L136
 2932      00
 2933              	.L199:
 573:svf2csvf.c    **** 				}
 574:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.mask, error);
 2934              		.loc 1 574 0 is_stmt 1
 2935 21cf 488B85F8 		movq	-264(%rbp), %rax
 2935      FEFFFF
 2936 21d6 488D4848 		leaq	72(%rax), %rcx
 2937 21da 488B95D8 		movq	-296(%rbp), %rdx
 2937      FEFFFF
 2938 21e1 488D8570 		leaq	-144(%rbp), %rax
 2938      FFFFFF
 2939 21e8 4889CE   		movq	%rcx, %rsi
 2940 21eb 4889C7   		movq	%rax, %rdi
 2941 21ee E8000000 		call	bufDeepCopy@PLT
 2941      00
 2942 21f3 898514FF 		movl	%eax, -236(%rbp)
 2942      FFFF
 575:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2943              		.loc 1 575 0
 2944 21f9 83BD14FF 		cmpl	$0, -236(%rbp)
 2944      FFFF00
 2945 2200 7425     		je	.L201
 2946              		.loc 1 575 0 is_stmt 0 discriminator 1
 2947 2202 488B85D8 		movq	-296(%rbp), %rax
 2947      FEFFFF
 2948 2209 488D3500 		leaq	.LC16(%rip), %rsi
 2948      000000
 2949 2210 4889C7   		movq	%rax, %rdi
 2950 2213 E8000000 		call	errPrefix@PLT
 2950      00
 2951 2218 C78504FF 		movl	$1, -252(%rbp)
 2951      FFFF0100 
 2951      0000
 2952 2222 E9950B00 		jmp	.L136
 2952      00
 2953              	.L201:
 576:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->dataBody.mask, error);
 2954              		.loc 1 576 0 is_stmt 1
 2955 2227 488B85F8 		movq	-264(%rbp), %rax
 2955      FEFFFF
 2956 222e 488D8818 		leaq	280(%rax), %rcx
 2956      010000
 2957 2235 488B95D8 		movq	-296(%rbp), %rdx
 2957      FEFFFF
 2958 223c 488D4590 		leaq	-112(%rbp), %rax
 2959 2240 4889CE   		movq	%rcx, %rsi
 2960 2243 4889C7   		movq	%rax, %rdi
 2961 2246 E8000000 		call	bufDeepCopy@PLT
 2961      00
 2962 224b 898514FF 		movl	%eax, -236(%rbp)
 2962      FFFF
 577:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2963              		.loc 1 577 0
 2964 2251 83BD14FF 		cmpl	$0, -236(%rbp)
 2964      FFFF00
 2965 2258 7425     		je	.L202
 2966              		.loc 1 577 0 is_stmt 0 discriminator 1
 2967 225a 488B85D8 		movq	-296(%rbp), %rax
 2967      FEFFFF
 2968 2261 488D3500 		leaq	.LC16(%rip), %rsi
 2968      000000
 2969 2268 4889C7   		movq	%rax, %rdi
 2970 226b E8000000 		call	errPrefix@PLT
 2970      00
 2971 2270 C78504FF 		movl	$1, -252(%rbp)
 2971      FFFF0100 
 2971      0000
 2972 227a E93D0B00 		jmp	.L136
 2972      00
 2973              	.L202:
 578:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.mask, error);
 2974              		.loc 1 578 0 is_stmt 1
 2975 227f 488B85F8 		movq	-264(%rbp), %rax
 2975      FEFFFF
 2976 2286 488D88E8 		leaq	488(%rax), %rcx
 2976      010000
 2977 228d 488B95D8 		movq	-296(%rbp), %rdx
 2977      FEFFFF
 2978 2294 488D45D0 		leaq	-48(%rbp), %rax
 2979 2298 4889CE   		movq	%rcx, %rsi
 2980 229b 4889C7   		movq	%rax, %rdi
 2981 229e E8000000 		call	bufDeepCopy@PLT
 2981      00
 2982 22a3 898514FF 		movl	%eax, -236(%rbp)
 2982      FFFF
 579:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2983              		.loc 1 579 0
 2984 22a9 83BD14FF 		cmpl	$0, -236(%rbp)
 2984      FFFF00
 2985 22b0 7425     		je	.L203
 2986              		.loc 1 579 0 is_stmt 0 discriminator 1
 2987 22b2 488B85D8 		movq	-296(%rbp), %rax
 2987      FEFFFF
 2988 22b9 488D3500 		leaq	.LC16(%rip), %rsi
 2988      000000
 2989 22c0 4889C7   		movq	%rax, %rdi
 2990 22c3 E8000000 		call	errPrefix@PLT
 2990      00
 2991 22c8 C78504FF 		movl	$1, -252(%rbp)
 2991      FFFF0100 
 2991      0000
 2992 22d2 E9E50A00 		jmp	.L136
 2992      00
 2993              	.L203:
 580:svf2csvf.c    **** 				fStatus = headTail(
 2994              		.loc 1 580 0 is_stmt 1
 2995 22d7 488B85F8 		movq	-264(%rbp), %rax
 2995      FEFFFF
 2996 22de 448B80A0 		movl	416(%rax), %r8d
 2996      010000
 2997 22e5 488B85F8 		movq	-264(%rbp), %rax
 2997      FEFFFF
 2998 22ec 8B38     		movl	(%rax), %edi
 2999 22ee 488B85F8 		movq	-264(%rbp), %rax
 2999      FEFFFF
 3000 22f5 8B88D000 		movl	208(%rax), %ecx
 3000      0000
 3001 22fb 488D55D0 		leaq	-48(%rbp), %rdx
 3002 22ff 488DB570 		leaq	-144(%rbp), %rsi
 3002      FFFFFF
 3003 2306 488D4590 		leaq	-112(%rbp), %rax
 3004 230a 4883EC08 		subq	$8, %rsp
 3005 230e FFB5D8FE 		pushq	-296(%rbp)
 3005      FFFF
 3006 2314 4589C1   		movl	%r8d, %r9d
 3007 2317 4189F8   		movl	%edi, %r8d
 3008 231a 4889C7   		movq	%rax, %rdi
 3009 231d E8000000 		call	headTail@PLT
 3009      00
 3010 2322 4883C410 		addq	$16, %rsp
 3011 2326 898510FF 		movl	%eax, -240(%rbp)
 3011      FFFF
 581:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 582:svf2csvf.c    **** 					cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 583:svf2csvf.c    **** 					error);
 584:svf2csvf.c    **** 				zeroMask = isAllZero(&tmpBody1);
 3012              		.loc 1 584 0
 3013 232c 488D4590 		leaq	-112(%rbp), %rax
 3014 2330 4889C7   		movq	%rax, %rdi
 3015 2333 E8B7ECFF 		call	isAllZero
 3015      FF
 3016 2338 888503FF 		movb	%al, -253(%rbp)
 3016      FFFF
 585:svf2csvf.c    **** 				if (
 586:svf2csvf.c    **** 					tmpBody1.length != cxt->curMaskBuf.length ||
 3017              		.loc 1 586 0
 3018 233e 488B5598 		movq	-104(%rbp), %rdx
 3019 2342 488B85F8 		movq	-264(%rbp), %rax
 3019      FEFFFF
 3020 2349 488B8080 		movq	640(%rax), %rax
 3020      020000
 585:svf2csvf.c    **** 				if (
 3021              		.loc 1 585 0
 3022 2350 4839C2   		cmpq	%rax, %rdx
 3023 2353 7525     		jne	.L204
 587:svf2csvf.c    **** 					memcmp(tmpBody1.data, cxt->curMaskBuf.data, tmpBody1.length)
 3024              		.loc 1 587 0
 3025 2355 488B5598 		movq	-104(%rbp), %rdx
 3026 2359 488B85F8 		movq	-264(%rbp), %rax
 3026      FEFFFF
 3027 2360 488B8878 		movq	632(%rax), %rcx
 3027      020000
 3028 2367 488B4590 		movq	-112(%rbp), %rax
 3029 236b 4889CE   		movq	%rcx, %rsi
 3030 236e 4889C7   		movq	%rax, %rdi
 3031 2371 E8000000 		call	memcmp@PLT
 3031      00
 586:svf2csvf.c    **** 					memcmp(tmpBody1.data, cxt->curMaskBuf.data, tmpBody1.length)
 3032              		.loc 1 586 0
 3033 2376 85C0     		testl	%eax, %eax
 3034 2378 742B     		je	.L205
 3035              	.L204:
 588:svf2csvf.c    **** 				) {
 589:svf2csvf.c    **** 					bufSwap(&cxt->curMaskBuf, &tmpBody1);
 3036              		.loc 1 589 0
 3037 237a 488B85F8 		movq	-264(%rbp), %rax
 3037      FEFFFF
 3038 2381 488D9078 		leaq	632(%rax), %rdx
 3038      020000
 3039 2388 488D4590 		leaq	-112(%rbp), %rax
 3040 238c 4889C6   		movq	%rax, %rsi
 3041 238f 4889D7   		movq	%rdx, %rdi
 3042 2392 E8000000 		call	bufSwap@PLT
 3042      00
 590:svf2csvf.c    **** 					cxt->newMaskWritten = false;
 3043              		.loc 1 590 0
 3044 2397 488B85F8 		movq	-264(%rbp), %rax
 3044      FEFFFF
 3045 239e C680A002 		movb	$0, 672(%rax)
 3045      000000
 3046              	.L205:
 591:svf2csvf.c    **** 				}
 592:svf2csvf.c    **** 				if ( !zeroMask && tdo && !cxt->newMaskWritten ) {
 3047              		.loc 1 592 0
 3048 23a5 0FB68503 		movzbl	-253(%rbp), %eax
 3048      FFFFFF
 3049 23ac 83F001   		xorl	$1, %eax
 3050 23af 84C0     		testb	%al, %al
 3051 23b1 0F841001 		je	.L206
 3051      0000
 3052              		.loc 1 592 0 is_stmt 0 discriminator 1
 3053 23b7 4883BD48 		cmpq	$0, -184(%rbp)
 3053      FFFFFF00 
 3054 23bf 0F840201 		je	.L206
 3054      0000
 3055              		.loc 1 592 0 discriminator 2
 3056 23c5 488B85F8 		movq	-264(%rbp), %rax
 3056      FEFFFF
 3057 23cc 0FB680A0 		movzbl	672(%rax), %eax
 3057      020000
 3058 23d3 83F001   		xorl	$1, %eax
 3059 23d6 84C0     		testb	%al, %al
 3060 23d8 0F84E900 		je	.L206
 3060      0000
 593:svf2csvf.c    **** 					// New mask is nonzero and different from the last one sent
 594:svf2csvf.c    **** 					cxt->numCommands++;
 3061              		.loc 1 594 0 is_stmt 1
 3062 23de 488B85F8 		movq	-264(%rbp), %rax
 3062      FEFFFF
 3063 23e5 8B809C02 		movl	668(%rax), %eax
 3063      0000
 3064 23eb 8D5001   		leal	1(%rax), %edx
 3065 23ee 488B85F8 		movq	-264(%rbp), %rax
 3065      FEFFFF
 3066 23f5 89909C02 		movl	%edx, 668(%rax)
 3066      0000
 595:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XTDOMASK, error);
 3067              		.loc 1 595 0
 3068 23fb 488B95D8 		movq	-296(%rbp), %rdx
 3068      FEFFFF
 3069 2402 488B85E8 		movq	-280(%rbp), %rax
 3069      FEFFFF
 3070 2409 BE010000 		movl	$1, %esi
 3070      00
 3071 240e 4889C7   		movq	%rax, %rdi
 3072 2411 E8000000 		call	bufAppendByte@PLT
 3072      00
 3073 2416 898514FF 		movl	%eax, -236(%rbp)
 3073      FFFF
 596:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3074              		.loc 1 596 0
 3075 241c 83BD14FF 		cmpl	$0, -236(%rbp)
 3075      FFFF00
 3076 2423 7425     		je	.L207
 3077              		.loc 1 596 0 is_stmt 0 discriminator 1
 3078 2425 488B85D8 		movq	-296(%rbp), %rax
 3078      FEFFFF
 3079 242c 488D3500 		leaq	.LC16(%rip), %rsi
 3079      000000
 3080 2433 4889C7   		movq	%rax, %rdi
 3081 2436 E8000000 		call	errPrefix@PLT
 3081      00
 3082 243b C78504FF 		movl	$1, -252(%rbp)
 3082      FFFF0100 
 3082      0000
 3083 2445 E9720900 		jmp	.L136
 3083      00
 3084              	.L207:
 597:svf2csvf.c    **** 					fStatus = appendSwapped(csvfBuf, cxt->curMaskBuf.data, (uint32)cxt->curMaskBuf.length, error);
 3085              		.loc 1 597 0 is_stmt 1
 3086 244a 488B85F8 		movq	-264(%rbp), %rax
 3086      FEFFFF
 3087 2451 488B8080 		movq	640(%rax), %rax
 3087      020000
 3088 2458 89C7     		movl	%eax, %edi
 3089 245a 488B85F8 		movq	-264(%rbp), %rax
 3089      FEFFFF
 3090 2461 488BB078 		movq	632(%rax), %rsi
 3090      020000
 3091 2468 488B95D8 		movq	-296(%rbp), %rdx
 3091      FEFFFF
 3092 246f 488B85E8 		movq	-280(%rbp), %rax
 3092      FEFFFF
 3093 2476 4889D1   		movq	%rdx, %rcx
 3094 2479 89FA     		movl	%edi, %edx
 3095 247b 4889C7   		movq	%rax, %rdi
 3096 247e E8AEECFF 		call	appendSwapped
 3096      FF
 3097 2483 898510FF 		movl	%eax, -240(%rbp)
 3097      FFFF
 598:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3098              		.loc 1 598 0
 3099 2489 83BD10FF 		cmpl	$0, -240(%rbp)
 3099      FFFF00
 3100 2490 7427     		je	.L208
 3101              		.loc 1 598 0 is_stmt 0 discriminator 1
 3102 2492 488B85D8 		movq	-296(%rbp), %rax
 3102      FEFFFF
 3103 2499 488D3500 		leaq	.LC16(%rip), %rsi
 3103      000000
 3104 24a0 4889C7   		movq	%rax, %rdi
 3105 24a3 E8000000 		call	errPrefix@PLT
 3105      00
 3106 24a8 8B8510FF 		movl	-240(%rbp), %eax
 3106      FFFF
 3107 24ae 898504FF 		movl	%eax, -252(%rbp)
 3107      FFFF
 3108 24b4 E9030900 		jmp	.L136
 3108      00
 3109              	.L208:
 599:svf2csvf.c    **** 					cxt->newMaskWritten = true;
 3110              		.loc 1 599 0 is_stmt 1
 3111 24b9 488B85F8 		movq	-264(%rbp), %rax
 3111      FEFFFF
 3112 24c0 C680A002 		movb	$1, 672(%rax)
 3112      000001
 3113              	.L206:
 600:svf2csvf.c    **** 				}
 601:svf2csvf.c    **** 
 602:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.tdi, error);
 3114              		.loc 1 602 0
 3115 24c7 488B85F8 		movq	-264(%rbp), %rax
 3115      FEFFFF
 3116 24ce 488D4808 		leaq	8(%rax), %rcx
 3117 24d2 488B95D8 		movq	-296(%rbp), %rdx
 3117      FEFFFF
 3118 24d9 488D8570 		leaq	-144(%rbp), %rax
 3118      FFFFFF
 3119 24e0 4889CE   		movq	%rcx, %rsi
 3120 24e3 4889C7   		movq	%rax, %rdi
 3121 24e6 E8000000 		call	bufDeepCopy@PLT
 3121      00
 3122 24eb 898514FF 		movl	%eax, -236(%rbp)
 3122      FFFF
 603:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3123              		.loc 1 603 0
 3124 24f1 83BD14FF 		cmpl	$0, -236(%rbp)
 3124      FFFF00
 3125 24f8 7425     		je	.L209
 3126              		.loc 1 603 0 is_stmt 0 discriminator 1
 3127 24fa 488B85D8 		movq	-296(%rbp), %rax
 3127      FEFFFF
 3128 2501 488D3500 		leaq	.LC16(%rip), %rsi
 3128      000000
 3129 2508 4889C7   		movq	%rax, %rdi
 3130 250b E8000000 		call	errPrefix@PLT
 3130      00
 3131 2510 C78504FF 		movl	$1, -252(%rbp)
 3131      FFFF0100 
 3131      0000
 3132 251a E99D0800 		jmp	.L136
 3132      00
 3133              	.L209:
 604:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->dataBody.tdi, error);
 3134              		.loc 1 604 0 is_stmt 1
 3135 251f 488B85F8 		movq	-264(%rbp), %rax
 3135      FEFFFF
 3136 2526 488D88D8 		leaq	216(%rax), %rcx
 3136      000000
 3137 252d 488B95D8 		movq	-296(%rbp), %rdx
 3137      FEFFFF
 3138 2534 488D4590 		leaq	-112(%rbp), %rax
 3139 2538 4889CE   		movq	%rcx, %rsi
 3140 253b 4889C7   		movq	%rax, %rdi
 3141 253e E8000000 		call	bufDeepCopy@PLT
 3141      00
 3142 2543 898514FF 		movl	%eax, -236(%rbp)
 3142      FFFF
 605:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3143              		.loc 1 605 0
 3144 2549 83BD14FF 		cmpl	$0, -236(%rbp)
 3144      FFFF00
 3145 2550 7425     		je	.L210
 3146              		.loc 1 605 0 is_stmt 0 discriminator 1
 3147 2552 488B85D8 		movq	-296(%rbp), %rax
 3147      FEFFFF
 3148 2559 488D3500 		leaq	.LC16(%rip), %rsi
 3148      000000
 3149 2560 4889C7   		movq	%rax, %rdi
 3150 2563 E8000000 		call	errPrefix@PLT
 3150      00
 3151 2568 C78504FF 		movl	$1, -252(%rbp)
 3151      FFFF0100 
 3151      0000
 3152 2572 E9450800 		jmp	.L136
 3152      00
 3153              	.L210:
 606:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.tdi, error);
 3154              		.loc 1 606 0 is_stmt 1
 3155 2577 488B85F8 		movq	-264(%rbp), %rax
 3155      FEFFFF
 3156 257e 488D88A8 		leaq	424(%rax), %rcx
 3156      010000
 3157 2585 488B95D8 		movq	-296(%rbp), %rdx
 3157      FEFFFF
 3158 258c 488D45D0 		leaq	-48(%rbp), %rax
 3159 2590 4889CE   		movq	%rcx, %rsi
 3160 2593 4889C7   		movq	%rax, %rdi
 3161 2596 E8000000 		call	bufDeepCopy@PLT
 3161      00
 3162 259b 898514FF 		movl	%eax, -236(%rbp)
 3162      FFFF
 607:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3163              		.loc 1 607 0
 3164 25a1 83BD14FF 		cmpl	$0, -236(%rbp)
 3164      FFFF00
 3165 25a8 7425     		je	.L211
 3166              		.loc 1 607 0 is_stmt 0 discriminator 1
 3167 25aa 488B85D8 		movq	-296(%rbp), %rax
 3167      FEFFFF
 3168 25b1 488D3500 		leaq	.LC16(%rip), %rsi
 3168      000000
 3169 25b8 4889C7   		movq	%rax, %rdi
 3170 25bb E8000000 		call	errPrefix@PLT
 3170      00
 3171 25c0 C78504FF 		movl	$1, -252(%rbp)
 3171      FFFF0100 
 3171      0000
 3172 25ca E9ED0700 		jmp	.L136
 3172      00
 3173              	.L211:
 608:svf2csvf.c    **** 				fStatus = headTail(
 3174              		.loc 1 608 0 is_stmt 1
 3175 25cf 488B85F8 		movq	-264(%rbp), %rax
 3175      FEFFFF
 3176 25d6 448B80A0 		movl	416(%rax), %r8d
 3176      010000
 3177 25dd 488B85F8 		movq	-264(%rbp), %rax
 3177      FEFFFF
 3178 25e4 8B38     		movl	(%rax), %edi
 3179 25e6 488B85F8 		movq	-264(%rbp), %rax
 3179      FEFFFF
 3180 25ed 8B88D000 		movl	208(%rax), %ecx
 3180      0000
 3181 25f3 488D55D0 		leaq	-48(%rbp), %rdx
 3182 25f7 488DB570 		leaq	-144(%rbp), %rsi
 3182      FFFFFF
 3183 25fe 488D4590 		leaq	-112(%rbp), %rax
 3184 2602 4883EC08 		subq	$8, %rsp
 3185 2606 FFB5D8FE 		pushq	-296(%rbp)
 3185      FFFF
 3186 260c 4589C1   		movl	%r8d, %r9d
 3187 260f 4189F8   		movl	%edi, %r8d
 3188 2612 4889C7   		movq	%rax, %rdi
 3189 2615 E8000000 		call	headTail@PLT
 3189      00
 3190 261a 4883C410 		addq	$16, %rsp
 3191 261e 898510FF 		movl	%eax, -240(%rbp)
 3191      FFFF
 609:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 610:svf2csvf.c    **** 					cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 611:svf2csvf.c    **** 					error);
 612:svf2csvf.c    **** 				if ( zeroMask || !tdo ) {
 3192              		.loc 1 612 0
 3193 2624 80BD03FF 		cmpb	$0, -253(%rbp)
 3193      FFFF00
 3194 262b 750E     		jne	.L212
 3195              		.loc 1 612 0 is_stmt 0 discriminator 1
 3196 262d 4883BD48 		cmpq	$0, -184(%rbp)
 3196      FFFFFF00 
 3197 2635 0F85CB00 		jne	.L213
 3197      0000
 3198              	.L212:
 613:svf2csvf.c    **** 					cxt->numCommands++;
 3199              		.loc 1 613 0 is_stmt 1
 3200 263b 488B85F8 		movq	-264(%rbp), %rax
 3200      FEFFFF
 3201 2642 8B809C02 		movl	668(%rax), %eax
 3201      0000
 3202 2648 8D5001   		leal	1(%rax), %edx
 3203 264b 488B85F8 		movq	-264(%rbp), %rax
 3203      FEFFFF
 3204 2652 89909C02 		movl	%edx, 668(%rax)
 3204      0000
 614:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDR, error);
 3205              		.loc 1 614 0
 3206 2658 488B95D8 		movq	-296(%rbp), %rdx
 3206      FEFFFF
 3207 265f 488B85E8 		movq	-280(%rbp), %rax
 3207      FEFFFF
 3208 2666 BE030000 		movl	$3, %esi
 3208      00
 3209 266b 4889C7   		movq	%rax, %rdi
 3210 266e E8000000 		call	bufAppendByte@PLT
 3210      00
 3211 2673 898514FF 		movl	%eax, -236(%rbp)
 3211      FFFF
 615:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3212              		.loc 1 615 0
 3213 2679 83BD14FF 		cmpl	$0, -236(%rbp)
 3213      FFFF00
 3214 2680 7425     		je	.L214
 3215              		.loc 1 615 0 is_stmt 0 discriminator 1
 3216 2682 488B85D8 		movq	-296(%rbp), %rax
 3216      FEFFFF
 3217 2689 488D3500 		leaq	.LC16(%rip), %rsi
 3217      000000
 3218 2690 4889C7   		movq	%rax, %rdi
 3219 2693 E8000000 		call	errPrefix@PLT
 3219      00
 3220 2698 C78504FF 		movl	$1, -252(%rbp)
 3220      FFFF0100 
 3220      0000
 3221 26a2 E9150700 		jmp	.L136
 3221      00
 3222              	.L214:
 616:svf2csvf.c    **** 					fStatus = appendSwapped(csvfBuf, tmpBody1.data, (uint32)tmpBody1.length, error);
 3223              		.loc 1 616 0 is_stmt 1
 3224 26a7 488B4598 		movq	-104(%rbp), %rax
 3225 26ab 89C7     		movl	%eax, %edi
 3226 26ad 488B7590 		movq	-112(%rbp), %rsi
 3227 26b1 488B95D8 		movq	-296(%rbp), %rdx
 3227      FEFFFF
 3228 26b8 488B85E8 		movq	-280(%rbp), %rax
 3228      FEFFFF
 3229 26bf 4889D1   		movq	%rdx, %rcx
 3230 26c2 89FA     		movl	%edi, %edx
 3231 26c4 4889C7   		movq	%rax, %rdi
 3232 26c7 E865EAFF 		call	appendSwapped
 3232      FF
 3233 26cc 898510FF 		movl	%eax, -240(%rbp)
 3233      FFFF
 617:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3234              		.loc 1 617 0
 3235 26d2 83BD10FF 		cmpl	$0, -240(%rbp)
 3235      FFFF00
 3236 26d9 0F848002 		je	.L216
 3236      0000
 3237              		.loc 1 617 0 is_stmt 0 discriminator 1
 3238 26df 488B85D8 		movq	-296(%rbp), %rax
 3238      FEFFFF
 3239 26e6 488D3500 		leaq	.LC16(%rip), %rsi
 3239      000000
 3240 26ed 4889C7   		movq	%rax, %rdi
 3241 26f0 E8000000 		call	errPrefix@PLT
 3241      00
 3242 26f5 8B8510FF 		movl	-240(%rbp), %eax
 3242      FFFF
 3243 26fb 898504FF 		movl	%eax, -252(%rbp)
 3243      FFFF
 3244 2701 E9B60600 		jmp	.L136
 3244      00
 3245              	.L213:
 618:svf2csvf.c    **** 				} else {
 619:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.tdo, error);
 3246              		.loc 1 619 0 is_stmt 1
 3247 2706 488B85F8 		movq	-264(%rbp), %rax
 3247      FEFFFF
 3248 270d 488D4828 		leaq	40(%rax), %rcx
 3249 2711 488B95D8 		movq	-296(%rbp), %rdx
 3249      FEFFFF
 3250 2718 488D8570 		leaq	-144(%rbp), %rax
 3250      FFFFFF
 3251 271f 4889CE   		movq	%rcx, %rsi
 3252 2722 4889C7   		movq	%rax, %rdi
 3253 2725 E8000000 		call	bufDeepCopy@PLT
 3253      00
 3254 272a 898514FF 		movl	%eax, -236(%rbp)
 3254      FFFF
 620:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3255              		.loc 1 620 0
 3256 2730 83BD14FF 		cmpl	$0, -236(%rbp)
 3256      FFFF00
 3257 2737 7425     		je	.L217
 3258              		.loc 1 620 0 is_stmt 0 discriminator 1
 3259 2739 488B85D8 		movq	-296(%rbp), %rax
 3259      FEFFFF
 3260 2740 488D3500 		leaq	.LC16(%rip), %rsi
 3260      000000
 3261 2747 4889C7   		movq	%rax, %rdi
 3262 274a E8000000 		call	errPrefix@PLT
 3262      00
 3263 274f C78504FF 		movl	$1, -252(%rbp)
 3263      FFFF0100 
 3263      0000
 3264 2759 E95E0600 		jmp	.L136
 3264      00
 3265              	.L217:
 621:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpBody2, &cxt->dataBody.tdo, error);
 3266              		.loc 1 621 0 is_stmt 1
 3267 275e 488B85F8 		movq	-264(%rbp), %rax
 3267      FEFFFF
 3268 2765 488D88F8 		leaq	248(%rax), %rcx
 3268      000000
 3269 276c 488B95D8 		movq	-296(%rbp), %rdx
 3269      FEFFFF
 3270 2773 488D45B0 		leaq	-80(%rbp), %rax
 3271 2777 4889CE   		movq	%rcx, %rsi
 3272 277a 4889C7   		movq	%rax, %rdi
 3273 277d E8000000 		call	bufDeepCopy@PLT
 3273      00
 3274 2782 898514FF 		movl	%eax, -236(%rbp)
 3274      FFFF
 622:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3275              		.loc 1 622 0
 3276 2788 83BD14FF 		cmpl	$0, -236(%rbp)
 3276      FFFF00
 3277 278f 7425     		je	.L218
 3278              		.loc 1 622 0 is_stmt 0 discriminator 1
 3279 2791 488B85D8 		movq	-296(%rbp), %rax
 3279      FEFFFF
 3280 2798 488D3500 		leaq	.LC16(%rip), %rsi
 3280      000000
 3281 279f 4889C7   		movq	%rax, %rdi
 3282 27a2 E8000000 		call	errPrefix@PLT
 3282      00
 3283 27a7 C78504FF 		movl	$1, -252(%rbp)
 3283      FFFF0100 
 3283      0000
 3284 27b1 E9060600 		jmp	.L136
 3284      00
 3285              	.L218:
 623:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.tdo, error);
 3286              		.loc 1 623 0 is_stmt 1
 3287 27b6 488B85F8 		movq	-264(%rbp), %rax
 3287      FEFFFF
 3288 27bd 488D88C8 		leaq	456(%rax), %rcx
 3288      010000
 3289 27c4 488B95D8 		movq	-296(%rbp), %rdx
 3289      FEFFFF
 3290 27cb 488D45D0 		leaq	-48(%rbp), %rax
 3291 27cf 4889CE   		movq	%rcx, %rsi
 3292 27d2 4889C7   		movq	%rax, %rdi
 3293 27d5 E8000000 		call	bufDeepCopy@PLT
 3293      00
 3294 27da 898514FF 		movl	%eax, -236(%rbp)
 3294      FFFF
 624:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3295              		.loc 1 624 0
 3296 27e0 83BD14FF 		cmpl	$0, -236(%rbp)
 3296      FFFF00
 3297 27e7 7425     		je	.L219
 3298              		.loc 1 624 0 is_stmt 0 discriminator 1
 3299 27e9 488B85D8 		movq	-296(%rbp), %rax
 3299      FEFFFF
 3300 27f0 488D3500 		leaq	.LC16(%rip), %rsi
 3300      000000
 3301 27f7 4889C7   		movq	%rax, %rdi
 3302 27fa E8000000 		call	errPrefix@PLT
 3302      00
 3303 27ff C78504FF 		movl	$1, -252(%rbp)
 3303      FFFF0100 
 3303      0000
 3304 2809 E9AE0500 		jmp	.L136
 3304      00
 3305              	.L219:
 625:svf2csvf.c    **** 					fStatus = headTail(
 3306              		.loc 1 625 0 is_stmt 1
 3307 280e 488B85F8 		movq	-264(%rbp), %rax
 3307      FEFFFF
 3308 2815 448B80A0 		movl	416(%rax), %r8d
 3308      010000
 3309 281c 488B85F8 		movq	-264(%rbp), %rax
 3309      FEFFFF
 3310 2823 8B38     		movl	(%rax), %edi
 3311 2825 488B85F8 		movq	-264(%rbp), %rax
 3311      FEFFFF
 3312 282c 8B88D000 		movl	208(%rax), %ecx
 3312      0000
 3313 2832 488D55D0 		leaq	-48(%rbp), %rdx
 3314 2836 488DB570 		leaq	-144(%rbp), %rsi
 3314      FFFFFF
 3315 283d 488D45B0 		leaq	-80(%rbp), %rax
 3316 2841 4883EC08 		subq	$8, %rsp
 3317 2845 FFB5D8FE 		pushq	-296(%rbp)
 3317      FFFF
 3318 284b 4589C1   		movl	%r8d, %r9d
 3319 284e 4189F8   		movl	%edi, %r8d
 3320 2851 4889C7   		movq	%rax, %rdi
 3321 2854 E8000000 		call	headTail@PLT
 3321      00
 3322 2859 4883C410 		addq	$16, %rsp
 3323 285d 898510FF 		movl	%eax, -240(%rbp)
 3323      FFFF
 626:svf2csvf.c    **** 						&tmpBody2, &tmpHead, &tmpTail,
 627:svf2csvf.c    **** 						cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 628:svf2csvf.c    **** 						error);
 629:svf2csvf.c    **** 					if ( maxBufSize && tmpBody2.length > *maxBufSize ) {
 3324              		.loc 1 629 0
 3325 2863 4883BDE0 		cmpq	$0, -288(%rbp)
 3325      FEFFFF00 
 3326 286b 7423     		je	.L220
 3327              		.loc 1 629 0 is_stmt 0 discriminator 1
 3328 286d 488B55B8 		movq	-72(%rbp), %rdx
 3329 2871 488B85E0 		movq	-288(%rbp), %rax
 3329      FEFFFF
 3330 2878 8B00     		movl	(%rax), %eax
 3331 287a 89C0     		movl	%eax, %eax
 3332 287c 4839C2   		cmpq	%rax, %rdx
 3333 287f 760F     		jbe	.L220
 630:svf2csvf.c    **** 						*maxBufSize = (uint32)tmpBody2.length;
 3334              		.loc 1 630 0 is_stmt 1
 3335 2881 488B45B8 		movq	-72(%rbp), %rax
 3336 2885 89C2     		movl	%eax, %edx
 3337 2887 488B85E0 		movq	-288(%rbp), %rax
 3337      FEFFFF
 3338 288e 8910     		movl	%edx, (%rax)
 3339              	.L220:
 631:svf2csvf.c    **** 					}
 632:svf2csvf.c    **** 					cxt->numCommands++;
 3340              		.loc 1 632 0
 3341 2890 488B85F8 		movq	-264(%rbp), %rax
 3341      FEFFFF
 3342 2897 8B809C02 		movl	668(%rax), %eax
 3342      0000
 3343 289d 8D5001   		leal	1(%rax), %edx
 3344 28a0 488B85F8 		movq	-264(%rbp), %rax
 3344      FEFFFF
 3345 28a7 89909C02 		movl	%edx, 668(%rax)
 3345      0000
 633:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDRTDO, error);
 3346              		.loc 1 633 0
 3347 28ad 488B95D8 		movq	-296(%rbp), %rdx
 3347      FEFFFF
 3348 28b4 488B85E8 		movq	-280(%rbp), %rax
 3348      FEFFFF
 3349 28bb BE090000 		movl	$9, %esi
 3349      00
 3350 28c0 4889C7   		movq	%rax, %rdi
 3351 28c3 E8000000 		call	bufAppendByte@PLT
 3351      00
 3352 28c8 898514FF 		movl	%eax, -236(%rbp)
 3352      FFFF
 634:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3353              		.loc 1 634 0
 3354 28ce 83BD14FF 		cmpl	$0, -236(%rbp)
 3354      FFFF00
 3355 28d5 7425     		je	.L221
 3356              		.loc 1 634 0 is_stmt 0 discriminator 1
 3357 28d7 488B85D8 		movq	-296(%rbp), %rax
 3357      FEFFFF
 3358 28de 488D3500 		leaq	.LC16(%rip), %rsi
 3358      000000
 3359 28e5 4889C7   		movq	%rax, %rdi
 3360 28e8 E8000000 		call	errPrefix@PLT
 3360      00
 3361 28ed C78504FF 		movl	$1, -252(%rbp)
 3361      FFFF0100 
 3361      0000
 3362 28f7 E9C00400 		jmp	.L136
 3362      00
 3363              	.L221:
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 636:svf2csvf.c    **** 						csvfBuf, tmpBody1.data, tmpBody2.data, (uint32)tmpBody2.length, error);
 3364              		.loc 1 636 0 is_stmt 1
 3365 28fc 488B45B8 		movq	-72(%rbp), %rax
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 3366              		.loc 1 635 0
 3367 2900 89C7     		movl	%eax, %edi
 3368              		.loc 1 636 0
 3369 2902 488B55B0 		movq	-80(%rbp), %rdx
 3370 2906 488B7590 		movq	-112(%rbp), %rsi
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 3371              		.loc 1 635 0
 3372 290a 488B8DD8 		movq	-296(%rbp), %rcx
 3372      FEFFFF
 3373 2911 488B85E8 		movq	-280(%rbp), %rax
 3373      FEFFFF
 3374 2918 4989C8   		movq	%rcx, %r8
 3375 291b 89F9     		movl	%edi, %ecx
 3376 291d 4889C7   		movq	%rax, %rdi
 3377 2920 E818E7FF 		call	appendSwappedAndInterleaved
 3377      FF
 3378 2925 898510FF 		movl	%eax, -240(%rbp)
 3378      FFFF
 637:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3379              		.loc 1 637 0
 3380 292b 83BD10FF 		cmpl	$0, -240(%rbp)
 3380      FFFF00
 3381 2932 0F844B04 		je	.L241
 3381      0000
 3382              		.loc 1 637 0 is_stmt 0 discriminator 1
 3383 2938 488B85D8 		movq	-296(%rbp), %rax
 3383      FEFFFF
 3384 293f 488D3500 		leaq	.LC16(%rip), %rsi
 3384      000000
 3385 2946 4889C7   		movq	%rax, %rdi
 3386 2949 E8000000 		call	errPrefix@PLT
 3386      00
 3387 294e 8B8510FF 		movl	-240(%rbp), %eax
 3387      FFFF
 3388 2954 898504FF 		movl	%eax, -252(%rbp)
 3388      FFFF
 3389 295a E95D0400 		jmp	.L136
 3389      00
 3390              	.L216:
 638:svf2csvf.c    **** 				}
 639:svf2csvf.c    **** 				break;
 3391              		.loc 1 639 0 is_stmt 1 discriminator 8
 3392 295f 90       		nop
 3393 2960 E91E0400 		jmp	.L241
 3393      00
 3394              	.L191:
 3395              	.LBE6:
 640:svf2csvf.c    **** 			}
 641:svf2csvf.c    **** 		} else {
 642:svf2csvf.c    **** 			switch ( op ) {
 3396              		.loc 1 642 0
 3397 2965 8B8508FF 		movl	-248(%rbp), %eax
 3397      FFFF
 3398 296b 83F853   		cmpl	$83, %eax
 3399 296e 0F84FA00 		je	.L223
 3399      0000
 3400 2974 83F854   		cmpl	$84, %eax
 3401 2977 747E     		je	.L224
 3402 2979 83F848   		cmpl	$72, %eax
 3403 297c 7405     		je	.L225
 3404              	.LBE8:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3405              		.loc 1 461 0
 3406 297e E9390400 		jmp	.L136
 3406      00
 3407              	.L225:
 3408              	.LBB9:
 643:svf2csvf.c    **** 			case HEAD:
 644:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnHead, length, tdi, tdo, mask, error);
 3409              		.loc 1 644 0
 3410 2983 488B85F8 		movq	-264(%rbp), %rax
 3410      FEFFFF
 3411 298a 488D7868 		leaq	104(%rax), %rdi
 3412 298e 4C8B85D8 		movq	-296(%rbp), %r8
 3412      FEFFFF
 3413 2995 488BB550 		movq	-176(%rbp), %rsi
 3413      FFFFFF
 3414 299c 488B8D48 		movq	-184(%rbp), %rcx
 3414      FFFFFF
 3415 29a3 488B9540 		movq	-192(%rbp), %rdx
 3415      FFFFFF
 3416 29aa 8B850CFF 		movl	-244(%rbp), %eax
 3416      FFFF
 3417 29b0 4D89C1   		movq	%r8, %r9
 3418 29b3 4989F0   		movq	%rsi, %r8
 3419 29b6 89C6     		movl	%eax, %esi
 3420 29b8 E8B0E3FF 		call	processLine
 3420      FF
 3421 29bd 898510FF 		movl	%eax, -240(%rbp)
 3421      FFFF
 645:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3422              		.loc 1 645 0
 3423 29c3 83BD10FF 		cmpl	$0, -240(%rbp)
 3423      FFFF00
 3424 29ca 0F84B603 		je	.L242
 3424      0000
 3425              		.loc 1 645 0 is_stmt 0 discriminator 1
 3426 29d0 488B85D8 		movq	-296(%rbp), %rax
 3426      FEFFFF
 3427 29d7 488D3500 		leaq	.LC16(%rip), %rsi
 3427      000000
 3428 29de 4889C7   		movq	%rax, %rdi
 3429 29e1 E8000000 		call	errPrefix@PLT
 3429      00
 3430 29e6 8B8510FF 		movl	-240(%rbp), %eax
 3430      FFFF
 3431 29ec 898504FF 		movl	%eax, -252(%rbp)
 3431      FFFF
 3432 29f2 E9C50300 		jmp	.L136
 3432      00
 3433              	.L224:
 646:svf2csvf.c    **** 				break;
 647:svf2csvf.c    **** 			case TAIL:
 648:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnTail, length, tdi, tdo, mask, error);
 3434              		.loc 1 648 0 is_stmt 1
 3435 29f7 488B85F8 		movq	-264(%rbp), %rax
 3435      FEFFFF
 3436 29fe 488DB808 		leaq	520(%rax), %rdi
 3436      020000
 3437 2a05 4C8B85D8 		movq	-296(%rbp), %r8
 3437      FEFFFF
 3438 2a0c 488BB550 		movq	-176(%rbp), %rsi
 3438      FFFFFF
 3439 2a13 488B8D48 		movq	-184(%rbp), %rcx
 3439      FFFFFF
 3440 2a1a 488B9540 		movq	-192(%rbp), %rdx
 3440      FFFFFF
 3441 2a21 8B850CFF 		movl	-244(%rbp), %eax
 3441      FFFF
 3442 2a27 4D89C1   		movq	%r8, %r9
 3443 2a2a 4989F0   		movq	%rsi, %r8
 3444 2a2d 89C6     		movl	%eax, %esi
 3445 2a2f E839E3FF 		call	processLine
 3445      FF
 3446 2a34 898510FF 		movl	%eax, -240(%rbp)
 3446      FFFF
 649:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3447              		.loc 1 649 0
 3448 2a3a 83BD10FF 		cmpl	$0, -240(%rbp)
 3448      FFFF00
 3449 2a41 0F844203 		je	.L243
 3449      0000
 3450              		.loc 1 649 0 is_stmt 0 discriminator 1
 3451 2a47 488B85D8 		movq	-296(%rbp), %rax
 3451      FEFFFF
 3452 2a4e 488D3500 		leaq	.LC16(%rip), %rsi
 3452      000000
 3453 2a55 4889C7   		movq	%rax, %rdi
 3454 2a58 E8000000 		call	errPrefix@PLT
 3454      00
 3455 2a5d 8B8510FF 		movl	-240(%rbp), %eax
 3455      FFFF
 3456 2a63 898504FF 		movl	%eax, -252(%rbp)
 3456      FFFF
 3457 2a69 E94E0300 		jmp	.L136
 3457      00
 3458              	.L223:
 650:svf2csvf.c    **** 				break;
 651:svf2csvf.c    **** 			case BODY:
 652:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnBody, length, tdi, tdo, mask, error);
 3459              		.loc 1 652 0 is_stmt 1
 3460 2a6e 488B85F8 		movq	-264(%rbp), %rax
 3460      FEFFFF
 3461 2a75 488DB838 		leaq	312(%rax), %rdi
 3461      010000
 3462 2a7c 4C8B85D8 		movq	-296(%rbp), %r8
 3462      FEFFFF
 3463 2a83 488BB550 		movq	-176(%rbp), %rsi
 3463      FFFFFF
 3464 2a8a 488B8D48 		movq	-184(%rbp), %rcx
 3464      FFFFFF
 3465 2a91 488B9540 		movq	-192(%rbp), %rdx
 3465      FFFFFF
 3466 2a98 8B850CFF 		movl	-244(%rbp), %eax
 3466      FFFF
 3467 2a9e 4D89C1   		movq	%r8, %r9
 3468 2aa1 4989F0   		movq	%rsi, %r8
 3469 2aa4 89C6     		movl	%eax, %esi
 3470 2aa6 E8C2E2FF 		call	processLine
 3470      FF
 3471 2aab 898510FF 		movl	%eax, -240(%rbp)
 3471      FFFF
 653:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3472              		.loc 1 653 0
 3473 2ab1 83BD10FF 		cmpl	$0, -240(%rbp)
 3473      FFFF00
 3474 2ab8 7427     		je	.L228
 3475              		.loc 1 653 0 is_stmt 0 discriminator 1
 3476 2aba 488B85D8 		movq	-296(%rbp), %rax
 3476      FEFFFF
 3477 2ac1 488D3500 		leaq	.LC16(%rip), %rsi
 3477      000000
 3478 2ac8 4889C7   		movq	%rax, %rdi
 3479 2acb E8000000 		call	errPrefix@PLT
 3479      00
 3480 2ad0 8B8510FF 		movl	-240(%rbp), %eax
 3480      FFFF
 3481 2ad6 898504FF 		movl	%eax, -252(%rbp)
 3481      FFFF
 3482 2adc E9DB0200 		jmp	.L136
 3482      00
 3483              	.L228:
 654:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->insnHead.tdi, error);
 3484              		.loc 1 654 0 is_stmt 1
 3485 2ae1 488B85F8 		movq	-264(%rbp), %rax
 3485      FEFFFF
 3486 2ae8 488D4870 		leaq	112(%rax), %rcx
 3487 2aec 488B95D8 		movq	-296(%rbp), %rdx
 3487      FEFFFF
 3488 2af3 488D8570 		leaq	-144(%rbp), %rax
 3488      FFFFFF
 3489 2afa 4889CE   		movq	%rcx, %rsi
 3490 2afd 4889C7   		movq	%rax, %rdi
 3491 2b00 E8000000 		call	bufDeepCopy@PLT
 3491      00
 3492 2b05 898514FF 		movl	%eax, -236(%rbp)
 3492      FFFF
 655:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3493              		.loc 1 655 0
 3494 2b0b 83BD14FF 		cmpl	$0, -236(%rbp)
 3494      FFFF00
 3495 2b12 7425     		je	.L229
 3496              		.loc 1 655 0 is_stmt 0 discriminator 1
 3497 2b14 488B85D8 		movq	-296(%rbp), %rax
 3497      FEFFFF
 3498 2b1b 488D3500 		leaq	.LC16(%rip), %rsi
 3498      000000
 3499 2b22 4889C7   		movq	%rax, %rdi
 3500 2b25 E8000000 		call	errPrefix@PLT
 3500      00
 3501 2b2a C78504FF 		movl	$1, -252(%rbp)
 3501      FFFF0100 
 3501      0000
 3502 2b34 E9830200 		jmp	.L136
 3502      00
 3503              	.L229:
 656:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->insnBody.tdi, error);
 3504              		.loc 1 656 0 is_stmt 1
 3505 2b39 488B85F8 		movq	-264(%rbp), %rax
 3505      FEFFFF
 3506 2b40 488D8840 		leaq	320(%rax), %rcx
 3506      010000
 3507 2b47 488B95D8 		movq	-296(%rbp), %rdx
 3507      FEFFFF
 3508 2b4e 488D4590 		leaq	-112(%rbp), %rax
 3509 2b52 4889CE   		movq	%rcx, %rsi
 3510 2b55 4889C7   		movq	%rax, %rdi
 3511 2b58 E8000000 		call	bufDeepCopy@PLT
 3511      00
 3512 2b5d 898514FF 		movl	%eax, -236(%rbp)
 3512      FFFF
 657:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3513              		.loc 1 657 0
 3514 2b63 83BD14FF 		cmpl	$0, -236(%rbp)
 3514      FFFF00
 3515 2b6a 7425     		je	.L230
 3516              		.loc 1 657 0 is_stmt 0 discriminator 1
 3517 2b6c 488B85D8 		movq	-296(%rbp), %rax
 3517      FEFFFF
 3518 2b73 488D3500 		leaq	.LC16(%rip), %rsi
 3518      000000
 3519 2b7a 4889C7   		movq	%rax, %rdi
 3520 2b7d E8000000 		call	errPrefix@PLT
 3520      00
 3521 2b82 C78504FF 		movl	$1, -252(%rbp)
 3521      FFFF0100 
 3521      0000
 3522 2b8c E92B0200 		jmp	.L136
 3522      00
 3523              	.L230:
 658:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->insnTail.tdi, error);
 3524              		.loc 1 658 0 is_stmt 1
 3525 2b91 488B85F8 		movq	-264(%rbp), %rax
 3525      FEFFFF
 3526 2b98 488D8810 		leaq	528(%rax), %rcx
 3526      020000
 3527 2b9f 488B95D8 		movq	-296(%rbp), %rdx
 3527      FEFFFF
 3528 2ba6 488D45D0 		leaq	-48(%rbp), %rax
 3529 2baa 4889CE   		movq	%rcx, %rsi
 3530 2bad 4889C7   		movq	%rax, %rdi
 3531 2bb0 E8000000 		call	bufDeepCopy@PLT
 3531      00
 3532 2bb5 898514FF 		movl	%eax, -236(%rbp)
 3532      FFFF
 659:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3533              		.loc 1 659 0
 3534 2bbb 83BD14FF 		cmpl	$0, -236(%rbp)
 3534      FFFF00
 3535 2bc2 7425     		je	.L231
 3536              		.loc 1 659 0 is_stmt 0 discriminator 1
 3537 2bc4 488B85D8 		movq	-296(%rbp), %rax
 3537      FEFFFF
 3538 2bcb 488D3500 		leaq	.LC16(%rip), %rsi
 3538      000000
 3539 2bd2 4889C7   		movq	%rax, %rdi
 3540 2bd5 E8000000 		call	errPrefix@PLT
 3540      00
 3541 2bda C78504FF 		movl	$1, -252(%rbp)
 3541      FFFF0100 
 3541      0000
 3542 2be4 E9D30100 		jmp	.L136
 3542      00
 3543              	.L231:
 660:svf2csvf.c    **** 				fStatus = headTail(
 3544              		.loc 1 660 0 is_stmt 1
 3545 2be9 488B85F8 		movq	-264(%rbp), %rax
 3545      FEFFFF
 3546 2bf0 448B8008 		movl	520(%rax), %r8d
 3546      020000
 3547 2bf7 488B85F8 		movq	-264(%rbp), %rax
 3547      FEFFFF
 3548 2bfe 8B7868   		movl	104(%rax), %edi
 3549 2c01 488B85F8 		movq	-264(%rbp), %rax
 3549      FEFFFF
 3550 2c08 8B883801 		movl	312(%rax), %ecx
 3550      0000
 3551 2c0e 488D55D0 		leaq	-48(%rbp), %rdx
 3552 2c12 488DB570 		leaq	-144(%rbp), %rsi
 3552      FFFFFF
 3553 2c19 488D4590 		leaq	-112(%rbp), %rax
 3554 2c1d 4883EC08 		subq	$8, %rsp
 3555 2c21 FFB5D8FE 		pushq	-296(%rbp)
 3555      FFFF
 3556 2c27 4589C1   		movl	%r8d, %r9d
 3557 2c2a 4189F8   		movl	%edi, %r8d
 3558 2c2d 4889C7   		movq	%rax, %rdi
 3559 2c30 E8000000 		call	headTail@PLT
 3559      00
 3560 2c35 4883C410 		addq	$16, %rsp
 3561 2c39 898510FF 		movl	%eax, -240(%rbp)
 3561      FFFF
 661:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 662:svf2csvf.c    **** 					cxt->insnBody.numBits, cxt->insnHead.numBits, cxt->insnTail.numBits,
 663:svf2csvf.c    **** 					error);
 664:svf2csvf.c    **** 				cxt->numCommands++;
 3562              		.loc 1 664 0
 3563 2c3f 488B85F8 		movq	-264(%rbp), %rax
 3563      FEFFFF
 3564 2c46 8B809C02 		movl	668(%rax), %eax
 3564      0000
 3565 2c4c 8D5001   		leal	1(%rax), %edx
 3566 2c4f 488B85F8 		movq	-264(%rbp), %rax
 3566      FEFFFF
 3567 2c56 89909C02 		movl	%edx, 668(%rax)
 3567      0000
 665:svf2csvf.c    **** 				bStatus = bufAppendByte(csvfBuf, XSIR, error);
 3568              		.loc 1 665 0
 3569 2c5c 488B95D8 		movq	-296(%rbp), %rdx
 3569      FEFFFF
 3570 2c63 488B85E8 		movq	-280(%rbp), %rax
 3570      FEFFFF
 3571 2c6a BE020000 		movl	$2, %esi
 3571      00
 3572 2c6f 4889C7   		movq	%rax, %rdi
 3573 2c72 E8000000 		call	bufAppendByte@PLT
 3573      00
 3574 2c77 898514FF 		movl	%eax, -236(%rbp)
 3574      FFFF
 666:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3575              		.loc 1 666 0
 3576 2c7d 83BD14FF 		cmpl	$0, -236(%rbp)
 3576      FFFF00
 3577 2c84 7425     		je	.L232
 3578              		.loc 1 666 0 is_stmt 0 discriminator 1
 3579 2c86 488B85D8 		movq	-296(%rbp), %rax
 3579      FEFFFF
 3580 2c8d 488D3500 		leaq	.LC16(%rip), %rsi
 3580      000000
 3581 2c94 4889C7   		movq	%rax, %rdi
 3582 2c97 E8000000 		call	errPrefix@PLT
 3582      00
 3583 2c9c C78504FF 		movl	$1, -252(%rbp)
 3583      FFFF0100 
 3583      0000
 3584 2ca6 E9110100 		jmp	.L136
 3584      00
 3585              	.L232:
 667:svf2csvf.c    **** 				bStatus = bufAppendByte(csvfBuf, (uint8)(cxt->insnBody.numBits + cxt->insnHead.numBits + cxt->i
 3586              		.loc 1 667 0 is_stmt 1
 3587 2cab 488B85F8 		movq	-264(%rbp), %rax
 3587      FEFFFF
 3588 2cb2 8B803801 		movl	312(%rax), %eax
 3588      0000
 3589 2cb8 89C2     		movl	%eax, %edx
 3590 2cba 488B85F8 		movq	-264(%rbp), %rax
 3590      FEFFFF
 3591 2cc1 8B4068   		movl	104(%rax), %eax
 3592 2cc4 01C2     		addl	%eax, %edx
 3593 2cc6 488B85F8 		movq	-264(%rbp), %rax
 3593      FEFFFF
 3594 2ccd 8B800802 		movl	520(%rax), %eax
 3594      0000
 3595 2cd3 01D0     		addl	%edx, %eax
 3596 2cd5 0FB6C8   		movzbl	%al, %ecx
 3597 2cd8 488B95D8 		movq	-296(%rbp), %rdx
 3597      FEFFFF
 3598 2cdf 488B85E8 		movq	-280(%rbp), %rax
 3598      FEFFFF
 3599 2ce6 89CE     		movl	%ecx, %esi
 3600 2ce8 4889C7   		movq	%rax, %rdi
 3601 2ceb E8000000 		call	bufAppendByte@PLT
 3601      00
 3602 2cf0 898514FF 		movl	%eax, -236(%rbp)
 3602      FFFF
 668:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3603              		.loc 1 668 0
 3604 2cf6 83BD14FF 		cmpl	$0, -236(%rbp)
 3604      FFFF00
 3605 2cfd 7425     		je	.L233
 3606              		.loc 1 668 0 is_stmt 0 discriminator 1
 3607 2cff 488B85D8 		movq	-296(%rbp), %rax
 3607      FEFFFF
 3608 2d06 488D3500 		leaq	.LC16(%rip), %rsi
 3608      000000
 3609 2d0d 4889C7   		movq	%rax, %rdi
 3610 2d10 E8000000 		call	errPrefix@PLT
 3610      00
 3611 2d15 C78504FF 		movl	$1, -252(%rbp)
 3611      FFFF0100 
 3611      0000
 3612 2d1f E9980000 		jmp	.L136
 3612      00
 3613              	.L233:
 669:svf2csvf.c    **** 				fStatus = appendSwapped(csvfBuf, tmpBody1.data, (uint32)tmpBody1.length, error);
 3614              		.loc 1 669 0 is_stmt 1
 3615 2d24 488B4598 		movq	-104(%rbp), %rax
 3616 2d28 89C7     		movl	%eax, %edi
 3617 2d2a 488B7590 		movq	-112(%rbp), %rsi
 3618 2d2e 488B95D8 		movq	-296(%rbp), %rdx
 3618      FEFFFF
 3619 2d35 488B85E8 		movq	-280(%rbp), %rax
 3619      FEFFFF
 3620 2d3c 4889D1   		movq	%rdx, %rcx
 3621 2d3f 89FA     		movl	%edi, %edx
 3622 2d41 4889C7   		movq	%rax, %rdi
 3623 2d44 E8E8E3FF 		call	appendSwapped
 3623      FF
 3624 2d49 898510FF 		movl	%eax, -240(%rbp)
 3624      FFFF
 670:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3625              		.loc 1 670 0
 3626 2d4f 83BD10FF 		cmpl	$0, -240(%rbp)
 3626      FFFF00
 3627 2d56 7434     		je	.L244
 3628              		.loc 1 670 0 is_stmt 0 discriminator 1
 3629 2d58 488B85D8 		movq	-296(%rbp), %rax
 3629      FEFFFF
 3630 2d5f 488D3500 		leaq	.LC16(%rip), %rsi
 3630      000000
 3631 2d66 4889C7   		movq	%rax, %rdi
 3632 2d69 E8000000 		call	errPrefix@PLT
 3632      00
 3633 2d6e 8B8510FF 		movl	-240(%rbp), %eax
 3633      FFFF
 3634 2d74 898504FF 		movl	%eax, -252(%rbp)
 3634      FFFF
 3635 2d7a 90       		nop
 3636 2d7b EB3F     		jmp	.L136
 3637              	.L239:
 3638              	.LBB7:
 555:svf2csvf.c    **** 			case TAIL:
 3639              		.loc 1 555 0 is_stmt 1
 3640 2d7d 90       		nop
 3641 2d7e EB3C     		jmp	.L136
 3642              	.L240:
 559:svf2csvf.c    **** 			case BODY:
 3643              		.loc 1 559 0
 3644 2d80 90       		nop
 3645 2d81 EB39     		jmp	.L136
 3646              	.L241:
 639:svf2csvf.c    **** 			}
 3647              		.loc 1 639 0
 3648 2d83 90       		nop
 3649 2d84 EB36     		jmp	.L136
 3650              	.L242:
 3651              	.LBE7:
 646:svf2csvf.c    **** 			case TAIL:
 3652              		.loc 1 646 0
 3653 2d86 90       		nop
 3654 2d87 EB33     		jmp	.L136
 3655              	.L243:
 650:svf2csvf.c    **** 			case BODY:
 3656              		.loc 1 650 0
 3657 2d89 90       		nop
 3658 2d8a EB30     		jmp	.L136
 3659              	.L244:
 671:svf2csvf.c    **** 				break;
 3660              		.loc 1 671 0
 3661 2d8c 90       		nop
 3662              	.LBE9:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3663              		.loc 1 461 0
 3664 2d8d EB2D     		jmp	.L136
 3665              	.L138:
 672:svf2csvf.c    **** 			}
 673:svf2csvf.c    **** 		}
 674:svf2csvf.c    **** 	} else {
 675:svf2csvf.c    **** 		CHECK_STATUS(
 3666              		.loc 1 675 0 discriminator 1
 3667 2d8f 488B9558 		movq	-168(%rbp), %rdx
 3667      FFFFFF
 3668 2d96 488B85D8 		movq	-296(%rbp), %rax
 3668      FEFFFF
 3669 2d9d 488D3500 		leaq	.LC26(%rip), %rsi
 3669      000000
 3670 2da4 4889C7   		movq	%rax, %rdi
 3671 2da7 B8000000 		movl	$0, %eax
 3671      00
 3672 2dac E8000000 		call	errRender@PLT
 3672      00
 3673 2db1 C78504FF 		movl	$10, -252(%rbp)
 3673      FFFF0A00 
 3673      0000
 3674 2dbb 90       		nop
 3675              	.L136:
 676:svf2csvf.c    **** 			true, FL_SVF_PARSE_ERR, cleanup,
 677:svf2csvf.c    **** 			"parseLine(): Unrecognised command \"%s\"\n", line);
 678:svf2csvf.c    **** 	}
 679:svf2csvf.c    **** cleanup:
 680:svf2csvf.c    **** 	bufDestroy(&tmpHead);
 3676              		.loc 1 680 0
 3677 2dbc 488D8570 		leaq	-144(%rbp), %rax
 3677      FFFFFF
 3678 2dc3 4889C7   		movq	%rax, %rdi
 3679 2dc6 E8000000 		call	bufDestroy@PLT
 3679      00
 681:svf2csvf.c    **** 	bufDestroy(&tmpBody1);
 3680              		.loc 1 681 0
 3681 2dcb 488D4590 		leaq	-112(%rbp), %rax
 3682 2dcf 4889C7   		movq	%rax, %rdi
 3683 2dd2 E8000000 		call	bufDestroy@PLT
 3683      00
 682:svf2csvf.c    **** 	bufDestroy(&tmpBody2);
 3684              		.loc 1 682 0
 3685 2dd7 488D45B0 		leaq	-80(%rbp), %rax
 3686 2ddb 4889C7   		movq	%rax, %rdi
 3687 2dde E8000000 		call	bufDestroy@PLT
 3687      00
 683:svf2csvf.c    **** 	bufDestroy(&tmpTail);
 3688              		.loc 1 683 0
 3689 2de3 488D45D0 		leaq	-48(%rbp), %rax
 3690 2de7 4889C7   		movq	%rax, %rdi
 3691 2dea E8000000 		call	bufDestroy@PLT
 3691      00
 684:svf2csvf.c    **** 	return retVal;
 3692              		.loc 1 684 0
 3693 2def 8B8504FF 		movl	-252(%rbp), %eax
 3693      FFFF
 685:svf2csvf.c    **** }
 3694              		.loc 1 685 0
 3695 2df5 488B4DF8 		movq	-8(%rbp), %rcx
 3696 2df9 6448330C 		xorq	%fs:40, %rcx
 3696      25280000 
 3696      00
 3697 2e02 7405     		je	.L236
 3698 2e04 E8000000 		call	__stack_chk_fail@PLT
 3698      00
 3699              	.L236:
 3700 2e09 C9       		leave
 3701              		.cfi_def_cfa 7, 8
 3702 2e0a C3       		ret
 3703              		.cfi_endproc
 3704              	.LFE18:
 3706              		.section	.rodata
 3707              	.LC27:
 3708 02c8 58434F4D 		.string	"XCOMPLETE"
 3708      504C4554 
 3708      4500
 3709              	.LC28:
 3710 02d2 5854444F 		.string	"XTDOMASK"
 3710      4D41534B 
 3710      00
 3711              	.LC29:
 3712 02db 58534952 		.string	"XSIR"
 3712      00
 3713              	.LC30:
 3714 02e0 58534452 		.string	"XSDR"
 3714      00
 3715              	.LC31:
 3716 02e5 5852554E 		.string	"XRUNTEST"
 3716      54455354 
 3716      00
 3717              	.LC32:
 3718 02ee 494C4C45 		.string	"ILLEGAL"
 3718      47414C00 
 3719              	.LC33:
 3720 02f6 58524550 		.string	"XREPEAT"
 3720      45415400 
 3721              	.LC34:
 3722 02fe 58534452 		.string	"XSDRSIZE"
 3722      53495A45 
 3722      00
 3723              	.LC35:
 3724 0307 58534452 		.string	"XSDRTDO"
 3724      54444F00 
 3725              	.LC36:
 3726 030f 58534554 		.string	"XSETSDRMASKS"
 3726      5344524D 
 3726      41534B53 
 3726      00
 3727              	.LC37:
 3728 031c 58534452 		.string	"XSDRINC"
 3728      494E4300 
 3729              	.LC38:
 3730 0324 58534452 		.string	"XSDRB"
 3730      4200
 3731              	.LC39:
 3732 032a 58534452 		.string	"XSDRC"
 3732      4300
 3733              	.LC40:
 3734 0330 58534452 		.string	"XSDRE"
 3734      4500
 3735              	.LC41:
 3736 0336 58534452 		.string	"XSDRTDOB"
 3736      54444F42 
 3736      00
 3737              	.LC42:
 3738 033f 58534452 		.string	"XSDRTDOC"
 3738      54444F43 
 3738      00
 3739              	.LC43:
 3740 0348 58534452 		.string	"XSDRTDOE"
 3740      54444F45 
 3740      00
 3741              	.LC44:
 3742 0351 58535441 		.string	"XSTATE"
 3742      544500
 3743              	.LC45:
 3744 0358 58454E44 		.string	"XENDIR"
 3744      495200
 3745              	.LC46:
 3746 035f 58454E44 		.string	"XENDDR"
 3746      445200
 3747              	.LC47:
 3748 0366 58534952 		.string	"XSIR2"
 3748      3200
 3749              	.LC48:
 3750 036c 58434F4D 		.string	"XCOMMENT"
 3750      4D454E54 
 3750      00
 3751              	.LC49:
 3752 0375 58574149 		.string	"XWAIT"
 3752      5400
 3753              		.section	.data.rel.ro.local,"aw",@progbits
 3754              		.align 32
 3757              	cmdNames:
 3758 0000 00000000 		.quad	.LC27
 3758      00000000 
 3759 0008 00000000 		.quad	.LC28
 3759      00000000 
 3760 0010 00000000 		.quad	.LC29
 3760      00000000 
 3761 0018 00000000 		.quad	.LC30
 3761      00000000 
 3762 0020 00000000 		.quad	.LC31
 3762      00000000 
 3763 0028 00000000 		.quad	.LC32
 3763      00000000 
 3764 0030 00000000 		.quad	.LC32
 3764      00000000 
 3765 0038 00000000 		.quad	.LC33
 3765      00000000 
 3766 0040 00000000 		.quad	.LC34
 3766      00000000 
 3767 0048 00000000 		.quad	.LC35
 3767      00000000 
 3768 0050 00000000 		.quad	.LC36
 3768      00000000 
 3769 0058 00000000 		.quad	.LC37
 3769      00000000 
 3770 0060 00000000 		.quad	.LC38
 3770      00000000 
 3771 0068 00000000 		.quad	.LC39
 3771      00000000 
 3772 0070 00000000 		.quad	.LC40
 3772      00000000 
 3773 0078 00000000 		.quad	.LC41
 3773      00000000 
 3774 0080 00000000 		.quad	.LC42
 3774      00000000 
 3775 0088 00000000 		.quad	.LC43
 3775      00000000 
 3776 0090 00000000 		.quad	.LC44
 3776      00000000 
 3777 0098 00000000 		.quad	.LC45
 3777      00000000 
 3778 00a0 00000000 		.quad	.LC46
 3778      00000000 
 3779 00a8 00000000 		.quad	.LC47
 3779      00000000 
 3780 00b0 00000000 		.quad	.LC48
 3780      00000000 
 3781 00b8 00000000 		.quad	.LC49
 3781      00000000 
 3782              		.text
 3783              		.globl	getCmdName
 3785              	getCmdName:
 3786              	.LFB19:
 686:svf2csvf.c    **** 
 687:svf2csvf.c    **** static const char *const cmdNames[] = {
 688:svf2csvf.c    **** 	"XCOMPLETE",    // 0
 689:svf2csvf.c    **** 	"XTDOMASK",     // 1
 690:svf2csvf.c    **** 	"XSIR",         // 2
 691:svf2csvf.c    **** 	"XSDR",         // 3
 692:svf2csvf.c    **** 	"XRUNTEST",     // 4
 693:svf2csvf.c    **** 	"ILLEGAL",      // 5
 694:svf2csvf.c    **** 	"ILLEGAL",      // 6
 695:svf2csvf.c    **** 	"XREPEAT",      // 7
 696:svf2csvf.c    **** 	"XSDRSIZE",     // 8
 697:svf2csvf.c    **** 	"XSDRTDO",      // 9
 698:svf2csvf.c    **** 	"XSETSDRMASKS", // A
 699:svf2csvf.c    **** 	"XSDRINC",      // B
 700:svf2csvf.c    **** 	"XSDRB",        // C
 701:svf2csvf.c    **** 	"XSDRC",        // D
 702:svf2csvf.c    **** 	"XSDRE",        // E
 703:svf2csvf.c    **** 	"XSDRTDOB",     // F
 704:svf2csvf.c    **** 	"XSDRTDOC",     // 10
 705:svf2csvf.c    **** 	"XSDRTDOE",     // 11
 706:svf2csvf.c    **** 	"XSTATE",       // 12
 707:svf2csvf.c    **** 	"XENDIR",       // 13
 708:svf2csvf.c    **** 	"XENDDR",       // 14
 709:svf2csvf.c    **** 	"XSIR2",        // 15
 710:svf2csvf.c    **** 	"XCOMMENT",     // 16
 711:svf2csvf.c    **** 	"XWAIT"         // 17
 712:svf2csvf.c    **** };
 713:svf2csvf.c    **** 
 714:svf2csvf.c    **** const char *getCmdName(CmdPtr cmd) {
 3787              		.loc 1 714 0
 3788              		.cfi_startproc
 3789 2e0b 55       		pushq	%rbp
 3790              		.cfi_def_cfa_offset 16
 3791              		.cfi_offset 6, -16
 3792 2e0c 4889E5   		movq	%rsp, %rbp
 3793              		.cfi_def_cfa_register 6
 3794 2e0f 48897DE8 		movq	%rdi, -24(%rbp)
 715:svf2csvf.c    **** 	const uint8 op = *cmd;
 3795              		.loc 1 715 0
 3796 2e13 488B45E8 		movq	-24(%rbp), %rax
 3797 2e17 0FB600   		movzbl	(%rax), %eax
 3798 2e1a 8845FF   		movb	%al, -1(%rbp)
 716:svf2csvf.c    **** 	return cmdNames[op];
 3799              		.loc 1 716 0
 3800 2e1d 0FB645FF 		movzbl	-1(%rbp), %eax
 3801 2e21 4898     		cltq
 3802 2e23 488D14C5 		leaq	0(,%rax,8), %rdx
 3802      00000000 
 3803 2e2b 488D0500 		leaq	cmdNames(%rip), %rax
 3803      000000
 3804 2e32 488B0402 		movq	(%rdx,%rax), %rax
 717:svf2csvf.c    **** }
 3805              		.loc 1 717 0
 3806 2e36 5D       		popq	%rbp
 3807              		.cfi_def_cfa 7, 8
 3808 2e37 C3       		ret
 3809              		.cfi_endproc
 3810              	.LFE19:
 3812              		.section	.rodata
 3815              	xrtZero:
 3816 037b 04       		.byte	4
 3817 037c 00       		.byte	0
 3818 037d 00       		.byte	0
 3819 037e 00       		.byte	0
 3820 037f 00       		.byte	0
 3821              		.align 4
 3824              	illegal32:
 3825 0380 FFFFFFFF 		.long	-1
 3826              		.text
 3827              		.globl	processIndex
 3829              	processIndex:
 3830              	.LFB20:
 718:svf2csvf.c    **** 
 719:svf2csvf.c    **** #define SET_BYTES(rt) rt.b[0] = (*ptr)[1]; rt.b[1] = (*ptr)[2]; rt.b[2] = (*ptr)[3]; rt.b[3] = (*pt
 720:svf2csvf.c    **** static const uint8 xrtZero[] = {XRUNTEST, 0, 0, 0, 0};
 721:svf2csvf.c    **** static const uint32 illegal32 = U32MAX;
 722:svf2csvf.c    **** 
 723:svf2csvf.c    **** void processIndex(const CmdPtr *srcIndex, CmdPtr *dstIndex) {
 3831              		.loc 1 723 0
 3832              		.cfi_startproc
 3833 2e38 55       		pushq	%rbp
 3834              		.cfi_def_cfa_offset 16
 3835              		.cfi_offset 6, -16
 3836 2e39 4889E5   		movq	%rsp, %rbp
 3837              		.cfi_def_cfa_register 6
 3838 2e3c 4883EC30 		subq	$48, %rsp
 3839 2e40 48897DD8 		movq	%rdi, -40(%rbp)
 3840 2e44 488975D0 		movq	%rsi, -48(%rbp)
 3841              		.loc 1 723 0
 3842 2e48 64488B04 		movq	%fs:40, %rax
 3842      25280000 
 3842      00
 3843 2e51 488945F8 		movq	%rax, -8(%rbp)
 3844 2e55 31C0     		xorl	%eax, %eax
 724:svf2csvf.c    **** 	union {
 725:svf2csvf.c    **** 		uint32 i;
 726:svf2csvf.c    **** 		uint8 b[4];
 727:svf2csvf.c    **** 	} oldrt, newrt;
 728:svf2csvf.c    **** 	const CmdPtr *ptr = srcIndex;
 3845              		.loc 1 728 0
 3846 2e57 488B45D8 		movq	-40(%rbp), %rax
 3847 2e5b 488945E8 		movq	%rax, -24(%rbp)
 729:svf2csvf.c    **** 	uint8 thisCmd = **ptr;
 3848              		.loc 1 729 0
 3849 2e5f 488B45E8 		movq	-24(%rbp), %rax
 3850 2e63 488B00   		movq	(%rax), %rax
 3851 2e66 0FB600   		movzbl	(%rax), %eax
 3852 2e69 8845E7   		movb	%al, -25(%rbp)
 730:svf2csvf.c    **** 	oldrt.i = illegal32;
 3853              		.loc 1 730 0
 3854 2e6c B8FFFFFF 		movl	$-1, %eax
 3854      FF
 3855 2e71 8945F0   		movl	%eax, -16(%rbp)
 731:svf2csvf.c    **** 	newrt.i = 0;
 3856              		.loc 1 731 0
 3857 2e74 C745F400 		movl	$0, -12(%rbp)
 3857      000000
 732:svf2csvf.c    **** 	while ( thisCmd != XCOMPLETE ) {
 3858              		.loc 1 732 0
 3859 2e7b E94F0100 		jmp	.L248
 3859      00
 3860              	.L251:
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 734:svf2csvf.c    **** 			thisCmd = **++ptr;
 3861              		.loc 1 734 0
 3862 2e80 488345E8 		addq	$8, -24(%rbp)
 3862      08
 3863 2e85 488B45E8 		movq	-24(%rbp), %rax
 3864 2e89 488B00   		movq	(%rax), %rax
 3865 2e8c 0FB600   		movzbl	(%rax), %eax
 3866 2e8f 8845E7   		movb	%al, -25(%rbp)
 3867              	.L249:
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3868              		.loc 1 733 0
 3869 2e92 807DE700 		cmpb	$0, -25(%rbp)
 3870 2e96 7412     		je	.L250
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3871              		.loc 1 733 0 is_stmt 0 discriminator 1
 3872 2e98 807DE703 		cmpb	$3, -25(%rbp)
 3873 2e9c 740C     		je	.L250
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3874              		.loc 1 733 0 discriminator 2
 3875 2e9e 807DE709 		cmpb	$9, -25(%rbp)
 3876 2ea2 7406     		je	.L250
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3877              		.loc 1 733 0 discriminator 3
 3878 2ea4 807DE702 		cmpb	$2, -25(%rbp)
 3879 2ea8 75D6     		jne	.L251
 3880              	.L250:
 735:svf2csvf.c    **** 		}
 736:svf2csvf.c    **** 		if ( thisCmd != XCOMPLETE ) {
 3881              		.loc 1 736 0 is_stmt 1
 3882 2eaa 807DE700 		cmpb	$0, -25(%rbp)
 3883 2eae 7412     		je	.L252
 737:svf2csvf.c    **** 			thisCmd = **++ptr;  // now points at command AFTER shift command
 3884              		.loc 1 737 0
 3885 2eb0 488345E8 		addq	$8, -24(%rbp)
 3885      08
 3886 2eb5 488B45E8 		movq	-24(%rbp), %rax
 3887 2eb9 488B00   		movq	(%rax), %rax
 3888 2ebc 0FB600   		movzbl	(%rax), %eax
 3889 2ebf 8845E7   		movb	%al, -25(%rbp)
 3890              	.L252:
 738:svf2csvf.c    **** 		}
 739:svf2csvf.c    **** 		if ( thisCmd == XRUNTEST ) {
 3891              		.loc 1 739 0
 3892 2ec2 807DE704 		cmpb	$4, -25(%rbp)
 3893 2ec6 0F85A400 		jne	.L253
 3893      0000
 740:svf2csvf.c    **** 			// There is an explicit XRUNTEST, so hoist it to the top, maybe...
 741:svf2csvf.c    **** 			SET_BYTES(newrt);
 3894              		.loc 1 741 0
 3895 2ecc 488B45E8 		movq	-24(%rbp), %rax
 3896 2ed0 488B00   		movq	(%rax), %rax
 3897 2ed3 0FB64001 		movzbl	1(%rax), %eax
 3898 2ed7 8845F4   		movb	%al, -12(%rbp)
 3899 2eda 488B45E8 		movq	-24(%rbp), %rax
 3900 2ede 488B00   		movq	(%rax), %rax
 3901 2ee1 0FB64002 		movzbl	2(%rax), %eax
 3902 2ee5 8845F5   		movb	%al, -11(%rbp)
 3903 2ee8 488B45E8 		movq	-24(%rbp), %rax
 3904 2eec 488B00   		movq	(%rax), %rax
 3905 2eef 0FB64003 		movzbl	3(%rax), %eax
 3906 2ef3 8845F6   		movb	%al, -10(%rbp)
 3907 2ef6 488B45E8 		movq	-24(%rbp), %rax
 3908 2efa 488B00   		movq	(%rax), %rax
 3909 2efd 0FB64004 		movzbl	4(%rax), %eax
 3910 2f01 8845F7   		movb	%al, -9(%rbp)
 742:svf2csvf.c    **** 			if ( newrt.i != oldrt.i ) {
 3911              		.loc 1 742 0
 3912 2f04 8B55F4   		movl	-12(%rbp), %edx
 3913 2f07 8B45F0   		movl	-16(%rbp), %eax
 3914 2f0a 39C2     		cmpl	%eax, %edx
 3915 2f0c 743C     		je	.L255
 743:svf2csvf.c    **** 				*dstIndex++ = *ptr;
 3916              		.loc 1 743 0
 3917 2f0e 488B45D0 		movq	-48(%rbp), %rax
 3918 2f12 488D5008 		leaq	8(%rax), %rdx
 3919 2f16 488955D0 		movq	%rdx, -48(%rbp)
 3920 2f1a 488B55E8 		movq	-24(%rbp), %rdx
 3921 2f1e 488B12   		movq	(%rdx), %rdx
 3922 2f21 488910   		movq	%rdx, (%rax)
 744:svf2csvf.c    **** 				oldrt = newrt;
 3923              		.loc 1 744 0
 3924 2f24 8B45F4   		movl	-12(%rbp), %eax
 3925 2f27 8945F0   		movl	%eax, -16(%rbp)
 745:svf2csvf.c    **** 			}
 746:svf2csvf.c    **** 
 747:svf2csvf.c    **** 			// ...then copy the commands...
 748:svf2csvf.c    **** 			while ( srcIndex < ptr ) {
 3926              		.loc 1 748 0
 3927 2f2a EB1E     		jmp	.L255
 3928              	.L256:
 749:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3929              		.loc 1 749 0
 3930 2f2c 488B55D8 		movq	-40(%rbp), %rdx
 3931 2f30 488D4208 		leaq	8(%rdx), %rax
 3932 2f34 488945D8 		movq	%rax, -40(%rbp)
 3933 2f38 488B45D0 		movq	-48(%rbp), %rax
 3934 2f3c 488D4808 		leaq	8(%rax), %rcx
 3935 2f40 48894DD0 		movq	%rcx, -48(%rbp)
 3936 2f44 488B12   		movq	(%rdx), %rdx
 3937 2f47 488910   		movq	%rdx, (%rax)
 3938              	.L255:
 748:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3939              		.loc 1 748 0
 3940 2f4a 488B45D8 		movq	-40(%rbp), %rax
 3941 2f4e 483B45E8 		cmpq	-24(%rbp), %rax
 3942 2f52 72D8     		jb	.L256
 750:svf2csvf.c    **** 			}
 751:svf2csvf.c    **** 
 752:svf2csvf.c    **** 			// ...and finally get the next command
 753:svf2csvf.c    **** 			ptr++;  // now points at command after XRUNTEST, ready for next loop
 3943              		.loc 1 753 0
 3944 2f54 488345E8 		addq	$8, -24(%rbp)
 3944      08
 754:svf2csvf.c    **** 			srcIndex = ptr;
 3945              		.loc 1 754 0
 3946 2f59 488B45E8 		movq	-24(%rbp), %rax
 3947 2f5d 488945D8 		movq	%rax, -40(%rbp)
 755:svf2csvf.c    **** 			thisCmd = **ptr;
 3948              		.loc 1 755 0
 3949 2f61 488B45E8 		movq	-24(%rbp), %rax
 3950 2f65 488B00   		movq	(%rax), %rax
 3951 2f68 0FB600   		movzbl	(%rax), %eax
 3952 2f6b 8845E7   		movb	%al, -25(%rbp)
 3953 2f6e EB5F     		jmp	.L248
 3954              	.L253:
 756:svf2csvf.c    **** 		} else {
 757:svf2csvf.c    **** 			// There is not an explicit XRUNTEST, meaning it's implicitly zero:
 758:svf2csvf.c    **** 			newrt.i = 0;
 3955              		.loc 1 758 0
 3956 2f70 C745F400 		movl	$0, -12(%rbp)
 3956      000000
 759:svf2csvf.c    **** 			if ( newrt.i != oldrt.i ) {
 3957              		.loc 1 759 0
 3958 2f77 8B55F4   		movl	-12(%rbp), %edx
 3959 2f7a 8B45F0   		movl	-16(%rbp), %eax
 3960 2f7d 39C2     		cmpl	%eax, %edx
 3961 2f7f 743C     		je	.L258
 760:svf2csvf.c    **** 				*dstIndex++ = xrtZero;
 3962              		.loc 1 760 0
 3963 2f81 488B45D0 		movq	-48(%rbp), %rax
 3964 2f85 488D5008 		leaq	8(%rax), %rdx
 3965 2f89 488955D0 		movq	%rdx, -48(%rbp)
 3966 2f8d 488D1500 		leaq	xrtZero(%rip), %rdx
 3966      000000
 3967 2f94 488910   		movq	%rdx, (%rax)
 761:svf2csvf.c    **** 				oldrt = newrt;
 3968              		.loc 1 761 0
 3969 2f97 8B45F4   		movl	-12(%rbp), %eax
 3970 2f9a 8945F0   		movl	%eax, -16(%rbp)
 762:svf2csvf.c    **** 			}
 763:svf2csvf.c    **** 
 764:svf2csvf.c    **** 			// Copy the backlog
 765:svf2csvf.c    **** 			while ( srcIndex < ptr ) {
 3971              		.loc 1 765 0
 3972 2f9d EB1E     		jmp	.L258
 3973              	.L259:
 766:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3974              		.loc 1 766 0
 3975 2f9f 488B55D8 		movq	-40(%rbp), %rdx
 3976 2fa3 488D4208 		leaq	8(%rdx), %rax
 3977 2fa7 488945D8 		movq	%rax, -40(%rbp)
 3978 2fab 488B45D0 		movq	-48(%rbp), %rax
 3979 2faf 488D4808 		leaq	8(%rax), %rcx
 3980 2fb3 48894DD0 		movq	%rcx, -48(%rbp)
 3981 2fb7 488B12   		movq	(%rdx), %rdx
 3982 2fba 488910   		movq	%rdx, (%rax)
 3983              	.L258:
 765:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3984              		.loc 1 765 0
 3985 2fbd 488B45D8 		movq	-40(%rbp), %rax
 3986 2fc1 483B45E8 		cmpq	-24(%rbp), %rax
 3987 2fc5 72D8     		jb	.L259
 767:svf2csvf.c    **** 			}
 768:svf2csvf.c    **** 			srcIndex = ptr;
 3988              		.loc 1 768 0
 3989 2fc7 488B45E8 		movq	-24(%rbp), %rax
 3990 2fcb 488945D8 		movq	%rax, -40(%rbp)
 3991              	.L248:
 732:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3992              		.loc 1 732 0
 3993 2fcf 807DE700 		cmpb	$0, -25(%rbp)
 3994 2fd3 0F85B9FE 		jne	.L249
 3994      FFFF
 769:svf2csvf.c    **** 		}
 770:svf2csvf.c    **** 	}
 771:svf2csvf.c    **** 	*dstIndex = *ptr;
 3995              		.loc 1 771 0
 3996 2fd9 488B45E8 		movq	-24(%rbp), %rax
 3997 2fdd 488B10   		movq	(%rax), %rdx
 3998 2fe0 488B45D0 		movq	-48(%rbp), %rax
 3999 2fe4 488910   		movq	%rdx, (%rax)
 772:svf2csvf.c    **** }
 4000              		.loc 1 772 0
 4001 2fe7 90       		nop
 4002 2fe8 488B45F8 		movq	-8(%rbp), %rax
 4003 2fec 64483304 		xorq	%fs:40, %rax
 4003      25280000 
 4003      00
 4004 2ff5 7405     		je	.L261
 4005 2ff7 E8000000 		call	__stack_chk_fail@PLT
 4005      00
 4006              	.L261:
 4007 2ffc C9       		leave
 4008              		.cfi_def_cfa 7, 8
 4009 2ffd C3       		ret
 4010              		.cfi_endproc
 4011              	.LFE20:
 4013              		.section	.rodata
 4014              	.LC50:
 4015 0384 6275696C 		.string	"buildIndex()"
 4015      64496E64 
 4015      65782829 
 4015      00
 4016 0391 00000000 		.align 8
 4016      000000
 4017              	.LC51:
 4018 0398 6275696C 		.string	"buildIndex(): No XSDRSIZE before shift operation!"
 4018      64496E64 
 4018      65782829 
 4018      3A204E6F 
 4018      20585344 
 4019 03ca 00000000 		.align 8
 4019      0000
 4020              	.LC52:
 4021 03d0 6275696C 		.string	"buildIndex(): Unrecognised CSVF command (cmd=0x%02X, srcOffset=%d)!"
 4021      64496E64 
 4021      65782829 
 4021      3A20556E 
 4021      7265636F 
 4022 0414 00000000 		.align 8
 4023              	.LC53:
 4024 0418 6275696C 		.string	"buildIndex(): Unrecognised CSVF command (cmd=0x%02X)!"
 4024      64496E64 
 4024      65782829 
 4024      3A20556E 
 4024      7265636F 
 4025              		.text
 4026              		.globl	buildIndex
 4028              	buildIndex:
 4029              	.LFB21:
 773:svf2csvf.c    **** 
 774:svf2csvf.c    **** FLStatus buildIndex(struct ParseContext *cxt, struct Buffer *csvfBuf, const char **error) {
 4030              		.loc 1 774 0
 4031              		.cfi_startproc
 4032 2ffe 55       		pushq	%rbp
 4033              		.cfi_def_cfa_offset 16
 4034              		.cfi_offset 6, -16
 4035 2fff 4889E5   		movq	%rsp, %rbp
 4036              		.cfi_def_cfa_register 6
 4037 3002 53       		pushq	%rbx
 4038 3003 4881EC98 		subq	$152, %rsp
 4038      000000
 4039              		.cfi_offset 3, -24
 4040 300a 4889BD78 		movq	%rdi, -136(%rbp)
 4040      FFFFFF
 4041 3011 4889B570 		movq	%rsi, -144(%rbp)
 4041      FFFFFF
 4042 3018 48899568 		movq	%rdx, -152(%rbp)
 4042      FFFFFF
 4043              		.loc 1 774 0
 4044 301f 64488B04 		movq	%fs:40, %rax
 4044      25280000 
 4044      00
 4045 3028 488945E8 		movq	%rax, -24(%rbp)
 4046 302c 31C0     		xorl	%eax, %eax
 775:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 4047              		.loc 1 775 0
 4048 302e C7458400 		movl	$0, -124(%rbp)
 4048      000000
 776:svf2csvf.c    **** 	const uint8 *const start = csvfBuf->data;
 4049              		.loc 1 776 0
 4050 3035 488B8570 		movq	-144(%rbp), %rax
 4050      FFFFFF
 4051 303c 488B00   		movq	(%rax), %rax
 4052 303f 488945A8 		movq	%rax, -88(%rbp)
 777:svf2csvf.c    **** 	const uint8 *ptr = start;
 4053              		.loc 1 777 0
 4054 3043 488B45A8 		movq	-88(%rbp), %rax
 4055 3047 48894598 		movq	%rax, -104(%rbp)
 778:svf2csvf.c    **** 	struct Buffer newBuf = {0,};
 4056              		.loc 1 778 0
 4057 304b 48C745C0 		movq	$0, -64(%rbp)
 4057      00000000 
 4058 3053 48C745C8 		movq	$0, -56(%rbp)
 4058      00000000 
 4059 305b 48C745D0 		movq	$0, -48(%rbp)
 4059      00000000 
 4060 3063 48C745D8 		movq	$0, -40(%rbp)
 4060      00000000 
 779:svf2csvf.c    **** 	uint32 numBytes;
 780:svf2csvf.c    **** 	uint8 thisByte = *ptr;
 4061              		.loc 1 780 0
 4062 306b 488B4598 		movq	-104(%rbp), %rax
 4063 306f 0FB600   		movzbl	(%rax), %eax
 4064 3072 884583   		movb	%al, -125(%rbp)
 781:svf2csvf.c    **** 	int i = 0;
 4065              		.loc 1 781 0
 4066 3075 C7458C00 		movl	$0, -116(%rbp)
 4066      000000
 782:svf2csvf.c    **** 	int offset;
 783:svf2csvf.c    **** 	const CmdPtr *cmdPtr;
 784:svf2csvf.c    **** 	BufferStatus bStatus;
 785:svf2csvf.c    **** 	const uint8 **const srcIndex = malloc(sizeof(const uint8*) * cxt->numCommands);
 4067              		.loc 1 785 0
 4068 307c 488B8578 		movq	-136(%rbp), %rax
 4068      FFFFFF
 4069 3083 8B809C02 		movl	668(%rax), %eax
 4069      0000
 4070 3089 89C0     		movl	%eax, %eax
 4071 308b 48C1E003 		salq	$3, %rax
 4072 308f 4889C7   		movq	%rax, %rdi
 4073 3092 E8000000 		call	malloc@PLT
 4073      00
 4074 3097 488945B0 		movq	%rax, -80(%rbp)
 786:svf2csvf.c    **** 	const uint8 **const dstIndex = malloc(sizeof(const uint8*) * cxt->numCommands * 3 / 2); // abs wor
 4075              		.loc 1 786 0
 4076 309b 488B8578 		movq	-136(%rbp), %rax
 4076      FFFFFF
 4077 30a2 8B809C02 		movl	668(%rax), %eax
 4077      0000
 4078 30a8 89C2     		movl	%eax, %edx
 4079 30aa 4889D0   		movq	%rdx, %rax
 4080 30ad 4801C0   		addq	%rax, %rax
 4081 30b0 4801D0   		addq	%rdx, %rax
 4082 30b3 48C1E003 		salq	$3, %rax
 4083 30b7 48D1E8   		shrq	%rax
 4084 30ba 4889C7   		movq	%rax, %rdi
 4085 30bd E8000000 		call	malloc@PLT
 4085      00
 4086 30c2 488945B8 		movq	%rax, -72(%rbp)
 787:svf2csvf.c    **** 	CHECK_STATUS(srcIndex == NULL, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4087              		.loc 1 787 0
 4088 30c6 48837DB0 		cmpq	$0, -80(%rbp)
 4088      00
 4089 30cb 7522     		jne	.L263
 4090              		.loc 1 787 0 is_stmt 0 discriminator 1
 4091 30cd 488B8568 		movq	-152(%rbp), %rax
 4091      FFFFFF
 4092 30d4 488D3500 		leaq	.LC50(%rip), %rsi
 4092      000000
 4093 30db 4889C7   		movq	%rax, %rdi
 4094 30de E8000000 		call	errPrefix@PLT
 4094      00
 4095 30e3 C7458401 		movl	$1, -124(%rbp)
 4095      000000
 4096 30ea E9710500 		jmp	.L264
 4096      00
 4097              	.L263:
 788:svf2csvf.c    **** 	CHECK_STATUS(dstIndex == NULL, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4098              		.loc 1 788 0 is_stmt 1
 4099 30ef 48837DB8 		cmpq	$0, -72(%rbp)
 4099      00
 4100 30f4 7522     		jne	.L265
 4101              		.loc 1 788 0 is_stmt 0 discriminator 1
 4102 30f6 488B8568 		movq	-152(%rbp), %rax
 4102      FFFFFF
 4103 30fd 488D3500 		leaq	.LC50(%rip), %rsi
 4103      000000
 4104 3104 4889C7   		movq	%rax, %rdi
 4105 3107 E8000000 		call	errPrefix@PLT
 4105      00
 4106 310c C7458401 		movl	$1, -124(%rbp)
 4106      000000
 4107 3113 E9480500 		jmp	.L264
 4107      00
 4108              	.L265:
 789:svf2csvf.c    **** 	bStatus = bufInitialise(&newBuf, csvfBuf->length * 4 / 3, 0x00, error);  // common worst case
 4109              		.loc 1 789 0 is_stmt 1
 4110 3118 488B8570 		movq	-144(%rbp), %rax
 4110      FFFFFF
 4111 311f 488B4008 		movq	8(%rax), %rax
 4112 3123 48C1E002 		salq	$2, %rax
 4113 3127 48BAABAA 		movabsq	$-6148914691236517205, %rdx
 4113      AAAAAAAA 
 4113      AAAA
 4114 3131 48F7E2   		mulq	%rdx
 4115 3134 4889D6   		movq	%rdx, %rsi
 4116 3137 48D1EE   		shrq	%rsi
 4117 313a 488B9568 		movq	-152(%rbp), %rdx
 4117      FFFFFF
 4118 3141 488D45C0 		leaq	-64(%rbp), %rax
 4119 3145 4889D1   		movq	%rdx, %rcx
 4120 3148 BA000000 		movl	$0, %edx
 4120      00
 4121 314d 4889C7   		movq	%rax, %rdi
 4122 3150 E8000000 		call	bufInitialise@PLT
 4122      00
 4123 3155 894590   		movl	%eax, -112(%rbp)
 790:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4124              		.loc 1 790 0
 4125 3158 837D9000 		cmpl	$0, -112(%rbp)
 4126 315c 7422     		je	.L266
 4127              		.loc 1 790 0 is_stmt 0 discriminator 1
 4128 315e 488B8568 		movq	-152(%rbp), %rax
 4128      FFFFFF
 4129 3165 488D3500 		leaq	.LC50(%rip), %rsi
 4129      000000
 4130 316c 4889C7   		movq	%rax, %rdi
 4131 316f E8000000 		call	errPrefix@PLT
 4131      00
 4132 3174 C7458401 		movl	$1, -124(%rbp)
 4132      000000
 4133 317b E9E00400 		jmp	.L264
 4133      00
 4134              	.L266:
 791:svf2csvf.c    **** 	numBytes = illegal32;
 4135              		.loc 1 791 0 is_stmt 1
 4136 3180 C74588FF 		movl	$-1, -120(%rbp)
 4136      FFFFFF
 792:svf2csvf.c    **** 	while ( thisByte != XCOMPLETE ) {
 4137              		.loc 1 792 0
 4138 3187 E9820100 		jmp	.L267
 4138      00
 4139              	.L280:
 793:svf2csvf.c    **** 		srcIndex[i++] = ptr++;
 4140              		.loc 1 793 0
 4141 318c 488B4598 		movq	-104(%rbp), %rax
 4142 3190 488D5001 		leaq	1(%rax), %rdx
 4143 3194 48895598 		movq	%rdx, -104(%rbp)
 4144 3198 8B558C   		movl	-116(%rbp), %edx
 4145 319b 8D4A01   		leal	1(%rdx), %ecx
 4146 319e 894D8C   		movl	%ecx, -116(%rbp)
 4147 31a1 4863D2   		movslq	%edx, %rdx
 4148 31a4 488D0CD5 		leaq	0(,%rdx,8), %rcx
 4148      00000000 
 4149 31ac 488B55B0 		movq	-80(%rbp), %rdx
 4150 31b0 4801CA   		addq	%rcx, %rdx
 4151 31b3 488902   		movq	%rax, (%rdx)
 794:svf2csvf.c    **** 		switch ( thisByte ) {
 4152              		.loc 1 794 0
 4153 31b6 0FB64583 		movzbl	-125(%rbp), %eax
 4154 31ba 83F809   		cmpl	$9, %eax
 4155 31bd 0F870801 		ja	.L304
 4155      0000
 4156 31c3 89C0     		movl	%eax, %eax
 4157 31c5 488D1485 		leaq	0(,%rax,4), %rdx
 4157      00000000 
 4158 31cd 488D0500 		leaq	.L270(%rip), %rax
 4158      000000
 4159 31d4 8B0402   		movl	(%rdx,%rax), %eax
 4160 31d7 4863D0   		movslq	%eax, %rdx
 4161 31da 488D0500 		leaq	.L270(%rip), %rax
 4161      000000
 4162 31e1 4801D0   		addq	%rdx, %rax
 4163 31e4 FFE0     		jmp	*%rax
 4164              		.section	.rodata
 4165 044e 0000     		.align 4
 4166              		.align 4
 4167              	.L270:
 4168 0450 00000000 		.long	.L304-.L270
 4169 0454 00000000 		.long	.L269-.L270
 4170 0458 00000000 		.long	.L271-.L270
 4171 045c 00000000 		.long	.L269-.L270
 4172 0460 00000000 		.long	.L272-.L270
 4173 0464 00000000 		.long	.L304-.L270
 4174 0468 00000000 		.long	.L304-.L270
 4175 046c 00000000 		.long	.L304-.L270
 4176 0470 00000000 		.long	.L273-.L270
 4177 0474 00000000 		.long	.L274-.L270
 4178              		.text
 4179              	.L273:
 795:svf2csvf.c    **** 		case XSDRSIZE:
 796:svf2csvf.c    **** 			numBytes = bitsToBytes(readLongBE(ptr));
 4180              		.loc 1 796 0
 4181 31e6 488B4598 		movq	-104(%rbp), %rax
 4182 31ea 4889C7   		movq	%rax, %rdi
 4183 31ed E8000000 		call	readLongBE@PLT
 4183      00
 4184 31f2 C1E803   		shrl	$3, %eax
 4185 31f5 89C3     		movl	%eax, %ebx
 4186 31f7 488B4598 		movq	-104(%rbp), %rax
 4187 31fb 4889C7   		movq	%rax, %rdi
 4188 31fe E8000000 		call	readLongBE@PLT
 4188      00
 4189 3203 83E007   		andl	$7, %eax
 4190 3206 85C0     		testl	%eax, %eax
 4191 3208 7407     		je	.L275
 4192              		.loc 1 796 0 is_stmt 0 discriminator 1
 4193 320a B8010000 		movl	$1, %eax
 4193      00
 4194 320f EB05     		jmp	.L276
 4195              	.L275:
 4196              		.loc 1 796 0 discriminator 2
 4197 3211 B8000000 		movl	$0, %eax
 4197      00
 4198              	.L276:
 4199              		.loc 1 796 0 discriminator 4
 4200 3216 01D8     		addl	%ebx, %eax
 4201 3218 894588   		movl	%eax, -120(%rbp)
 4202              	.L272:
 797:svf2csvf.c    **** 		case XRUNTEST:
 798:svf2csvf.c    **** 			ptr += 4;
 4203              		.loc 1 798 0 is_stmt 1
 4204 321b 48834598 		addq	$4, -104(%rbp)
 4204      04
 799:svf2csvf.c    **** 			break;
 4205              		.loc 1 799 0
 4206 3220 E9DF0000 		jmp	.L277
 4206      00
 4207              	.L269:
 800:svf2csvf.c    **** 		case XTDOMASK:
 801:svf2csvf.c    **** 		case XSDR:
 802:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4208              		.loc 1 802 0
 4209 3225 B8FFFFFF 		movl	$-1, %eax
 4209      FF
 4210 322a 394588   		cmpl	%eax, -120(%rbp)
 4211 322d 7522     		jne	.L278
 4212              		.loc 1 802 0 is_stmt 0 discriminator 1
 4213 322f 488B8568 		movq	-152(%rbp), %rax
 4213      FFFFFF
 4214 3236 488D3500 		leaq	.LC51(%rip), %rsi
 4214      000000
 4215 323d 4889C7   		movq	%rax, %rdi
 4216 3240 E8000000 		call	errPrefix@PLT
 4216      00
 4217 3245 C7458417 		movl	$23, -124(%rbp)
 4217      000000
 4218 324c E90F0400 		jmp	.L264
 4218      00
 4219              	.L278:
 803:svf2csvf.c    **** 			ptr += numBytes;
 4220              		.loc 1 803 0 is_stmt 1
 4221 3251 8B4588   		movl	-120(%rbp), %eax
 4222 3254 48014598 		addq	%rax, -104(%rbp)
 804:svf2csvf.c    **** 			break;
 4223              		.loc 1 804 0
 4224 3258 E9A70000 		jmp	.L277
 4224      00
 4225              	.L274:
 805:svf2csvf.c    **** 		case XSDRTDO:
 806:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4226              		.loc 1 806 0
 4227 325d B8FFFFFF 		movl	$-1, %eax
 4227      FF
 4228 3262 394588   		cmpl	%eax, -120(%rbp)
 4229 3265 7522     		jne	.L279
 4230              		.loc 1 806 0 is_stmt 0 discriminator 1
 4231 3267 488B8568 		movq	-152(%rbp), %rax
 4231      FFFFFF
 4232 326e 488D3500 		leaq	.LC51(%rip), %rsi
 4232      000000
 4233 3275 4889C7   		movq	%rax, %rdi
 4234 3278 E8000000 		call	errPrefix@PLT
 4234      00
 4235 327d C7458417 		movl	$23, -124(%rbp)
 4235      000000
 4236 3284 E9D70300 		jmp	.L264
 4236      00
 4237              	.L279:
 807:svf2csvf.c    **** 			ptr += 2*numBytes;
 4238              		.loc 1 807 0 is_stmt 1
 4239 3289 8B4588   		movl	-120(%rbp), %eax
 4240 328c 01C0     		addl	%eax, %eax
 4241 328e 89C0     		movl	%eax, %eax
 4242 3290 48014598 		addq	%rax, -104(%rbp)
 808:svf2csvf.c    **** 			break;
 4243              		.loc 1 808 0
 4244 3294 EB6E     		jmp	.L277
 4245              	.L271:
 809:svf2csvf.c    **** 		case XSIR:
 810:svf2csvf.c    **** 			offset = *ptr++;
 4246              		.loc 1 810 0
 4247 3296 488B4598 		movq	-104(%rbp), %rax
 4248 329a 488D5001 		leaq	1(%rax), %rdx
 4249 329e 48895598 		movq	%rdx, -104(%rbp)
 4250 32a2 0FB600   		movzbl	(%rax), %eax
 4251 32a5 0FB6C0   		movzbl	%al, %eax
 4252 32a8 894594   		movl	%eax, -108(%rbp)
 811:svf2csvf.c    **** 			ptr += bitsToBytes(offset);
 4253              		.loc 1 811 0
 4254 32ab 8B4594   		movl	-108(%rbp), %eax
 4255 32ae C1F803   		sarl	$3, %eax
 4256 32b1 89C2     		movl	%eax, %edx
 4257 32b3 8B4594   		movl	-108(%rbp), %eax
 4258 32b6 83E007   		andl	$7, %eax
 4259 32b9 85C0     		testl	%eax, %eax
 4260 32bb 0F95C0   		setne	%al
 4261 32be 0FB6C0   		movzbl	%al, %eax
 4262 32c1 01D0     		addl	%edx, %eax
 4263 32c3 4898     		cltq
 4264 32c5 48014598 		addq	%rax, -104(%rbp)
 812:svf2csvf.c    **** 			break;
 4265              		.loc 1 812 0
 4266 32c9 EB39     		jmp	.L277
 4267              	.L304:
 813:svf2csvf.c    **** 		default:
 814:svf2csvf.c    **** 			CHECK_STATUS(
 4268              		.loc 1 814 0 discriminator 1
 4269 32cb 488B5598 		movq	-104(%rbp), %rdx
 4270 32cf 488B45A8 		movq	-88(%rbp), %rax
 4271 32d3 4889D1   		movq	%rdx, %rcx
 4272 32d6 4829C1   		subq	%rax, %rcx
 4273 32d9 0FB65583 		movzbl	-125(%rbp), %edx
 4274 32dd 488B8568 		movq	-152(%rbp), %rax
 4274      FFFFFF
 4275 32e4 488D3500 		leaq	.LC52(%rip), %rsi
 4275      000000
 4276 32eb 4889C7   		movq	%rax, %rdi
 4277 32ee B8000000 		movl	$0, %eax
 4277      00
 4278 32f3 E8000000 		call	errRender@PLT
 4278      00
 4279 32f8 C7458417 		movl	$23, -124(%rbp)
 4279      000000
 4280 32ff E95C0300 		jmp	.L264
 4280      00
 4281              	.L277:
 815:svf2csvf.c    **** 				true, FL_INTERNAL_ERR, cleanup,
 816:svf2csvf.c    **** 				"buildIndex(): Unrecognised CSVF command (cmd=0x%02X, srcOffset=%d)!", thisByte, ptr - start);
 817:svf2csvf.c    **** 		}
 818:svf2csvf.c    **** 		thisByte = *ptr;
 4282              		.loc 1 818 0
 4283 3304 488B4598 		movq	-104(%rbp), %rax
 4284 3308 0FB600   		movzbl	(%rax), %eax
 4285 330b 884583   		movb	%al, -125(%rbp)
 4286              	.L267:
 792:svf2csvf.c    **** 		srcIndex[i++] = ptr++;
 4287              		.loc 1 792 0
 4288 330e 807D8300 		cmpb	$0, -125(%rbp)
 4289 3312 0F8574FE 		jne	.L280
 4289      FFFF
 819:svf2csvf.c    **** 	}
 820:svf2csvf.c    **** 	srcIndex[i++] = ptr++;
 4290              		.loc 1 820 0
 4291 3318 488B4598 		movq	-104(%rbp), %rax
 4292 331c 488D5001 		leaq	1(%rax), %rdx
 4293 3320 48895598 		movq	%rdx, -104(%rbp)
 4294 3324 8B558C   		movl	-116(%rbp), %edx
 4295 3327 8D4A01   		leal	1(%rdx), %ecx
 4296 332a 894D8C   		movl	%ecx, -116(%rbp)
 4297 332d 4863D2   		movslq	%edx, %rdx
 4298 3330 488D0CD5 		leaq	0(,%rdx,8), %rcx
 4298      00000000 
 4299 3338 488B55B0 		movq	-80(%rbp), %rdx
 4300 333c 4801CA   		addq	%rcx, %rdx
 4301 333f 488902   		movq	%rax, (%rdx)
 821:svf2csvf.c    **** 	processIndex(srcIndex, dstIndex);
 4302              		.loc 1 821 0
 4303 3342 488B55B8 		movq	-72(%rbp), %rdx
 4304 3346 488B45B0 		movq	-80(%rbp), %rax
 4305 334a 4889D6   		movq	%rdx, %rsi
 4306 334d 4889C7   		movq	%rax, %rdi
 4307 3350 E8000000 		call	processIndex@PLT
 4307      00
 822:svf2csvf.c    **** 	cmdPtr = dstIndex;
 4308              		.loc 1 822 0
 4309 3355 488B45B8 		movq	-72(%rbp), %rax
 4310 3359 488945A0 		movq	%rax, -96(%rbp)
 823:svf2csvf.c    **** 	ptr = *cmdPtr;
 4311              		.loc 1 823 0
 4312 335d 488B45A0 		movq	-96(%rbp), %rax
 4313 3361 488B00   		movq	(%rax), %rax
 4314 3364 48894598 		movq	%rax, -104(%rbp)
 824:svf2csvf.c    **** 	thisByte = *ptr;
 4315              		.loc 1 824 0
 4316 3368 488B4598 		movq	-104(%rbp), %rax
 4317 336c 0FB600   		movzbl	(%rax), %eax
 4318 336f 884583   		movb	%al, -125(%rbp)
 825:svf2csvf.c    **** 	numBytes = illegal32;
 4319              		.loc 1 825 0
 4320 3372 C74588FF 		movl	$-1, -120(%rbp)
 4320      FFFFFF
 826:svf2csvf.c    **** 	while ( thisByte != XCOMPLETE ) {
 4321              		.loc 1 826 0
 4322 3379 E9820200 		jmp	.L281
 4322      00
 4323              	.L298:
 827:svf2csvf.c    **** 		switch ( thisByte ) {
 4324              		.loc 1 827 0
 4325 337e 0FB64583 		movzbl	-125(%rbp), %eax
 4326 3382 83F809   		cmpl	$9, %eax
 4327 3385 0F872602 		ja	.L305
 4327      0000
 4328 338b 89C0     		movl	%eax, %eax
 4329 338d 488D1485 		leaq	0(,%rax,4), %rdx
 4329      00000000 
 4330 3395 488D0500 		leaq	.L284(%rip), %rax
 4330      000000
 4331 339c 8B0402   		movl	(%rdx,%rax), %eax
 4332 339f 4863D0   		movslq	%eax, %rdx
 4333 33a2 488D0500 		leaq	.L284(%rip), %rax
 4333      000000
 4334 33a9 4801D0   		addq	%rdx, %rax
 4335 33ac FFE0     		jmp	*%rax
 4336              		.section	.rodata
 4337              		.align 4
 4338              		.align 4
 4339              	.L284:
 4340 0478 00000000 		.long	.L305-.L284
 4341 047c 00000000 		.long	.L283-.L284
 4342 0480 00000000 		.long	.L285-.L284
 4343 0484 00000000 		.long	.L283-.L284
 4344 0488 00000000 		.long	.L286-.L284
 4345 048c 00000000 		.long	.L305-.L284
 4346 0490 00000000 		.long	.L305-.L284
 4347 0494 00000000 		.long	.L305-.L284
 4348 0498 00000000 		.long	.L287-.L284
 4349 049c 00000000 		.long	.L288-.L284
 4350              		.text
 4351              	.L287:
 828:svf2csvf.c    **** 		case XSDRSIZE:
 829:svf2csvf.c    **** 			numBytes = bitsToBytes(readLongBE(ptr + 1));
 4352              		.loc 1 829 0
 4353 33ae 488B4598 		movq	-104(%rbp), %rax
 4354 33b2 4883C001 		addq	$1, %rax
 4355 33b6 4889C7   		movq	%rax, %rdi
 4356 33b9 E8000000 		call	readLongBE@PLT
 4356      00
 4357 33be C1E803   		shrl	$3, %eax
 4358 33c1 89C3     		movl	%eax, %ebx
 4359 33c3 488B4598 		movq	-104(%rbp), %rax
 4360 33c7 4883C001 		addq	$1, %rax
 4361 33cb 4889C7   		movq	%rax, %rdi
 4362 33ce E8000000 		call	readLongBE@PLT
 4362      00
 4363 33d3 83E007   		andl	$7, %eax
 4364 33d6 85C0     		testl	%eax, %eax
 4365 33d8 7407     		je	.L289
 4366              		.loc 1 829 0 is_stmt 0 discriminator 1
 4367 33da B8010000 		movl	$1, %eax
 4367      00
 4368 33df EB05     		jmp	.L290
 4369              	.L289:
 4370              		.loc 1 829 0 discriminator 2
 4371 33e1 B8000000 		movl	$0, %eax
 4371      00
 4372              	.L290:
 4373              		.loc 1 829 0 discriminator 4
 4374 33e6 01D8     		addl	%ebx, %eax
 4375 33e8 894588   		movl	%eax, -120(%rbp)
 4376              	.L286:
 830:svf2csvf.c    **** 		case XRUNTEST:
 831:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, 5, error);
 4377              		.loc 1 831 0 is_stmt 1
 4378 33eb 488B9568 		movq	-152(%rbp), %rdx
 4378      FFFFFF
 4379 33f2 488B7598 		movq	-104(%rbp), %rsi
 4380 33f6 488D45C0 		leaq	-64(%rbp), %rax
 4381 33fa 4889D1   		movq	%rdx, %rcx
 4382 33fd BA050000 		movl	$5, %edx
 4382      00
 4383 3402 4889C7   		movq	%rax, %rdi
 4384 3405 E8000000 		call	bufAppendBlock@PLT
 4384      00
 4385 340a 894590   		movl	%eax, -112(%rbp)
 832:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4386              		.loc 1 832 0
 4387 340d 837D9000 		cmpl	$0, -112(%rbp)
 4388 3411 0F84C501 		je	.L306
 4388      0000
 4389              		.loc 1 832 0 is_stmt 0 discriminator 1
 4390 3417 488B8568 		movq	-152(%rbp), %rax
 4390      FFFFFF
 4391 341e 488D3500 		leaq	.LC50(%rip), %rsi
 4391      000000
 4392 3425 4889C7   		movq	%rax, %rdi
 4393 3428 E8000000 		call	errPrefix@PLT
 4393      00
 4394 342d C7458401 		movl	$1, -124(%rbp)
 4394      000000
 4395 3434 E9270200 		jmp	.L264
 4395      00
 4396              	.L283:
 833:svf2csvf.c    **** 			break;
 834:svf2csvf.c    **** 		case XTDOMASK:
 835:svf2csvf.c    **** 		case XSDR:
 836:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4397              		.loc 1 836 0 is_stmt 1
 4398 3439 B8FFFFFF 		movl	$-1, %eax
 4398      FF
 4399 343e 394588   		cmpl	%eax, -120(%rbp)
 4400 3441 7522     		jne	.L293
 4401              		.loc 1 836 0 is_stmt 0 discriminator 1
 4402 3443 488B8568 		movq	-152(%rbp), %rax
 4402      FFFFFF
 4403 344a 488D3500 		leaq	.LC51(%rip), %rsi
 4403      000000
 4404 3451 4889C7   		movq	%rax, %rdi
 4405 3454 E8000000 		call	errPrefix@PLT
 4405      00
 4406 3459 C7458417 		movl	$23, -124(%rbp)
 4406      000000
 4407 3460 E9FB0100 		jmp	.L264
 4407      00
 4408              	.L293:
 837:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, numBytes + 1, error);
 4409              		.loc 1 837 0 is_stmt 1
 4410 3465 8B4588   		movl	-120(%rbp), %eax
 4411 3468 83C001   		addl	$1, %eax
 4412 346b 89C7     		movl	%eax, %edi
 4413 346d 488B9568 		movq	-152(%rbp), %rdx
 4413      FFFFFF
 4414 3474 488B7598 		movq	-104(%rbp), %rsi
 4415 3478 488D45C0 		leaq	-64(%rbp), %rax
 4416 347c 4889D1   		movq	%rdx, %rcx
 4417 347f 4889FA   		movq	%rdi, %rdx
 4418 3482 4889C7   		movq	%rax, %rdi
 4419 3485 E8000000 		call	bufAppendBlock@PLT
 4419      00
 4420 348a 894590   		movl	%eax, -112(%rbp)
 838:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4421              		.loc 1 838 0
 4422 348d 837D9000 		cmpl	$0, -112(%rbp)
 4423 3491 0F844801 		je	.L307
 4423      0000
 4424              		.loc 1 838 0 is_stmt 0 discriminator 1
 4425 3497 488B8568 		movq	-152(%rbp), %rax
 4425      FFFFFF
 4426 349e 488D3500 		leaq	.LC50(%rip), %rsi
 4426      000000
 4427 34a5 4889C7   		movq	%rax, %rdi
 4428 34a8 E8000000 		call	errPrefix@PLT
 4428      00
 4429 34ad C7458401 		movl	$1, -124(%rbp)
 4429      000000
 4430 34b4 E9A70100 		jmp	.L264
 4430      00
 4431              	.L288:
 839:svf2csvf.c    **** 			break;
 840:svf2csvf.c    **** 		case XSDRTDO:
 841:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4432              		.loc 1 841 0 is_stmt 1
 4433 34b9 B8FFFFFF 		movl	$-1, %eax
 4433      FF
 4434 34be 394588   		cmpl	%eax, -120(%rbp)
 4435 34c1 7522     		jne	.L295
 4436              		.loc 1 841 0 is_stmt 0 discriminator 1
 4437 34c3 488B8568 		movq	-152(%rbp), %rax
 4437      FFFFFF
 4438 34ca 488D3500 		leaq	.LC51(%rip), %rsi
 4438      000000
 4439 34d1 4889C7   		movq	%rax, %rdi
 4440 34d4 E8000000 		call	errPrefix@PLT
 4440      00
 4441 34d9 C7458417 		movl	$23, -124(%rbp)
 4441      000000
 4442 34e0 E97B0100 		jmp	.L264
 4442      00
 4443              	.L295:
 842:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, 2*numBytes + 1, error);
 4444              		.loc 1 842 0 is_stmt 1
 4445 34e5 8B4588   		movl	-120(%rbp), %eax
 4446 34e8 01C0     		addl	%eax, %eax
 4447 34ea 83C001   		addl	$1, %eax
 4448 34ed 89C7     		movl	%eax, %edi
 4449 34ef 488B9568 		movq	-152(%rbp), %rdx
 4449      FFFFFF
 4450 34f6 488B7598 		movq	-104(%rbp), %rsi
 4451 34fa 488D45C0 		leaq	-64(%rbp), %rax
 4452 34fe 4889D1   		movq	%rdx, %rcx
 4453 3501 4889FA   		movq	%rdi, %rdx
 4454 3504 4889C7   		movq	%rax, %rdi
 4455 3507 E8000000 		call	bufAppendBlock@PLT
 4455      00
 4456 350c 894590   		movl	%eax, -112(%rbp)
 843:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4457              		.loc 1 843 0
 4458 350f 837D9000 		cmpl	$0, -112(%rbp)
 4459 3513 0F84C900 		je	.L308
 4459      0000
 4460              		.loc 1 843 0 is_stmt 0 discriminator 1
 4461 3519 488B8568 		movq	-152(%rbp), %rax
 4461      FFFFFF
 4462 3520 488D3500 		leaq	.LC50(%rip), %rsi
 4462      000000
 4463 3527 4889C7   		movq	%rax, %rdi
 4464 352a E8000000 		call	errPrefix@PLT
 4464      00
 4465 352f C7458401 		movl	$1, -124(%rbp)
 4465      000000
 4466 3536 E9250100 		jmp	.L264
 4466      00
 4467              	.L285:
 844:svf2csvf.c    **** 			break;
 845:svf2csvf.c    **** 		case XSIR:
 846:svf2csvf.c    **** 			offset = ptr[1];
 4468              		.loc 1 846 0 is_stmt 1
 4469 353b 488B4598 		movq	-104(%rbp), %rax
 4470 353f 4883C001 		addq	$1, %rax
 4471 3543 0FB600   		movzbl	(%rax), %eax
 4472 3546 0FB6C0   		movzbl	%al, %eax
 4473 3549 894594   		movl	%eax, -108(%rbp)
 847:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, (uint32)(bitsToBytes(offset) + 2), error);
 4474              		.loc 1 847 0
 4475 354c 8B4594   		movl	-108(%rbp), %eax
 4476 354f C1F803   		sarl	$3, %eax
 4477 3552 89C2     		movl	%eax, %edx
 4478 3554 8B4594   		movl	-108(%rbp), %eax
 4479 3557 83E007   		andl	$7, %eax
 4480 355a 85C0     		testl	%eax, %eax
 4481 355c 0F95C0   		setne	%al
 4482 355f 0FB6C0   		movzbl	%al, %eax
 4483 3562 01D0     		addl	%edx, %eax
 4484 3564 83C002   		addl	$2, %eax
 4485 3567 89C7     		movl	%eax, %edi
 4486 3569 488B9568 		movq	-152(%rbp), %rdx
 4486      FFFFFF
 4487 3570 488B7598 		movq	-104(%rbp), %rsi
 4488 3574 488D45C0 		leaq	-64(%rbp), %rax
 4489 3578 4889D1   		movq	%rdx, %rcx
 4490 357b 4889FA   		movq	%rdi, %rdx
 4491 357e 4889C7   		movq	%rax, %rdi
 4492 3581 E8000000 		call	bufAppendBlock@PLT
 4492      00
 4493 3586 894590   		movl	%eax, -112(%rbp)
 848:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4494              		.loc 1 848 0
 4495 3589 837D9000 		cmpl	$0, -112(%rbp)
 4496 358d 7456     		je	.L309
 4497              		.loc 1 848 0 is_stmt 0 discriminator 1
 4498 358f 488B8568 		movq	-152(%rbp), %rax
 4498      FFFFFF
 4499 3596 488D3500 		leaq	.LC50(%rip), %rsi
 4499      000000
 4500 359d 4889C7   		movq	%rax, %rdi
 4501 35a0 E8000000 		call	errPrefix@PLT
 4501      00
 4502 35a5 C7458401 		movl	$1, -124(%rbp)
 4502      000000
 4503 35ac E9AF0000 		jmp	.L264
 4503      00
 4504              	.L305:
 849:svf2csvf.c    **** 			break;
 850:svf2csvf.c    **** 		default:
 851:svf2csvf.c    **** 			CHECK_STATUS(
 4505              		.loc 1 851 0 is_stmt 1 discriminator 1
 4506 35b1 0FB65583 		movzbl	-125(%rbp), %edx
 4507 35b5 488B8568 		movq	-152(%rbp), %rax
 4507      FFFFFF
 4508 35bc 488D3500 		leaq	.LC53(%rip), %rsi
 4508      000000
 4509 35c3 4889C7   		movq	%rax, %rdi
 4510 35c6 B8000000 		movl	$0, %eax
 4510      00
 4511 35cb E8000000 		call	errRender@PLT
 4511      00
 4512 35d0 C7458417 		movl	$23, -124(%rbp)
 4512      000000
 4513 35d7 E9840000 		jmp	.L264
 4513      00
 4514              	.L306:
 833:svf2csvf.c    **** 		case XTDOMASK:
 4515              		.loc 1 833 0
 4516 35dc 90       		nop
 4517 35dd EB07     		jmp	.L292
 4518              	.L307:
 839:svf2csvf.c    **** 		case XSDRTDO:
 4519              		.loc 1 839 0
 4520 35df 90       		nop
 4521 35e0 EB04     		jmp	.L292
 4522              	.L308:
 844:svf2csvf.c    **** 		case XSIR:
 4523              		.loc 1 844 0
 4524 35e2 90       		nop
 4525 35e3 EB01     		jmp	.L292
 4526              	.L309:
 849:svf2csvf.c    **** 		default:
 4527              		.loc 1 849 0
 4528 35e5 90       		nop
 4529              	.L292:
 852:svf2csvf.c    **** 				true, FL_INTERNAL_ERR, cleanup,
 853:svf2csvf.c    **** 				"buildIndex(): Unrecognised CSVF command (cmd=0x%02X)!", thisByte);
 854:svf2csvf.c    **** 		}
 855:svf2csvf.c    **** 		cmdPtr++;
 4530              		.loc 1 855 0
 4531 35e6 488345A0 		addq	$8, -96(%rbp)
 4531      08
 856:svf2csvf.c    **** 		ptr = *cmdPtr;
 4532              		.loc 1 856 0
 4533 35eb 488B45A0 		movq	-96(%rbp), %rax
 4534 35ef 488B00   		movq	(%rax), %rax
 4535 35f2 48894598 		movq	%rax, -104(%rbp)
 857:svf2csvf.c    **** 		thisByte = *ptr;
 4536              		.loc 1 857 0
 4537 35f6 488B4598 		movq	-104(%rbp), %rax
 4538 35fa 0FB600   		movzbl	(%rax), %eax
 4539 35fd 884583   		movb	%al, -125(%rbp)
 4540              	.L281:
 826:svf2csvf.c    **** 		switch ( thisByte ) {
 4541              		.loc 1 826 0
 4542 3600 807D8300 		cmpb	$0, -125(%rbp)
 4543 3604 0F8574FD 		jne	.L298
 4543      FFFF
 858:svf2csvf.c    **** 	}
 859:svf2csvf.c    **** 	bStatus = bufAppendByte(&newBuf, XCOMPLETE, error);
 4544              		.loc 1 859 0
 4545 360a 488B9568 		movq	-152(%rbp), %rdx
 4545      FFFFFF
 4546 3611 488D45C0 		leaq	-64(%rbp), %rax
 4547 3615 BE000000 		movl	$0, %esi
 4547      00
 4548 361a 4889C7   		movq	%rax, %rdi
 4549 361d E8000000 		call	bufAppendByte@PLT
 4549      00
 4550 3622 894590   		movl	%eax, -112(%rbp)
 860:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4551              		.loc 1 860 0
 4552 3625 837D9000 		cmpl	$0, -112(%rbp)
 4553 3629 741F     		je	.L299
 4554              		.loc 1 860 0 is_stmt 0 discriminator 1
 4555 362b 488B8568 		movq	-152(%rbp), %rax
 4555      FFFFFF
 4556 3632 488D3500 		leaq	.LC50(%rip), %rsi
 4556      000000
 4557 3639 4889C7   		movq	%rax, %rdi
 4558 363c E8000000 		call	errPrefix@PLT
 4558      00
 4559 3641 C7458401 		movl	$1, -124(%rbp)
 4559      000000
 4560 3648 EB16     		jmp	.L264
 4561              	.L299:
 861:svf2csvf.c    **** 	bufSwap(&newBuf, csvfBuf);
 4562              		.loc 1 861 0 is_stmt 1
 4563 364a 488B9570 		movq	-144(%rbp), %rdx
 4563      FFFFFF
 4564 3651 488D45C0 		leaq	-64(%rbp), %rax
 4565 3655 4889D6   		movq	%rdx, %rsi
 4566 3658 4889C7   		movq	%rax, %rdi
 4567 365b E8000000 		call	bufSwap@PLT
 4567      00
 4568              	.L264:
 862:svf2csvf.c    **** cleanup:
 863:svf2csvf.c    **** 	if ( dstIndex ) {
 4569              		.loc 1 863 0
 4570 3660 48837DB8 		cmpq	$0, -72(%rbp)
 4570      00
 4571 3665 740C     		je	.L300
 864:svf2csvf.c    **** 		free((void*)dstIndex);
 4572              		.loc 1 864 0
 4573 3667 488B45B8 		movq	-72(%rbp), %rax
 4574 366b 4889C7   		movq	%rax, %rdi
 4575 366e E8000000 		call	free@PLT
 4575      00
 4576              	.L300:
 865:svf2csvf.c    **** 	}
 866:svf2csvf.c    **** 	if ( srcIndex ) {
 4577              		.loc 1 866 0
 4578 3673 48837DB0 		cmpq	$0, -80(%rbp)
 4578      00
 4579 3678 740C     		je	.L301
 867:svf2csvf.c    **** 		free((void*)srcIndex);
 4580              		.loc 1 867 0
 4581 367a 488B45B0 		movq	-80(%rbp), %rax
 4582 367e 4889C7   		movq	%rax, %rdi
 4583 3681 E8000000 		call	free@PLT
 4583      00
 4584              	.L301:
 868:svf2csvf.c    **** 	}
 869:svf2csvf.c    **** 	bufDestroy(&newBuf);
 4585              		.loc 1 869 0
 4586 3686 488D45C0 		leaq	-64(%rbp), %rax
 4587 368a 4889C7   		movq	%rax, %rdi
 4588 368d E8000000 		call	bufDestroy@PLT
 4588      00
 870:svf2csvf.c    **** 	return retVal;
 4589              		.loc 1 870 0
 4590 3692 8B4584   		movl	-124(%rbp), %eax
 871:svf2csvf.c    **** }
 4591              		.loc 1 871 0
 4592 3695 488B5DE8 		movq	-24(%rbp), %rbx
 4593 3699 6448331C 		xorq	%fs:40, %rbx
 4593      25280000 
 4593      00
 4594 36a2 7405     		je	.L303
 4595 36a4 E8000000 		call	__stack_chk_fail@PLT
 4595      00
 4596              	.L303:
 4597 36a9 4881C498 		addq	$152, %rsp
 4597      000000
 4598 36b0 5B       		popq	%rbx
 4599 36b1 5D       		popq	%rbp
 4600              		.cfi_def_cfa 7, 8
 4601 36b2 C3       		ret
 4602              		.cfi_endproc
 4603              	.LFE21:
 4605              		.section	.rodata
 4606              	.LC54:
 4607 04a0 666C4C6F 		.string	"flLoadSvfAndConvertToCsvf()"
 4607      61645376 
 4607      66416E64 
 4607      436F6E76 
 4607      65727454 
 4608              	.LC55:
 4609 04bc 54525354 		.string	"TRST"
 4609      00
 4610              	.LC56:
 4611 04c1 454E4400 		.string	"END"
 4612              	.LC57:
 4613 04c5 53544154 		.string	"STATE"
 4613      4500
 4614              	.LC58:
 4615 04cb 46524551 		.string	"FREQ"
 4615      00
 4616              		.text
 4617              		.globl	flLoadSvfAndConvertToCsvf
 4619              	flLoadSvfAndConvertToCsvf:
 4620              	.LFB22:
 872:svf2csvf.c    **** 
 873:svf2csvf.c    **** DLLEXPORT(FLStatus) flLoadSvfAndConvertToCsvf(
 874:svf2csvf.c    **** 	const char *svfFile, struct Buffer *csvfBuf, uint32 *maxBufSize, const char **error)
 875:svf2csvf.c    **** {
 4621              		.loc 1 875 0
 4622              		.cfi_startproc
 4623 36b3 55       		pushq	%rbp
 4624              		.cfi_def_cfa_offset 16
 4625              		.cfi_offset 6, -16
 4626 36b4 4889E5   		movq	%rsp, %rbp
 4627              		.cfi_def_cfa_register 6
 4628 36b7 4881EC30 		subq	$816, %rsp
 4628      030000
 4629 36be 4889BDE8 		movq	%rdi, -792(%rbp)
 4629      FCFFFF
 4630 36c5 4889B5E0 		movq	%rsi, -800(%rbp)
 4630      FCFFFF
 4631 36cc 488995D8 		movq	%rdx, -808(%rbp)
 4631      FCFFFF
 4632 36d3 48898DD0 		movq	%rcx, -816(%rbp)
 4632      FCFFFF
 4633              		.loc 1 875 0
 4634 36da 64488B04 		movq	%fs:40, %rax
 4634      25280000 
 4634      00
 4635 36e3 488945F8 		movq	%rax, -8(%rbp)
 4636 36e7 31C0     		xorl	%eax, %eax
 876:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 4637              		.loc 1 876 0
 4638 36e9 C785FCFC 		movl	$0, -772(%rbp)
 4638      FFFF0000 
 4638      0000
 877:svf2csvf.c    **** 	struct Buffer lineBuf = {0,};
 4639              		.loc 1 877 0
 4640 36f3 48C78530 		movq	$0, -720(%rbp)
 4640      FDFFFF00 
 4640      000000
 4641 36fe 48C78538 		movq	$0, -712(%rbp)
 4641      FDFFFF00 
 4641      000000
 4642 3709 48C78540 		movq	$0, -704(%rbp)
 4642      FDFFFF00 
 4642      000000
 4643 3714 48C78548 		movq	$0, -696(%rbp)
 4643      FDFFFF00 
 4643      000000
 878:svf2csvf.c    **** 	BufferStatus bStatus;
 879:svf2csvf.c    **** 	FLStatus fStatus;
 880:svf2csvf.c    **** 	const uint8 *buffer = NULL, *p, *end, *line;
 4644              		.loc 1 880 0
 4645 371f 48C78510 		movq	$0, -752(%rbp)
 4645      FDFFFF00 
 4645      000000
 881:svf2csvf.c    **** 	size_t fileLength;
 882:svf2csvf.c    **** 	bool gotSemicolon;
 883:svf2csvf.c    **** 	struct ParseContext cxt = {{0,},};
 4646              		.loc 1 883 0
 4647 372a 488D9550 		leaq	-688(%rbp), %rdx
 4647      FDFFFF
 4648 3731 B8000000 		movl	$0, %eax
 4648      00
 4649 3736 B9550000 		movl	$85, %ecx
 4649      00
 4650 373b 4889D7   		movq	%rdx, %rdi
 4651 373e F348AB   		rep stosq
 884:svf2csvf.c    **** 
 885:svf2csvf.c    **** 	// Initialise context and line buffer
 886:svf2csvf.c    **** 	fStatus = cxtInitialise(&cxt, error);
 4652              		.loc 1 886 0
 4653 3741 488B95D0 		movq	-816(%rbp), %rdx
 4653      FCFFFF
 4654 3748 488D8550 		leaq	-688(%rbp), %rax
 4654      FDFFFF
 4655 374f 4889D6   		movq	%rdx, %rsi
 4656 3752 4889C7   		movq	%rax, %rdi
 4657 3755 E8000000 		call	cxtInitialise@PLT
 4657      00
 4658 375a 898500FD 		movl	%eax, -768(%rbp)
 4658      FFFF
 887:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 4659              		.loc 1 887 0
 4660 3760 83BD00FD 		cmpl	$0, -768(%rbp)
 4660      FFFF00
 4661 3767 7427     		je	.L311
 4662              		.loc 1 887 0 is_stmt 0 discriminator 1
 4663 3769 488B85D0 		movq	-816(%rbp), %rax
 4663      FCFFFF
 4664 3770 488D3500 		leaq	.LC54(%rip), %rsi
 4664      000000
 4665 3777 4889C7   		movq	%rax, %rdi
 4666 377a E8000000 		call	errPrefix@PLT
 4666      00
 4667 377f 8B8500FD 		movl	-768(%rbp), %eax
 4667      FFFF
 4668 3785 8985FCFC 		movl	%eax, -772(%rbp)
 4668      FFFF
 4669 378b E9180500 		jmp	.L312
 4669      00
 4670              	.L311:
 888:svf2csvf.c    **** 	bStatus = bufInitialise(&lineBuf, 1024, 0x00, error);
 4671              		.loc 1 888 0 is_stmt 1
 4672 3790 488B95D0 		movq	-816(%rbp), %rdx
 4672      FCFFFF
 4673 3797 488D8530 		leaq	-720(%rbp), %rax
 4673      FDFFFF
 4674 379e 4889D1   		movq	%rdx, %rcx
 4675 37a1 BA000000 		movl	$0, %edx
 4675      00
 4676 37a6 BE000400 		movl	$1024, %esi
 4676      00
 4677 37ab 4889C7   		movq	%rax, %rdi
 4678 37ae E8000000 		call	bufInitialise@PLT
 4678      00
 4679 37b3 898504FD 		movl	%eax, -764(%rbp)
 4679      FFFF
 889:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4680              		.loc 1 889 0
 4681 37b9 83BD04FD 		cmpl	$0, -764(%rbp)
 4681      FFFF00
 4682 37c0 7425     		je	.L313
 4683              		.loc 1 889 0 is_stmt 0 discriminator 1
 4684 37c2 488B85D0 		movq	-816(%rbp), %rax
 4684      FCFFFF
 4685 37c9 488D3500 		leaq	.LC54(%rip), %rsi
 4685      000000
 4686 37d0 4889C7   		movq	%rax, %rdi
 4687 37d3 E8000000 		call	errPrefix@PLT
 4687      00
 4688 37d8 C785FCFC 		movl	$1, -772(%rbp)
 4688      FFFF0100 
 4688      0000
 4689 37e2 E9C10400 		jmp	.L312
 4689      00
 4690              	.L313:
 890:svf2csvf.c    **** 
 891:svf2csvf.c    **** 	// Load SVF file
 892:svf2csvf.c    **** 	buffer = flLoadFile(svfFile, &fileLength);
 4691              		.loc 1 892 0 is_stmt 1
 4692 37e7 488D9508 		leaq	-760(%rbp), %rdx
 4692      FDFFFF
 4693 37ee 488B85E8 		movq	-792(%rbp), %rax
 4693      FCFFFF
 4694 37f5 4889D6   		movq	%rdx, %rsi
 4695 37f8 4889C7   		movq	%rax, %rdi
 4696 37fb E8000000 		call	flLoadFile@PLT
 4696      00
 4697 3800 48898510 		movq	%rax, -752(%rbp)
 4697      FDFFFF
 893:svf2csvf.c    **** 	if ( !buffer ) {
 4698              		.loc 1 893 0
 4699 3807 4883BD10 		cmpq	$0, -752(%rbp)
 4699      FDFFFF00 
 4700 380f 7534     		jne	.L314
 894:svf2csvf.c    **** 		//errRender(error, "flLoadSvfAndConvertToCsvf(): Unable to load SVF file %s", svfFile);
 895:svf2csvf.c    **** 		errRenderStd(error);
 4701              		.loc 1 895 0
 4702 3811 488B85D0 		movq	-816(%rbp), %rax
 4702      FCFFFF
 4703 3818 4889C7   		movq	%rax, %rdi
 4704 381b E8000000 		call	errRenderStd@PLT
 4704      00
 896:svf2csvf.c    **** 		errPrefix(error, "flLoadSvfAndConvertToCsvf()");
 4705              		.loc 1 896 0
 4706 3820 488B85D0 		movq	-816(%rbp), %rax
 4706      FCFFFF
 4707 3827 488D3500 		leaq	.LC54(%rip), %rsi
 4707      000000
 4708 382e 4889C7   		movq	%rax, %rdi
 4709 3831 E8000000 		call	errPrefix@PLT
 4709      00
 897:svf2csvf.c    **** 		FAIL(FL_FILE_ERR, cleanup);
 4710              		.loc 1 897 0
 4711 3836 C785FCFC 		movl	$6, -772(%rbp)
 4711      FFFF0600 
 4711      0000
 4712 3840 E9630400 		jmp	.L312
 4712      00
 4713              	.L314:
 898:svf2csvf.c    **** 	}
 899:svf2csvf.c    **** 	end = buffer + fileLength;
 4714              		.loc 1 899 0
 4715 3845 488B9508 		movq	-760(%rbp), %rdx
 4715      FDFFFF
 4716 384c 488B8510 		movq	-752(%rbp), %rax
 4716      FDFFFF
 4717 3853 4801D0   		addq	%rdx, %rax
 4718 3856 48898520 		movq	%rax, -736(%rbp)
 4718      FDFFFF
 900:svf2csvf.c    **** 	p = buffer;
 4719              		.loc 1 900 0
 4720 385d 488B8510 		movq	-752(%rbp), %rax
 4720      FDFFFF
 4721 3864 48898518 		movq	%rax, -744(%rbp)
 4721      FDFFFF
 901:svf2csvf.c    **** 	while ( p < end ) {
 4722              		.loc 1 901 0
 4723 386b E97B0300 		jmp	.L315
 4723      00
 4724              	.L337:
 902:svf2csvf.c    **** 		if ( p[0] == '\n' || p[0] == '\r' ) {
 4725              		.loc 1 902 0
 4726 3870 488B8518 		movq	-744(%rbp), %rax
 4726      FDFFFF
 4727 3877 0FB600   		movzbl	(%rax), %eax
 4728 387a 3C0A     		cmpb	$10, %al
 4729 387c 740E     		je	.L316
 4730              		.loc 1 902 0 is_stmt 0 discriminator 1
 4731 387e 488B8518 		movq	-744(%rbp), %rax
 4731      FDFFFF
 4732 3885 0FB600   		movzbl	(%rax), %eax
 4733 3888 3C0D     		cmpb	$13, %al
 4734 388a 750D     		jne	.L317
 4735              	.L316:
 903:svf2csvf.c    **** 			p++;
 4736              		.loc 1 903 0 is_stmt 1
 4737 388c 48838518 		addq	$1, -744(%rbp)
 4737      FDFFFF01 
 4738 3894 E9520300 		jmp	.L315
 4738      00
 4739              	.L317:
 904:svf2csvf.c    **** 		} else if (
 905:svf2csvf.c    **** 			p[0] == '!' ||
 4740              		.loc 1 905 0
 4741 3899 488B8518 		movq	-744(%rbp), %rax
 4741      FDFFFF
 4742 38a0 0FB600   		movzbl	(%rax), %eax
 904:svf2csvf.c    **** 		} else if (
 4743              		.loc 1 904 0
 4744 38a3 3C21     		cmpb	$33, %al
 4745 38a5 0F84AA00 		je	.L321
 4745      0000
 906:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4746              		.loc 1 906 0
 4747 38ab 488B8518 		movq	-744(%rbp), %rax
 4747      FDFFFF
 4748 38b2 0FB600   		movzbl	(%rax), %eax
 905:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4749              		.loc 1 905 0
 4750 38b5 3C2F     		cmpb	$47, %al
 4751 38b7 7516     		jne	.L319
 4752              		.loc 1 906 0
 4753 38b9 488B8518 		movq	-744(%rbp), %rax
 4753      FDFFFF
 4754 38c0 4883C001 		addq	$1, %rax
 4755 38c4 0FB600   		movzbl	(%rax), %eax
 4756 38c7 3C2F     		cmpb	$47, %al
 4757 38c9 0F848600 		je	.L321
 4757      0000
 4758              	.L319:
 907:svf2csvf.c    **** 			!memcmp(p, "TRST", 4) ||
 4759              		.loc 1 907 0 discriminator 1
 4760 38cf 488B8518 		movq	-744(%rbp), %rax
 4760      FDFFFF
 4761 38d6 BA040000 		movl	$4, %edx
 4761      00
 4762 38db 488D3500 		leaq	.LC55(%rip), %rsi
 4762      000000
 4763 38e2 4889C7   		movq	%rax, %rdi
 4764 38e5 E8000000 		call	memcmp@PLT
 4764      00
 906:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4765              		.loc 1 906 0 discriminator 1
 4766 38ea 85C0     		testl	%eax, %eax
 4767 38ec 7467     		je	.L321
 908:svf2csvf.c    **** 			!memcmp(p, "END", 3) ||
 4768              		.loc 1 908 0
 4769 38ee 488B8518 		movq	-744(%rbp), %rax
 4769      FDFFFF
 4770 38f5 BA030000 		movl	$3, %edx
 4770      00
 4771 38fa 488D3500 		leaq	.LC56(%rip), %rsi
 4771      000000
 4772 3901 4889C7   		movq	%rax, %rdi
 4773 3904 E8000000 		call	memcmp@PLT
 4773      00
 907:svf2csvf.c    **** 			!memcmp(p, "TRST", 4) ||
 4774              		.loc 1 907 0
 4775 3909 85C0     		testl	%eax, %eax
 4776 390b 7448     		je	.L321
 909:svf2csvf.c    **** 			!memcmp(p, "STATE", 5) ||
 4777              		.loc 1 909 0
 4778 390d 488B8518 		movq	-744(%rbp), %rax
 4778      FDFFFF
 4779 3914 BA050000 		movl	$5, %edx
 4779      00
 4780 3919 488D3500 		leaq	.LC57(%rip), %rsi
 4780      000000
 4781 3920 4889C7   		movq	%rax, %rdi
 4782 3923 E8000000 		call	memcmp@PLT
 4782      00
 908:svf2csvf.c    **** 			!memcmp(p, "END", 3) ||
 4783              		.loc 1 908 0
 4784 3928 85C0     		testl	%eax, %eax
 4785 392a 7429     		je	.L321
 910:svf2csvf.c    **** 			!memcmp(p, "FREQ", 4)
 4786              		.loc 1 910 0
 4787 392c 488B8518 		movq	-744(%rbp), %rax
 4787      FDFFFF
 4788 3933 BA040000 		movl	$4, %edx
 4788      00
 4789 3938 488D3500 		leaq	.LC58(%rip), %rsi
 4789      000000
 4790 393f 4889C7   		movq	%rax, %rdi
 4791 3942 E8000000 		call	memcmp@PLT
 4791      00
 909:svf2csvf.c    **** 			!memcmp(p, "STATE", 5) ||
 4792              		.loc 1 909 0
 4793 3947 85C0     		testl	%eax, %eax
 4794 3949 754B     		jne	.L324
 911:svf2csvf.c    **** 		) {
 912:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' ) {
 4795              		.loc 1 912 0
 4796 394b EB08     		jmp	.L321
 4797              	.L323:
 913:svf2csvf.c    **** 				p++;
 4798              		.loc 1 913 0
 4799 394d 48838518 		addq	$1, -744(%rbp)
 4799      FDFFFF01 
 4800              	.L321:
 912:svf2csvf.c    **** 				p++;
 4801              		.loc 1 912 0
 4802 3955 488B8518 		movq	-744(%rbp), %rax
 4802      FDFFFF
 4803 395c 483B8520 		cmpq	-736(%rbp), %rax
 4803      FDFFFF
 4804 3963 731C     		jnb	.L322
 912:svf2csvf.c    **** 				p++;
 4805              		.loc 1 912 0 is_stmt 0 discriminator 1
 4806 3965 488B8518 		movq	-744(%rbp), %rax
 4806      FDFFFF
 4807 396c 0FB600   		movzbl	(%rax), %eax
 4808 396f 3C0A     		cmpb	$10, %al
 4809 3971 740E     		je	.L322
 912:svf2csvf.c    **** 				p++;
 4810              		.loc 1 912 0 discriminator 2
 4811 3973 488B8518 		movq	-744(%rbp), %rax
 4811      FDFFFF
 4812 397a 0FB600   		movzbl	(%rax), %eax
 4813 397d 3C0D     		cmpb	$13, %al
 4814 397f 75CC     		jne	.L323
 4815              	.L322:
 914:svf2csvf.c    **** 			}
 915:svf2csvf.c    **** 			p++;
 4816              		.loc 1 915 0 is_stmt 1
 4817 3981 48838518 		addq	$1, -744(%rbp)
 4817      FDFFFF01 
 4818 3989 E95D0200 		jmp	.L315
 4818      00
 4819              	.L325:
 916:svf2csvf.c    **** 		} else {
 917:svf2csvf.c    **** 			CHOMP();
 4820              		.loc 1 917 0 discriminator 4
 4821 398e 48838518 		addq	$1, -744(%rbp)
 4821      FDFFFF01 
 4822              	.L324:
 4823              		.loc 1 917 0 is_stmt 0 discriminator 1
 4824 3996 488B8518 		movq	-744(%rbp), %rax
 4824      FDFFFF
 4825 399d 0FB600   		movzbl	(%rax), %eax
 4826 39a0 3C20     		cmpb	$32, %al
 4827 39a2 74EA     		je	.L325
 4828              		.loc 1 917 0 discriminator 3
 4829 39a4 488B8518 		movq	-744(%rbp), %rax
 4829      FDFFFF
 4830 39ab 0FB600   		movzbl	(%rax), %eax
 4831 39ae 3C09     		cmpb	$9, %al
 4832 39b0 74DC     		je	.L325
 918:svf2csvf.c    **** 			line = p;
 4833              		.loc 1 918 0 is_stmt 1
 4834 39b2 488B8518 		movq	-744(%rbp), %rax
 4834      FDFFFF
 4835 39b9 48898528 		movq	%rax, -728(%rbp)
 4835      FDFFFF
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4836              		.loc 1 919 0
 4837 39c0 EB08     		jmp	.L326
 4838              	.L328:
 920:svf2csvf.c    **** 				p++;
 4839              		.loc 1 920 0
 4840 39c2 48838518 		addq	$1, -744(%rbp)
 4840      FDFFFF01 
 4841              	.L326:
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4842              		.loc 1 919 0
 4843 39ca 488B8518 		movq	-744(%rbp), %rax
 4843      FDFFFF
 4844 39d1 483B8520 		cmpq	-736(%rbp), %rax
 4844      FDFFFF
 4845 39d8 732A     		jnb	.L327
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4846              		.loc 1 919 0 is_stmt 0 discriminator 1
 4847 39da 488B8518 		movq	-744(%rbp), %rax
 4847      FDFFFF
 4848 39e1 0FB600   		movzbl	(%rax), %eax
 4849 39e4 3C0A     		cmpb	$10, %al
 4850 39e6 741C     		je	.L327
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4851              		.loc 1 919 0 discriminator 2
 4852 39e8 488B8518 		movq	-744(%rbp), %rax
 4852      FDFFFF
 4853 39ef 0FB600   		movzbl	(%rax), %eax
 4854 39f2 3C0D     		cmpb	$13, %al
 4855 39f4 740E     		je	.L327
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4856              		.loc 1 919 0 discriminator 3
 4857 39f6 488B8518 		movq	-744(%rbp), %rax
 4857      FDFFFF
 4858 39fd 0FB600   		movzbl	(%rax), %eax
 4859 3a00 3C3B     		cmpb	$59, %al
 4860 3a02 75BE     		jne	.L328
 4861              	.L327:
 921:svf2csvf.c    **** 			}
 922:svf2csvf.c    **** 			gotSemicolon = (*p == ';');
 4862              		.loc 1 922 0 is_stmt 1
 4863 3a04 488B8518 		movq	-744(%rbp), %rax
 4863      FDFFFF
 4864 3a0b 0FB600   		movzbl	(%rax), %eax
 4865 3a0e 3C3B     		cmpb	$59, %al
 4866 3a10 0F94C0   		sete	%al
 4867 3a13 8885FBFC 		movb	%al, -773(%rbp)
 4867      FFFF
 923:svf2csvf.c    **** 			if ( *p == '\n' || *p == '\r' || *p == ';' ) {
 4868              		.loc 1 923 0
 4869 3a19 488B8518 		movq	-744(%rbp), %rax
 4869      FDFFFF
 4870 3a20 0FB600   		movzbl	(%rax), %eax
 4871 3a23 3C0A     		cmpb	$10, %al
 4872 3a25 7420     		je	.L330
 4873              		.loc 1 923 0 is_stmt 0 discriminator 1
 4874 3a27 488B8518 		movq	-744(%rbp), %rax
 4874      FDFFFF
 4875 3a2e 0FB600   		movzbl	(%rax), %eax
 4876 3a31 3C0D     		cmpb	$13, %al
 4877 3a33 7412     		je	.L330
 4878              		.loc 1 923 0 discriminator 2
 4879 3a35 488B8518 		movq	-744(%rbp), %rax
 4879      FDFFFF
 4880 3a3c 0FB600   		movzbl	(%rax), %eax
 4881 3a3f 3C3B     		cmpb	$59, %al
 4882 3a41 0F85A401 		jne	.L315
 4882      0000
 4883              	.L330:
 924:svf2csvf.c    **** 				do {
 925:svf2csvf.c    **** 					p--;
 4884              		.loc 1 925 0 is_stmt 1 discriminator 3
 4885 3a47 4883AD18 		subq	$1, -744(%rbp)
 4885      FDFFFF01 
 926:svf2csvf.c    **** 				} while ( *p == ' ' || *p == '\t' );
 4886              		.loc 1 926 0 discriminator 3
 4887 3a4f 488B8518 		movq	-744(%rbp), %rax
 4887      FDFFFF
 4888 3a56 0FB600   		movzbl	(%rax), %eax
 4889 3a59 3C20     		cmpb	$32, %al
 4890 3a5b 74EA     		je	.L330
 4891              		.loc 1 926 0 is_stmt 0 discriminator 2
 4892 3a5d 488B8518 		movq	-744(%rbp), %rax
 4892      FDFFFF
 4893 3a64 0FB600   		movzbl	(%rax), %eax
 4894 3a67 3C09     		cmpb	$9, %al
 4895 3a69 74DC     		je	.L330
 927:svf2csvf.c    **** 				p++; // go back to first space char
 4896              		.loc 1 927 0 is_stmt 1
 4897 3a6b 48838518 		addq	$1, -744(%rbp)
 4897      FDFFFF01 
 928:svf2csvf.c    **** 				bStatus = bufAppendBlock(&lineBuf, line, (uint32)(p - line), error);
 4898              		.loc 1 928 0
 4899 3a73 488B9518 		movq	-744(%rbp), %rdx
 4899      FDFFFF
 4900 3a7a 488B8528 		movq	-728(%rbp), %rax
 4900      FDFFFF
 4901 3a81 4829C2   		subq	%rax, %rdx
 4902 3a84 4889D0   		movq	%rdx, %rax
 4903 3a87 89C7     		movl	%eax, %edi
 4904 3a89 488B95D0 		movq	-816(%rbp), %rdx
 4904      FCFFFF
 4905 3a90 488BB528 		movq	-728(%rbp), %rsi
 4905      FDFFFF
 4906 3a97 488D8530 		leaq	-720(%rbp), %rax
 4906      FDFFFF
 4907 3a9e 4889D1   		movq	%rdx, %rcx
 4908 3aa1 4889FA   		movq	%rdi, %rdx
 4909 3aa4 4889C7   		movq	%rax, %rdi
 4910 3aa7 E8000000 		call	bufAppendBlock@PLT
 4910      00
 4911 3aac 898504FD 		movl	%eax, -764(%rbp)
 4911      FFFF
 929:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4912              		.loc 1 929 0
 4913 3ab2 83BD04FD 		cmpl	$0, -764(%rbp)
 4913      FFFF00
 4914 3ab9 742D     		je	.L332
 4915              		.loc 1 929 0 is_stmt 0 discriminator 1
 4916 3abb 488B85D0 		movq	-816(%rbp), %rax
 4916      FCFFFF
 4917 3ac2 488D3500 		leaq	.LC54(%rip), %rsi
 4917      000000
 4918 3ac9 4889C7   		movq	%rax, %rdi
 4919 3acc E8000000 		call	errPrefix@PLT
 4919      00
 4920 3ad1 C785FCFC 		movl	$1, -772(%rbp)
 4920      FFFF0100 
 4920      0000
 4921 3adb E9C80100 		jmp	.L312
 4921      00
 4922              	.L334:
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 931:svf2csvf.c    **** 					p++;
 4923              		.loc 1 931 0 is_stmt 1
 4924 3ae0 48838518 		addq	$1, -744(%rbp)
 4924      FDFFFF01 
 4925              	.L332:
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4926              		.loc 1 930 0
 4927 3ae8 488B8518 		movq	-744(%rbp), %rax
 4927      FDFFFF
 4928 3aef 483B8520 		cmpq	-736(%rbp), %rax
 4928      FDFFFF
 4929 3af6 731C     		jnb	.L333
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4930              		.loc 1 930 0 is_stmt 0 discriminator 1
 4931 3af8 488B8518 		movq	-744(%rbp), %rax
 4931      FDFFFF
 4932 3aff 0FB600   		movzbl	(%rax), %eax
 4933 3b02 3C0A     		cmpb	$10, %al
 4934 3b04 740E     		je	.L333
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4935              		.loc 1 930 0 discriminator 2
 4936 3b06 488B8518 		movq	-744(%rbp), %rax
 4936      FDFFFF
 4937 3b0d 0FB600   		movzbl	(%rax), %eax
 4938 3b10 3C0D     		cmpb	$13, %al
 4939 3b12 75CC     		jne	.L334
 4940              	.L333:
 932:svf2csvf.c    **** 				}
 933:svf2csvf.c    **** 				p++; // Skip over CR
 4941              		.loc 1 933 0 is_stmt 1
 4942 3b14 48838518 		addq	$1, -744(%rbp)
 4942      FDFFFF01 
 934:svf2csvf.c    **** 				if ( gotSemicolon ) {
 4943              		.loc 1 934 0
 4944 3b1c 80BDFBFC 		cmpb	$0, -773(%rbp)
 4944      FFFF00
 4945 3b23 0F84C200 		je	.L315
 4945      0000
 935:svf2csvf.c    **** 					bStatus = bufAppendByte(&lineBuf, '\0', error);
 4946              		.loc 1 935 0
 4947 3b29 488B95D0 		movq	-816(%rbp), %rdx
 4947      FCFFFF
 4948 3b30 488D8530 		leaq	-720(%rbp), %rax
 4948      FDFFFF
 4949 3b37 BE000000 		movl	$0, %esi
 4949      00
 4950 3b3c 4889C7   		movq	%rax, %rdi
 4951 3b3f E8000000 		call	bufAppendByte@PLT
 4951      00
 4952 3b44 898504FD 		movl	%eax, -764(%rbp)
 4952      FFFF
 936:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4953              		.loc 1 936 0
 4954 3b4a 83BD04FD 		cmpl	$0, -764(%rbp)
 4954      FFFF00
 4955 3b51 7425     		je	.L335
 4956              		.loc 1 936 0 is_stmt 0 discriminator 1
 4957 3b53 488B85D0 		movq	-816(%rbp), %rax
 4957      FCFFFF
 4958 3b5a 488D3500 		leaq	.LC54(%rip), %rsi
 4958      000000
 4959 3b61 4889C7   		movq	%rax, %rdi
 4960 3b64 E8000000 		call	errPrefix@PLT
 4960      00
 4961 3b69 C785FCFC 		movl	$1, -772(%rbp)
 4961      FFFF0100 
 4961      0000
 4962 3b73 E9300100 		jmp	.L312
 4962      00
 4963              	.L335:
 937:svf2csvf.c    **** 					fStatus = parseLine(&cxt, &lineBuf, csvfBuf, maxBufSize, error);
 4964              		.loc 1 937 0 is_stmt 1
 4965 3b78 488BBDD0 		movq	-816(%rbp), %rdi
 4965      FCFFFF
 4966 3b7f 488B8DD8 		movq	-808(%rbp), %rcx
 4966      FCFFFF
 4967 3b86 488B95E0 		movq	-800(%rbp), %rdx
 4967      FCFFFF
 4968 3b8d 488DB530 		leaq	-720(%rbp), %rsi
 4968      FDFFFF
 4969 3b94 488D8550 		leaq	-688(%rbp), %rax
 4969      FDFFFF
 4970 3b9b 4989F8   		movq	%rdi, %r8
 4971 3b9e 4889C7   		movq	%rax, %rdi
 4972 3ba1 E8000000 		call	parseLine@PLT
 4972      00
 4973 3ba6 898500FD 		movl	%eax, -768(%rbp)
 4973      FFFF
 938:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 4974              		.loc 1 938 0
 4975 3bac 83BD00FD 		cmpl	$0, -768(%rbp)
 4975      FFFF00
 4976 3bb3 7427     		je	.L336
 4977              		.loc 1 938 0 is_stmt 0 discriminator 1
 4978 3bb5 488B85D0 		movq	-816(%rbp), %rax
 4978      FCFFFF
 4979 3bbc 488D3500 		leaq	.LC54(%rip), %rsi
 4979      000000
 4980 3bc3 4889C7   		movq	%rax, %rdi
 4981 3bc6 E8000000 		call	errPrefix@PLT
 4981      00
 4982 3bcb 8B8500FD 		movl	-768(%rbp), %eax
 4982      FFFF
 4983 3bd1 8985FCFC 		movl	%eax, -772(%rbp)
 4983      FFFF
 4984 3bd7 E9CC0000 		jmp	.L312
 4984      00
 4985              	.L336:
 939:svf2csvf.c    **** 					bufZeroLength(&lineBuf);
 4986              		.loc 1 939 0 is_stmt 1
 4987 3bdc 488D8530 		leaq	-720(%rbp), %rax
 4987      FDFFFF
 4988 3be3 4889C7   		movq	%rax, %rdi
 4989 3be6 E8000000 		call	bufZeroLength@PLT
 4989      00
 4990              	.L315:
 901:svf2csvf.c    **** 		if ( p[0] == '\n' || p[0] == '\r' ) {
 4991              		.loc 1 901 0
 4992 3beb 488B8518 		movq	-744(%rbp), %rax
 4992      FDFFFF
 4993 3bf2 483B8520 		cmpq	-736(%rbp), %rax
 4993      FDFFFF
 4994 3bf9 0F8271FC 		jb	.L337
 4994      FFFF
 940:svf2csvf.c    **** 				}
 941:svf2csvf.c    **** 			}
 942:svf2csvf.c    **** 		}
 943:svf2csvf.c    **** 	}
 944:svf2csvf.c    **** 	bStatus = bufAppendByte(csvfBuf, XCOMPLETE, error);
 4995              		.loc 1 944 0
 4996 3bff 488B95D0 		movq	-816(%rbp), %rdx
 4996      FCFFFF
 4997 3c06 488B85E0 		movq	-800(%rbp), %rax
 4997      FCFFFF
 4998 3c0d BE000000 		movl	$0, %esi
 4998      00
 4999 3c12 4889C7   		movq	%rax, %rdi
 5000 3c15 E8000000 		call	bufAppendByte@PLT
 5000      00
 5001 3c1a 898504FD 		movl	%eax, -764(%rbp)
 5001      FFFF
 945:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 5002              		.loc 1 945 0
 5003 3c20 83BD04FD 		cmpl	$0, -764(%rbp)
 5003      FFFF00
 5004 3c27 7422     		je	.L338
 5005              		.loc 1 945 0 is_stmt 0 discriminator 1
 5006 3c29 488B85D0 		movq	-816(%rbp), %rax
 5006      FCFFFF
 5007 3c30 488D3500 		leaq	.LC54(%rip), %rsi
 5007      000000
 5008 3c37 4889C7   		movq	%rax, %rdi
 5009 3c3a E8000000 		call	errPrefix@PLT
 5009      00
 5010 3c3f C785FCFC 		movl	$1, -772(%rbp)
 5010      FFFF0100 
 5010      0000
 5011 3c49 EB5D     		jmp	.L312
 5012              	.L338:
 946:svf2csvf.c    **** 	cxt.numCommands++;
 5013              		.loc 1 946 0 is_stmt 1
 5014 3c4b 8B45EC   		movl	-20(%rbp), %eax
 5015 3c4e 83C001   		addl	$1, %eax
 5016 3c51 8945EC   		movl	%eax, -20(%rbp)
 947:svf2csvf.c    **** 
 948:svf2csvf.c    **** 	fStatus = buildIndex(&cxt, csvfBuf, error);
 5017              		.loc 1 948 0
 5018 3c54 488B95D0 		movq	-816(%rbp), %rdx
 5018      FCFFFF
 5019 3c5b 488B8DE0 		movq	-800(%rbp), %rcx
 5019      FCFFFF
 5020 3c62 488D8550 		leaq	-688(%rbp), %rax
 5020      FDFFFF
 5021 3c69 4889CE   		movq	%rcx, %rsi
 5022 3c6c 4889C7   		movq	%rax, %rdi
 5023 3c6f E8000000 		call	buildIndex@PLT
 5023      00
 5024 3c74 898500FD 		movl	%eax, -768(%rbp)
 5024      FFFF
 949:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 5025              		.loc 1 949 0
 5026 3c7a 83BD00FD 		cmpl	$0, -768(%rbp)
 5026      FFFF00
 5027 3c81 7424     		je	.L341
 5028              		.loc 1 949 0 is_stmt 0 discriminator 1
 5029 3c83 488B85D0 		movq	-816(%rbp), %rax
 5029      FCFFFF
 5030 3c8a 488D3500 		leaq	.LC54(%rip), %rsi
 5030      000000
 5031 3c91 4889C7   		movq	%rax, %rdi
 5032 3c94 E8000000 		call	errPrefix@PLT
 5032      00
 5033 3c99 8B8500FD 		movl	-768(%rbp), %eax
 5033      FFFF
 5034 3c9f 8985FCFC 		movl	%eax, -772(%rbp)
 5034      FFFF
 5035 3ca5 EB01     		jmp	.L312
 5036              	.L341:
 950:svf2csvf.c    **** cleanup:
 5037              		.loc 1 950 0 is_stmt 1
 5038 3ca7 90       		nop
 5039              	.L312:
 951:svf2csvf.c    **** 	cxtDestroy(&cxt);
 5040              		.loc 1 951 0
 5041 3ca8 488D8550 		leaq	-688(%rbp), %rax
 5041      FDFFFF
 5042 3caf 4889C7   		movq	%rax, %rdi
 5043 3cb2 E8000000 		call	cxtDestroy@PLT
 5043      00
 952:svf2csvf.c    **** 	bufDestroy(&lineBuf);
 5044              		.loc 1 952 0
 5045 3cb7 488D8530 		leaq	-720(%rbp), %rax
 5045      FDFFFF
 5046 3cbe 4889C7   		movq	%rax, %rdi
 5047 3cc1 E8000000 		call	bufDestroy@PLT
 5047      00
 953:svf2csvf.c    **** 	flFreeFile((void*)buffer);
 5048              		.loc 1 953 0
 5049 3cc6 488B8510 		movq	-752(%rbp), %rax
 5049      FDFFFF
 5050 3ccd 4889C7   		movq	%rax, %rdi
 5051 3cd0 E8000000 		call	flFreeFile@PLT
 5051      00
 954:svf2csvf.c    **** 	return retVal;
 5052              		.loc 1 954 0
 5053 3cd5 8B85FCFC 		movl	-772(%rbp), %eax
 5053      FFFF
 955:svf2csvf.c    **** }	
 5054              		.loc 1 955 0
 5055 3cdb 488B4DF8 		movq	-8(%rbp), %rcx
 5056 3cdf 6448330C 		xorq	%fs:40, %rcx
 5056      25280000 
 5056      00
 5057 3ce8 7405     		je	.L340
 5058 3cea E8000000 		call	__stack_chk_fail@PLT
 5058      00
 5059              	.L340:
 5060 3cef C9       		leave
 5061              		.cfi_def_cfa 7, 8
 5062 3cf0 C3       		ret
 5063              		.cfi_endproc
 5064              	.LFE22:
 5066              		.section	.rodata
 5067              		.align 8
 5068              	.LC13:
 5069 04d0 00000000 		.long	0
 5070 04d4 80842E41 		.long	1093567616
 5071              		.text
 5072              	.Letext0:
 5073              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 5074              		.file 3 "/home/gani/eval/20140524/makestuff/common/makestuff.h"
 5075              		.file 4 "/home/gani/eval/20140524/makestuff/libs/libbuffer/libbuffer.h"
 5076              		.file 5 "libfpgalink.h"
 5077              		.file 6 "svf2csvf.h"
 5078              		.file 7 "xsvf.h"
 5079              		.file 8 "/usr/include/x86_64-linux-gnu/bits/types.h"
 5080              		.file 9 "/usr/include/libio.h"
 5081              		.file 10 "/usr/include/stdio.h"
 5082              		.file 11 "firmware.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 svf2csvf.c
     /tmp/ccm0yuwy.s:5      .text:0000000000000000 getHexNibble
     /tmp/ccm0yuwy.s:74     .text:0000000000000074 getHexByte
     /tmp/ccm0yuwy.s:147    .text:0000000000000116 readLongBE
     /tmp/ccm0yuwy.s:204    .text:000000000000016f readBytes
     /tmp/ccm0yuwy.s:310    .text:000000000000026c shiftLeft
     /tmp/ccm0yuwy.s:581    .text:0000000000000557 headTail
     /tmp/ccm0yuwy.s:939    .text:000000000000099c initBitStore
     /tmp/ccm0yuwy.s:1029   .text:0000000000000a8f destroyBitStore
     /tmp/ccm0yuwy.s:1072   .text:0000000000000ad8 cxtInitialise
     /tmp/ccm0yuwy.s:1249   .text:0000000000000ce8 cxtDestroy
     /tmp/ccm0yuwy.s:1307   .text:0000000000000d6d processLine
     /tmp/ccm0yuwy.s:1548   .text:0000000000000fef isAllZero
     /tmp/ccm0yuwy.s:1601   .text:000000000000103d appendSwappedAndInterleaved
     /tmp/ccm0yuwy.s:1698   .text:0000000000001131 appendSwapped
     /tmp/ccm0yuwy.s:1808   .text:00000000000011b9 parseLine
     /tmp/ccm0yuwy.s:3757   .data.rel.ro.local:0000000000000000 cmdNames
     /tmp/ccm0yuwy.s:3785   .text:0000000000002e0b getCmdName
     /tmp/ccm0yuwy.s:3815   .rodata:000000000000037b xrtZero
     /tmp/ccm0yuwy.s:3824   .rodata:0000000000000380 illegal32
     /tmp/ccm0yuwy.s:3829   .text:0000000000002e38 processIndex
     /tmp/ccm0yuwy.s:4028   .text:0000000000002ffe buildIndex
     /tmp/ccm0yuwy.s:4619   .text:00000000000036b3 flLoadSvfAndConvertToCsvf

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
__stack_chk_fail
strlen
errPrefix
bufZeroLength
bufAppendConst
bufInitialise
bufAppendByte
bufSwap
bufDestroy
bufAppendBlock
strncmp
strtod
bufAppendLongBE
strtoul
errRender
bufDeepCopy
memcmp
malloc
free
flLoadFile
errRenderStd
flFreeFile
