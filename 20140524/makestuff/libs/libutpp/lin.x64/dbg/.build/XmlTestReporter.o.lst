   1              		.file	"XmlTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.local	_ZStL8__ioinit
   5              		.comm	_ZStL8__ioinit,1,1
   7              	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_:
   8              	.LFB1340:
   9              		.file 1 "XmlTestReporter.cpp"
   1:XmlTestReporter.cpp **** #include "XmlTestReporter.h"
   2:XmlTestReporter.cpp **** #include "Config.h"
   3:XmlTestReporter.cpp **** 
   4:XmlTestReporter.cpp **** #include <iostream>
   5:XmlTestReporter.cpp **** #include <sstream>
   6:XmlTestReporter.cpp **** #include <string>
   7:XmlTestReporter.cpp **** 
   8:XmlTestReporter.cpp **** using std::string;
   9:XmlTestReporter.cpp **** using std::ostringstream;
  10:XmlTestReporter.cpp **** using std::ostream;
  11:XmlTestReporter.cpp **** 
  12:XmlTestReporter.cpp **** namespace {
  13:XmlTestReporter.cpp **** 
  14:XmlTestReporter.cpp **** void ReplaceChar(string& str, char c, string const& replacement)
  15:XmlTestReporter.cpp **** {
  10              		.loc 1 15 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 4883EC30 		subq	$48, %rsp
  18 0008 48897DE8 		movq	%rdi, -24(%rbp)
  19 000c 89F0     		movl	%esi, %eax
  20 000e 488955D8 		movq	%rdx, -40(%rbp)
  21 0012 8845E4   		movb	%al, -28(%rbp)
  22              	.LBB2:
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  23              		.loc 1 16 0
  24 0015 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  25 0019 488B45E8 		movq	-24(%rbp), %rax
  26 001d BA000000 		movl	$0, %edx
  26      00
  27 0022 89CE     		movl	%ecx, %esi
  28 0024 4889C7   		movq	%rax, %rdi
  29 0027 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT
  29      00
  30 002c 488945F8 		movq	%rax, -8(%rbp)
  31              	.L3:
  32              		.loc 1 16 0 is_stmt 0 discriminator 3
  33 0030 48837DF8 		cmpq	$-1, -8(%rbp)
  33      FF
  34 0035 743C     		je	.L4
  17:XmlTestReporter.cpp ****         str.replace(pos, 1, replacement);
  35              		.loc 1 17 0 is_stmt 1 discriminator 2
  36 0037 488B55D8 		movq	-40(%rbp), %rdx
  37 003b 488B75F8 		movq	-8(%rbp), %rsi
  38 003f 488B45E8 		movq	-24(%rbp), %rax
  39 0043 4889D1   		movq	%rdx, %rcx
  40 0046 BA010000 		movl	$1, %edx
  40      00
  41 004b 4889C7   		movq	%rax, %rdi
  42 004e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmRKS4_@PLT
  42      00
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  43              		.loc 1 16 0 discriminator 2
  44 0053 488B45F8 		movq	-8(%rbp), %rax
  45 0057 488D5001 		leaq	1(%rax), %rdx
  46 005b 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  47 005f 488B45E8 		movq	-24(%rbp), %rax
  48 0063 89CE     		movl	%ecx, %esi
  49 0065 4889C7   		movq	%rax, %rdi
  50 0068 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT
  50      00
  51 006d 488945F8 		movq	%rax, -8(%rbp)
  52 0071 EBBD     		jmp	.L3
  53              	.L4:
  54              	.LBE2:
  18:XmlTestReporter.cpp **** }
  55              		.loc 1 18 0
  56 0073 90       		nop
  57 0074 C9       		leave
  58              		.cfi_def_cfa 7, 8
  59 0075 C3       		ret
  60              		.cfi_endproc
  61              	.LFE1340:
  63              		.section	.rodata
  64              	.LC0:
  65 0000 26616D70 		.string	"&amp;"
  65      3B00
  66              	.LC1:
  67 0006 266C743B 		.string	"&lt;"
  67      00
  68              	.LC2:
  69 000b 2667743B 		.string	"&gt;"
  69      00
  70              	.LC3:
  71 0010 2661706F 		.string	"&apos;"
  71      733B00
  72              	.LC4:
  73 0017 2671756F 		.string	"&quot;"
  73      743B00
  74              		.text
  76              	_ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
  77              	.LFB1341:
  19:XmlTestReporter.cpp **** 
  20:XmlTestReporter.cpp **** string XmlEscape(string const& value)
  21:XmlTestReporter.cpp **** {
  78              		.loc 1 21 0
  79              		.cfi_startproc
  80              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  81              		.cfi_lsda 0x1b,.LLSDA1341
  82 0076 55       		pushq	%rbp
  83              		.cfi_def_cfa_offset 16
  84              		.cfi_offset 6, -16
  85 0077 4889E5   		movq	%rsp, %rbp
  86              		.cfi_def_cfa_register 6
  87 007a 53       		pushq	%rbx
  88 007b 4883EC58 		subq	$88, %rsp
  89              		.cfi_offset 3, -24
  90 007f 48897DA8 		movq	%rdi, -88(%rbp)
  91 0083 488975A0 		movq	%rsi, -96(%rbp)
  92              		.loc 1 21 0
  93 0087 64488B04 		movq	%fs:40, %rax
  93      25280000 
  93      00
  94 0090 488945E8 		movq	%rax, -24(%rbp)
  95 0094 31C0     		xorl	%eax, %eax
  22:XmlTestReporter.cpp ****     string escaped = value;
  96              		.loc 1 22 0
  97 0096 488B55A0 		movq	-96(%rbp), %rdx
  98 009a 488B45A8 		movq	-88(%rbp), %rax
  99 009e 4889D6   		movq	%rdx, %rsi
 100 00a1 4889C7   		movq	%rax, %rdi
 101              	.LEHB0:
 102 00a4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 102      00
 103              	.LEHE0:
  23:XmlTestReporter.cpp **** 
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '&', "&amp;");
 104              		.loc 1 24 0
 105 00a9 488D45BF 		leaq	-65(%rbp), %rax
 106 00ad 4889C7   		movq	%rax, %rdi
 107 00b0 E8000000 		call	_ZNSaIcEC1Ev@PLT
 107      00
 108 00b5 488D55BF 		leaq	-65(%rbp), %rdx
 109 00b9 488D45C0 		leaq	-64(%rbp), %rax
 110 00bd 488D3500 		leaq	.LC0(%rip), %rsi
 110      000000
 111 00c4 4889C7   		movq	%rax, %rdi
 112              	.LEHB1:
 113 00c7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 113      00
 114              	.LEHE1:
 115              		.loc 1 24 0 is_stmt 0 discriminator 2
 116 00cc 488D55C0 		leaq	-64(%rbp), %rdx
 117 00d0 488B45A8 		movq	-88(%rbp), %rax
 118 00d4 BE260000 		movl	$38, %esi
 118      00
 119 00d9 4889C7   		movq	%rax, %rdi
 120              	.LEHB2:
 121 00dc E81FFFFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 121      FF
 122              	.LEHE2:
 123              		.loc 1 24 0 discriminator 4
 124 00e1 488D45C0 		leaq	-64(%rbp), %rax
 125 00e5 4889C7   		movq	%rax, %rdi
 126              	.LEHB3:
 127 00e8 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 127      00
 128              	.LEHE3:
 129              		.loc 1 24 0 discriminator 6
 130 00ed 488D45BF 		leaq	-65(%rbp), %rax
 131 00f1 4889C7   		movq	%rax, %rdi
 132 00f4 E8000000 		call	_ZNSaIcED1Ev@PLT
 132      00
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 133              		.loc 1 25 0 is_stmt 1 discriminator 6
 134 00f9 488D45BF 		leaq	-65(%rbp), %rax
 135 00fd 4889C7   		movq	%rax, %rdi
 136 0100 E8000000 		call	_ZNSaIcEC1Ev@PLT
 136      00
 137 0105 488D55BF 		leaq	-65(%rbp), %rdx
 138 0109 488D45C0 		leaq	-64(%rbp), %rax
 139 010d 488D3500 		leaq	.LC1(%rip), %rsi
 139      000000
 140 0114 4889C7   		movq	%rax, %rdi
 141              	.LEHB4:
 142 0117 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 142      00
 143              	.LEHE4:
 144              		.loc 1 25 0 is_stmt 0 discriminator 2
 145 011c 488D55C0 		leaq	-64(%rbp), %rdx
 146 0120 488B45A8 		movq	-88(%rbp), %rax
 147 0124 BE3C0000 		movl	$60, %esi
 147      00
 148 0129 4889C7   		movq	%rax, %rdi
 149              	.LEHB5:
 150 012c E8CFFEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 150      FF
 151              	.LEHE5:
 152              		.loc 1 25 0 discriminator 4
 153 0131 488D45C0 		leaq	-64(%rbp), %rax
 154 0135 4889C7   		movq	%rax, %rdi
 155              	.LEHB6:
 156 0138 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 156      00
 157              	.LEHE6:
 158              		.loc 1 25 0 discriminator 6
 159 013d 488D45BF 		leaq	-65(%rbp), %rax
 160 0141 4889C7   		movq	%rax, %rdi
 161 0144 E8000000 		call	_ZNSaIcED1Ev@PLT
 161      00
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 162              		.loc 1 26 0 is_stmt 1 discriminator 6
 163 0149 488D45BF 		leaq	-65(%rbp), %rax
 164 014d 4889C7   		movq	%rax, %rdi
 165 0150 E8000000 		call	_ZNSaIcEC1Ev@PLT
 165      00
 166 0155 488D55BF 		leaq	-65(%rbp), %rdx
 167 0159 488D45C0 		leaq	-64(%rbp), %rax
 168 015d 488D3500 		leaq	.LC2(%rip), %rsi
 168      000000
 169 0164 4889C7   		movq	%rax, %rdi
 170              	.LEHB7:
 171 0167 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 171      00
 172              	.LEHE7:
 173              		.loc 1 26 0 is_stmt 0 discriminator 2
 174 016c 488D55C0 		leaq	-64(%rbp), %rdx
 175 0170 488B45A8 		movq	-88(%rbp), %rax
 176 0174 BE3E0000 		movl	$62, %esi
 176      00
 177 0179 4889C7   		movq	%rax, %rdi
 178              	.LEHB8:
 179 017c E87FFEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 179      FF
 180              	.LEHE8:
 181              		.loc 1 26 0 discriminator 4
 182 0181 488D45C0 		leaq	-64(%rbp), %rax
 183 0185 4889C7   		movq	%rax, %rdi
 184              	.LEHB9:
 185 0188 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 185      00
 186              	.LEHE9:
 187              		.loc 1 26 0 discriminator 6
 188 018d 488D45BF 		leaq	-65(%rbp), %rax
 189 0191 4889C7   		movq	%rax, %rdi
 190 0194 E8000000 		call	_ZNSaIcED1Ev@PLT
 190      00
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 191              		.loc 1 27 0 is_stmt 1 discriminator 6
 192 0199 488D45BF 		leaq	-65(%rbp), %rax
 193 019d 4889C7   		movq	%rax, %rdi
 194 01a0 E8000000 		call	_ZNSaIcEC1Ev@PLT
 194      00
 195 01a5 488D55BF 		leaq	-65(%rbp), %rdx
 196 01a9 488D45C0 		leaq	-64(%rbp), %rax
 197 01ad 488D3500 		leaq	.LC3(%rip), %rsi
 197      000000
 198 01b4 4889C7   		movq	%rax, %rdi
 199              	.LEHB10:
 200 01b7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 200      00
 201              	.LEHE10:
 202              		.loc 1 27 0 is_stmt 0 discriminator 2
 203 01bc 488D55C0 		leaq	-64(%rbp), %rdx
 204 01c0 488B45A8 		movq	-88(%rbp), %rax
 205 01c4 BE270000 		movl	$39, %esi
 205      00
 206 01c9 4889C7   		movq	%rax, %rdi
 207              	.LEHB11:
 208 01cc E82FFEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 208      FF
 209              	.LEHE11:
 210              		.loc 1 27 0 discriminator 4
 211 01d1 488D45C0 		leaq	-64(%rbp), %rax
 212 01d5 4889C7   		movq	%rax, %rdi
 213              	.LEHB12:
 214 01d8 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 214      00
 215              	.LEHE12:
 216              		.loc 1 27 0 discriminator 6
 217 01dd 488D45BF 		leaq	-65(%rbp), %rax
 218 01e1 4889C7   		movq	%rax, %rdi
 219 01e4 E8000000 		call	_ZNSaIcED1Ev@PLT
 219      00
  28:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 220              		.loc 1 28 0 is_stmt 1 discriminator 6
 221 01e9 488D45BF 		leaq	-65(%rbp), %rax
 222 01ed 4889C7   		movq	%rax, %rdi
 223 01f0 E8000000 		call	_ZNSaIcEC1Ev@PLT
 223      00
 224 01f5 488D55BF 		leaq	-65(%rbp), %rdx
 225 01f9 488D45C0 		leaq	-64(%rbp), %rax
 226 01fd 488D3500 		leaq	.LC4(%rip), %rsi
 226      000000
 227 0204 4889C7   		movq	%rax, %rdi
 228              	.LEHB13:
 229 0207 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 229      00
 230              	.LEHE13:
 231              		.loc 1 28 0 is_stmt 0 discriminator 2
 232 020c 488D55C0 		leaq	-64(%rbp), %rdx
 233 0210 488B45A8 		movq	-88(%rbp), %rax
 234 0214 BE220000 		movl	$34, %esi
 234      00
 235 0219 4889C7   		movq	%rax, %rdi
 236              	.LEHB14:
 237 021c E8DFFDFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 237      FF
 238              	.LEHE14:
 239              		.loc 1 28 0 discriminator 4
 240 0221 488D45C0 		leaq	-64(%rbp), %rax
 241 0225 4889C7   		movq	%rax, %rdi
 242              	.LEHB15:
 243 0228 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 243      00
 244              	.LEHE15:
 245              		.loc 1 28 0 discriminator 6
 246 022d 488D45BF 		leaq	-65(%rbp), %rax
 247 0231 4889C7   		movq	%rax, %rdi
 248 0234 E8000000 		call	_ZNSaIcED1Ev@PLT
 248      00
  29:XmlTestReporter.cpp ****  
  30:XmlTestReporter.cpp ****     return escaped;
 249              		.loc 1 30 0 is_stmt 1 discriminator 6
 250 0239 90       		nop
  31:XmlTestReporter.cpp **** }
 251              		.loc 1 31 0 discriminator 6
 252 023a 488B45A8 		movq	-88(%rbp), %rax
 253 023e 488B4DE8 		movq	-24(%rbp), %rcx
 254 0242 6448330C 		xorq	%fs:40, %rcx
 254      25280000 
 254      00
 255 024b 0F84CC00 		je	.L18
 255      0000
 256 0251 E9C20000 		jmp	.L29
 256      00
 257              	.L20:
 258 0256 4889C3   		movq	%rax, %rbx
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 259              		.loc 1 24 0
 260 0259 488D45C0 		leaq	-64(%rbp), %rax
 261 025d 4889C7   		movq	%rax, %rdi
 262 0260 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 262      00
 263 0265 EB03     		jmp	.L8
 264              	.L19:
 265 0267 4889C3   		movq	%rax, %rbx
 266              	.L8:
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 267              		.loc 1 24 0 is_stmt 0 discriminator 1
 268 026a 488D45BF 		leaq	-65(%rbp), %rax
 269 026e 4889C7   		movq	%rax, %rdi
 270 0271 E8000000 		call	_ZNSaIcED1Ev@PLT
 270      00
 271 0276 E9860000 		jmp	.L9
 271      00
 272              	.L22:
 273 027b 4889C3   		movq	%rax, %rbx
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 274              		.loc 1 25 0 is_stmt 1
 275 027e 488D45C0 		leaq	-64(%rbp), %rax
 276 0282 4889C7   		movq	%rax, %rdi
 277 0285 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 277      00
 278 028a EB03     		jmp	.L11
 279              	.L21:
 280 028c 4889C3   		movq	%rax, %rbx
 281              	.L11:
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 282              		.loc 1 25 0 is_stmt 0 discriminator 1
 283 028f 488D45BF 		leaq	-65(%rbp), %rax
 284 0293 4889C7   		movq	%rax, %rdi
 285 0296 E8000000 		call	_ZNSaIcED1Ev@PLT
 285      00
 286 029b EB64     		jmp	.L9
 287              	.L24:
 288 029d 4889C3   		movq	%rax, %rbx
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 289              		.loc 1 26 0 is_stmt 1
 290 02a0 488D45C0 		leaq	-64(%rbp), %rax
 291 02a4 4889C7   		movq	%rax, %rdi
 292 02a7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 292      00
 293 02ac EB03     		jmp	.L13
 294              	.L23:
 295 02ae 4889C3   		movq	%rax, %rbx
 296              	.L13:
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 297              		.loc 1 26 0 is_stmt 0 discriminator 1
 298 02b1 488D45BF 		leaq	-65(%rbp), %rax
 299 02b5 4889C7   		movq	%rax, %rdi
 300 02b8 E8000000 		call	_ZNSaIcED1Ev@PLT
 300      00
 301 02bd EB42     		jmp	.L9
 302              	.L26:
 303 02bf 4889C3   		movq	%rax, %rbx
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 304              		.loc 1 27 0 is_stmt 1
 305 02c2 488D45C0 		leaq	-64(%rbp), %rax
 306 02c6 4889C7   		movq	%rax, %rdi
 307 02c9 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 307      00
 308 02ce EB03     		jmp	.L15
 309              	.L25:
 310 02d0 4889C3   		movq	%rax, %rbx
 311              	.L15:
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 312              		.loc 1 27 0 is_stmt 0 discriminator 1
 313 02d3 488D45BF 		leaq	-65(%rbp), %rax
 314 02d7 4889C7   		movq	%rax, %rdi
 315 02da E8000000 		call	_ZNSaIcED1Ev@PLT
 315      00
 316 02df EB20     		jmp	.L9
 317              	.L28:
 318 02e1 4889C3   		movq	%rax, %rbx
  28:XmlTestReporter.cpp ****  
 319              		.loc 1 28 0 is_stmt 1
 320 02e4 488D45C0 		leaq	-64(%rbp), %rax
 321 02e8 4889C7   		movq	%rax, %rdi
 322 02eb E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 322      00
 323 02f0 EB03     		jmp	.L17
 324              	.L27:
 325 02f2 4889C3   		movq	%rax, %rbx
 326              	.L17:
  28:XmlTestReporter.cpp ****  
 327              		.loc 1 28 0 is_stmt 0 discriminator 1
 328 02f5 488D45BF 		leaq	-65(%rbp), %rax
 329 02f9 4889C7   		movq	%rax, %rdi
 330 02fc E8000000 		call	_ZNSaIcED1Ev@PLT
 330      00
 331              	.L9:
 332 0301 488B45A8 		movq	-88(%rbp), %rax
 333 0305 4889C7   		movq	%rax, %rdi
 334 0308 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 334      00
 335 030d 4889D8   		movq	%rbx, %rax
 336 0310 4889C7   		movq	%rax, %rdi
 337              	.LEHB16:
 338 0313 E8000000 		call	_Unwind_Resume@PLT
 338      00
 339              	.LEHE16:
 340              	.L29:
 341              		.loc 1 31 0 is_stmt 1
 342 0318 E8000000 		call	__stack_chk_fail@PLT
 342      00
 343              	.L18:
 344 031d 4883C458 		addq	$88, %rsp
 345 0321 5B       		popq	%rbx
 346 0322 5D       		popq	%rbp
 347              		.cfi_def_cfa 7, 8
 348 0323 C3       		ret
 349              		.cfi_endproc
 350              	.LFE1341:
 351              		.globl	__gxx_personality_v0
 352              		.section	.gcc_except_table,"a",@progbits
 353              	.LLSDA1341:
 354 0000 FF       		.byte	0xff
 355 0001 FF       		.byte	0xff
 356 0002 01       		.byte	0x1
 357 0003 60       		.uleb128 .LLSDACSE1341-.LLSDACSB1341
 358              	.LLSDACSB1341:
 359 0004 2E       		.uleb128 .LEHB0-.LFB1341
 360 0005 05       		.uleb128 .LEHE0-.LEHB0
 361 0006 00       		.uleb128 0
 362 0007 00       		.uleb128 0
 363 0008 51       		.uleb128 .LEHB1-.LFB1341
 364 0009 05       		.uleb128 .LEHE1-.LEHB1
 365 000a F103     		.uleb128 .L19-.LFB1341
 366 000c 00       		.uleb128 0
 367 000d 66       		.uleb128 .LEHB2-.LFB1341
 368 000e 05       		.uleb128 .LEHE2-.LEHB2
 369 000f E003     		.uleb128 .L20-.LFB1341
 370 0011 00       		.uleb128 0
 371 0012 72       		.uleb128 .LEHB3-.LFB1341
 372 0013 05       		.uleb128 .LEHE3-.LEHB3
 373 0014 F103     		.uleb128 .L19-.LFB1341
 374 0016 00       		.uleb128 0
 375 0017 A101     		.uleb128 .LEHB4-.LFB1341
 376 0019 05       		.uleb128 .LEHE4-.LEHB4
 377 001a 9604     		.uleb128 .L21-.LFB1341
 378 001c 00       		.uleb128 0
 379 001d B601     		.uleb128 .LEHB5-.LFB1341
 380 001f 05       		.uleb128 .LEHE5-.LEHB5
 381 0020 8504     		.uleb128 .L22-.LFB1341
 382 0022 00       		.uleb128 0
 383 0023 C201     		.uleb128 .LEHB6-.LFB1341
 384 0025 05       		.uleb128 .LEHE6-.LEHB6
 385 0026 9604     		.uleb128 .L21-.LFB1341
 386 0028 00       		.uleb128 0
 387 0029 F101     		.uleb128 .LEHB7-.LFB1341
 388 002b 05       		.uleb128 .LEHE7-.LEHB7
 389 002c B804     		.uleb128 .L23-.LFB1341
 390 002e 00       		.uleb128 0
 391 002f 8602     		.uleb128 .LEHB8-.LFB1341
 392 0031 05       		.uleb128 .LEHE8-.LEHB8
 393 0032 A704     		.uleb128 .L24-.LFB1341
 394 0034 00       		.uleb128 0
 395 0035 9202     		.uleb128 .LEHB9-.LFB1341
 396 0037 05       		.uleb128 .LEHE9-.LEHB9
 397 0038 B804     		.uleb128 .L23-.LFB1341
 398 003a 00       		.uleb128 0
 399 003b C102     		.uleb128 .LEHB10-.LFB1341
 400 003d 05       		.uleb128 .LEHE10-.LEHB10
 401 003e DA04     		.uleb128 .L25-.LFB1341
 402 0040 00       		.uleb128 0
 403 0041 D602     		.uleb128 .LEHB11-.LFB1341
 404 0043 05       		.uleb128 .LEHE11-.LEHB11
 405 0044 C904     		.uleb128 .L26-.LFB1341
 406 0046 00       		.uleb128 0
 407 0047 E202     		.uleb128 .LEHB12-.LFB1341
 408 0049 05       		.uleb128 .LEHE12-.LEHB12
 409 004a DA04     		.uleb128 .L25-.LFB1341
 410 004c 00       		.uleb128 0
 411 004d 9103     		.uleb128 .LEHB13-.LFB1341
 412 004f 05       		.uleb128 .LEHE13-.LEHB13
 413 0050 FC04     		.uleb128 .L27-.LFB1341
 414 0052 00       		.uleb128 0
 415 0053 A603     		.uleb128 .LEHB14-.LFB1341
 416 0055 05       		.uleb128 .LEHE14-.LEHB14
 417 0056 EB04     		.uleb128 .L28-.LFB1341
 418 0058 00       		.uleb128 0
 419 0059 B203     		.uleb128 .LEHB15-.LFB1341
 420 005b 05       		.uleb128 .LEHE15-.LEHB15
 421 005c FC04     		.uleb128 .L27-.LFB1341
 422 005e 00       		.uleb128 0
 423 005f 9D05     		.uleb128 .LEHB16-.LFB1341
 424 0061 05       		.uleb128 .LEHE16-.LEHB16
 425 0062 00       		.uleb128 0
 426 0063 00       		.uleb128 0
 427              	.LLSDACSE1341:
 428              		.text
 430              		.section	.rodata
 431              	.LC5:
 432 001e 2800     		.string	"("
 433              	.LC6:
 434 0020 29203A20 		.string	") : "
 434      00
 435              		.text
 437              	_ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_:
 438              	.LFB1342:
  32:XmlTestReporter.cpp **** 
  33:XmlTestReporter.cpp **** string BuildFailureMessage(string const& file, int line, string const& message)
  34:XmlTestReporter.cpp **** {
 439              		.loc 1 34 0
 440              		.cfi_startproc
 441              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 442              		.cfi_lsda 0x1b,.LLSDA1342
 443 0324 55       		pushq	%rbp
 444              		.cfi_def_cfa_offset 16
 445              		.cfi_offset 6, -16
 446 0325 4889E5   		movq	%rsp, %rbp
 447              		.cfi_def_cfa_register 6
 448 0328 53       		pushq	%rbx
 449 0329 4881ECA8 		subq	$424, %rsp
 449      010000
 450              		.cfi_offset 3, -24
 451 0330 4889BD68 		movq	%rdi, -408(%rbp)
 451      FEFFFF
 452 0337 4889B560 		movq	%rsi, -416(%rbp)
 452      FEFFFF
 453 033e 89955CFE 		movl	%edx, -420(%rbp)
 453      FFFF
 454 0344 48898D50 		movq	%rcx, -432(%rbp)
 454      FEFFFF
 455              		.loc 1 34 0
 456 034b 64488B04 		movq	%fs:40, %rax
 456      25280000 
 456      00
 457 0354 488945E8 		movq	%rax, -24(%rbp)
 458 0358 31C0     		xorl	%eax, %eax
  35:XmlTestReporter.cpp ****     ostringstream failureMessage;
 459              		.loc 1 35 0
 460 035a 488D8570 		leaq	-400(%rbp), %rax
 460      FEFFFF
 461 0361 BE100000 		movl	$16, %esi
 461      00
 462 0366 4889C7   		movq	%rax, %rdi
 463              	.LEHB17:
 464 0369 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@PLT
 464      00
 465              	.LEHE17:
  36:XmlTestReporter.cpp ****     failureMessage << file << "(" << line << ") : " << message;
 466              		.loc 1 36 0
 467 036e 488B9560 		movq	-416(%rbp), %rdx
 467      FEFFFF
 468 0375 488D8570 		leaq	-400(%rbp), %rax
 468      FEFFFF
 469 037c 4889D6   		movq	%rdx, %rsi
 470 037f 4889C7   		movq	%rax, %rdi
 471              	.LEHB18:
 472 0382 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 472      00
 473 0387 488D3500 		leaq	.LC5(%rip), %rsi
 473      000000
 474 038e 4889C7   		movq	%rax, %rdi
 475 0391 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 475      00
 476              		.loc 1 36 0 is_stmt 0 discriminator 1
 477 0396 4889C2   		movq	%rax, %rdx
 478 0399 8B855CFE 		movl	-420(%rbp), %eax
 478      FFFF
 479 039f 89C6     		movl	%eax, %esi
 480 03a1 4889D7   		movq	%rdx, %rdi
 481 03a4 E8000000 		call	_ZNSolsEi@PLT
 481      00
 482              		.loc 1 36 0 discriminator 2
 483 03a9 488D3500 		leaq	.LC6(%rip), %rsi
 483      000000
 484 03b0 4889C7   		movq	%rax, %rdi
 485 03b3 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 485      00
 486              		.loc 1 36 0 discriminator 3
 487 03b8 4889C2   		movq	%rax, %rdx
 488 03bb 488B8550 		movq	-432(%rbp), %rax
 488      FEFFFF
 489 03c2 4889C6   		movq	%rax, %rsi
 490 03c5 4889D7   		movq	%rdx, %rdi
 491 03c8 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 491      00
  37:XmlTestReporter.cpp ****     return failureMessage.str();
 492              		.loc 1 37 0 is_stmt 1
 493 03cd 488B8568 		movq	-408(%rbp), %rax
 493      FEFFFF
 494 03d4 488D9570 		leaq	-400(%rbp), %rdx
 494      FEFFFF
 495 03db 4889D6   		movq	%rdx, %rsi
 496 03de 4889C7   		movq	%rax, %rdi
 497 03e1 E8000000 		call	_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@PLT
 497      00
 498              	.LEHE18:
 499 03e6 90       		nop
  35:XmlTestReporter.cpp ****     ostringstream failureMessage;
 500              		.loc 1 35 0
 501 03e7 488D8570 		leaq	-400(%rbp), %rax
 501      FEFFFF
 502 03ee 4889C7   		movq	%rax, %rdi
 503              	.LEHB19:
 504 03f1 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 504      00
 505              	.LEHE19:
 506              		.loc 1 37 0
 507 03f6 90       		nop
  38:XmlTestReporter.cpp **** }
 508              		.loc 1 38 0
 509 03f7 488B8568 		movq	-408(%rbp), %rax
 509      FEFFFF
 510 03fe 488B4DE8 		movq	-24(%rbp), %rcx
 511 0402 6448330C 		xorq	%fs:40, %rcx
 511      25280000 
 511      00
 512 040b 7424     		je	.L33
 513 040d EB1D     		jmp	.L35
 514              	.L34:
 515 040f 4889C3   		movq	%rax, %rbx
  35:XmlTestReporter.cpp ****     failureMessage << file << "(" << line << ") : " << message;
 516              		.loc 1 35 0
 517 0412 488D8570 		leaq	-400(%rbp), %rax
 517      FEFFFF
 518 0419 4889C7   		movq	%rax, %rdi
 519 041c E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 519      00
 520 0421 4889D8   		movq	%rbx, %rax
 521 0424 4889C7   		movq	%rax, %rdi
 522              	.LEHB20:
 523 0427 E8000000 		call	_Unwind_Resume@PLT
 523      00
 524              	.LEHE20:
 525              	.L35:
 526              		.loc 1 38 0
 527 042c E8000000 		call	__stack_chk_fail@PLT
 527      00
 528              	.L33:
 529 0431 4881C4A8 		addq	$424, %rsp
 529      010000
 530 0438 5B       		popq	%rbx
 531 0439 5D       		popq	%rbp
 532              		.cfi_def_cfa 7, 8
 533 043a C3       		ret
 534              		.cfi_endproc
 535              	.LFE1342:
 536              		.section	.gcc_except_table
 537              	.LLSDA1342:
 538 0064 FF       		.byte	0xff
 539 0065 FF       		.byte	0xff
 540 0066 01       		.byte	0x1
 541 0067 13       		.uleb128 .LLSDACSE1342-.LLSDACSB1342
 542              	.LLSDACSB1342:
 543 0068 45       		.uleb128 .LEHB17-.LFB1342
 544 0069 05       		.uleb128 .LEHE17-.LEHB17
 545 006a 00       		.uleb128 0
 546 006b 00       		.uleb128 0
 547 006c 5E       		.uleb128 .LEHB18-.LFB1342
 548 006d 64       		.uleb128 .LEHE18-.LEHB18
 549 006e EB01     		.uleb128 .L34-.LFB1342
 550 0070 00       		.uleb128 0
 551 0071 CD01     		.uleb128 .LEHB19-.LFB1342
 552 0073 05       		.uleb128 .LEHE19-.LEHB19
 553 0074 00       		.uleb128 0
 554 0075 00       		.uleb128 0
 555 0076 8302     		.uleb128 .LEHB20-.LFB1342
 556 0078 05       		.uleb128 .LEHE20-.LEHB20
 557 0079 00       		.uleb128 0
 558 007a 00       		.uleb128 0
 559              	.LLSDACSE1342:
 560              		.text
 562              		.section	.text._ZN8UnitTest12TestReporterC2Ev,"axG",@progbits,_ZN8UnitTest12TestReporterC5Ev,comda
 563              		.align 2
 564              		.weak	_ZN8UnitTest12TestReporterC2Ev
 566              	_ZN8UnitTest12TestReporterC2Ev:
 567              	.LFB1346:
 568              		.file 2 "TestReporter.h"
   1:TestReporter.h **** #ifndef UNITTEST_TESTREPORTER_H
   2:TestReporter.h **** #define UNITTEST_TESTREPORTER_H
   3:TestReporter.h **** 
   4:TestReporter.h **** namespace UnitTest {
   5:TestReporter.h **** 
   6:TestReporter.h **** class TestDetails;
   7:TestReporter.h **** 
   8:TestReporter.h **** class TestReporter
 569              		.loc 2 8 0
 570              		.cfi_startproc
 571 0000 55       		pushq	%rbp
 572              		.cfi_def_cfa_offset 16
 573              		.cfi_offset 6, -16
 574 0001 4889E5   		movq	%rsp, %rbp
 575              		.cfi_def_cfa_register 6
 576 0004 48897DF8 		movq	%rdi, -8(%rbp)
 577              	.LBB3:
 578              		.loc 2 8 0
 579 0008 488B0500 		movq	_ZTVN8UnitTest12TestReporterE@GOTPCREL(%rip), %rax
 579      000000
 580 000f 488D5010 		leaq	16(%rax), %rdx
 581 0013 488B45F8 		movq	-8(%rbp), %rax
 582 0017 488910   		movq	%rdx, (%rax)
 583              	.LBE3:
 584 001a 90       		nop
 585 001b 5D       		popq	%rbp
 586              		.cfi_def_cfa 7, 8
 587 001c C3       		ret
 588              		.cfi_endproc
 589              	.LFE1346:
 591              		.weak	_ZN8UnitTest12TestReporterC1Ev
 592              		.set	_ZN8UnitTest12TestReporterC1Ev,_ZN8UnitTest12TestReporterC2Ev
 593              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 594              		.align 2
 595              		.weak	_ZN8UnitTest20DeferredTestReporterC2Ev
 597              	_ZN8UnitTest20DeferredTestReporterC2Ev:
 598              	.LFB1348:
 599              		.file 3 "DeferredTestReporter.h"
   1:DeferredTestReporter.h **** #ifndef UNITTEST_DEFERREDTESTREPORTER_H
   2:DeferredTestReporter.h **** #define UNITTEST_DEFERREDTESTREPORTER_H
   3:DeferredTestReporter.h **** 
   4:DeferredTestReporter.h **** #include "TestReporter.h"
   5:DeferredTestReporter.h **** #include "DeferredTestResult.h"
   6:DeferredTestReporter.h **** 
   7:DeferredTestReporter.h **** #include <vector>
   8:DeferredTestReporter.h **** 
   9:DeferredTestReporter.h **** namespace UnitTest
  10:DeferredTestReporter.h **** {
  11:DeferredTestReporter.h **** 
  12:DeferredTestReporter.h **** class DeferredTestReporter : public TestReporter
 600              		.loc 3 12 0
 601              		.cfi_startproc
 602              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 603              		.cfi_lsda 0x1b,.LLSDA1348
 604 0000 55       		pushq	%rbp
 605              		.cfi_def_cfa_offset 16
 606              		.cfi_offset 6, -16
 607 0001 4889E5   		movq	%rsp, %rbp
 608              		.cfi_def_cfa_register 6
 609 0004 53       		pushq	%rbx
 610 0005 4883EC18 		subq	$24, %rsp
 611              		.cfi_offset 3, -24
 612 0009 48897DE8 		movq	%rdi, -24(%rbp)
 613              	.LBB4:
 614              		.loc 3 12 0
 615 000d 488B45E8 		movq	-24(%rbp), %rax
 616 0011 4889C7   		movq	%rax, %rdi
 617 0014 E8000000 		call	_ZN8UnitTest12TestReporterC2Ev@PLT
 617      00
 618 0019 488B0500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rax
 618      000000
 619 0020 488D5010 		leaq	16(%rax), %rdx
 620 0024 488B45E8 		movq	-24(%rbp), %rax
 621 0028 488910   		movq	%rdx, (%rax)
 622 002b 488B45E8 		movq	-24(%rbp), %rax
 623 002f 4883C008 		addq	$8, %rax
 624 0033 4889C7   		movq	%rax, %rdi
 625              	.LEHB21:
 626 0036 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev@PLT
 626      00
 627              	.LEHE21:
 628              	.LBE4:
 629 003b EB1A     		jmp	.L40
 630              	.L39:
 631 003d 4889C3   		movq	%rax, %rbx
 632              	.LBB5:
 633 0040 488B45E8 		movq	-24(%rbp), %rax
 634 0044 4889C7   		movq	%rax, %rdi
 635 0047 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 635      00
 636 004c 4889D8   		movq	%rbx, %rax
 637 004f 4889C7   		movq	%rax, %rdi
 638              	.LEHB22:
 639 0052 E8000000 		call	_Unwind_Resume@PLT
 639      00
 640              	.LEHE22:
 641              	.L40:
 642              	.LBE5:
 643 0057 4883C418 		addq	$24, %rsp
 644 005b 5B       		popq	%rbx
 645 005c 5D       		popq	%rbp
 646              		.cfi_def_cfa 7, 8
 647 005d C3       		ret
 648              		.cfi_endproc
 649              	.LFE1348:
 650              		.section	.gcc_except_table
 651              	.LLSDA1348:
 652 007b FF       		.byte	0xff
 653 007c FF       		.byte	0xff
 654 007d 01       		.byte	0x1
 655 007e 08       		.uleb128 .LLSDACSE1348-.LLSDACSB1348
 656              	.LLSDACSB1348:
 657 007f 36       		.uleb128 .LEHB21-.LFB1348
 658 0080 05       		.uleb128 .LEHE21-.LEHB21
 659 0081 3D       		.uleb128 .L39-.LFB1348
 660 0082 00       		.uleb128 0
 661 0083 52       		.uleb128 .LEHB22-.LFB1348
 662 0084 05       		.uleb128 .LEHE22-.LEHB22
 663 0085 00       		.uleb128 0
 664 0086 00       		.uleb128 0
 665              	.LLSDACSE1348:
 666              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 668              		.weak	_ZN8UnitTest20DeferredTestReporterC1Ev
 669              		.set	_ZN8UnitTest20DeferredTestReporterC1Ev,_ZN8UnitTest20DeferredTestReporterC2Ev
 670              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 671              		.align 2
 672              		.weak	_ZN8UnitTest20DeferredTestReporterD2Ev
 674              	_ZN8UnitTest20DeferredTestReporterD2Ev:
 675              	.LFB1351:
 676              		.loc 3 12 0
 677              		.cfi_startproc
 678              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 679              		.cfi_lsda 0x1b,.LLSDA1351
 680 0000 55       		pushq	%rbp
 681              		.cfi_def_cfa_offset 16
 682              		.cfi_offset 6, -16
 683 0001 4889E5   		movq	%rsp, %rbp
 684              		.cfi_def_cfa_register 6
 685 0004 53       		pushq	%rbx
 686 0005 4883EC18 		subq	$24, %rsp
 687              		.cfi_offset 3, -24
 688 0009 48897DE8 		movq	%rdi, -24(%rbp)
 689              	.LBB6:
 690              		.loc 3 12 0
 691 000d 488B0500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rax
 691      000000
 692 0014 488D5010 		leaq	16(%rax), %rdx
 693 0018 488B45E8 		movq	-24(%rbp), %rax
 694 001c 488910   		movq	%rdx, (%rax)
 695 001f 488B45E8 		movq	-24(%rbp), %rax
 696 0023 4883C008 		addq	$8, %rax
 697 0027 4889C7   		movq	%rax, %rdi
 698              	.LEHB23:
 699 002a E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev@PLT
 699      00
 700              	.LEHE23:
 701              		.loc 3 12 0 is_stmt 0 discriminator 2
 702 002f 488B45E8 		movq	-24(%rbp), %rax
 703 0033 4889C7   		movq	%rax, %rdi
 704              	.LEHB24:
 705 0036 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 705      00
 706              	.LEHE24:
 707              	.LBE6:
 708 003b EB1A     		jmp	.L44
 709              	.L43:
 710 003d 4889C3   		movq	%rax, %rbx
 711              	.LBB7:
 712              		.loc 3 12 0
 713 0040 488B45E8 		movq	-24(%rbp), %rax
 714 0044 4889C7   		movq	%rax, %rdi
 715 0047 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 715      00
 716 004c 4889D8   		movq	%rbx, %rax
 717 004f 4889C7   		movq	%rax, %rdi
 718              	.LEHB25:
 719 0052 E8000000 		call	_Unwind_Resume@PLT
 719      00
 720              	.LEHE25:
 721              	.L44:
 722              	.LBE7:
 723 0057 4883C418 		addq	$24, %rsp
 724 005b 5B       		popq	%rbx
 725 005c 5D       		popq	%rbp
 726              		.cfi_def_cfa 7, 8
 727 005d C3       		ret
 728              		.cfi_endproc
 729              	.LFE1351:
 730              		.section	.gcc_except_table
 731              	.LLSDA1351:
 732 0087 FF       		.byte	0xff
 733 0088 FF       		.byte	0xff
 734 0089 01       		.byte	0x1
 735 008a 0C       		.uleb128 .LLSDACSE1351-.LLSDACSB1351
 736              	.LLSDACSB1351:
 737 008b 2A       		.uleb128 .LEHB23-.LFB1351
 738 008c 05       		.uleb128 .LEHE23-.LEHB23
 739 008d 3D       		.uleb128 .L43-.LFB1351
 740 008e 00       		.uleb128 0
 741 008f 36       		.uleb128 .LEHB24-.LFB1351
 742 0090 05       		.uleb128 .LEHE24-.LEHB24
 743 0091 00       		.uleb128 0
 744 0092 00       		.uleb128 0
 745 0093 52       		.uleb128 .LEHB25-.LFB1351
 746 0094 05       		.uleb128 .LEHE25-.LEHB25
 747 0095 00       		.uleb128 0
 748 0096 00       		.uleb128 0
 749              	.LLSDACSE1351:
 750              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 752              		.weak	_ZN8UnitTest20DeferredTestReporterD1Ev
 753              		.set	_ZN8UnitTest20DeferredTestReporterD1Ev,_ZN8UnitTest20DeferredTestReporterD2Ev
 754              		.section	.text._ZN8UnitTest20DeferredTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 755              		.align 2
 756              		.weak	_ZN8UnitTest20DeferredTestReporterD0Ev
 758              	_ZN8UnitTest20DeferredTestReporterD0Ev:
 759              	.LFB1353:
 760              		.loc 3 12 0 is_stmt 1
 761              		.cfi_startproc
 762              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 763              		.cfi_lsda 0x1b,.LLSDA1353
 764 0000 55       		pushq	%rbp
 765              		.cfi_def_cfa_offset 16
 766              		.cfi_offset 6, -16
 767 0001 4889E5   		movq	%rsp, %rbp
 768              		.cfi_def_cfa_register 6
 769 0004 53       		pushq	%rbx
 770 0005 4883EC18 		subq	$24, %rsp
 771              		.cfi_offset 3, -24
 772 0009 48897DE8 		movq	%rdi, -24(%rbp)
 773              		.loc 3 12 0
 774 000d 488B45E8 		movq	-24(%rbp), %rax
 775 0011 4889C7   		movq	%rax, %rdi
 776              	.LEHB26:
 777 0014 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD1Ev@PLT
 777      00
 778              	.LEHE26:
 779              		.loc 3 12 0 is_stmt 0 discriminator 2
 780 0019 488B45E8 		movq	-24(%rbp), %rax
 781 001d 4889C7   		movq	%rax, %rdi
 782 0020 E8000000 		call	_ZdlPv@PLT
 782      00
 783 0025 EB1A     		jmp	.L48
 784              	.L47:
 785 0027 4889C3   		movq	%rax, %rbx
 786              		.loc 3 12 0
 787 002a 488B45E8 		movq	-24(%rbp), %rax
 788 002e 4889C7   		movq	%rax, %rdi
 789 0031 E8000000 		call	_ZdlPv@PLT
 789      00
 790 0036 4889D8   		movq	%rbx, %rax
 791 0039 4889C7   		movq	%rax, %rdi
 792              	.LEHB27:
 793 003c E8000000 		call	_Unwind_Resume@PLT
 793      00
 794              	.LEHE27:
 795              	.L48:
 796 0041 4883C418 		addq	$24, %rsp
 797 0045 5B       		popq	%rbx
 798 0046 5D       		popq	%rbp
 799              		.cfi_def_cfa 7, 8
 800 0047 C3       		ret
 801              		.cfi_endproc
 802              	.LFE1353:
 803              		.section	.gcc_except_table
 804              	.LLSDA1353:
 805 0097 FF       		.byte	0xff
 806 0098 FF       		.byte	0xff
 807 0099 01       		.byte	0x1
 808 009a 08       		.uleb128 .LLSDACSE1353-.LLSDACSB1353
 809              	.LLSDACSB1353:
 810 009b 14       		.uleb128 .LEHB26-.LFB1353
 811 009c 05       		.uleb128 .LEHE26-.LEHB26
 812 009d 27       		.uleb128 .L47-.LFB1353
 813 009e 00       		.uleb128 0
 814 009f 3C       		.uleb128 .LEHB27-.LFB1353
 815 00a0 05       		.uleb128 .LEHE27-.LEHB27
 816 00a1 00       		.uleb128 0
 817 00a2 00       		.uleb128 0
 818              	.LLSDACSE1353:
 819              		.section	.text._ZN8UnitTest20DeferredTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 821              		.text
 822 043b 90       		.align 2
 823              		.globl	_ZN8UnitTest15XmlTestReporterC2ERSo
 825              	_ZN8UnitTest15XmlTestReporterC2ERSo:
 826              	.LFB1354:
  39:XmlTestReporter.cpp **** 
  40:XmlTestReporter.cpp **** }
  41:XmlTestReporter.cpp **** 
  42:XmlTestReporter.cpp **** namespace UnitTest {
  43:XmlTestReporter.cpp **** 
  44:XmlTestReporter.cpp **** XmlTestReporter::XmlTestReporter(ostream& ostream)
 827              		.loc 1 44 0 is_stmt 1
 828              		.cfi_startproc
 829 043c 55       		pushq	%rbp
 830              		.cfi_def_cfa_offset 16
 831              		.cfi_offset 6, -16
 832 043d 4889E5   		movq	%rsp, %rbp
 833              		.cfi_def_cfa_register 6
 834 0440 4883EC10 		subq	$16, %rsp
 835 0444 48897DF8 		movq	%rdi, -8(%rbp)
 836 0448 488975F0 		movq	%rsi, -16(%rbp)
 837              	.LBB8:
  45:XmlTestReporter.cpp ****     : m_ostream(ostream)
 838              		.loc 1 45 0
 839 044c 488B45F8 		movq	-8(%rbp), %rax
 840 0450 4889C7   		movq	%rax, %rdi
 841 0453 E8000000 		call	_ZN8UnitTest20DeferredTestReporterC2Ev@PLT
 841      00
 842 0458 488B0500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rax
 842      000000
 843 045f 488D5010 		leaq	16(%rax), %rdx
 844 0463 488B45F8 		movq	-8(%rbp), %rax
 845 0467 488910   		movq	%rdx, (%rax)
 846 046a 488B45F8 		movq	-8(%rbp), %rax
 847 046e 488B55F0 		movq	-16(%rbp), %rdx
 848 0472 48895020 		movq	%rdx, 32(%rax)
 849              	.LBE8:
  46:XmlTestReporter.cpp **** {
  47:XmlTestReporter.cpp **** }
 850              		.loc 1 47 0
 851 0476 90       		nop
 852 0477 C9       		leave
 853              		.cfi_def_cfa 7, 8
 854 0478 C3       		ret
 855              		.cfi_endproc
 856              	.LFE1354:
 858              		.globl	_ZN8UnitTest15XmlTestReporterC1ERSo
 859              		.set	_ZN8UnitTest15XmlTestReporterC1ERSo,_ZN8UnitTest15XmlTestReporterC2ERSo
 860 0479 90       		.align 2
 861              		.globl	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 863              	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif:
 864              	.LFB1356:
  48:XmlTestReporter.cpp **** 
  49:XmlTestReporter.cpp **** void XmlTestReporter::ReportSummary(int totalTestCount, int failedTestCount,
  50:XmlTestReporter.cpp ****                                     int failureCount, float secondsElapsed)
  51:XmlTestReporter.cpp **** {
 865              		.loc 1 51 0
 866              		.cfi_startproc
 867 047a 55       		pushq	%rbp
 868              		.cfi_def_cfa_offset 16
 869              		.cfi_offset 6, -16
 870 047b 4889E5   		movq	%rsp, %rbp
 871              		.cfi_def_cfa_register 6
 872 047e 4883EC40 		subq	$64, %rsp
 873 0482 48897DD8 		movq	%rdi, -40(%rbp)
 874 0486 8975D4   		movl	%esi, -44(%rbp)
 875 0489 8955D0   		movl	%edx, -48(%rbp)
 876 048c 894DCC   		movl	%ecx, -52(%rbp)
 877 048f F30F1145 		movss	%xmm0, -56(%rbp)
 877      C8
 878              		.loc 1 51 0
 879 0494 64488B04 		movq	%fs:40, %rax
 879      25280000 
 879      00
 880 049d 488945F8 		movq	%rax, -8(%rbp)
 881 04a1 31C0     		xorl	%eax, %eax
  52:XmlTestReporter.cpp ****     AddXmlElement(m_ostream, NULL);
 882              		.loc 1 52 0
 883 04a3 488B45D8 		movq	-40(%rbp), %rax
 884 04a7 488B4820 		movq	32(%rax), %rcx
 885 04ab 488B45D8 		movq	-40(%rbp), %rax
 886 04af BA000000 		movl	$0, %edx
 886      00
 887 04b4 4889CE   		movq	%rcx, %rsi
 888 04b7 4889C7   		movq	%rax, %rdi
 889 04ba E8000000 		call	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc@PLT
 889      00
  53:XmlTestReporter.cpp **** 
  54:XmlTestReporter.cpp ****     BeginResults(m_ostream, totalTestCount, failedTestCount, failureCount, secondsElapsed);
 890              		.loc 1 54 0
 891 04bf 488B45D8 		movq	-40(%rbp), %rax
 892 04c3 488B7020 		movq	32(%rax), %rsi
 893 04c7 8B7DC8   		movl	-56(%rbp), %edi
 894 04ca 448B45CC 		movl	-52(%rbp), %r8d
 895 04ce 8B4DD0   		movl	-48(%rbp), %ecx
 896 04d1 8B55D4   		movl	-44(%rbp), %edx
 897 04d4 488B45D8 		movq	-40(%rbp), %rax
 898 04d8 897DC4   		movl	%edi, -60(%rbp)
 899 04db F30F1045 		movss	-60(%rbp), %xmm0
 899      C4
 900 04e0 4889C7   		movq	%rax, %rdi
 901 04e3 E8000000 		call	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif@PLT
 901      00
  55:XmlTestReporter.cpp **** 
  56:XmlTestReporter.cpp ****     DeferredTestResultList const& results = GetResults();
 902              		.loc 1 56 0
 903 04e8 488B45D8 		movq	-40(%rbp), %rax
 904 04ec 4889C7   		movq	%rax, %rdi
 905 04ef E8000000 		call	_ZN8UnitTest20DeferredTestReporter10GetResultsEv@PLT
 905      00
 906 04f4 488945F0 		movq	%rax, -16(%rbp)
 907              	.LBB9:
  57:XmlTestReporter.cpp ****     for (DeferredTestResultList::const_iterator i = results.begin(); i != results.end(); ++i)
 908              		.loc 1 57 0
 909 04f8 488B45F0 		movq	-16(%rbp), %rax
 910 04fc 4889C7   		movq	%rax, %rdi
 911 04ff E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 911      00
 912 0504 488945E0 		movq	%rax, -32(%rbp)
 913              	.L53:
 914              		.loc 1 57 0 is_stmt 0 discriminator 1
 915 0508 488B45F0 		movq	-16(%rbp), %rax
 916 050c 4889C7   		movq	%rax, %rdi
 917 050f E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 917      00
 918 0514 488945E8 		movq	%rax, -24(%rbp)
 919 0518 488D55E8 		leaq	-24(%rbp), %rdx
 920 051c 488D45E0 		leaq	-32(%rbp), %rax
 921 0520 4889D6   		movq	%rdx, %rsi
 922 0523 4889C7   		movq	%rax, %rdi
 923 0526 E8000000 		call	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iter
 923      00
 924 052b 84C0     		testb	%al, %al
 925 052d 0F849700 		je	.L51
 925      0000
  58:XmlTestReporter.cpp ****     {
  59:XmlTestReporter.cpp ****         BeginTest(m_ostream, *i);
 926              		.loc 1 59 0 is_stmt 1
 927 0533 488D45E0 		leaq	-32(%rbp), %rax
 928 0537 4889C7   		movq	%rax, %rdi
 929 053a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 929      00
 930 053f 4889C2   		movq	%rax, %rdx
 931 0542 488B45D8 		movq	-40(%rbp), %rax
 932 0546 488B4820 		movq	32(%rax), %rcx
 933 054a 488B45D8 		movq	-40(%rbp), %rax
 934 054e 4889CE   		movq	%rcx, %rsi
 935 0551 4889C7   		movq	%rax, %rdi
 936 0554 E8000000 		call	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE@PLT
 936      00
  60:XmlTestReporter.cpp **** 
  61:XmlTestReporter.cpp ****         if (i->failed)
 937              		.loc 1 61 0
 938 0559 488D45E0 		leaq	-32(%rbp), %rax
 939 055d 4889C7   		movq	%rax, %rdi
 940 0560 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
 940      00
 941 0565 0FB6407C 		movzbl	124(%rax), %eax
 942 0569 84C0     		testb	%al, %al
 943 056b 7426     		je	.L52
  62:XmlTestReporter.cpp ****             AddFailure(m_ostream, *i);
 944              		.loc 1 62 0
 945 056d 488D45E0 		leaq	-32(%rbp), %rax
 946 0571 4889C7   		movq	%rax, %rdi
 947 0574 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 947      00
 948 0579 4889C2   		movq	%rax, %rdx
 949 057c 488B45D8 		movq	-40(%rbp), %rax
 950 0580 488B4820 		movq	32(%rax), %rcx
 951 0584 488B45D8 		movq	-40(%rbp), %rax
 952 0588 4889CE   		movq	%rcx, %rsi
 953 058b 4889C7   		movq	%rax, %rdi
 954 058e E8000000 		call	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE@PLT
 954      00
 955              	.L52:
  63:XmlTestReporter.cpp **** 
  64:XmlTestReporter.cpp ****         EndTest(m_ostream, *i);
 956              		.loc 1 64 0
 957 0593 488D45E0 		leaq	-32(%rbp), %rax
 958 0597 4889C7   		movq	%rax, %rdi
 959 059a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 959      00
 960 059f 4889C2   		movq	%rax, %rdx
 961 05a2 488B45D8 		movq	-40(%rbp), %rax
 962 05a6 488B4820 		movq	32(%rax), %rcx
 963 05aa 488B45D8 		movq	-40(%rbp), %rax
 964 05ae 4889CE   		movq	%rcx, %rsi
 965 05b1 4889C7   		movq	%rax, %rdi
 966 05b4 E8000000 		call	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE@PLT
 966      00
  57:XmlTestReporter.cpp ****     {
 967              		.loc 1 57 0
 968 05b9 488D45E0 		leaq	-32(%rbp), %rax
 969 05bd 4889C7   		movq	%rax, %rdi
 970 05c0 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv@
 970      00
 971 05c5 E93EFFFF 		jmp	.L53
 971      FF
 972              	.L51:
 973              	.LBE9:
  65:XmlTestReporter.cpp ****     }
  66:XmlTestReporter.cpp **** 
  67:XmlTestReporter.cpp ****     EndResults(m_ostream);
 974              		.loc 1 67 0
 975 05ca 488B45D8 		movq	-40(%rbp), %rax
 976 05ce 488B5020 		movq	32(%rax), %rdx
 977 05d2 488B45D8 		movq	-40(%rbp), %rax
 978 05d6 4889D6   		movq	%rdx, %rsi
 979 05d9 4889C7   		movq	%rax, %rdi
 980 05dc E8000000 		call	_ZN8UnitTest15XmlTestReporter10EndResultsERSo@PLT
 980      00
  68:XmlTestReporter.cpp **** }
 981              		.loc 1 68 0
 982 05e1 90       		nop
 983 05e2 488B45F8 		movq	-8(%rbp), %rax
 984 05e6 64483304 		xorq	%fs:40, %rax
 984      25280000 
 984      00
 985 05ef 7405     		je	.L54
 986 05f1 E8000000 		call	__stack_chk_fail@PLT
 986      00
 987              	.L54:
 988 05f6 C9       		leave
 989              		.cfi_def_cfa 7, 8
 990 05f7 C3       		ret
 991              		.cfi_endproc
 992              	.LFE1356:
 994              		.section	.rodata
 995              	.LC7:
 996 0025 3C3F786D 		.string	"<?xml version=\"1.0\""
 996      6C207665 
 996      7273696F 
 996      6E3D2231 
 996      2E302200 
 997              	.LC8:
 998 0039 20656E63 		.string	" encoding=\""
 998      6F64696E 
 998      673D2200 
 999              	.LC9:
 1000 0045 2200     		.string	"\""
 1001              	.LC10:
 1002 0047 3F3E00   		.string	"?>"
 1003              		.text
 1004              		.align 2
 1005              		.globl	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
 1007              	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc:
 1008              	.LFB1357:
  69:XmlTestReporter.cpp **** 
  70:XmlTestReporter.cpp **** void XmlTestReporter::AddXmlElement(ostream& os, char const* encoding)
  71:XmlTestReporter.cpp **** {
 1009              		.loc 1 71 0
 1010              		.cfi_startproc
 1011 05f8 55       		pushq	%rbp
 1012              		.cfi_def_cfa_offset 16
 1013              		.cfi_offset 6, -16
 1014 05f9 4889E5   		movq	%rsp, %rbp
 1015              		.cfi_def_cfa_register 6
 1016 05fc 4883EC20 		subq	$32, %rsp
 1017 0600 48897DF8 		movq	%rdi, -8(%rbp)
 1018 0604 488975F0 		movq	%rsi, -16(%rbp)
 1019 0608 488955E8 		movq	%rdx, -24(%rbp)
  72:XmlTestReporter.cpp ****     os << "<?xml version=\"1.0\"";
 1020              		.loc 1 72 0
 1021 060c 488B45F0 		movq	-16(%rbp), %rax
 1022 0610 488D3500 		leaq	.LC7(%rip), %rsi
 1022      000000
 1023 0617 4889C7   		movq	%rax, %rdi
 1024 061a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1024      00
  73:XmlTestReporter.cpp **** 
  74:XmlTestReporter.cpp ****     if (encoding != NULL)
 1025              		.loc 1 74 0
 1026 061f 48837DE8 		cmpq	$0, -24(%rbp)
 1026      00
 1027 0624 7434     		je	.L56
  75:XmlTestReporter.cpp ****         os << " encoding=\"" << encoding << "\"";
 1028              		.loc 1 75 0
 1029 0626 488B45F0 		movq	-16(%rbp), %rax
 1030 062a 488D3500 		leaq	.LC8(%rip), %rsi
 1030      000000
 1031 0631 4889C7   		movq	%rax, %rdi
 1032 0634 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1032      00
 1033 0639 4889C2   		movq	%rax, %rdx
 1034 063c 488B45E8 		movq	-24(%rbp), %rax
 1035 0640 4889C6   		movq	%rax, %rsi
 1036 0643 4889D7   		movq	%rdx, %rdi
 1037 0646 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1037      00
 1038 064b 488D3500 		leaq	.LC9(%rip), %rsi
 1038      000000
 1039 0652 4889C7   		movq	%rax, %rdi
 1040 0655 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1040      00
 1041              	.L56:
  76:XmlTestReporter.cpp **** 
  77:XmlTestReporter.cpp ****     os << "?>";
 1042              		.loc 1 77 0
 1043 065a 488B45F0 		movq	-16(%rbp), %rax
 1044 065e 488D3500 		leaq	.LC10(%rip), %rsi
 1044      000000
 1045 0665 4889C7   		movq	%rax, %rdi
 1046 0668 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1046      00
  78:XmlTestReporter.cpp **** }
 1047              		.loc 1 78 0
 1048 066d 90       		nop
 1049 066e C9       		leave
 1050              		.cfi_def_cfa 7, 8
 1051 066f C3       		ret
 1052              		.cfi_endproc
 1053              	.LFE1357:
 1055              		.section	.rodata
 1056              	.LC11:
 1057 004a 3C756E69 		.string	"<unittest-results"
 1057      74746573 
 1057      742D7265 
 1057      73756C74 
 1057      7300
 1058              	.LC12:
 1059 005c 20746573 		.string	" tests=\""
 1059      74733D22 
 1059      00
 1060              	.LC13:
 1061 0065 20666169 		.string	" failedtests=\""
 1061      6C656474 
 1061      65737473 
 1061      3D2200
 1062              	.LC14:
 1063 0074 20666169 		.string	" failures=\""
 1063      6C757265 
 1063      733D2200 
 1064              	.LC15:
 1065 0080 2074696D 		.string	" time=\""
 1065      653D2200 
 1066              	.LC16:
 1067 0088 3E00     		.string	">"
 1068              		.text
 1069              		.align 2
 1070              		.globl	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
 1072              	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif:
 1073              	.LFB1358:
  79:XmlTestReporter.cpp **** 
  80:XmlTestReporter.cpp **** void XmlTestReporter::BeginResults(std::ostream& os, int totalTestCount, int failedTestCount, 
  81:XmlTestReporter.cpp ****                                    int failureCount, float secondsElapsed)
  82:XmlTestReporter.cpp **** {
 1074              		.loc 1 82 0
 1075              		.cfi_startproc
 1076 0670 55       		pushq	%rbp
 1077              		.cfi_def_cfa_offset 16
 1078              		.cfi_offset 6, -16
 1079 0671 4889E5   		movq	%rsp, %rbp
 1080              		.cfi_def_cfa_register 6
 1081 0674 4883EC30 		subq	$48, %rsp
 1082 0678 48897DF8 		movq	%rdi, -8(%rbp)
 1083 067c 488975F0 		movq	%rsi, -16(%rbp)
 1084 0680 8955EC   		movl	%edx, -20(%rbp)
 1085 0683 894DE8   		movl	%ecx, -24(%rbp)
 1086 0686 448945E4 		movl	%r8d, -28(%rbp)
 1087 068a F30F1145 		movss	%xmm0, -32(%rbp)
 1087      E0
  83:XmlTestReporter.cpp ****    os << "<unittest-results"
  84:XmlTestReporter.cpp ****        << " tests=\"" << totalTestCount << "\"" 
 1088              		.loc 1 84 0
 1089 068f 488B45F0 		movq	-16(%rbp), %rax
 1090 0693 488D3500 		leaq	.LC11(%rip), %rsi
 1090      000000
 1091 069a 4889C7   		movq	%rax, %rdi
 1092 069d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1092      00
 1093 06a2 488D3500 		leaq	.LC12(%rip), %rsi
 1093      000000
 1094 06a9 4889C7   		movq	%rax, %rdi
 1095 06ac E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1095      00
 1096 06b1 4889C2   		movq	%rax, %rdx
  85:XmlTestReporter.cpp ****        << " failedtests=\"" << failedTestCount << "\"" 
 1097              		.loc 1 85 0
 1098 06b4 8B45EC   		movl	-20(%rbp), %eax
 1099 06b7 89C6     		movl	%eax, %esi
 1100 06b9 4889D7   		movq	%rdx, %rdi
 1101 06bc E8000000 		call	_ZNSolsEi@PLT
 1101      00
 1102 06c1 488D3500 		leaq	.LC9(%rip), %rsi
 1102      000000
 1103 06c8 4889C7   		movq	%rax, %rdi
 1104 06cb E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1104      00
 1105 06d0 488D3500 		leaq	.LC13(%rip), %rsi
 1105      000000
 1106 06d7 4889C7   		movq	%rax, %rdi
 1107 06da E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1107      00
 1108 06df 4889C2   		movq	%rax, %rdx
  86:XmlTestReporter.cpp ****        << " failures=\"" << failureCount << "\"" 
 1109              		.loc 1 86 0
 1110 06e2 8B45E8   		movl	-24(%rbp), %eax
 1111 06e5 89C6     		movl	%eax, %esi
 1112 06e7 4889D7   		movq	%rdx, %rdi
 1113 06ea E8000000 		call	_ZNSolsEi@PLT
 1113      00
 1114 06ef 488D3500 		leaq	.LC9(%rip), %rsi
 1114      000000
 1115 06f6 4889C7   		movq	%rax, %rdi
 1116 06f9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1116      00
 1117 06fe 488D3500 		leaq	.LC14(%rip), %rsi
 1117      000000
 1118 0705 4889C7   		movq	%rax, %rdi
 1119 0708 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1119      00
 1120 070d 4889C2   		movq	%rax, %rdx
  87:XmlTestReporter.cpp ****        << " time=\"" << secondsElapsed << "\""
 1121              		.loc 1 87 0
 1122 0710 8B45E4   		movl	-28(%rbp), %eax
 1123 0713 89C6     		movl	%eax, %esi
 1124 0715 4889D7   		movq	%rdx, %rdi
 1125 0718 E8000000 		call	_ZNSolsEi@PLT
 1125      00
 1126 071d 488D3500 		leaq	.LC9(%rip), %rsi
 1126      000000
 1127 0724 4889C7   		movq	%rax, %rdi
 1128 0727 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1128      00
 1129 072c 488D3500 		leaq	.LC15(%rip), %rsi
 1129      000000
 1130 0733 4889C7   		movq	%rax, %rdi
 1131 0736 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1131      00
 1132 073b 4889C2   		movq	%rax, %rdx
 1133 073e 8B45E0   		movl	-32(%rbp), %eax
 1134 0741 8945DC   		movl	%eax, -36(%rbp)
 1135 0744 F30F1045 		movss	-36(%rbp), %xmm0
 1135      DC
 1136 0749 4889D7   		movq	%rdx, %rdi
 1137 074c E8000000 		call	_ZNSolsEf@PLT
 1137      00
  88:XmlTestReporter.cpp ****        << ">";
 1138              		.loc 1 88 0
 1139 0751 488D3500 		leaq	.LC9(%rip), %rsi
 1139      000000
 1140 0758 4889C7   		movq	%rax, %rdi
 1141 075b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1141      00
 1142 0760 488D3500 		leaq	.LC16(%rip), %rsi
 1142      000000
 1143 0767 4889C7   		movq	%rax, %rdi
 1144 076a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1144      00
  89:XmlTestReporter.cpp **** }
 1145              		.loc 1 89 0
 1146 076f 90       		nop
 1147 0770 C9       		leave
 1148              		.cfi_def_cfa 7, 8
 1149 0771 C3       		ret
 1150              		.cfi_endproc
 1151              	.LFE1358:
 1153              		.section	.rodata
 1154              	.LC17:
 1155 008a 3C2F756E 		.string	"</unittest-results>"
 1155      69747465 
 1155      73742D72 
 1155      6573756C 
 1155      74733E00 
 1156              		.text
 1157              		.align 2
 1158              		.globl	_ZN8UnitTest15XmlTestReporter10EndResultsERSo
 1160              	_ZN8UnitTest15XmlTestReporter10EndResultsERSo:
 1161              	.LFB1359:
  90:XmlTestReporter.cpp **** 
  91:XmlTestReporter.cpp **** void XmlTestReporter::EndResults(std::ostream& os)
  92:XmlTestReporter.cpp **** {
 1162              		.loc 1 92 0
 1163              		.cfi_startproc
 1164 0772 55       		pushq	%rbp
 1165              		.cfi_def_cfa_offset 16
 1166              		.cfi_offset 6, -16
 1167 0773 4889E5   		movq	%rsp, %rbp
 1168              		.cfi_def_cfa_register 6
 1169 0776 4883EC10 		subq	$16, %rsp
 1170 077a 48897DF8 		movq	%rdi, -8(%rbp)
 1171 077e 488975F0 		movq	%rsi, -16(%rbp)
  93:XmlTestReporter.cpp ****     os << "</unittest-results>";
 1172              		.loc 1 93 0
 1173 0782 488B45F0 		movq	-16(%rbp), %rax
 1174 0786 488D3500 		leaq	.LC17(%rip), %rsi
 1174      000000
 1175 078d 4889C7   		movq	%rax, %rdi
 1176 0790 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1176      00
  94:XmlTestReporter.cpp **** }
 1177              		.loc 1 94 0
 1178 0795 90       		nop
 1179 0796 C9       		leave
 1180              		.cfi_def_cfa 7, 8
 1181 0797 C3       		ret
 1182              		.cfi_endproc
 1183              	.LFE1359:
 1185              		.section	.rodata
 1186              	.LC18:
 1187 009e 3C746573 		.string	"<test"
 1187      7400
 1188              	.LC19:
 1189 00a4 20737569 		.string	" suite=\""
 1189      74653D22 
 1189      00
 1190              	.LC20:
 1191 00ad 206E616D 		.string	" name=\""
 1191      653D2200 
 1192              		.text
 1193              		.align 2
 1194              		.globl	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
 1196              	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE:
 1197              	.LFB1360:
  95:XmlTestReporter.cpp **** 
  96:XmlTestReporter.cpp **** void XmlTestReporter::BeginTest(std::ostream& os, DeferredTestResult const& result)
  97:XmlTestReporter.cpp **** {
 1198              		.loc 1 97 0
 1199              		.cfi_startproc
 1200 0798 55       		pushq	%rbp
 1201              		.cfi_def_cfa_offset 16
 1202              		.cfi_offset 6, -16
 1203 0799 4889E5   		movq	%rsp, %rbp
 1204              		.cfi_def_cfa_register 6
 1205 079c 4883EC20 		subq	$32, %rsp
 1206 07a0 48897DF8 		movq	%rdi, -8(%rbp)
 1207 07a4 488975F0 		movq	%rsi, -16(%rbp)
 1208 07a8 488955E8 		movq	%rdx, -24(%rbp)
  98:XmlTestReporter.cpp ****     os << "<test"
  99:XmlTestReporter.cpp ****         << " suite=\"" << result.suiteName << "\"" 
 100:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 101:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1209              		.loc 1 101 0
 1210 07ac 488B45F0 		movq	-16(%rbp), %rax
 1211 07b0 488D3500 		leaq	.LC18(%rip), %rsi
 1211      000000
 1212 07b7 4889C7   		movq	%rax, %rdi
 1213 07ba E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1213      00
 1214 07bf 488D3500 		leaq	.LC19(%rip), %rsi
 1214      000000
 1215 07c6 4889C7   		movq	%rax, %rdi
 1216 07c9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1216      00
 1217 07ce 4889C2   		movq	%rax, %rdx
 1218 07d1 488B45E8 		movq	-24(%rbp), %rax
 1219 07d5 4889C6   		movq	%rax, %rsi
 1220 07d8 4889D7   		movq	%rdx, %rdi
 1221 07db E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1221      00
 1222 07e0 488D3500 		leaq	.LC9(%rip), %rsi
 1222      000000
 1223 07e7 4889C7   		movq	%rax, %rdi
 1224 07ea E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1224      00
 1225 07ef 488D3500 		leaq	.LC20(%rip), %rsi
 1225      000000
 1226 07f6 4889C7   		movq	%rax, %rdi
 1227 07f9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1227      00
 1228 07fe 4889C2   		movq	%rax, %rdx
 1229 0801 488B45E8 		movq	-24(%rbp), %rax
 1230 0805 4883C020 		addq	$32, %rax
 1231 0809 4889C6   		movq	%rax, %rsi
 1232 080c 4889D7   		movq	%rdx, %rdi
 1233 080f E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1233      00
 1234 0814 488D3500 		leaq	.LC9(%rip), %rsi
 1234      000000
 1235 081b 4889C7   		movq	%rax, %rdi
 1236 081e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1236      00
 1237 0823 488D3500 		leaq	.LC15(%rip), %rsi
 1237      000000
 1238 082a 4889C7   		movq	%rax, %rdi
 1239 082d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1239      00
 1240 0832 4889C2   		movq	%rax, %rdx
 1241 0835 488B45E8 		movq	-24(%rbp), %rax
 1242 0839 8B4078   		movl	120(%rax), %eax
 1243 083c 8945E4   		movl	%eax, -28(%rbp)
 1244 083f F30F1045 		movss	-28(%rbp), %xmm0
 1244      E4
 1245 0844 4889D7   		movq	%rdx, %rdi
 1246 0847 E8000000 		call	_ZNSolsEf@PLT
 1246      00
 1247 084c 488D3500 		leaq	.LC9(%rip), %rsi
 1247      000000
 1248 0853 4889C7   		movq	%rax, %rdi
 1249 0856 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1249      00
 102:XmlTestReporter.cpp **** }
 1250              		.loc 1 102 0
 1251 085b 90       		nop
 1252 085c C9       		leave
 1253              		.cfi_def_cfa 7, 8
 1254 085d C3       		ret
 1255              		.cfi_endproc
 1256              	.LFE1360:
 1258              		.section	.rodata
 1259              	.LC21:
 1260 00b5 3C2F7465 		.string	"</test>"
 1260      73743E00 
 1261              	.LC22:
 1262 00bd 2F3E00   		.string	"/>"
 1263              		.text
 1264              		.align 2
 1265              		.globl	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
 1267              	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE:
 1268              	.LFB1361:
 103:XmlTestReporter.cpp **** 
 104:XmlTestReporter.cpp **** void XmlTestReporter::EndTest(std::ostream& os, DeferredTestResult const& result)
 105:XmlTestReporter.cpp **** {
 1269              		.loc 1 105 0
 1270              		.cfi_startproc
 1271 085e 55       		pushq	%rbp
 1272              		.cfi_def_cfa_offset 16
 1273              		.cfi_offset 6, -16
 1274 085f 4889E5   		movq	%rsp, %rbp
 1275              		.cfi_def_cfa_register 6
 1276 0862 4883EC20 		subq	$32, %rsp
 1277 0866 48897DF8 		movq	%rdi, -8(%rbp)
 1278 086a 488975F0 		movq	%rsi, -16(%rbp)
 1279 086e 488955E8 		movq	%rdx, -24(%rbp)
 106:XmlTestReporter.cpp ****     if (result.failed)
 1280              		.loc 1 106 0
 1281 0872 488B45E8 		movq	-24(%rbp), %rax
 1282 0876 0FB6407C 		movzbl	124(%rax), %eax
 1283 087a 84C0     		testb	%al, %al
 1284 087c 7415     		je	.L61
 107:XmlTestReporter.cpp ****         os << "</test>";
 1285              		.loc 1 107 0
 1286 087e 488B45F0 		movq	-16(%rbp), %rax
 1287 0882 488D3500 		leaq	.LC21(%rip), %rsi
 1287      000000
 1288 0889 4889C7   		movq	%rax, %rdi
 1289 088c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1289      00
 108:XmlTestReporter.cpp ****     else
 109:XmlTestReporter.cpp ****         os << "/>";
 110:XmlTestReporter.cpp **** }
 1290              		.loc 1 110 0
 1291 0891 EB13     		jmp	.L63
 1292              	.L61:
 109:XmlTestReporter.cpp **** }
 1293              		.loc 1 109 0
 1294 0893 488B45F0 		movq	-16(%rbp), %rax
 1295 0897 488D3500 		leaq	.LC22(%rip), %rsi
 1295      000000
 1296 089e 4889C7   		movq	%rax, %rdi
 1297 08a1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1297      00
 1298              	.L63:
 1299              		.loc 1 110 0
 1300 08a6 90       		nop
 1301 08a7 C9       		leave
 1302              		.cfi_def_cfa 7, 8
 1303 08a8 C3       		ret
 1304              		.cfi_endproc
 1305              	.LFE1361:
 1307              		.section	.rodata
 1308              	.LC23:
 1309 00c0 3C666169 		.string	"<failure"
 1309      6C757265 
 1309      00
 1310              	.LC24:
 1311 00c9 206D6573 		.string	" message=\""
 1311      73616765 
 1311      3D2200
 1312              		.text
 1313 08a9 90       		.align 2
 1314              		.globl	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
 1316              	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE:
 1317              	.LFB1362:
 111:XmlTestReporter.cpp **** 
 112:XmlTestReporter.cpp **** void XmlTestReporter::AddFailure(std::ostream& os, DeferredTestResult const& result)
 113:XmlTestReporter.cpp **** {
 1318              		.loc 1 113 0
 1319              		.cfi_startproc
 1320              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1321              		.cfi_lsda 0x1b,.LLSDA1362
 1322 08aa 55       		pushq	%rbp
 1323              		.cfi_def_cfa_offset 16
 1324              		.cfi_offset 6, -16
 1325 08ab 4889E5   		movq	%rsp, %rbp
 1326              		.cfi_def_cfa_register 6
 1327 08ae 53       		pushq	%rbx
 1328 08af 4881EC88 		subq	$136, %rsp
 1328      000000
 1329              		.cfi_offset 3, -24
 1330 08b6 48897D88 		movq	%rdi, -120(%rbp)
 1331 08ba 48897580 		movq	%rsi, -128(%rbp)
 1332 08be 48899578 		movq	%rdx, -136(%rbp)
 1332      FFFFFF
 1333              		.loc 1 113 0
 1334 08c5 64488B04 		movq	%fs:40, %rax
 1334      25280000 
 1334      00
 1335 08ce 488945E8 		movq	%rax, -24(%rbp)
 1336 08d2 31C0     		xorl	%eax, %eax
 114:XmlTestReporter.cpp ****     os << ">"; // close <test> element
 1337              		.loc 1 114 0
 1338 08d4 488B4580 		movq	-128(%rbp), %rax
 1339 08d8 488D3500 		leaq	.LC16(%rip), %rsi
 1339      000000
 1340 08df 4889C7   		movq	%rax, %rdi
 1341              	.LEHB28:
 1342 08e2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1342      00
 1343              	.LBB10:
 115:XmlTestReporter.cpp **** 
 116:XmlTestReporter.cpp ****     for (DeferredTestResult::FailureVec::const_iterator it = result.failures.begin(); 
 1344              		.loc 1 116 0
 1345 08e7 488B8578 		movq	-136(%rbp), %rax
 1345      FFFFFF
 1346 08ee 4883C060 		addq	$96, %rax
 1347 08f2 4889C7   		movq	%rax, %rdi
 1348 08f5 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv@
 1348      00
 1349 08fa 48894590 		movq	%rax, -112(%rbp)
 1350              	.L66:
 117:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1351              		.loc 1 117 0
 1352 08fe 488B8578 		movq	-136(%rbp), %rax
 1352      FFFFFF
 1353 0905 4883C060 		addq	$96, %rax
 1354 0909 4889C7   		movq	%rax, %rdi
 1355 090c E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv@PL
 1355      00
 1356 0911 48894598 		movq	%rax, -104(%rbp)
 1357 0915 488D5598 		leaq	-104(%rbp), %rdx
 1358 0919 488D4590 		leaq	-112(%rbp), %rax
 1359 091d 4889D6   		movq	%rdx, %rsi
 1360 0920 4889C7   		movq	%rax, %rdi
 1361 0923 E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_
 1361      00
 1362 0928 84C0     		testb	%al, %al
 1363 092a 0F84EE00 		je	.L72
 1363      0000
 1364              	.LBB11:
 118:XmlTestReporter.cpp ****          ++it)
 119:XmlTestReporter.cpp ****     {
 120:XmlTestReporter.cpp ****         string const escapedMessage = XmlEscape(it->second);
 1365              		.loc 1 120 0
 1366 0930 488D4590 		leaq	-112(%rbp), %rax
 1367 0934 4889C7   		movq	%rax, %rdi
 1368 0937 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1368      00
 1369 093c 488D5008 		leaq	8(%rax), %rdx
 1370 0940 488D45A0 		leaq	-96(%rbp), %rax
 1371 0944 4889D6   		movq	%rdx, %rsi
 1372 0947 4889C7   		movq	%rax, %rdi
 1373 094a E827F7FF 		call	_ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 1373      FF
 1374              	.LEHE28:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1375              		.loc 1 121 0
 1376 094f 488D4590 		leaq	-112(%rbp), %rax
 1377 0953 4889C7   		movq	%rax, %rdi
 1378 0956 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1378      00
 1379 095b 8B10     		movl	(%rax), %edx
 1380 095d 488B8578 		movq	-136(%rbp), %rax
 1380      FFFFFF
 1381 0964 488D7040 		leaq	64(%rax), %rsi
 1382 0968 488D45C0 		leaq	-64(%rbp), %rax
 1383 096c 488D4DA0 		leaq	-96(%rbp), %rcx
 1384 0970 4889C7   		movq	%rax, %rdi
 1385              	.LEHB29:
 1386 0973 E8ACF9FF 		call	_ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 1386      FF
 1387              	.LEHE29:
 122:XmlTestReporter.cpp **** 
 123:XmlTestReporter.cpp ****         os << "<failure" << " message=\"" << message << "\"" << "/>";
 1388              		.loc 1 123 0
 1389 0978 488B4580 		movq	-128(%rbp), %rax
 1390 097c 488D3500 		leaq	.LC23(%rip), %rsi
 1390      000000
 1391 0983 4889C7   		movq	%rax, %rdi
 1392              	.LEHB30:
 1393 0986 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1393      00
 1394 098b 488D3500 		leaq	.LC24(%rip), %rsi
 1394      000000
 1395 0992 4889C7   		movq	%rax, %rdi
 1396 0995 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1396      00
 1397              		.loc 1 123 0 is_stmt 0 discriminator 1
 1398 099a 4889C2   		movq	%rax, %rdx
 1399 099d 488D45C0 		leaq	-64(%rbp), %rax
 1400 09a1 4889C6   		movq	%rax, %rsi
 1401 09a4 4889D7   		movq	%rdx, %rdi
 1402 09a7 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1402      00
 1403              		.loc 1 123 0 discriminator 2
 1404 09ac 488D3500 		leaq	.LC9(%rip), %rsi
 1404      000000
 1405 09b3 4889C7   		movq	%rax, %rdi
 1406 09b6 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1406      00
 1407              		.loc 1 123 0 discriminator 3
 1408 09bb 488D3500 		leaq	.LC22(%rip), %rsi
 1408      000000
 1409 09c2 4889C7   		movq	%rax, %rdi
 1410 09c5 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1410      00
 1411              	.LEHE30:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1412              		.loc 1 121 0 is_stmt 1
 1413 09ca 488D45C0 		leaq	-64(%rbp), %rax
 1414 09ce 4889C7   		movq	%rax, %rdi
 1415              	.LEHB31:
 1416 09d1 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1416      00
 1417              	.LEHE31:
 120:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1418              		.loc 1 120 0
 1419 09d6 488D45A0 		leaq	-96(%rbp), %rax
 1420 09da 4889C7   		movq	%rax, %rdi
 1421              	.LEHB32:
 1422 09dd E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1422      00
 1423              	.LEHE32:
 1424              	.LBE11:
 116:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1425              		.loc 1 116 0
 1426 09e2 488D4590 		leaq	-112(%rbp), %rax
 1427 09e6 4889C7   		movq	%rax, %rdi
 1428 09e9 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1428      00
 1429 09ee E90BFFFF 		jmp	.L66
 1429      FF
 1430              	.L71:
 1431 09f3 4889C3   		movq	%rax, %rbx
 1432              	.LBB12:
 121:XmlTestReporter.cpp **** 
 1433              		.loc 1 121 0
 1434 09f6 488D45C0 		leaq	-64(%rbp), %rax
 1435 09fa 4889C7   		movq	%rax, %rdi
 1436 09fd E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1436      00
 1437 0a02 EB03     		jmp	.L68
 1438              	.L70:
 1439 0a04 4889C3   		movq	%rax, %rbx
 1440              	.L68:
 120:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1441              		.loc 1 120 0
 1442 0a07 488D45A0 		leaq	-96(%rbp), %rax
 1443 0a0b 4889C7   		movq	%rax, %rdi
 1444 0a0e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1444      00
 1445 0a13 4889D8   		movq	%rbx, %rax
 1446 0a16 4889C7   		movq	%rax, %rdi
 1447              	.LEHB33:
 1448 0a19 E8000000 		call	_Unwind_Resume@PLT
 1448      00
 1449              	.LEHE33:
 1450              	.L72:
 1451              	.LBE12:
 1452              	.LBE10:
 124:XmlTestReporter.cpp ****     }
 125:XmlTestReporter.cpp **** }
 1453              		.loc 1 125 0
 1454 0a1e 90       		nop
 1455 0a1f 488B45E8 		movq	-24(%rbp), %rax
 1456 0a23 64483304 		xorq	%fs:40, %rax
 1456      25280000 
 1456      00
 1457 0a2c 7405     		je	.L69
 1458 0a2e E8000000 		call	__stack_chk_fail@PLT
 1458      00
 1459              	.L69:
 1460 0a33 4881C488 		addq	$136, %rsp
 1460      000000
 1461 0a3a 5B       		popq	%rbx
 1462 0a3b 5D       		popq	%rbp
 1463              		.cfi_def_cfa 7, 8
 1464 0a3c C3       		ret
 1465              		.cfi_endproc
 1466              	.LFE1362:
 1467              		.section	.gcc_except_table
 1468              	.LLSDA1362:
 1469 00a3 FF       		.byte	0xff
 1470 00a4 FF       		.byte	0xff
 1471 00a5 01       		.byte	0x1
 1472 00a6 20       		.uleb128 .LLSDACSE1362-.LLSDACSB1362
 1473              	.LLSDACSB1362:
 1474 00a7 38       		.uleb128 .LEHB28-.LFB1362
 1475 00a8 6D       		.uleb128 .LEHE28-.LEHB28
 1476 00a9 00       		.uleb128 0
 1477 00aa 00       		.uleb128 0
 1478 00ab C901     		.uleb128 .LEHB29-.LFB1362
 1479 00ad 05       		.uleb128 .LEHE29-.LEHB29
 1480 00ae DA02     		.uleb128 .L70-.LFB1362
 1481 00b0 00       		.uleb128 0
 1482 00b1 DC01     		.uleb128 .LEHB30-.LFB1362
 1483 00b3 44       		.uleb128 .LEHE30-.LEHB30
 1484 00b4 C902     		.uleb128 .L71-.LFB1362
 1485 00b6 00       		.uleb128 0
 1486 00b7 A702     		.uleb128 .LEHB31-.LFB1362
 1487 00b9 05       		.uleb128 .LEHE31-.LEHB31
 1488 00ba DA02     		.uleb128 .L70-.LFB1362
 1489 00bc 00       		.uleb128 0
 1490 00bd B302     		.uleb128 .LEHB32-.LFB1362
 1491 00bf 05       		.uleb128 .LEHE32-.LEHB32
 1492 00c0 00       		.uleb128 0
 1493 00c1 00       		.uleb128 0
 1494 00c2 EF02     		.uleb128 .LEHB33-.LFB1362
 1495 00c4 05       		.uleb128 .LEHE33-.LEHB33
 1496 00c5 00       		.uleb128 0
 1497 00c6 00       		.uleb128 0
 1498              	.LLSDACSE1362:
 1499              		.text
 1501              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZNSt6vect
 1502              		.align 2
 1503              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 1505              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 1506              	.LFB1398:
 1507              		.file 4 "/usr/include/c++/7/bits/stl_vector.h"
   1:/usr/include/c++/7/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_vector.h **** 
   3:/usr/include/c++/7/bits/stl_vector.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_vector.h **** //
   5:/usr/include/c++/7/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_vector.h **** 
  11:/usr/include/c++/7/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_vector.h **** 
  16:/usr/include/c++/7/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_vector.h **** 
  20:/usr/include/c++/7/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_vector.h **** 
  25:/usr/include/c++/7/bits/stl_vector.h **** /*
  26:/usr/include/c++/7/bits/stl_vector.h ****  *
  27:/usr/include/c++/7/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_vector.h ****  *
  30:/usr/include/c++/7/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_vector.h ****  *
  38:/usr/include/c++/7/bits/stl_vector.h ****  *
  39:/usr/include/c++/7/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/7/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_vector.h ****  *
  42:/usr/include/c++/7/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/7/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_vector.h ****  */
  50:/usr/include/c++/7/bits/stl_vector.h **** 
  51:/usr/include/c++/7/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/7/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/7/bits/stl_vector.h ****  */
  55:/usr/include/c++/7/bits/stl_vector.h **** 
  56:/usr/include/c++/7/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/7/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/7/bits/stl_vector.h **** 
  59:/usr/include/c++/7/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/7/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/7/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/7/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/7/bits/stl_vector.h **** #endif
  65:/usr/include/c++/7/bits/stl_vector.h **** 
  66:/usr/include/c++/7/bits/stl_vector.h **** #include <debug/assertions.h>
  67:/usr/include/c++/7/bits/stl_vector.h **** 
  68:/usr/include/c++/7/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:/usr/include/c++/7/bits/stl_vector.h **** {
  70:/usr/include/c++/7/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  71:/usr/include/c++/7/bits/stl_vector.h **** 
  72:/usr/include/c++/7/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  73:/usr/include/c++/7/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  74:/usr/include/c++/7/bits/stl_vector.h ****     struct _Vector_base
  75:/usr/include/c++/7/bits/stl_vector.h ****     {
  76:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  77:/usr/include/c++/7/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  78:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  79:/usr/include/c++/7/bits/stl_vector.h ****        	pointer;
  80:/usr/include/c++/7/bits/stl_vector.h **** 
  81:/usr/include/c++/7/bits/stl_vector.h ****       struct _Vector_impl
  82:/usr/include/c++/7/bits/stl_vector.h ****       : public _Tp_alloc_type
  83:/usr/include/c++/7/bits/stl_vector.h ****       {
  84:/usr/include/c++/7/bits/stl_vector.h **** 	pointer _M_start;
  85:/usr/include/c++/7/bits/stl_vector.h **** 	pointer _M_finish;
  86:/usr/include/c++/7/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  87:/usr/include/c++/7/bits/stl_vector.h **** 
  88:/usr/include/c++/7/bits/stl_vector.h **** 	_Vector_impl()
  89:/usr/include/c++/7/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  90:/usr/include/c++/7/bits/stl_vector.h **** 	{ }
  91:/usr/include/c++/7/bits/stl_vector.h **** 
  92:/usr/include/c++/7/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  93:/usr/include/c++/7/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  94:/usr/include/c++/7/bits/stl_vector.h **** 	{ }
  95:/usr/include/c++/7/bits/stl_vector.h **** 
  96:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
  97:/usr/include/c++/7/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  98:/usr/include/c++/7/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  99:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_start(), _M_finish(), _M_end_of_storage()
 100:/usr/include/c++/7/bits/stl_vector.h **** 	{ }
 101:/usr/include/c++/7/bits/stl_vector.h **** #endif
 102:/usr/include/c++/7/bits/stl_vector.h **** 
 103:/usr/include/c++/7/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 104:/usr/include/c++/7/bits/stl_vector.h **** 	{
 105:/usr/include/c++/7/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 106:/usr/include/c++/7/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 107:/usr/include/c++/7/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 108:/usr/include/c++/7/bits/stl_vector.h **** 	}
 109:/usr/include/c++/7/bits/stl_vector.h ****       };
 110:/usr/include/c++/7/bits/stl_vector.h **** 
 111:/usr/include/c++/7/bits/stl_vector.h ****     public:
 112:/usr/include/c++/7/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 113:/usr/include/c++/7/bits/stl_vector.h **** 
 114:/usr/include/c++/7/bits/stl_vector.h ****       _Tp_alloc_type&
 115:/usr/include/c++/7/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 116:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 117:/usr/include/c++/7/bits/stl_vector.h **** 
 118:/usr/include/c++/7/bits/stl_vector.h ****       const _Tp_alloc_type&
 119:/usr/include/c++/7/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 120:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 121:/usr/include/c++/7/bits/stl_vector.h **** 
 122:/usr/include/c++/7/bits/stl_vector.h ****       allocator_type
 123:/usr/include/c++/7/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 124:/usr/include/c++/7/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 125:/usr/include/c++/7/bits/stl_vector.h **** 
 126:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base()
 127:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl() { }
 128:/usr/include/c++/7/bits/stl_vector.h **** 
 129:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 130:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(__a) { }
 131:/usr/include/c++/7/bits/stl_vector.h **** 
 132:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(size_t __n)
 133:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl()
 134:/usr/include/c++/7/bits/stl_vector.h ****       { _M_create_storage(__n); }
 135:/usr/include/c++/7/bits/stl_vector.h **** 
 136:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 137:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(__a)
 138:/usr/include/c++/7/bits/stl_vector.h ****       { _M_create_storage(__n); }
 139:/usr/include/c++/7/bits/stl_vector.h **** 
 140:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 142:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 143:/usr/include/c++/7/bits/stl_vector.h **** 
 144:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 145:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 146:/usr/include/c++/7/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 147:/usr/include/c++/7/bits/stl_vector.h **** 
 148:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 149:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(__a)
 150:/usr/include/c++/7/bits/stl_vector.h ****       {
 151:/usr/include/c++/7/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 152:/usr/include/c++/7/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 153:/usr/include/c++/7/bits/stl_vector.h **** 	else
 154:/usr/include/c++/7/bits/stl_vector.h **** 	  {
 155:/usr/include/c++/7/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 156:/usr/include/c++/7/bits/stl_vector.h **** 	    _M_create_storage(__n);
 157:/usr/include/c++/7/bits/stl_vector.h **** 	  }
 158:/usr/include/c++/7/bits/stl_vector.h ****       }
 159:/usr/include/c++/7/bits/stl_vector.h **** #endif
 160:/usr/include/c++/7/bits/stl_vector.h **** 
 161:/usr/include/c++/7/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 162:/usr/include/c++/7/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 163:/usr/include/c++/7/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 164:/usr/include/c++/7/bits/stl_vector.h **** 
 165:/usr/include/c++/7/bits/stl_vector.h ****     public:
 166:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_impl _M_impl;
 167:/usr/include/c++/7/bits/stl_vector.h **** 
 168:/usr/include/c++/7/bits/stl_vector.h ****       pointer
 169:/usr/include/c++/7/bits/stl_vector.h ****       _M_allocate(size_t __n)
 170:/usr/include/c++/7/bits/stl_vector.h ****       {
 171:/usr/include/c++/7/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 172:/usr/include/c++/7/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 173:/usr/include/c++/7/bits/stl_vector.h ****       }
 174:/usr/include/c++/7/bits/stl_vector.h **** 
 175:/usr/include/c++/7/bits/stl_vector.h ****       void
 176:/usr/include/c++/7/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 177:/usr/include/c++/7/bits/stl_vector.h ****       {
 178:/usr/include/c++/7/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 179:/usr/include/c++/7/bits/stl_vector.h **** 	if (__p)
 180:/usr/include/c++/7/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 181:/usr/include/c++/7/bits/stl_vector.h ****       }
 182:/usr/include/c++/7/bits/stl_vector.h **** 
 183:/usr/include/c++/7/bits/stl_vector.h ****     private:
 184:/usr/include/c++/7/bits/stl_vector.h ****       void
 185:/usr/include/c++/7/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 186:/usr/include/c++/7/bits/stl_vector.h ****       {
 187:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 188:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 189:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 190:/usr/include/c++/7/bits/stl_vector.h ****       }
 191:/usr/include/c++/7/bits/stl_vector.h ****     };
 192:/usr/include/c++/7/bits/stl_vector.h **** 
 193:/usr/include/c++/7/bits/stl_vector.h **** 
 194:/usr/include/c++/7/bits/stl_vector.h ****   /**
 195:/usr/include/c++/7/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 196:/usr/include/c++/7/bits/stl_vector.h ****    *  individual elements in any order.
 197:/usr/include/c++/7/bits/stl_vector.h ****    *
 198:/usr/include/c++/7/bits/stl_vector.h ****    *  @ingroup sequences
 199:/usr/include/c++/7/bits/stl_vector.h ****    *
 200:/usr/include/c++/7/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 201:/usr/include/c++/7/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 202:/usr/include/c++/7/bits/stl_vector.h ****    *
 203:/usr/include/c++/7/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 204:/usr/include/c++/7/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 205:/usr/include/c++/7/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 206:/usr/include/c++/7/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 207:/usr/include/c++/7/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 208:/usr/include/c++/7/bits/stl_vector.h ****    *
 209:/usr/include/c++/7/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 210:/usr/include/c++/7/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 211:/usr/include/c++/7/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 212:/usr/include/c++/7/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 213:/usr/include/c++/7/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 214:/usr/include/c++/7/bits/stl_vector.h ****   */
 215:/usr/include/c++/7/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 216:/usr/include/c++/7/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 217:/usr/include/c++/7/bits/stl_vector.h ****     {
 218:/usr/include/c++/7/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 219:/usr/include/c++/7/bits/stl_vector.h ****       // Concept requirements.
 220:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 221:/usr/include/c++/7/bits/stl_vector.h **** # if __cplusplus < 201103L
 222:/usr/include/c++/7/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 223:/usr/include/c++/7/bits/stl_vector.h **** # endif
 224:/usr/include/c++/7/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 225:/usr/include/c++/7/bits/stl_vector.h **** #endif
 226:/usr/include/c++/7/bits/stl_vector.h **** 
 227:/usr/include/c++/7/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 228:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 229:/usr/include/c++/7/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 230:/usr/include/c++/7/bits/stl_vector.h **** 
 231:/usr/include/c++/7/bits/stl_vector.h ****     public:
 232:/usr/include/c++/7/bits/stl_vector.h ****       typedef _Tp					value_type;
 233:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 234:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 235:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 236:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 237:/usr/include/c++/7/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 238:/usr/include/c++/7/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 239:/usr/include/c++/7/bits/stl_vector.h ****       const_iterator;
 240:/usr/include/c++/7/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 241:/usr/include/c++/7/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 242:/usr/include/c++/7/bits/stl_vector.h ****       typedef size_t					size_type;
 243:/usr/include/c++/7/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 244:/usr/include/c++/7/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 245:/usr/include/c++/7/bits/stl_vector.h **** 
 246:/usr/include/c++/7/bits/stl_vector.h ****     protected:
 247:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::_M_allocate;
 248:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::_M_deallocate;
 249:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::_M_impl;
 250:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 251:/usr/include/c++/7/bits/stl_vector.h **** 
 252:/usr/include/c++/7/bits/stl_vector.h ****     public:
 253:/usr/include/c++/7/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 254:/usr/include/c++/7/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 255:/usr/include/c++/7/bits/stl_vector.h **** 
 256:/usr/include/c++/7/bits/stl_vector.h ****       /**
 257:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 258:/usr/include/c++/7/bits/stl_vector.h ****        */
 259:/usr/include/c++/7/bits/stl_vector.h ****       vector()
 1508              		.loc 4 259 0
 1509              		.cfi_startproc
 1510 0000 55       		pushq	%rbp
 1511              		.cfi_def_cfa_offset 16
 1512              		.cfi_offset 6, -16
 1513 0001 4889E5   		movq	%rsp, %rbp
 1514              		.cfi_def_cfa_register 6
 1515 0004 4883EC10 		subq	$16, %rsp
 1516 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1517              	.LBB13:
 260:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 261:/usr/include/c++/7/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 262:/usr/include/c++/7/bits/stl_vector.h **** #endif
 263:/usr/include/c++/7/bits/stl_vector.h ****       : _Base() { }
 1518              		.loc 4 263 0
 1519 000c 488B45F8 		movq	-8(%rbp), %rax
 1520 0010 4889C7   		movq	%rax, %rdi
 1521 0013 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev@PLT
 1521      00
 1522              	.LBE13:
 1523 0018 90       		nop
 1524 0019 C9       		leave
 1525              		.cfi_def_cfa 7, 8
 1526 001a C3       		ret
 1527              		.cfi_endproc
 1528              	.LFE1398:
 1530              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 1531              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1532              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1533              		.align 2
 1534              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 1536              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 1537              	.LFB1401:
 264:/usr/include/c++/7/bits/stl_vector.h **** 
 265:/usr/include/c++/7/bits/stl_vector.h ****       /**
 266:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 267:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 268:/usr/include/c++/7/bits/stl_vector.h ****        */
 269:/usr/include/c++/7/bits/stl_vector.h ****       explicit
 270:/usr/include/c++/7/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 271:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__a) { }
 272:/usr/include/c++/7/bits/stl_vector.h **** 
 273:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 274:/usr/include/c++/7/bits/stl_vector.h ****       /**
 275:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 276:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 277:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 278:/usr/include/c++/7/bits/stl_vector.h ****        *
 279:/usr/include/c++/7/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 280:/usr/include/c++/7/bits/stl_vector.h ****        *  constructed elements.
 281:/usr/include/c++/7/bits/stl_vector.h ****        */
 282:/usr/include/c++/7/bits/stl_vector.h ****       explicit
 283:/usr/include/c++/7/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 284:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__n, __a)
 285:/usr/include/c++/7/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 286:/usr/include/c++/7/bits/stl_vector.h **** 
 287:/usr/include/c++/7/bits/stl_vector.h ****       /**
 288:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 289:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 290:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 291:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 292:/usr/include/c++/7/bits/stl_vector.h ****        *
 293:/usr/include/c++/7/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 294:/usr/include/c++/7/bits/stl_vector.h ****        */
 295:/usr/include/c++/7/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 296:/usr/include/c++/7/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 297:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__n, __a)
 298:/usr/include/c++/7/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 299:/usr/include/c++/7/bits/stl_vector.h **** #else
 300:/usr/include/c++/7/bits/stl_vector.h ****       /**
 301:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 302:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 303:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 304:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 305:/usr/include/c++/7/bits/stl_vector.h ****        *
 306:/usr/include/c++/7/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 307:/usr/include/c++/7/bits/stl_vector.h ****        */
 308:/usr/include/c++/7/bits/stl_vector.h ****       explicit
 309:/usr/include/c++/7/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 310:/usr/include/c++/7/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 311:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__n, __a)
 312:/usr/include/c++/7/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 313:/usr/include/c++/7/bits/stl_vector.h **** #endif
 314:/usr/include/c++/7/bits/stl_vector.h **** 
 315:/usr/include/c++/7/bits/stl_vector.h ****       /**
 316:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 317:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 318:/usr/include/c++/7/bits/stl_vector.h ****        *
 319:/usr/include/c++/7/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 320:/usr/include/c++/7/bits/stl_vector.h ****        *  @a __x  will not be copied
 321:/usr/include/c++/7/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 322:/usr/include/c++/7/bits/stl_vector.h ****        *
 323:/usr/include/c++/7/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 324:/usr/include/c++/7/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 325:/usr/include/c++/7/bits/stl_vector.h ****        */
 326:/usr/include/c++/7/bits/stl_vector.h ****       vector(const vector& __x)
 327:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__x.size(),
 328:/usr/include/c++/7/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 329:/usr/include/c++/7/bits/stl_vector.h ****       {
 330:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 331:/usr/include/c++/7/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 332:/usr/include/c++/7/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 333:/usr/include/c++/7/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 334:/usr/include/c++/7/bits/stl_vector.h ****       }
 335:/usr/include/c++/7/bits/stl_vector.h **** 
 336:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 337:/usr/include/c++/7/bits/stl_vector.h ****       /**
 338:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 339:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 340:/usr/include/c++/7/bits/stl_vector.h ****        *
 341:/usr/include/c++/7/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 342:/usr/include/c++/7/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 343:/usr/include/c++/7/bits/stl_vector.h ****        */
 344:/usr/include/c++/7/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 345:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 346:/usr/include/c++/7/bits/stl_vector.h **** 
 347:/usr/include/c++/7/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 348:/usr/include/c++/7/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 349:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 350:/usr/include/c++/7/bits/stl_vector.h ****       {
 351:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 352:/usr/include/c++/7/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 353:/usr/include/c++/7/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 354:/usr/include/c++/7/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 355:/usr/include/c++/7/bits/stl_vector.h ****       }
 356:/usr/include/c++/7/bits/stl_vector.h **** 
 357:/usr/include/c++/7/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 358:/usr/include/c++/7/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 359:/usr/include/c++/7/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 360:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 361:/usr/include/c++/7/bits/stl_vector.h ****       {
 362:/usr/include/c++/7/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 363:/usr/include/c++/7/bits/stl_vector.h **** 	  {
 364:/usr/include/c++/7/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 365:/usr/include/c++/7/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 366:/usr/include/c++/7/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 367:/usr/include/c++/7/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 368:/usr/include/c++/7/bits/stl_vector.h **** 	    __rv.clear();
 369:/usr/include/c++/7/bits/stl_vector.h **** 	  }
 370:/usr/include/c++/7/bits/stl_vector.h ****       }
 371:/usr/include/c++/7/bits/stl_vector.h **** 
 372:/usr/include/c++/7/bits/stl_vector.h ****       /**
 373:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 374:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 375:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 376:/usr/include/c++/7/bits/stl_vector.h ****        *
 377:/usr/include/c++/7/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 378:/usr/include/c++/7/bits/stl_vector.h ****        *  initializer_list @a __l.
 379:/usr/include/c++/7/bits/stl_vector.h ****        *
 380:/usr/include/c++/7/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 381:/usr/include/c++/7/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 382:/usr/include/c++/7/bits/stl_vector.h ****        */
 383:/usr/include/c++/7/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 384:/usr/include/c++/7/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 385:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__a)
 386:/usr/include/c++/7/bits/stl_vector.h ****       {
 387:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 388:/usr/include/c++/7/bits/stl_vector.h **** 			    random_access_iterator_tag());
 389:/usr/include/c++/7/bits/stl_vector.h ****       }
 390:/usr/include/c++/7/bits/stl_vector.h **** #endif
 391:/usr/include/c++/7/bits/stl_vector.h **** 
 392:/usr/include/c++/7/bits/stl_vector.h ****       /**
 393:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 394:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 395:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 396:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 397:/usr/include/c++/7/bits/stl_vector.h ****        *
 398:/usr/include/c++/7/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 399:/usr/include/c++/7/bits/stl_vector.h ****        *  [first,last).
 400:/usr/include/c++/7/bits/stl_vector.h ****        *
 401:/usr/include/c++/7/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 402:/usr/include/c++/7/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 403:/usr/include/c++/7/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 404:/usr/include/c++/7/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 405:/usr/include/c++/7/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 406:/usr/include/c++/7/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 407:/usr/include/c++/7/bits/stl_vector.h ****        */
 408:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 409:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator,
 410:/usr/include/c++/7/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 411:/usr/include/c++/7/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 412:/usr/include/c++/7/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 413:/usr/include/c++/7/bits/stl_vector.h **** 	: _Base(__a)
 414:/usr/include/c++/7/bits/stl_vector.h **** 	{ _M_initialize_dispatch(__first, __last, __false_type()); }
 415:/usr/include/c++/7/bits/stl_vector.h **** #else
 416:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
 417:/usr/include/c++/7/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 418:/usr/include/c++/7/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 419:/usr/include/c++/7/bits/stl_vector.h **** 	: _Base(__a)
 420:/usr/include/c++/7/bits/stl_vector.h **** 	{
 421:/usr/include/c++/7/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 422:/usr/include/c++/7/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 423:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 424:/usr/include/c++/7/bits/stl_vector.h **** 	}
 425:/usr/include/c++/7/bits/stl_vector.h **** #endif
 426:/usr/include/c++/7/bits/stl_vector.h **** 
 427:/usr/include/c++/7/bits/stl_vector.h ****       /**
 428:/usr/include/c++/7/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 429:/usr/include/c++/7/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 430:/usr/include/c++/7/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 431:/usr/include/c++/7/bits/stl_vector.h ****        *  responsibility.
 432:/usr/include/c++/7/bits/stl_vector.h ****        */
 433:/usr/include/c++/7/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 1538              		.loc 4 433 0
 1539              		.cfi_startproc
 1540              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1541              		.cfi_lsda 0x1b,.LLSDA1401
 1542 0000 55       		pushq	%rbp
 1543              		.cfi_def_cfa_offset 16
 1544              		.cfi_offset 6, -16
 1545 0001 4889E5   		movq	%rsp, %rbp
 1546              		.cfi_def_cfa_register 6
 1547 0004 53       		pushq	%rbx
 1548 0005 4883EC18 		subq	$24, %rsp
 1549              		.cfi_offset 3, -24
 1550 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1551              	.LBB14:
 434:/usr/include/c++/7/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 435:/usr/include/c++/7/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 1552              		.loc 4 435 0
 1553 000d 488B45E8 		movq	-24(%rbp), %rax
 1554 0011 4889C7   		movq	%rax, %rdi
 1555 0014 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1555      00
 1556 0019 4889C2   		movq	%rax, %rdx
 434:/usr/include/c++/7/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 1557              		.loc 4 434 0
 1558 001c 488B45E8 		movq	-24(%rbp), %rax
 1559 0020 488B4808 		movq	8(%rax), %rcx
 1560 0024 488B45E8 		movq	-24(%rbp), %rax
 1561 0028 488B00   		movq	(%rax), %rax
 1562 002b 4889CE   		movq	%rcx, %rsi
 1563 002e 4889C7   		movq	%rax, %rdi
 1564              	.LEHB34:
 1565 0031 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1565      00
 1566              	.LEHE34:
 1567              		.loc 4 435 0
 1568 0036 488B45E8 		movq	-24(%rbp), %rax
 1569 003a 4889C7   		movq	%rax, %rdi
 1570              	.LEHB35:
 1571 003d E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1571      00
 1572              	.LEHE35:
 1573              	.LBE14:
 1574 0042 EB1A     		jmp	.L77
 1575              	.L76:
 1576 0044 4889C3   		movq	%rax, %rbx
 1577              	.LBB15:
 1578 0047 488B45E8 		movq	-24(%rbp), %rax
 1579 004b 4889C7   		movq	%rax, %rdi
 1580 004e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1580      00
 1581 0053 4889D8   		movq	%rbx, %rax
 1582 0056 4889C7   		movq	%rax, %rdi
 1583              	.LEHB36:
 1584 0059 E8000000 		call	_Unwind_Resume@PLT
 1584      00
 1585              	.LEHE36:
 1586              	.L77:
 1587              	.LBE15:
 1588 005e 4883C418 		addq	$24, %rsp
 1589 0062 5B       		popq	%rbx
 1590 0063 5D       		popq	%rbp
 1591              		.cfi_def_cfa 7, 8
 1592 0064 C3       		ret
 1593              		.cfi_endproc
 1594              	.LFE1401:
 1595              		.section	.gcc_except_table
 1596              	.LLSDA1401:
 1597 00c7 FF       		.byte	0xff
 1598 00c8 FF       		.byte	0xff
 1599 00c9 01       		.byte	0x1
 1600 00ca 0C       		.uleb128 .LLSDACSE1401-.LLSDACSB1401
 1601              	.LLSDACSB1401:
 1602 00cb 31       		.uleb128 .LEHB34-.LFB1401
 1603 00cc 05       		.uleb128 .LEHE34-.LEHB34
 1604 00cd 44       		.uleb128 .L76-.LFB1401
 1605 00ce 00       		.uleb128 0
 1606 00cf 3D       		.uleb128 .LEHB35-.LFB1401
 1607 00d0 05       		.uleb128 .LEHE35-.LEHB35
 1608 00d1 00       		.uleb128 0
 1609 00d2 00       		.uleb128 0
 1610 00d3 59       		.uleb128 .LEHB36-.LFB1401
 1611 00d4 05       		.uleb128 .LEHE36-.LEHB36
 1612 00d5 00       		.uleb128 0
 1613 00d6 00       		.uleb128 0
 1614              	.LLSDACSE1401:
 1615              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1617              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 1618              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1619              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNKS
 1620              		.align 2
 1621              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 1623              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 1624              	.LFB1403:
 436:/usr/include/c++/7/bits/stl_vector.h **** 
 437:/usr/include/c++/7/bits/stl_vector.h ****       /**
 438:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 439:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 440:/usr/include/c++/7/bits/stl_vector.h ****        *
 441:/usr/include/c++/7/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 442:/usr/include/c++/7/bits/stl_vector.h ****        *  @a __x will not be copied.
 443:/usr/include/c++/7/bits/stl_vector.h ****        *
 444:/usr/include/c++/7/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 445:/usr/include/c++/7/bits/stl_vector.h ****        */
 446:/usr/include/c++/7/bits/stl_vector.h ****       vector&
 447:/usr/include/c++/7/bits/stl_vector.h ****       operator=(const vector& __x);
 448:/usr/include/c++/7/bits/stl_vector.h **** 
 449:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 450:/usr/include/c++/7/bits/stl_vector.h ****       /**
 451:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 452:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 453:/usr/include/c++/7/bits/stl_vector.h ****        *
 454:/usr/include/c++/7/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 455:/usr/include/c++/7/bits/stl_vector.h ****        *  if the allocators permit it).
 456:/usr/include/c++/7/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 457:/usr/include/c++/7/bits/stl_vector.h ****        *
 458:/usr/include/c++/7/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 459:/usr/include/c++/7/bits/stl_vector.h ****        */
 460:/usr/include/c++/7/bits/stl_vector.h ****       vector&
 461:/usr/include/c++/7/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 462:/usr/include/c++/7/bits/stl_vector.h ****       {
 463:/usr/include/c++/7/bits/stl_vector.h **** 	constexpr bool __move_storage =
 464:/usr/include/c++/7/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 465:/usr/include/c++/7/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 466:/usr/include/c++/7/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 467:/usr/include/c++/7/bits/stl_vector.h **** 	return *this;
 468:/usr/include/c++/7/bits/stl_vector.h ****       }
 469:/usr/include/c++/7/bits/stl_vector.h **** 
 470:/usr/include/c++/7/bits/stl_vector.h ****       /**
 471:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 472:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 473:/usr/include/c++/7/bits/stl_vector.h ****        *
 474:/usr/include/c++/7/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 475:/usr/include/c++/7/bits/stl_vector.h ****        *  initializer list @a __l.
 476:/usr/include/c++/7/bits/stl_vector.h ****        *
 477:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 478:/usr/include/c++/7/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 479:/usr/include/c++/7/bits/stl_vector.h ****        *  of elements assigned.
 480:/usr/include/c++/7/bits/stl_vector.h ****        */
 481:/usr/include/c++/7/bits/stl_vector.h ****       vector&
 482:/usr/include/c++/7/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 483:/usr/include/c++/7/bits/stl_vector.h ****       {
 484:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 485:/usr/include/c++/7/bits/stl_vector.h **** 			    random_access_iterator_tag());
 486:/usr/include/c++/7/bits/stl_vector.h **** 	return *this;
 487:/usr/include/c++/7/bits/stl_vector.h ****       }
 488:/usr/include/c++/7/bits/stl_vector.h **** #endif
 489:/usr/include/c++/7/bits/stl_vector.h **** 
 490:/usr/include/c++/7/bits/stl_vector.h ****       /**
 491:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 492:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 493:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 494:/usr/include/c++/7/bits/stl_vector.h ****        *
 495:/usr/include/c++/7/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 496:/usr/include/c++/7/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 497:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 498:/usr/include/c++/7/bits/stl_vector.h ****        *  the number of elements assigned.
 499:/usr/include/c++/7/bits/stl_vector.h ****        */
 500:/usr/include/c++/7/bits/stl_vector.h ****       void
 501:/usr/include/c++/7/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 502:/usr/include/c++/7/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 503:/usr/include/c++/7/bits/stl_vector.h **** 
 504:/usr/include/c++/7/bits/stl_vector.h ****       /**
 505:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 506:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 507:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 508:/usr/include/c++/7/bits/stl_vector.h ****        *
 509:/usr/include/c++/7/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 510:/usr/include/c++/7/bits/stl_vector.h ****        *  range [__first,__last).
 511:/usr/include/c++/7/bits/stl_vector.h ****        *
 512:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 513:/usr/include/c++/7/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 514:/usr/include/c++/7/bits/stl_vector.h ****        *  of elements assigned.
 515:/usr/include/c++/7/bits/stl_vector.h ****        */
 516:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 517:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator,
 518:/usr/include/c++/7/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 519:/usr/include/c++/7/bits/stl_vector.h **** 	void
 520:/usr/include/c++/7/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 521:/usr/include/c++/7/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 522:/usr/include/c++/7/bits/stl_vector.h **** #else
 523:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
 524:/usr/include/c++/7/bits/stl_vector.h **** 	void
 525:/usr/include/c++/7/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 526:/usr/include/c++/7/bits/stl_vector.h **** 	{
 527:/usr/include/c++/7/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 528:/usr/include/c++/7/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 529:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 530:/usr/include/c++/7/bits/stl_vector.h **** 	}
 531:/usr/include/c++/7/bits/stl_vector.h **** #endif
 532:/usr/include/c++/7/bits/stl_vector.h **** 
 533:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 534:/usr/include/c++/7/bits/stl_vector.h ****       /**
 535:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 536:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 537:/usr/include/c++/7/bits/stl_vector.h ****        *
 538:/usr/include/c++/7/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 539:/usr/include/c++/7/bits/stl_vector.h ****        *  initializer list @a __l.
 540:/usr/include/c++/7/bits/stl_vector.h ****        *
 541:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 542:/usr/include/c++/7/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 543:/usr/include/c++/7/bits/stl_vector.h ****        *  of elements assigned.
 544:/usr/include/c++/7/bits/stl_vector.h ****        */
 545:/usr/include/c++/7/bits/stl_vector.h ****       void
 546:/usr/include/c++/7/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 547:/usr/include/c++/7/bits/stl_vector.h ****       {
 548:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 549:/usr/include/c++/7/bits/stl_vector.h **** 			    random_access_iterator_tag());
 550:/usr/include/c++/7/bits/stl_vector.h ****       }
 551:/usr/include/c++/7/bits/stl_vector.h **** #endif
 552:/usr/include/c++/7/bits/stl_vector.h **** 
 553:/usr/include/c++/7/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 554:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::get_allocator;
 555:/usr/include/c++/7/bits/stl_vector.h **** 
 556:/usr/include/c++/7/bits/stl_vector.h ****       // iterators
 557:/usr/include/c++/7/bits/stl_vector.h ****       /**
 558:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 559:/usr/include/c++/7/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 560:/usr/include/c++/7/bits/stl_vector.h ****        *  element order.
 561:/usr/include/c++/7/bits/stl_vector.h ****        */
 562:/usr/include/c++/7/bits/stl_vector.h ****       iterator
 563:/usr/include/c++/7/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 564:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 565:/usr/include/c++/7/bits/stl_vector.h **** 
 566:/usr/include/c++/7/bits/stl_vector.h ****       /**
 567:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 568:/usr/include/c++/7/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 569:/usr/include/c++/7/bits/stl_vector.h ****        *  element order.
 570:/usr/include/c++/7/bits/stl_vector.h ****        */
 571:/usr/include/c++/7/bits/stl_vector.h ****       const_iterator
 572:/usr/include/c++/7/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 1625              		.loc 4 572 0
 1626              		.cfi_startproc
 1627 0000 55       		pushq	%rbp
 1628              		.cfi_def_cfa_offset 16
 1629              		.cfi_offset 6, -16
 1630 0001 4889E5   		movq	%rsp, %rbp
 1631              		.cfi_def_cfa_register 6
 1632 0004 4883EC30 		subq	$48, %rsp
 1633 0008 48897DD8 		movq	%rdi, -40(%rbp)
 1634              		.loc 4 572 0
 1635 000c 64488B04 		movq	%fs:40, %rax
 1635      25280000 
 1635      00
 1636 0015 488945F8 		movq	%rax, -8(%rbp)
 1637 0019 31C0     		xorl	%eax, %eax
 573:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1638              		.loc 4 573 0
 1639 001b 488B45D8 		movq	-40(%rbp), %rax
 1640 001f 488B00   		movq	(%rax), %rax
 1641 0022 488945E8 		movq	%rax, -24(%rbp)
 1642 0026 488D55E8 		leaq	-24(%rbp), %rdx
 1643 002a 488D45F0 		leaq	-16(%rbp), %rax
 1644 002e 4889D6   		movq	%rdx, %rsi
 1645 0031 4889C7   		movq	%rax, %rdi
 1646 0034 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1646      00
 1647 0039 488B45F0 		movq	-16(%rbp), %rax
 1648 003d 488B4DF8 		movq	-8(%rbp), %rcx
 1649 0041 6448330C 		xorq	%fs:40, %rcx
 1649      25280000 
 1649      00
 1650 004a 7405     		je	.L80
 1651 004c E8000000 		call	__stack_chk_fail@PLT
 1651      00
 1652              	.L80:
 1653 0051 C9       		leave
 1654              		.cfi_def_cfa 7, 8
 1655 0052 C3       		ret
 1656              		.cfi_endproc
 1657              	.LFE1403:
 1659              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6
 1660              		.align 2
 1661              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1663              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1664              	.LFB1404:
 574:/usr/include/c++/7/bits/stl_vector.h **** 
 575:/usr/include/c++/7/bits/stl_vector.h ****       /**
 576:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 577:/usr/include/c++/7/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 578:/usr/include/c++/7/bits/stl_vector.h ****        *  element order.
 579:/usr/include/c++/7/bits/stl_vector.h ****        */
 580:/usr/include/c++/7/bits/stl_vector.h ****       iterator
 581:/usr/include/c++/7/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 582:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 583:/usr/include/c++/7/bits/stl_vector.h **** 
 584:/usr/include/c++/7/bits/stl_vector.h ****       /**
 585:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 586:/usr/include/c++/7/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 587:/usr/include/c++/7/bits/stl_vector.h ****        *  ordinary element order.
 588:/usr/include/c++/7/bits/stl_vector.h ****        */
 589:/usr/include/c++/7/bits/stl_vector.h ****       const_iterator
 590:/usr/include/c++/7/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 1665              		.loc 4 590 0
 1666              		.cfi_startproc
 1667 0000 55       		pushq	%rbp
 1668              		.cfi_def_cfa_offset 16
 1669              		.cfi_offset 6, -16
 1670 0001 4889E5   		movq	%rsp, %rbp
 1671              		.cfi_def_cfa_register 6
 1672 0004 4883EC30 		subq	$48, %rsp
 1673 0008 48897DD8 		movq	%rdi, -40(%rbp)
 1674              		.loc 4 590 0
 1675 000c 64488B04 		movq	%fs:40, %rax
 1675      25280000 
 1675      00
 1676 0015 488945F8 		movq	%rax, -8(%rbp)
 1677 0019 31C0     		xorl	%eax, %eax
 591:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1678              		.loc 4 591 0
 1679 001b 488B45D8 		movq	-40(%rbp), %rax
 1680 001f 488B4008 		movq	8(%rax), %rax
 1681 0023 488945E8 		movq	%rax, -24(%rbp)
 1682 0027 488D55E8 		leaq	-24(%rbp), %rdx
 1683 002b 488D45F0 		leaq	-16(%rbp), %rax
 1684 002f 4889D6   		movq	%rdx, %rsi
 1685 0032 4889C7   		movq	%rax, %rdi
 1686 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1686      00
 1687 003a 488B45F0 		movq	-16(%rbp), %rax
 1688 003e 488B4DF8 		movq	-8(%rbp), %rcx
 1689 0042 6448330C 		xorq	%fs:40, %rcx
 1689      25280000 
 1689      00
 1690 004b 7405     		je	.L83
 1691 004d E8000000 		call	__stack_chk_fail@PLT
 1691      00
 1692              	.L83:
 1693 0052 C9       		leave
 1694              		.cfi_def_cfa 7, 8
 1695 0053 C3       		ret
 1696              		.cfi_endproc
 1697              	.LFE1404:
 1699              		.section	.text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__n
 1700              		.weak	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_ite
 1702              	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT
 1703              	.LFB1405:
 1704              		.file 5 "/usr/include/c++/7/bits/stl_iterator.h"
   1:/usr/include/c++/7/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_iterator.h **** 
   3:/usr/include/c++/7/bits/stl_iterator.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_iterator.h **** //
   5:/usr/include/c++/7/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_iterator.h **** 
  11:/usr/include/c++/7/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_iterator.h **** 
  16:/usr/include/c++/7/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_iterator.h **** 
  20:/usr/include/c++/7/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_iterator.h **** 
  25:/usr/include/c++/7/bits/stl_iterator.h **** /*
  26:/usr/include/c++/7/bits/stl_iterator.h ****  *
  27:/usr/include/c++/7/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_iterator.h ****  *
  30:/usr/include/c++/7/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_iterator.h ****  *
  38:/usr/include/c++/7/bits/stl_iterator.h ****  *
  39:/usr/include/c++/7/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/7/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_iterator.h ****  *
  42:/usr/include/c++/7/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_iterator.h ****  */
  50:/usr/include/c++/7/bits/stl_iterator.h **** 
  51:/usr/include/c++/7/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/7/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/7/bits/stl_iterator.h ****  *
  55:/usr/include/c++/7/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/7/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/7/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/7/bits/stl_iterator.h ****  */
  59:/usr/include/c++/7/bits/stl_iterator.h **** 
  60:/usr/include/c++/7/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/7/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/7/bits/stl_iterator.h **** 
  63:/usr/include/c++/7/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/7/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/7/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/7/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/7/bits/stl_iterator.h **** 
  68:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus > 201402L
  69:/usr/include/c++/7/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201603
  70:/usr/include/c++/7/bits/stl_iterator.h **** #endif
  71:/usr/include/c++/7/bits/stl_iterator.h **** 
  72:/usr/include/c++/7/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:/usr/include/c++/7/bits/stl_iterator.h **** {
  74:/usr/include/c++/7/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:/usr/include/c++/7/bits/stl_iterator.h **** 
  76:/usr/include/c++/7/bits/stl_iterator.h ****   /**
  77:/usr/include/c++/7/bits/stl_iterator.h ****    * @addtogroup iterators
  78:/usr/include/c++/7/bits/stl_iterator.h ****    * @{
  79:/usr/include/c++/7/bits/stl_iterator.h ****    */
  80:/usr/include/c++/7/bits/stl_iterator.h **** 
  81:/usr/include/c++/7/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  82:/usr/include/c++/7/bits/stl_iterator.h ****   /**
  83:/usr/include/c++/7/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  84:/usr/include/c++/7/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  85:/usr/include/c++/7/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  86:/usr/include/c++/7/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  87:/usr/include/c++/7/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  88:/usr/include/c++/7/bits/stl_iterator.h ****    *  @code
  89:/usr/include/c++/7/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  90:/usr/include/c++/7/bits/stl_iterator.h ****    *  @endcode
  91:/usr/include/c++/7/bits/stl_iterator.h ****    *
  92:/usr/include/c++/7/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  93:/usr/include/c++/7/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  94:/usr/include/c++/7/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  95:/usr/include/c++/7/bits/stl_iterator.h ****    *
  96:/usr/include/c++/7/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  97:/usr/include/c++/7/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  98:/usr/include/c++/7/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  99:/usr/include/c++/7/bits/stl_iterator.h ****   */
 100:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 101:/usr/include/c++/7/bits/stl_iterator.h ****     class reverse_iterator
 102:/usr/include/c++/7/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 103:/usr/include/c++/7/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 104:/usr/include/c++/7/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 105:/usr/include/c++/7/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 106:/usr/include/c++/7/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 107:/usr/include/c++/7/bits/stl_iterator.h ****     {
 108:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 109:/usr/include/c++/7/bits/stl_iterator.h ****       _Iterator current;
 110:/usr/include/c++/7/bits/stl_iterator.h **** 
 111:/usr/include/c++/7/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 112:/usr/include/c++/7/bits/stl_iterator.h **** 
 113:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 114:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 115:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 116:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 117:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 118:/usr/include/c++/7/bits/stl_iterator.h **** 
 119:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 120:/usr/include/c++/7/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 121:/usr/include/c++/7/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 122:/usr/include/c++/7/bits/stl_iterator.h ****       */
 123:/usr/include/c++/7/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 124:/usr/include/c++/7/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 125:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 126:/usr/include/c++/7/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 127:/usr/include/c++/7/bits/stl_iterator.h **** 
 128:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 129:/usr/include/c++/7/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 130:/usr/include/c++/7/bits/stl_iterator.h ****       */
 131:/usr/include/c++/7/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 132:/usr/include/c++/7/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 133:/usr/include/c++/7/bits/stl_iterator.h **** 
 134:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 135:/usr/include/c++/7/bits/stl_iterator.h ****        *  The copy constructor is normal.
 136:/usr/include/c++/7/bits/stl_iterator.h ****       */
 137:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 138:/usr/include/c++/7/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 139:/usr/include/c++/7/bits/stl_iterator.h ****       : current(__x.current) { }
 140:/usr/include/c++/7/bits/stl_iterator.h **** 
 141:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 142:/usr/include/c++/7/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 143:/usr/include/c++/7/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 144:/usr/include/c++/7/bits/stl_iterator.h ****       */
 145:/usr/include/c++/7/bits/stl_iterator.h ****       template<typename _Iter>
 146:/usr/include/c++/7/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 147:/usr/include/c++/7/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 148:/usr/include/c++/7/bits/stl_iterator.h **** 	: current(__x.base()) { }
 149:/usr/include/c++/7/bits/stl_iterator.h **** 
 150:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 152:/usr/include/c++/7/bits/stl_iterator.h ****       */
 153:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 154:/usr/include/c++/7/bits/stl_iterator.h ****       base() const
 155:/usr/include/c++/7/bits/stl_iterator.h ****       { return current; }
 156:/usr/include/c++/7/bits/stl_iterator.h **** 
 157:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 158:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 159:/usr/include/c++/7/bits/stl_iterator.h ****        *
 160:/usr/include/c++/7/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 161:/usr/include/c++/7/bits/stl_iterator.h ****        *
 162:/usr/include/c++/7/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 163:/usr/include/c++/7/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 164:/usr/include/c++/7/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 165:/usr/include/c++/7/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 166:/usr/include/c++/7/bits/stl_iterator.h ****       */
 167:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 168:/usr/include/c++/7/bits/stl_iterator.h ****       operator*() const
 169:/usr/include/c++/7/bits/stl_iterator.h ****       {
 170:/usr/include/c++/7/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 171:/usr/include/c++/7/bits/stl_iterator.h **** 	return *--__tmp;
 172:/usr/include/c++/7/bits/stl_iterator.h ****       }
 173:/usr/include/c++/7/bits/stl_iterator.h **** 
 174:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 175:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 176:/usr/include/c++/7/bits/stl_iterator.h ****        *
 177:/usr/include/c++/7/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 178:/usr/include/c++/7/bits/stl_iterator.h ****       */
 179:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 180:/usr/include/c++/7/bits/stl_iterator.h ****       operator->() const
 181:/usr/include/c++/7/bits/stl_iterator.h ****       { return &(operator*()); }
 182:/usr/include/c++/7/bits/stl_iterator.h **** 
 183:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 184:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  @c *this
 185:/usr/include/c++/7/bits/stl_iterator.h ****        *
 186:/usr/include/c++/7/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 187:/usr/include/c++/7/bits/stl_iterator.h ****       */
 188:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 189:/usr/include/c++/7/bits/stl_iterator.h ****       operator++()
 190:/usr/include/c++/7/bits/stl_iterator.h ****       {
 191:/usr/include/c++/7/bits/stl_iterator.h **** 	--current;
 192:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 193:/usr/include/c++/7/bits/stl_iterator.h ****       }
 194:/usr/include/c++/7/bits/stl_iterator.h **** 
 195:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 196:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 197:/usr/include/c++/7/bits/stl_iterator.h ****        *
 198:/usr/include/c++/7/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 199:/usr/include/c++/7/bits/stl_iterator.h ****       */
 200:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 201:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int)
 202:/usr/include/c++/7/bits/stl_iterator.h ****       {
 203:/usr/include/c++/7/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 204:/usr/include/c++/7/bits/stl_iterator.h **** 	--current;
 205:/usr/include/c++/7/bits/stl_iterator.h **** 	return __tmp;
 206:/usr/include/c++/7/bits/stl_iterator.h ****       }
 207:/usr/include/c++/7/bits/stl_iterator.h **** 
 208:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 209:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  @c *this
 210:/usr/include/c++/7/bits/stl_iterator.h ****        *
 211:/usr/include/c++/7/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 212:/usr/include/c++/7/bits/stl_iterator.h ****       */
 213:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 214:/usr/include/c++/7/bits/stl_iterator.h ****       operator--()
 215:/usr/include/c++/7/bits/stl_iterator.h ****       {
 216:/usr/include/c++/7/bits/stl_iterator.h **** 	++current;
 217:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 218:/usr/include/c++/7/bits/stl_iterator.h ****       }
 219:/usr/include/c++/7/bits/stl_iterator.h **** 
 220:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 221:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 222:/usr/include/c++/7/bits/stl_iterator.h ****        *
 223:/usr/include/c++/7/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 224:/usr/include/c++/7/bits/stl_iterator.h ****       */
 225:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 226:/usr/include/c++/7/bits/stl_iterator.h ****       operator--(int)
 227:/usr/include/c++/7/bits/stl_iterator.h ****       {
 228:/usr/include/c++/7/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 229:/usr/include/c++/7/bits/stl_iterator.h **** 	++current;
 230:/usr/include/c++/7/bits/stl_iterator.h **** 	return __tmp;
 231:/usr/include/c++/7/bits/stl_iterator.h ****       }
 232:/usr/include/c++/7/bits/stl_iterator.h **** 
 233:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 234:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 235:/usr/include/c++/7/bits/stl_iterator.h ****        *
 236:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 237:/usr/include/c++/7/bits/stl_iterator.h ****       */
 238:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 239:/usr/include/c++/7/bits/stl_iterator.h ****       operator+(difference_type __n) const
 240:/usr/include/c++/7/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 241:/usr/include/c++/7/bits/stl_iterator.h **** 
 242:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 243:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  *this
 244:/usr/include/c++/7/bits/stl_iterator.h ****        *
 245:/usr/include/c++/7/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 246:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 247:/usr/include/c++/7/bits/stl_iterator.h ****       */
 248:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 249:/usr/include/c++/7/bits/stl_iterator.h ****       operator+=(difference_type __n)
 250:/usr/include/c++/7/bits/stl_iterator.h ****       {
 251:/usr/include/c++/7/bits/stl_iterator.h **** 	current -= __n;
 252:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 253:/usr/include/c++/7/bits/stl_iterator.h ****       }
 254:/usr/include/c++/7/bits/stl_iterator.h **** 
 255:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 256:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 257:/usr/include/c++/7/bits/stl_iterator.h ****        *
 258:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 259:/usr/include/c++/7/bits/stl_iterator.h ****       */
 260:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 261:/usr/include/c++/7/bits/stl_iterator.h ****       operator-(difference_type __n) const
 262:/usr/include/c++/7/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 263:/usr/include/c++/7/bits/stl_iterator.h **** 
 264:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 265:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  *this
 266:/usr/include/c++/7/bits/stl_iterator.h ****        *
 267:/usr/include/c++/7/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 268:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 269:/usr/include/c++/7/bits/stl_iterator.h ****       */
 270:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 271:/usr/include/c++/7/bits/stl_iterator.h ****       operator-=(difference_type __n)
 272:/usr/include/c++/7/bits/stl_iterator.h ****       {
 273:/usr/include/c++/7/bits/stl_iterator.h **** 	current += __n;
 274:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 275:/usr/include/c++/7/bits/stl_iterator.h ****       }
 276:/usr/include/c++/7/bits/stl_iterator.h **** 
 277:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 278:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 279:/usr/include/c++/7/bits/stl_iterator.h ****        *
 280:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 281:/usr/include/c++/7/bits/stl_iterator.h ****       */
 282:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 283:/usr/include/c++/7/bits/stl_iterator.h ****       operator[](difference_type __n) const
 284:/usr/include/c++/7/bits/stl_iterator.h ****       { return *(*this + __n); }
 285:/usr/include/c++/7/bits/stl_iterator.h ****     };
 286:/usr/include/c++/7/bits/stl_iterator.h **** 
 287:/usr/include/c++/7/bits/stl_iterator.h ****   //@{
 288:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 289:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 290:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 291:/usr/include/c++/7/bits/stl_iterator.h ****    *  @return  A simple bool.
 292:/usr/include/c++/7/bits/stl_iterator.h ****    *
 293:/usr/include/c++/7/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 294:/usr/include/c++/7/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 295:/usr/include/c++/7/bits/stl_iterator.h ****    *
 296:/usr/include/c++/7/bits/stl_iterator.h ****   */
 297:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 298:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 299:/usr/include/c++/7/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 300:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 301:/usr/include/c++/7/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 302:/usr/include/c++/7/bits/stl_iterator.h **** 
 303:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 304:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 305:/usr/include/c++/7/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 306:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 307:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 308:/usr/include/c++/7/bits/stl_iterator.h **** 
 309:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 310:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 311:/usr/include/c++/7/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 312:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 313:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__x == __y); }
 314:/usr/include/c++/7/bits/stl_iterator.h **** 
 315:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 316:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 317:/usr/include/c++/7/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 318:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 319:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y < __x; }
 320:/usr/include/c++/7/bits/stl_iterator.h **** 
 321:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 322:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 323:/usr/include/c++/7/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 324:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 325:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__y < __x); }
 326:/usr/include/c++/7/bits/stl_iterator.h **** 
 327:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 328:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 329:/usr/include/c++/7/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 330:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 331:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__x < __y); }
 332:/usr/include/c++/7/bits/stl_iterator.h **** 
 333:/usr/include/c++/7/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 334:/usr/include/c++/7/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 335:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 336:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 337:/usr/include/c++/7/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 338:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 339:/usr/include/c++/7/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 340:/usr/include/c++/7/bits/stl_iterator.h **** 
 341:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 342:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 343:/usr/include/c++/7/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 344:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 345:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 346:/usr/include/c++/7/bits/stl_iterator.h **** 
 347:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 348:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 349:/usr/include/c++/7/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 350:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 351:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__x == __y); }
 352:/usr/include/c++/7/bits/stl_iterator.h **** 
 353:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 354:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 355:/usr/include/c++/7/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 356:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 357:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y < __x; }
 358:/usr/include/c++/7/bits/stl_iterator.h **** 
 359:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 360:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 361:/usr/include/c++/7/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 362:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 363:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__y < __x); }
 364:/usr/include/c++/7/bits/stl_iterator.h **** 
 365:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 366:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 367:/usr/include/c++/7/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 368:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 369:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__x < __y); }
 370:/usr/include/c++/7/bits/stl_iterator.h ****   //@}
 371:/usr/include/c++/7/bits/stl_iterator.h **** 
 372:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus < 201103L
 373:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 374:/usr/include/c++/7/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 375:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 376:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 377:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 378:/usr/include/c++/7/bits/stl_iterator.h **** 
 379:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 380:/usr/include/c++/7/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 381:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 382:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 383:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 384:/usr/include/c++/7/bits/stl_iterator.h **** #else
 385:/usr/include/c++/7/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 386:/usr/include/c++/7/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 387:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 388:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 389:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 390:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 391:/usr/include/c++/7/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 392:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 393:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 394:/usr/include/c++/7/bits/stl_iterator.h **** 
 395:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 396:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 397:/usr/include/c++/7/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 398:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 399:/usr/include/c++/7/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 400:/usr/include/c++/7/bits/stl_iterator.h **** 
 401:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 402:/usr/include/c++/7/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++03 mode too.
 403:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 404:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 405:/usr/include/c++/7/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 406:/usr/include/c++/7/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 407:/usr/include/c++/7/bits/stl_iterator.h **** 
 408:/usr/include/c++/7/bits/stl_iterator.h **** # if __cplusplus > 201103L
 409:/usr/include/c++/7/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 410:/usr/include/c++/7/bits/stl_iterator.h **** 
 411:/usr/include/c++/7/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 412:/usr/include/c++/7/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 413:/usr/include/c++/7/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 414:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 415:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 416:/usr/include/c++/7/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 417:/usr/include/c++/7/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 418:/usr/include/c++/7/bits/stl_iterator.h **** # endif
 419:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 420:/usr/include/c++/7/bits/stl_iterator.h **** 
 421:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 422:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 423:/usr/include/c++/7/bits/stl_iterator.h ****     auto
 424:/usr/include/c++/7/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 425:/usr/include/c++/7/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 426:/usr/include/c++/7/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 427:/usr/include/c++/7/bits/stl_iterator.h **** 
 428:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 429:/usr/include/c++/7/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 430:/usr/include/c++/7/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 431:/usr/include/c++/7/bits/stl_iterator.h ****     { };
 432:/usr/include/c++/7/bits/stl_iterator.h **** 
 433:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 434:/usr/include/c++/7/bits/stl_iterator.h ****     auto
 435:/usr/include/c++/7/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 436:/usr/include/c++/7/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 437:/usr/include/c++/7/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 438:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 439:/usr/include/c++/7/bits/stl_iterator.h **** 
 440:/usr/include/c++/7/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 441:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 442:/usr/include/c++/7/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 443:/usr/include/c++/7/bits/stl_iterator.h ****    *
 444:/usr/include/c++/7/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 445:/usr/include/c++/7/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 446:/usr/include/c++/7/bits/stl_iterator.h ****    *  push_back.
 447:/usr/include/c++/7/bits/stl_iterator.h ****    *
 448:/usr/include/c++/7/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 449:/usr/include/c++/7/bits/stl_iterator.h ****    *  save typing.
 450:/usr/include/c++/7/bits/stl_iterator.h ****   */
 451:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 452:/usr/include/c++/7/bits/stl_iterator.h ****     class back_insert_iterator
 453:/usr/include/c++/7/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 454:/usr/include/c++/7/bits/stl_iterator.h ****     {
 455:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 456:/usr/include/c++/7/bits/stl_iterator.h ****       _Container* container;
 457:/usr/include/c++/7/bits/stl_iterator.h **** 
 458:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 459:/usr/include/c++/7/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 460:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Container          container_type;
 461:/usr/include/c++/7/bits/stl_iterator.h **** 
 462:/usr/include/c++/7/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 463:/usr/include/c++/7/bits/stl_iterator.h ****       explicit
 464:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 465:/usr/include/c++/7/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 466:/usr/include/c++/7/bits/stl_iterator.h **** 
 467:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 468:/usr/include/c++/7/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 469:/usr/include/c++/7/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 470:/usr/include/c++/7/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 471:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 472:/usr/include/c++/7/bits/stl_iterator.h ****        *
 473:/usr/include/c++/7/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 474:/usr/include/c++/7/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 475:/usr/include/c++/7/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 476:/usr/include/c++/7/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 477:/usr/include/c++/7/bits/stl_iterator.h ****       */
 478:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus < 201103L
 479:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 480:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 481:/usr/include/c++/7/bits/stl_iterator.h ****       {
 482:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_back(__value);
 483:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 484:/usr/include/c++/7/bits/stl_iterator.h ****       }
 485:/usr/include/c++/7/bits/stl_iterator.h **** #else
 486:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 487:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 488:/usr/include/c++/7/bits/stl_iterator.h ****       {
 489:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_back(__value);
 490:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 491:/usr/include/c++/7/bits/stl_iterator.h ****       }
 492:/usr/include/c++/7/bits/stl_iterator.h **** 
 493:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 494:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 495:/usr/include/c++/7/bits/stl_iterator.h ****       {
 496:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 497:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 498:/usr/include/c++/7/bits/stl_iterator.h ****       }
 499:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 500:/usr/include/c++/7/bits/stl_iterator.h **** 
 501:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.
 502:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 503:/usr/include/c++/7/bits/stl_iterator.h ****       operator*()
 504:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 505:/usr/include/c++/7/bits/stl_iterator.h **** 
 506:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 507:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 508:/usr/include/c++/7/bits/stl_iterator.h ****       operator++()
 509:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 510:/usr/include/c++/7/bits/stl_iterator.h **** 
 511:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 512:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator
 513:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int)
 514:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 515:/usr/include/c++/7/bits/stl_iterator.h ****     };
 516:/usr/include/c++/7/bits/stl_iterator.h **** 
 517:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 518:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 519:/usr/include/c++/7/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 520:/usr/include/c++/7/bits/stl_iterator.h ****    *
 521:/usr/include/c++/7/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 522:/usr/include/c++/7/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 523:/usr/include/c++/7/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 524:/usr/include/c++/7/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 525:/usr/include/c++/7/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 526:/usr/include/c++/7/bits/stl_iterator.h ****    *  types for you.
 527:/usr/include/c++/7/bits/stl_iterator.h ****   */
 528:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 529:/usr/include/c++/7/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 530:/usr/include/c++/7/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 531:/usr/include/c++/7/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 532:/usr/include/c++/7/bits/stl_iterator.h **** 
 533:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 534:/usr/include/c++/7/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 535:/usr/include/c++/7/bits/stl_iterator.h ****    *
 536:/usr/include/c++/7/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 537:/usr/include/c++/7/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 538:/usr/include/c++/7/bits/stl_iterator.h ****    *  push_front.
 539:/usr/include/c++/7/bits/stl_iterator.h ****    *
 540:/usr/include/c++/7/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 541:/usr/include/c++/7/bits/stl_iterator.h ****    *  save typing.
 542:/usr/include/c++/7/bits/stl_iterator.h ****   */
 543:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 544:/usr/include/c++/7/bits/stl_iterator.h ****     class front_insert_iterator
 545:/usr/include/c++/7/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 546:/usr/include/c++/7/bits/stl_iterator.h ****     {
 547:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 548:/usr/include/c++/7/bits/stl_iterator.h ****       _Container* container;
 549:/usr/include/c++/7/bits/stl_iterator.h **** 
 550:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 551:/usr/include/c++/7/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 552:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Container          container_type;
 553:/usr/include/c++/7/bits/stl_iterator.h **** 
 554:/usr/include/c++/7/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 555:/usr/include/c++/7/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x)
 556:/usr/include/c++/7/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 557:/usr/include/c++/7/bits/stl_iterator.h **** 
 558:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 559:/usr/include/c++/7/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 560:/usr/include/c++/7/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 561:/usr/include/c++/7/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 562:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 563:/usr/include/c++/7/bits/stl_iterator.h ****        *
 564:/usr/include/c++/7/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 565:/usr/include/c++/7/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 566:/usr/include/c++/7/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 567:/usr/include/c++/7/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 568:/usr/include/c++/7/bits/stl_iterator.h ****       */
 569:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus < 201103L
 570:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 571:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 572:/usr/include/c++/7/bits/stl_iterator.h ****       {
 573:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_front(__value);
 574:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 575:/usr/include/c++/7/bits/stl_iterator.h ****       }
 576:/usr/include/c++/7/bits/stl_iterator.h **** #else
 577:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 578:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 579:/usr/include/c++/7/bits/stl_iterator.h ****       {
 580:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_front(__value);
 581:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 582:/usr/include/c++/7/bits/stl_iterator.h ****       }
 583:/usr/include/c++/7/bits/stl_iterator.h **** 
 584:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 585:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 586:/usr/include/c++/7/bits/stl_iterator.h ****       {
 587:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 588:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 589:/usr/include/c++/7/bits/stl_iterator.h ****       }
 590:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 591:/usr/include/c++/7/bits/stl_iterator.h **** 
 592:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.
 593:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 594:/usr/include/c++/7/bits/stl_iterator.h ****       operator*()
 595:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 596:/usr/include/c++/7/bits/stl_iterator.h **** 
 597:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 598:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 599:/usr/include/c++/7/bits/stl_iterator.h ****       operator++()
 600:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 601:/usr/include/c++/7/bits/stl_iterator.h **** 
 602:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 603:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator
 604:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int)
 605:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 606:/usr/include/c++/7/bits/stl_iterator.h ****     };
 607:/usr/include/c++/7/bits/stl_iterator.h **** 
 608:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 609:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 610:/usr/include/c++/7/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 611:/usr/include/c++/7/bits/stl_iterator.h ****    *
 612:/usr/include/c++/7/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 613:/usr/include/c++/7/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 614:/usr/include/c++/7/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 615:/usr/include/c++/7/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 616:/usr/include/c++/7/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 617:/usr/include/c++/7/bits/stl_iterator.h ****    *  types for you.
 618:/usr/include/c++/7/bits/stl_iterator.h ****   */
 619:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 620:/usr/include/c++/7/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 621:/usr/include/c++/7/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 622:/usr/include/c++/7/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 623:/usr/include/c++/7/bits/stl_iterator.h **** 
 624:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 625:/usr/include/c++/7/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 626:/usr/include/c++/7/bits/stl_iterator.h ****    *
 627:/usr/include/c++/7/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 628:/usr/include/c++/7/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 629:/usr/include/c++/7/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 630:/usr/include/c++/7/bits/stl_iterator.h ****    *  position.
 631:/usr/include/c++/7/bits/stl_iterator.h ****    *
 632:/usr/include/c++/7/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 633:/usr/include/c++/7/bits/stl_iterator.h ****    *  %iterator's position.)
 634:/usr/include/c++/7/bits/stl_iterator.h ****    *
 635:/usr/include/c++/7/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 636:/usr/include/c++/7/bits/stl_iterator.h ****    *  save typing.
 637:/usr/include/c++/7/bits/stl_iterator.h ****   */
 638:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 639:/usr/include/c++/7/bits/stl_iterator.h ****     class insert_iterator
 640:/usr/include/c++/7/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 641:/usr/include/c++/7/bits/stl_iterator.h ****     {
 642:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 643:/usr/include/c++/7/bits/stl_iterator.h ****       _Container* container;
 644:/usr/include/c++/7/bits/stl_iterator.h ****       typename _Container::iterator iter;
 645:/usr/include/c++/7/bits/stl_iterator.h **** 
 646:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 647:/usr/include/c++/7/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 648:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Container          container_type;
 649:/usr/include/c++/7/bits/stl_iterator.h **** 
 650:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 651:/usr/include/c++/7/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 652:/usr/include/c++/7/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 653:/usr/include/c++/7/bits/stl_iterator.h ****       */
 654:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 655:/usr/include/c++/7/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 656:/usr/include/c++/7/bits/stl_iterator.h **** 
 657:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 658:/usr/include/c++/7/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 659:/usr/include/c++/7/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 660:/usr/include/c++/7/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 661:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 662:/usr/include/c++/7/bits/stl_iterator.h ****        *
 663:/usr/include/c++/7/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 664:/usr/include/c++/7/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 665:/usr/include/c++/7/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 666:/usr/include/c++/7/bits/stl_iterator.h ****        *
 667:/usr/include/c++/7/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 668:/usr/include/c++/7/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 669:/usr/include/c++/7/bits/stl_iterator.h ****        *  @code
 670:/usr/include/c++/7/bits/stl_iterator.h ****        *     // vector v contains A and Z
 671:/usr/include/c++/7/bits/stl_iterator.h ****        *
 672:/usr/include/c++/7/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 673:/usr/include/c++/7/bits/stl_iterator.h ****        *     i = 1;
 674:/usr/include/c++/7/bits/stl_iterator.h ****        *     i = 2;
 675:/usr/include/c++/7/bits/stl_iterator.h ****        *     i = 3;
 676:/usr/include/c++/7/bits/stl_iterator.h ****        *
 677:/usr/include/c++/7/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 678:/usr/include/c++/7/bits/stl_iterator.h ****        *  @endcode
 679:/usr/include/c++/7/bits/stl_iterator.h ****       */
 680:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus < 201103L
 681:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 682:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 683:/usr/include/c++/7/bits/stl_iterator.h ****       {
 684:/usr/include/c++/7/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 685:/usr/include/c++/7/bits/stl_iterator.h **** 	++iter;
 686:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 687:/usr/include/c++/7/bits/stl_iterator.h ****       }
 688:/usr/include/c++/7/bits/stl_iterator.h **** #else
 689:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 690:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 691:/usr/include/c++/7/bits/stl_iterator.h ****       {
 692:/usr/include/c++/7/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 693:/usr/include/c++/7/bits/stl_iterator.h **** 	++iter;
 694:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 695:/usr/include/c++/7/bits/stl_iterator.h ****       }
 696:/usr/include/c++/7/bits/stl_iterator.h **** 
 697:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 698:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 699:/usr/include/c++/7/bits/stl_iterator.h ****       {
 700:/usr/include/c++/7/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 701:/usr/include/c++/7/bits/stl_iterator.h **** 	++iter;
 702:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 703:/usr/include/c++/7/bits/stl_iterator.h ****       }
 704:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 705:/usr/include/c++/7/bits/stl_iterator.h **** 
 706:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.
 707:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 708:/usr/include/c++/7/bits/stl_iterator.h ****       operator*()
 709:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 710:/usr/include/c++/7/bits/stl_iterator.h **** 
 711:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 712:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 713:/usr/include/c++/7/bits/stl_iterator.h ****       operator++()
 714:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 715:/usr/include/c++/7/bits/stl_iterator.h **** 
 716:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 717:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 718:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int)
 719:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 720:/usr/include/c++/7/bits/stl_iterator.h ****     };
 721:/usr/include/c++/7/bits/stl_iterator.h **** 
 722:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 723:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 724:/usr/include/c++/7/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 725:/usr/include/c++/7/bits/stl_iterator.h ****    *
 726:/usr/include/c++/7/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 727:/usr/include/c++/7/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 728:/usr/include/c++/7/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 729:/usr/include/c++/7/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 730:/usr/include/c++/7/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 731:/usr/include/c++/7/bits/stl_iterator.h ****    *  types for you.
 732:/usr/include/c++/7/bits/stl_iterator.h ****   */
 733:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 734:/usr/include/c++/7/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 735:/usr/include/c++/7/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 736:/usr/include/c++/7/bits/stl_iterator.h ****     {
 737:/usr/include/c++/7/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 738:/usr/include/c++/7/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 739:/usr/include/c++/7/bits/stl_iterator.h ****     }
 740:/usr/include/c++/7/bits/stl_iterator.h **** 
 741:/usr/include/c++/7/bits/stl_iterator.h ****   // @} group iterators
 742:/usr/include/c++/7/bits/stl_iterator.h **** 
 743:/usr/include/c++/7/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 744:/usr/include/c++/7/bits/stl_iterator.h **** } // namespace
 745:/usr/include/c++/7/bits/stl_iterator.h **** 
 746:/usr/include/c++/7/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 747:/usr/include/c++/7/bits/stl_iterator.h **** {
 748:/usr/include/c++/7/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 749:/usr/include/c++/7/bits/stl_iterator.h **** 
 750:/usr/include/c++/7/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 751:/usr/include/c++/7/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 752:/usr/include/c++/7/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 753:/usr/include/c++/7/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 754:/usr/include/c++/7/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 755:/usr/include/c++/7/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 756:/usr/include/c++/7/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 757:/usr/include/c++/7/bits/stl_iterator.h ****   using std::iterator_traits;
 758:/usr/include/c++/7/bits/stl_iterator.h ****   using std::iterator;
 759:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 760:/usr/include/c++/7/bits/stl_iterator.h ****     class __normal_iterator
 761:/usr/include/c++/7/bits/stl_iterator.h ****     {
 762:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 763:/usr/include/c++/7/bits/stl_iterator.h ****       _Iterator _M_current;
 764:/usr/include/c++/7/bits/stl_iterator.h **** 
 765:/usr/include/c++/7/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 766:/usr/include/c++/7/bits/stl_iterator.h **** 
 767:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 768:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 769:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 770:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 771:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 772:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 773:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 774:/usr/include/c++/7/bits/stl_iterator.h **** 
 775:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 776:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 777:/usr/include/c++/7/bits/stl_iterator.h **** 
 778:/usr/include/c++/7/bits/stl_iterator.h ****       explicit
 779:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 780:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(__i) { }
 781:/usr/include/c++/7/bits/stl_iterator.h **** 
 782:/usr/include/c++/7/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 783:/usr/include/c++/7/bits/stl_iterator.h ****       template<typename _Iter>
 784:/usr/include/c++/7/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 785:/usr/include/c++/7/bits/stl_iterator.h **** 			  typename __enable_if<
 786:/usr/include/c++/7/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 787:/usr/include/c++/7/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 788:/usr/include/c++/7/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 789:/usr/include/c++/7/bits/stl_iterator.h **** 
 790:/usr/include/c++/7/bits/stl_iterator.h ****       // Forward iterator requirements
 791:/usr/include/c++/7/bits/stl_iterator.h ****       reference
 792:/usr/include/c++/7/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 793:/usr/include/c++/7/bits/stl_iterator.h ****       { return *_M_current; }
 794:/usr/include/c++/7/bits/stl_iterator.h **** 
 795:/usr/include/c++/7/bits/stl_iterator.h ****       pointer
 796:/usr/include/c++/7/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 797:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 798:/usr/include/c++/7/bits/stl_iterator.h **** 
 799:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator&
 800:/usr/include/c++/7/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 801:/usr/include/c++/7/bits/stl_iterator.h ****       {
 802:/usr/include/c++/7/bits/stl_iterator.h **** 	++_M_current;
 803:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 804:/usr/include/c++/7/bits/stl_iterator.h ****       }
 805:/usr/include/c++/7/bits/stl_iterator.h **** 
 806:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator
 807:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 808:/usr/include/c++/7/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 809:/usr/include/c++/7/bits/stl_iterator.h **** 
 810:/usr/include/c++/7/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 811:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator&
 812:/usr/include/c++/7/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 813:/usr/include/c++/7/bits/stl_iterator.h ****       {
 814:/usr/include/c++/7/bits/stl_iterator.h **** 	--_M_current;
 815:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 816:/usr/include/c++/7/bits/stl_iterator.h ****       }
 817:/usr/include/c++/7/bits/stl_iterator.h **** 
 818:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator
 819:/usr/include/c++/7/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 820:/usr/include/c++/7/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 821:/usr/include/c++/7/bits/stl_iterator.h **** 
 822:/usr/include/c++/7/bits/stl_iterator.h ****       // Random access iterator requirements
 823:/usr/include/c++/7/bits/stl_iterator.h ****       reference
 824:/usr/include/c++/7/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 825:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current[__n]; }
 826:/usr/include/c++/7/bits/stl_iterator.h **** 
 827:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator&
 828:/usr/include/c++/7/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 829:/usr/include/c++/7/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 830:/usr/include/c++/7/bits/stl_iterator.h **** 
 831:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator
 832:/usr/include/c++/7/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 833:/usr/include/c++/7/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 834:/usr/include/c++/7/bits/stl_iterator.h **** 
 835:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator&
 836:/usr/include/c++/7/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 837:/usr/include/c++/7/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 838:/usr/include/c++/7/bits/stl_iterator.h **** 
 839:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator
 840:/usr/include/c++/7/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 841:/usr/include/c++/7/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 842:/usr/include/c++/7/bits/stl_iterator.h **** 
 843:/usr/include/c++/7/bits/stl_iterator.h ****       const _Iterator&
 844:/usr/include/c++/7/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 845:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 846:/usr/include/c++/7/bits/stl_iterator.h ****     };
 847:/usr/include/c++/7/bits/stl_iterator.h **** 
 848:/usr/include/c++/7/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 849:/usr/include/c++/7/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 850:/usr/include/c++/7/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 851:/usr/include/c++/7/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 852:/usr/include/c++/7/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 853:/usr/include/c++/7/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 854:/usr/include/c++/7/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 855:/usr/include/c++/7/bits/stl_iterator.h **** 
 856:/usr/include/c++/7/bits/stl_iterator.h ****   // Forward iterator requirements
 857:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 858:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 859:/usr/include/c++/7/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 860:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 861:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 862:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 863:/usr/include/c++/7/bits/stl_iterator.h **** 
 864:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 865:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 866:/usr/include/c++/7/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 867:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 868:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 869:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 870:/usr/include/c++/7/bits/stl_iterator.h **** 
 871:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 872:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 873:/usr/include/c++/7/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 874:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 875:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 876:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 877:/usr/include/c++/7/bits/stl_iterator.h **** 
 878:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 879:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 880:/usr/include/c++/7/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 1705              		.loc 5 880 0
 1706              		.cfi_startproc
 1707 0000 55       		pushq	%rbp
 1708              		.cfi_def_cfa_offset 16
 1709              		.cfi_offset 6, -16
 1710 0001 4889E5   		movq	%rsp, %rbp
 1711              		.cfi_def_cfa_register 6
 1712 0004 53       		pushq	%rbx
 1713 0005 4883EC18 		subq	$24, %rsp
 1714              		.cfi_offset 3, -24
 1715 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1716 000d 488975E0 		movq	%rsi, -32(%rbp)
 881:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 882:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 883:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 1717              		.loc 5 883 0
 1718 0011 488B45E8 		movq	-24(%rbp), %rax
 1719 0015 4889C7   		movq	%rax, %rdi
 1720 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1720      00
 1721 001d 488B18   		movq	(%rax), %rbx
 1722 0020 488B45E0 		movq	-32(%rbp), %rax
 1723 0024 4889C7   		movq	%rax, %rdi
 1724 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1724      00
 1725 002c 488B00   		movq	(%rax), %rax
 1726 002f 4839C3   		cmpq	%rax, %rbx
 1727 0032 0F95C0   		setne	%al
 1728 0035 4883C418 		addq	$24, %rsp
 1729 0039 5B       		popq	%rbx
 1730 003a 5D       		popq	%rbp
 1731              		.cfi_def_cfa 7, 8
 1732 003b C3       		ret
 1733              		.cfi_endproc
 1734              	.LFE1405:
 1736              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1737              		.align 2
 1738              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
 1740              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:
 1741              	.LFB1406:
 800:/usr/include/c++/7/bits/stl_iterator.h ****       {
 1742              		.loc 5 800 0
 1743              		.cfi_startproc
 1744 0000 55       		pushq	%rbp
 1745              		.cfi_def_cfa_offset 16
 1746              		.cfi_offset 6, -16
 1747 0001 4889E5   		movq	%rsp, %rbp
 1748              		.cfi_def_cfa_register 6
 1749 0004 48897DF8 		movq	%rdi, -8(%rbp)
 802:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 1750              		.loc 5 802 0
 1751 0008 488B45F8 		movq	-8(%rbp), %rax
 1752 000c 488B00   		movq	(%rax), %rax
 1753 000f 488D9080 		leaq	128(%rax), %rdx
 1753      000000
 1754 0016 488B45F8 		movq	-8(%rbp), %rax
 1755 001a 488910   		movq	%rdx, (%rax)
 803:/usr/include/c++/7/bits/stl_iterator.h ****       }
 1756              		.loc 5 803 0
 1757 001d 488B45F8 		movq	-8(%rbp), %rax
 804:/usr/include/c++/7/bits/stl_iterator.h **** 
 1758              		.loc 5 804 0
 1759 0021 5D       		popq	%rbp
 1760              		.cfi_def_cfa 7, 8
 1761 0022 C3       		ret
 1762              		.cfi_endproc
 1763              	.LFE1406:
 1765              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1766              		.align 2
 1767              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeE
 1769              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1770              	.LFB1407:
 792:/usr/include/c++/7/bits/stl_iterator.h ****       { return *_M_current; }
 1771              		.loc 5 792 0
 1772              		.cfi_startproc
 1773 0000 55       		pushq	%rbp
 1774              		.cfi_def_cfa_offset 16
 1775              		.cfi_offset 6, -16
 1776 0001 4889E5   		movq	%rsp, %rbp
 1777              		.cfi_def_cfa_register 6
 1778 0004 48897DF8 		movq	%rdi, -8(%rbp)
 793:/usr/include/c++/7/bits/stl_iterator.h **** 
 1779              		.loc 5 793 0
 1780 0008 488B45F8 		movq	-8(%rbp), %rax
 1781 000c 488B00   		movq	(%rax), %rax
 1782 000f 5D       		popq	%rbp
 1783              		.cfi_def_cfa 7, 8
 1784 0010 C3       		ret
 1785              		.cfi_endproc
 1786              	.LFE1407:
 1788              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1789              		.align 2
 1790              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptE
 1792              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:
 1793              	.LFB1408:
 796:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 1794              		.loc 5 796 0
 1795              		.cfi_startproc
 1796 0000 55       		pushq	%rbp
 1797              		.cfi_def_cfa_offset 16
 1798              		.cfi_offset 6, -16
 1799 0001 4889E5   		movq	%rsp, %rbp
 1800              		.cfi_def_cfa_register 6
 1801 0004 48897DF8 		movq	%rdi, -8(%rbp)
 797:/usr/include/c++/7/bits/stl_iterator.h **** 
 1802              		.loc 5 797 0
 1803 0008 488B45F8 		movq	-8(%rbp), %rax
 1804 000c 488B00   		movq	(%rax), %rax
 1805 000f 5D       		popq	%rbp
 1806              		.cfi_def_cfa 7, 8
 1807 0010 C3       		ret
 1808              		.cfi_endproc
 1809              	.LFE1408:
 1811              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 1812              		.align 2
 1813              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
 1815              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:
 1816              	.LFB1410:
 572:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1817              		.loc 4 572 0
 1818              		.cfi_startproc
 1819 0000 55       		pushq	%rbp
 1820              		.cfi_def_cfa_offset 16
 1821              		.cfi_offset 6, -16
 1822 0001 4889E5   		movq	%rsp, %rbp
 1823              		.cfi_def_cfa_register 6
 1824 0004 4883EC30 		subq	$48, %rsp
 1825 0008 48897DD8 		movq	%rdi, -40(%rbp)
 572:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1826              		.loc 4 572 0
 1827 000c 64488B04 		movq	%fs:40, %rax
 1827      25280000 
 1827      00
 1828 0015 488945F8 		movq	%rax, -8(%rbp)
 1829 0019 31C0     		xorl	%eax, %eax
 573:/usr/include/c++/7/bits/stl_vector.h **** 
 1830              		.loc 4 573 0
 1831 001b 488B45D8 		movq	-40(%rbp), %rax
 1832 001f 488B00   		movq	(%rax), %rax
 1833 0022 488945E8 		movq	%rax, -24(%rbp)
 1834 0026 488D55E8 		leaq	-24(%rbp), %rdx
 1835 002a 488D45F0 		leaq	-16(%rbp), %rax
 1836 002e 4889D6   		movq	%rdx, %rsi
 1837 0031 4889C7   		movq	%rax, %rdi
 1838 0034 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1838      00
 1839 0039 488B45F0 		movq	-16(%rbp), %rax
 1840 003d 488B4DF8 		movq	-8(%rbp), %rcx
 1841 0041 6448330C 		xorq	%fs:40, %rcx
 1841      25280000 
 1841      00
 1842 004a 7405     		je	.L94
 1843 004c E8000000 		call	__stack_chk_fail@PLT
 1843      00
 1844              	.L94:
 1845 0051 C9       		leave
 1846              		.cfi_def_cfa 7, 8
 1847 0052 C3       		ret
 1848              		.cfi_endproc
 1849              	.LFE1410:
 1851              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 1852              		.align 2
 1853              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
 1855              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:
 1856              	.LFB1411:
 590:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1857              		.loc 4 590 0
 1858              		.cfi_startproc
 1859 0000 55       		pushq	%rbp
 1860              		.cfi_def_cfa_offset 16
 1861              		.cfi_offset 6, -16
 1862 0001 4889E5   		movq	%rsp, %rbp
 1863              		.cfi_def_cfa_register 6
 1864 0004 4883EC30 		subq	$48, %rsp
 1865 0008 48897DD8 		movq	%rdi, -40(%rbp)
 590:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1866              		.loc 4 590 0
 1867 000c 64488B04 		movq	%fs:40, %rax
 1867      25280000 
 1867      00
 1868 0015 488945F8 		movq	%rax, -8(%rbp)
 1869 0019 31C0     		xorl	%eax, %eax
 1870              		.loc 4 591 0
 1871 001b 488B45D8 		movq	-40(%rbp), %rax
 1872 001f 488B4008 		movq	8(%rax), %rax
 1873 0023 488945E8 		movq	%rax, -24(%rbp)
 1874 0027 488D55E8 		leaq	-24(%rbp), %rdx
 1875 002b 488D45F0 		leaq	-16(%rbp), %rax
 1876 002f 4889D6   		movq	%rdx, %rsi
 1877 0032 4889C7   		movq	%rax, %rdi
 1878 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1878      00
 1879 003a 488B45F0 		movq	-16(%rbp), %rax
 1880 003e 488B4DF8 		movq	-8(%rbp), %rcx
 1881 0042 6448330C 		xorq	%fs:40, %rcx
 1881      25280000 
 1881      00
 1882 004b 7405     		je	.L97
 1883 004d E8000000 		call	__stack_chk_fail@PLT
 1883      00
 1884              	.L97:
 1885 0052 C9       		leave
 1886              		.cfi_def_cfa 7, 8
 1887 0053 C3       		ret
 1888              		.cfi_endproc
 1889              	.LFE1411:
 1891              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6
 1892              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8
 1894              	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_
 1895              	.LFB1412:
 880:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 1896              		.loc 5 880 0
 1897              		.cfi_startproc
 1898 0000 55       		pushq	%rbp
 1899              		.cfi_def_cfa_offset 16
 1900              		.cfi_offset 6, -16
 1901 0001 4889E5   		movq	%rsp, %rbp
 1902              		.cfi_def_cfa_register 6
 1903 0004 53       		pushq	%rbx
 1904 0005 4883EC18 		subq	$24, %rsp
 1905              		.cfi_offset 3, -24
 1906 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1907 000d 488975E0 		movq	%rsi, -32(%rbp)
 1908              		.loc 5 883 0
 1909 0011 488B45E8 		movq	-24(%rbp), %rax
 1910 0015 4889C7   		movq	%rax, %rdi
 1911 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1911      00
 1912 001d 488B18   		movq	(%rax), %rbx
 1913 0020 488B45E0 		movq	-32(%rbp), %rax
 1914 0024 4889C7   		movq	%rax, %rdi
 1915 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1915      00
 1916 002c 488B00   		movq	(%rax), %rax
 1917 002f 4839C3   		cmpq	%rax, %rbx
 1918 0032 0F95C0   		setne	%al
 1919 0035 4883C418 		addq	$24, %rsp
 1920 0039 5B       		popq	%rbx
 1921 003a 5D       		popq	%rbp
 1922              		.cfi_def_cfa 7, 8
 1923 003b C3       		ret
 1924              		.cfi_endproc
 1925              	.LFE1412:
 1927              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 1928              		.align 2
 1929              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1931              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 1932              	.LFB1413:
 800:/usr/include/c++/7/bits/stl_iterator.h ****       {
 1933              		.loc 5 800 0
 1934              		.cfi_startproc
 1935 0000 55       		pushq	%rbp
 1936              		.cfi_def_cfa_offset 16
 1937              		.cfi_offset 6, -16
 1938 0001 4889E5   		movq	%rsp, %rbp
 1939              		.cfi_def_cfa_register 6
 1940 0004 48897DF8 		movq	%rdi, -8(%rbp)
 802:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 1941              		.loc 5 802 0
 1942 0008 488B45F8 		movq	-8(%rbp), %rax
 1943 000c 488B00   		movq	(%rax), %rax
 1944 000f 488D5028 		leaq	40(%rax), %rdx
 1945 0013 488B45F8 		movq	-8(%rbp), %rax
 1946 0017 488910   		movq	%rdx, (%rax)
 803:/usr/include/c++/7/bits/stl_iterator.h ****       }
 1947              		.loc 5 803 0
 1948 001a 488B45F8 		movq	-8(%rbp), %rax
 804:/usr/include/c++/7/bits/stl_iterator.h **** 
 1949              		.loc 5 804 0
 1950 001e 5D       		popq	%rbp
 1951              		.cfi_def_cfa 7, 8
 1952 001f C3       		ret
 1953              		.cfi_endproc
 1954              	.LFE1413:
 1956              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 1957              		.align 2
 1958              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 1960              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 1961              	.LFB1414:
 796:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 1962              		.loc 5 796 0
 1963              		.cfi_startproc
 1964 0000 55       		pushq	%rbp
 1965              		.cfi_def_cfa_offset 16
 1966              		.cfi_offset 6, -16
 1967 0001 4889E5   		movq	%rsp, %rbp
 1968              		.cfi_def_cfa_register 6
 1969 0004 48897DF8 		movq	%rdi, -8(%rbp)
 797:/usr/include/c++/7/bits/stl_iterator.h **** 
 1970              		.loc 5 797 0
 1971 0008 488B45F8 		movq	-8(%rbp), %rax
 1972 000c 488B00   		movq	(%rax), %rax
 1973 000f 5D       		popq	%rbp
 1974              		.cfi_def_cfa 7, 8
 1975 0010 C3       		ret
 1976              		.cfi_endproc
 1977              	.LFE1414:
 1979              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev,"axG"
 1980              		.align 2
 1981              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
 1983              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:
 1984              	.LFB1462:
  81:/usr/include/c++/7/bits/stl_vector.h ****       : public _Tp_alloc_type
 1985              		.loc 4 81 0
 1986              		.cfi_startproc
 1987 0000 55       		pushq	%rbp
 1988              		.cfi_def_cfa_offset 16
 1989              		.cfi_offset 6, -16
 1990 0001 4889E5   		movq	%rsp, %rbp
 1991              		.cfi_def_cfa_register 6
 1992 0004 4883EC10 		subq	$16, %rsp
 1993 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1994              	.LBB16:
  81:/usr/include/c++/7/bits/stl_vector.h ****       : public _Tp_alloc_type
 1995              		.loc 4 81 0
 1996 000c 488B45F8 		movq	-8(%rbp), %rax
 1997 0010 4889C7   		movq	%rax, %rdi
 1998 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev@PLT
 1998      00
 1999              	.LBE16:
 2000 0018 90       		nop
 2001 0019 C9       		leave
 2002              		.cfi_def_cfa 7, 8
 2003 001a C3       		ret
 2004              		.cfi_endproc
 2005              	.LFE1462:
 2007              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
 2008              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_
 2009              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZN
 2010              		.align 2
 2011              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 2013              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 2014              	.LFB1464:
 126:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl() { }
 2015              		.loc 4 126 0
 2016              		.cfi_startproc
 2017 0000 55       		pushq	%rbp
 2018              		.cfi_def_cfa_offset 16
 2019              		.cfi_offset 6, -16
 2020 0001 4889E5   		movq	%rsp, %rbp
 2021              		.cfi_def_cfa_register 6
 2022 0004 4883EC10 		subq	$16, %rsp
 2023 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2024              	.LBB17:
 127:/usr/include/c++/7/bits/stl_vector.h **** 
 2025              		.loc 4 127 0
 2026 000c 488B45F8 		movq	-8(%rbp), %rax
 2027 0010 4889C7   		movq	%rax, %rdi
 2028 0013 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev@PLT
 2028      00
 2029              	.LBE17:
 2030 0018 90       		nop
 2031 0019 C9       		leave
 2032              		.cfi_def_cfa 7, 8
 2033 001a C3       		ret
 2034              		.cfi_endproc
 2035              	.LFE1464:
 2037              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 2038              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2039              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2040              		.align 2
 2041              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 2043              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 2044              	.LFB1467:
 161:/usr/include/c++/7/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 2045              		.loc 4 161 0
 2046              		.cfi_startproc
 2047              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2048              		.cfi_lsda 0x1b,.LLSDA1467
 2049 0000 55       		pushq	%rbp
 2050              		.cfi_def_cfa_offset 16
 2051              		.cfi_offset 6, -16
 2052 0001 4889E5   		movq	%rsp, %rbp
 2053              		.cfi_def_cfa_register 6
 2054 0004 53       		pushq	%rbx
 2055 0005 4883EC18 		subq	$24, %rsp
 2056              		.cfi_offset 3, -24
 2057 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2058              	.LBB18:
 162:/usr/include/c++/7/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2059              		.loc 4 162 0
 2060 000d 488B45E8 		movq	-24(%rbp), %rax
 2061 0011 488B4010 		movq	16(%rax), %rax
 163:/usr/include/c++/7/bits/stl_vector.h **** 
 2062              		.loc 4 163 0
 2063 0015 4889C2   		movq	%rax, %rdx
 2064 0018 488B45E8 		movq	-24(%rbp), %rax
 2065 001c 488B00   		movq	(%rax), %rax
 2066 001f 4829C2   		subq	%rax, %rdx
 2067 0022 4889D0   		movq	%rdx, %rax
 2068 0025 48C1F807 		sarq	$7, %rax
 162:/usr/include/c++/7/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2069              		.loc 4 162 0
 2070 0029 4889C2   		movq	%rax, %rdx
 2071 002c 488B45E8 		movq	-24(%rbp), %rax
 2072 0030 488B08   		movq	(%rax), %rcx
 2073 0033 488B45E8 		movq	-24(%rbp), %rax
 2074 0037 4889CE   		movq	%rcx, %rsi
 2075 003a 4889C7   		movq	%rax, %rdi
 2076              	.LEHB37:
 2077 003d E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 2077      00
 2078              	.LEHE37:
 163:/usr/include/c++/7/bits/stl_vector.h **** 
 2079              		.loc 4 163 0
 2080 0042 488B45E8 		movq	-24(%rbp), %rax
 2081 0046 4889C7   		movq	%rax, %rdi
 2082 0049 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 2082      00
 2083              	.LBE18:
 2084 004e EB1A     		jmp	.L109
 2085              	.L108:
 2086 0050 4889C3   		movq	%rax, %rbx
 2087              	.LBB19:
 2088 0053 488B45E8 		movq	-24(%rbp), %rax
 2089 0057 4889C7   		movq	%rax, %rdi
 2090 005a E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 2090      00
 2091 005f 4889D8   		movq	%rbx, %rax
 2092 0062 4889C7   		movq	%rax, %rdi
 2093              	.LEHB38:
 2094 0065 E8000000 		call	_Unwind_Resume@PLT
 2094      00
 2095              	.LEHE38:
 2096              	.L109:
 2097              	.LBE19:
 2098 006a 4883C418 		addq	$24, %rsp
 2099 006e 5B       		popq	%rbx
 2100 006f 5D       		popq	%rbp
 2101              		.cfi_def_cfa 7, 8
 2102 0070 C3       		ret
 2103              		.cfi_endproc
 2104              	.LFE1467:
 2105              		.section	.gcc_except_table
 2106              	.LLSDA1467:
 2107 00d7 FF       		.byte	0xff
 2108 00d8 FF       		.byte	0xff
 2109 00d9 01       		.byte	0x1
 2110 00da 08       		.uleb128 .LLSDACSE1467-.LLSDACSB1467
 2111              	.LLSDACSB1467:
 2112 00db 3D       		.uleb128 .LEHB37-.LFB1467
 2113 00dc 05       		.uleb128 .LEHE37-.LEHB37
 2114 00dd 50       		.uleb128 .L108-.LFB1467
 2115 00de 00       		.uleb128 0
 2116 00df 65       		.uleb128 .LEHB38-.LFB1467
 2117 00e0 05       		.uleb128 .LEHE38-.LEHB38
 2118 00e1 00       		.uleb128 0
 2119 00e2 00       		.uleb128 0
 2120              	.LLSDACSE1467:
 2121              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2123              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 2124              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2125              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 2126              		.align 2
 2127              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 2129              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 2130              	.LFB1469:
 115:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2131              		.loc 4 115 0
 2132              		.cfi_startproc
 2133 0000 55       		pushq	%rbp
 2134              		.cfi_def_cfa_offset 16
 2135              		.cfi_offset 6, -16
 2136 0001 4889E5   		movq	%rsp, %rbp
 2137              		.cfi_def_cfa_register 6
 2138 0004 48897DF8 		movq	%rdi, -8(%rbp)
 116:/usr/include/c++/7/bits/stl_vector.h **** 
 2139              		.loc 4 116 0
 2140 0008 488B45F8 		movq	-8(%rbp), %rax
 2141 000c 5D       		popq	%rbp
 2142              		.cfi_def_cfa 7, 8
 2143 000d C3       		ret
 2144              		.cfi_endproc
 2145              	.LFE1469:
 2147              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 2148              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 2150              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 2151              	.LFB1470:
 2152              		.file 6 "/usr/include/c++/7/bits/stl_construct.h"
   1:/usr/include/c++/7/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_construct.h **** 
   3:/usr/include/c++/7/bits/stl_construct.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_construct.h **** //
   5:/usr/include/c++/7/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_construct.h **** 
  11:/usr/include/c++/7/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_construct.h **** 
  16:/usr/include/c++/7/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_construct.h **** 
  20:/usr/include/c++/7/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_construct.h **** 
  25:/usr/include/c++/7/bits/stl_construct.h **** /*
  26:/usr/include/c++/7/bits/stl_construct.h ****  *
  27:/usr/include/c++/7/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_construct.h ****  *
  30:/usr/include/c++/7/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_construct.h ****  *
  38:/usr/include/c++/7/bits/stl_construct.h ****  *
  39:/usr/include/c++/7/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/7/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_construct.h ****  *
  42:/usr/include/c++/7/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_construct.h ****  */
  50:/usr/include/c++/7/bits/stl_construct.h **** 
  51:/usr/include/c++/7/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/7/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/7/bits/stl_construct.h ****  */
  55:/usr/include/c++/7/bits/stl_construct.h **** 
  56:/usr/include/c++/7/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/7/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/7/bits/stl_construct.h **** 
  59:/usr/include/c++/7/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/7/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/7/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/7/bits/stl_construct.h **** 
  63:/usr/include/c++/7/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/7/bits/stl_construct.h **** {
  65:/usr/include/c++/7/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/7/bits/stl_construct.h **** 
  67:/usr/include/c++/7/bits/stl_construct.h ****   /**
  68:/usr/include/c++/7/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/7/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/7/bits/stl_construct.h ****    */
  71:/usr/include/c++/7/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/7/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/7/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/7/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/7/bits/stl_construct.h **** #else
  77:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/7/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/7/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/7/bits/stl_construct.h ****     {
  81:/usr/include/c++/7/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/7/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/7/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/7/bits/stl_construct.h ****     }
  85:/usr/include/c++/7/bits/stl_construct.h **** #endif
  86:/usr/include/c++/7/bits/stl_construct.h **** 
  87:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _T1>
  88:/usr/include/c++/7/bits/stl_construct.h ****     inline void
  89:/usr/include/c++/7/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
  90:/usr/include/c++/7/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
  91:/usr/include/c++/7/bits/stl_construct.h **** 
  92:/usr/include/c++/7/bits/stl_construct.h ****   /**
  93:/usr/include/c++/7/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  94:/usr/include/c++/7/bits/stl_construct.h ****    */
  95:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _Tp>
  96:/usr/include/c++/7/bits/stl_construct.h ****     inline void
  97:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  98:/usr/include/c++/7/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  99:/usr/include/c++/7/bits/stl_construct.h **** 
 100:/usr/include/c++/7/bits/stl_construct.h ****   template<bool>
 101:/usr/include/c++/7/bits/stl_construct.h ****     struct _Destroy_aux
 102:/usr/include/c++/7/bits/stl_construct.h ****     {
 103:/usr/include/c++/7/bits/stl_construct.h ****       template<typename _ForwardIterator>
 104:/usr/include/c++/7/bits/stl_construct.h ****         static void
 105:/usr/include/c++/7/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 106:/usr/include/c++/7/bits/stl_construct.h **** 	{
 107:/usr/include/c++/7/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 108:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 109:/usr/include/c++/7/bits/stl_construct.h **** 	}
 110:/usr/include/c++/7/bits/stl_construct.h ****     };
 111:/usr/include/c++/7/bits/stl_construct.h **** 
 112:/usr/include/c++/7/bits/stl_construct.h ****   template<>
 113:/usr/include/c++/7/bits/stl_construct.h ****     struct _Destroy_aux<true>
 114:/usr/include/c++/7/bits/stl_construct.h ****     {
 115:/usr/include/c++/7/bits/stl_construct.h ****       template<typename _ForwardIterator>
 116:/usr/include/c++/7/bits/stl_construct.h ****         static void
 117:/usr/include/c++/7/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 118:/usr/include/c++/7/bits/stl_construct.h ****     };
 119:/usr/include/c++/7/bits/stl_construct.h **** 
 120:/usr/include/c++/7/bits/stl_construct.h ****   /**
 121:/usr/include/c++/7/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 122:/usr/include/c++/7/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 123:/usr/include/c++/7/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 124:/usr/include/c++/7/bits/stl_construct.h ****    */
 125:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _ForwardIterator>
 126:/usr/include/c++/7/bits/stl_construct.h ****     inline void
 127:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 128:/usr/include/c++/7/bits/stl_construct.h ****     {
 129:/usr/include/c++/7/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 130:/usr/include/c++/7/bits/stl_construct.h ****                        _Value_type;
 131:/usr/include/c++/7/bits/stl_construct.h **** #if __cplusplus >= 201103L
 132:/usr/include/c++/7/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 133:/usr/include/c++/7/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 134:/usr/include/c++/7/bits/stl_construct.h **** 		    "value type is destructible");
 135:/usr/include/c++/7/bits/stl_construct.h **** #endif
 136:/usr/include/c++/7/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 137:/usr/include/c++/7/bits/stl_construct.h **** 	__destroy(__first, __last);
 138:/usr/include/c++/7/bits/stl_construct.h ****     }
 139:/usr/include/c++/7/bits/stl_construct.h **** 
 140:/usr/include/c++/7/bits/stl_construct.h ****   template<bool>
 141:/usr/include/c++/7/bits/stl_construct.h ****     struct _Destroy_n_aux
 142:/usr/include/c++/7/bits/stl_construct.h ****     {
 143:/usr/include/c++/7/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 144:/usr/include/c++/7/bits/stl_construct.h ****         static _ForwardIterator
 145:/usr/include/c++/7/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 146:/usr/include/c++/7/bits/stl_construct.h **** 	{
 147:/usr/include/c++/7/bits/stl_construct.h **** 	  for (; __count > 0; (void)++__first, --__count)
 148:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 149:/usr/include/c++/7/bits/stl_construct.h **** 	  return __first;
 150:/usr/include/c++/7/bits/stl_construct.h **** 	}
 151:/usr/include/c++/7/bits/stl_construct.h ****     };
 152:/usr/include/c++/7/bits/stl_construct.h **** 
 153:/usr/include/c++/7/bits/stl_construct.h ****   template<>
 154:/usr/include/c++/7/bits/stl_construct.h ****     struct _Destroy_n_aux<true>
 155:/usr/include/c++/7/bits/stl_construct.h ****     {
 156:/usr/include/c++/7/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 157:/usr/include/c++/7/bits/stl_construct.h ****         static _ForwardIterator
 158:/usr/include/c++/7/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 159:/usr/include/c++/7/bits/stl_construct.h **** 	{
 160:/usr/include/c++/7/bits/stl_construct.h **** 	  std::advance(__first, __count);
 161:/usr/include/c++/7/bits/stl_construct.h **** 	  return __first;
 162:/usr/include/c++/7/bits/stl_construct.h **** 	}
 163:/usr/include/c++/7/bits/stl_construct.h ****     };
 164:/usr/include/c++/7/bits/stl_construct.h **** 
 165:/usr/include/c++/7/bits/stl_construct.h ****   /**
 166:/usr/include/c++/7/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 167:/usr/include/c++/7/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 168:/usr/include/c++/7/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 169:/usr/include/c++/7/bits/stl_construct.h ****    */
 170:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Size>
 171:/usr/include/c++/7/bits/stl_construct.h ****     inline _ForwardIterator
 172:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy_n(_ForwardIterator __first, _Size __count)
 173:/usr/include/c++/7/bits/stl_construct.h ****     {
 174:/usr/include/c++/7/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 175:/usr/include/c++/7/bits/stl_construct.h ****                        _Value_type;
 176:/usr/include/c++/7/bits/stl_construct.h **** #if __cplusplus >= 201103L
 177:/usr/include/c++/7/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 178:/usr/include/c++/7/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 179:/usr/include/c++/7/bits/stl_construct.h **** 		    "value type is destructible");
 180:/usr/include/c++/7/bits/stl_construct.h **** #endif
 181:/usr/include/c++/7/bits/stl_construct.h ****       return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 182:/usr/include/c++/7/bits/stl_construct.h **** 	__destroy_n(__first, __count);
 183:/usr/include/c++/7/bits/stl_construct.h ****     }
 184:/usr/include/c++/7/bits/stl_construct.h **** 
 185:/usr/include/c++/7/bits/stl_construct.h ****   /**
 186:/usr/include/c++/7/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 187:/usr/include/c++/7/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 188:/usr/include/c++/7/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 189:/usr/include/c++/7/bits/stl_construct.h ****    */
 190:/usr/include/c++/7/bits/stl_construct.h **** 
 191:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 192:/usr/include/c++/7/bits/stl_construct.h ****     void
 193:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 194:/usr/include/c++/7/bits/stl_construct.h **** 	     _Allocator& __alloc)
 195:/usr/include/c++/7/bits/stl_construct.h ****     {
 196:/usr/include/c++/7/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 197:/usr/include/c++/7/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 198:/usr/include/c++/7/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 199:/usr/include/c++/7/bits/stl_construct.h ****     }
 200:/usr/include/c++/7/bits/stl_construct.h **** 
 201:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 202:/usr/include/c++/7/bits/stl_construct.h ****     inline void
 203:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 2153              		.loc 6 203 0
 2154              		.cfi_startproc
 2155 0000 55       		pushq	%rbp
 2156              		.cfi_def_cfa_offset 16
 2157              		.cfi_offset 6, -16
 2158 0001 4889E5   		movq	%rsp, %rbp
 2159              		.cfi_def_cfa_register 6
 2160 0004 4883EC20 		subq	$32, %rsp
 2161 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2162 000c 488975F0 		movq	%rsi, -16(%rbp)
 2163 0010 488955E8 		movq	%rdx, -24(%rbp)
 204:/usr/include/c++/7/bits/stl_construct.h **** 	     allocator<_Tp>&)
 205:/usr/include/c++/7/bits/stl_construct.h ****     {
 206:/usr/include/c++/7/bits/stl_construct.h ****       _Destroy(__first, __last);
 2164              		.loc 6 206 0
 2165 0014 488B55F0 		movq	-16(%rbp), %rdx
 2166 0018 488B45F8 		movq	-8(%rbp), %rax
 2167 001c 4889D6   		movq	%rdx, %rsi
 2168 001f 4889C7   		movq	%rax, %rdi
 2169 0022 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 2169      00
 207:/usr/include/c++/7/bits/stl_construct.h ****     }
 2170              		.loc 6 207 0
 2171 0027 90       		nop
 2172 0028 C9       		leave
 2173              		.cfi_def_cfa 7, 8
 2174 0029 C3       		ret
 2175              		.cfi_endproc
 2176              	.LFE1470:
 2178              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2179              		.align 2
 2180              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ER
 2182              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 2183              	.LFB1472:
 779:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(__i) { }
 2184              		.loc 5 779 0
 2185              		.cfi_startproc
 2186 0000 55       		pushq	%rbp
 2187              		.cfi_def_cfa_offset 16
 2188              		.cfi_offset 6, -16
 2189 0001 4889E5   		movq	%rsp, %rbp
 2190              		.cfi_def_cfa_register 6
 2191 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2192 0008 488975F0 		movq	%rsi, -16(%rbp)
 2193              	.LBB20:
 780:/usr/include/c++/7/bits/stl_iterator.h **** 
 2194              		.loc 5 780 0
 2195 000c 488B45F0 		movq	-16(%rbp), %rax
 2196 0010 488B10   		movq	(%rax), %rdx
 2197 0013 488B45F8 		movq	-8(%rbp), %rax
 2198 0017 488910   		movq	%rdx, (%rax)
 2199              	.LBE20:
 2200 001a 90       		nop
 2201 001b 5D       		popq	%rbp
 2202              		.cfi_def_cfa 7, 8
 2203 001c C3       		ret
 2204              		.cfi_endproc
 2205              	.LFE1472:
 2207              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ER
 2208              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 2209              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 2210              		.align 2
 2211              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4ba
 2213              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2214              	.LFB1474:
 844:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 2215              		.loc 5 844 0
 2216              		.cfi_startproc
 2217 0000 55       		pushq	%rbp
 2218              		.cfi_def_cfa_offset 16
 2219              		.cfi_offset 6, -16
 2220 0001 4889E5   		movq	%rsp, %rbp
 2221              		.cfi_def_cfa_register 6
 2222 0004 48897DF8 		movq	%rdi, -8(%rbp)
 845:/usr/include/c++/7/bits/stl_iterator.h ****     };
 2223              		.loc 5 845 0
 2224 0008 488B45F8 		movq	-8(%rbp), %rax
 2225 000c 5D       		popq	%rbp
 2226              		.cfi_def_cfa 7, 8
 2227 000d C3       		ret
 2228              		.cfi_endproc
 2229              	.LFE1474:
 2231              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 2232              		.align 2
 2233              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2235              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 2236              	.LFB1476:
 779:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(__i) { }
 2237              		.loc 5 779 0
 2238              		.cfi_startproc
 2239 0000 55       		pushq	%rbp
 2240              		.cfi_def_cfa_offset 16
 2241              		.cfi_offset 6, -16
 2242 0001 4889E5   		movq	%rsp, %rbp
 2243              		.cfi_def_cfa_register 6
 2244 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2245 0008 488975F0 		movq	%rsi, -16(%rbp)
 2246              	.LBB21:
 780:/usr/include/c++/7/bits/stl_iterator.h **** 
 2247              		.loc 5 780 0
 2248 000c 488B45F0 		movq	-16(%rbp), %rax
 2249 0010 488B10   		movq	(%rax), %rdx
 2250 0013 488B45F8 		movq	-8(%rbp), %rax
 2251 0017 488910   		movq	%rdx, (%rax)
 2252              	.LBE21:
 2253 001a 90       		nop
 2254 001b 5D       		popq	%rbp
 2255              		.cfi_def_cfa 7, 8
 2256 001c C3       		ret
 2257              		.cfi_endproc
 2258              	.LFE1476:
 2260              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2261              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2262              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 2263              		.align 2
 2264              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 2266              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2267              	.LFB1478:
 844:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 2268              		.loc 5 844 0
 2269              		.cfi_startproc
 2270 0000 55       		pushq	%rbp
 2271              		.cfi_def_cfa_offset 16
 2272              		.cfi_offset 6, -16
 2273 0001 4889E5   		movq	%rsp, %rbp
 2274              		.cfi_def_cfa_register 6
 2275 0004 48897DF8 		movq	%rdi, -8(%rbp)
 845:/usr/include/c++/7/bits/stl_iterator.h ****     };
 2276              		.loc 5 845 0
 2277 0008 488B45F8 		movq	-8(%rbp), %rax
 2278 000c 5D       		popq	%rbp
 2279              		.cfi_def_cfa 7, 8
 2280 000d C3       		ret
 2281              		.cfi_endproc
 2282              	.LFE1478:
 2284              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev,"axG"
 2285              		.align 2
 2286              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
 2288              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:
 2289              	.LFB1503:
  88:/usr/include/c++/7/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 2290              		.loc 4 88 0
 2291              		.cfi_startproc
 2292 0000 55       		pushq	%rbp
 2293              		.cfi_def_cfa_offset 16
 2294              		.cfi_offset 6, -16
 2295 0001 4889E5   		movq	%rsp, %rbp
 2296              		.cfi_def_cfa_register 6
 2297 0004 4883EC10 		subq	$16, %rsp
 2298 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2299              	.LBB22:
  89:/usr/include/c++/7/bits/stl_vector.h **** 	{ }
 2300              		.loc 4 89 0
 2301 000c 488B45F8 		movq	-8(%rbp), %rax
 2302 0010 4889C7   		movq	%rax, %rdi
 2303 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2303      00
 2304 0018 488B45F8 		movq	-8(%rbp), %rax
 2305 001c 48C70000 		movq	$0, (%rax)
 2305      000000
 2306 0023 488B45F8 		movq	-8(%rbp), %rax
 2307 0027 48C74008 		movq	$0, 8(%rax)
 2307      00000000 
 2308 002f 488B45F8 		movq	-8(%rbp), %rax
 2309 0033 48C74010 		movq	$0, 16(%rax)
 2309      00000000 
 2310              	.LBE22:
  90:/usr/include/c++/7/bits/stl_vector.h **** 
 2311              		.loc 4 90 0
 2312 003b 90       		nop
 2313 003c C9       		leave
 2314              		.cfi_def_cfa 7, 8
 2315 003d C3       		ret
 2316              		.cfi_endproc
 2317              	.LFE1503:
 2319              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
 2320              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev,_ZNSt12_Vector_
 2321              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2322              		.align 2
 2323              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2325              	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev:
 2326              	.LFB1506:
 2327              		.file 7 "/usr/include/c++/7/bits/allocator.h"
   1:/usr/include/c++/7/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/7/bits/allocator.h **** 
   3:/usr/include/c++/7/bits/allocator.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/allocator.h **** //
   5:/usr/include/c++/7/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/allocator.h **** // any later version.
  10:/usr/include/c++/7/bits/allocator.h **** 
  11:/usr/include/c++/7/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/allocator.h **** 
  16:/usr/include/c++/7/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/allocator.h **** 
  20:/usr/include/c++/7/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/allocator.h **** 
  25:/usr/include/c++/7/bits/allocator.h **** /*
  26:/usr/include/c++/7/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/7/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/7/bits/allocator.h ****  *
  29:/usr/include/c++/7/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/7/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/7/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/7/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/7/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/7/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/7/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/7/bits/allocator.h ****  */
  37:/usr/include/c++/7/bits/allocator.h **** 
  38:/usr/include/c++/7/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/7/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/7/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/7/bits/allocator.h ****  */
  42:/usr/include/c++/7/bits/allocator.h **** 
  43:/usr/include/c++/7/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/7/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/7/bits/allocator.h **** 
  46:/usr/include/c++/7/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/7/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/7/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/7/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/7/bits/allocator.h **** #endif
  51:/usr/include/c++/7/bits/allocator.h **** 
  52:/usr/include/c++/7/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/7/bits/allocator.h **** #if __cplusplus >= 201103L
  54:/usr/include/c++/7/bits/allocator.h **** # define __cpp_lib_allocator_is_always_equal 201411
  55:/usr/include/c++/7/bits/allocator.h **** #endif
  56:/usr/include/c++/7/bits/allocator.h **** 
  57:/usr/include/c++/7/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/c++/7/bits/allocator.h **** {
  59:/usr/include/c++/7/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/c++/7/bits/allocator.h **** 
  61:/usr/include/c++/7/bits/allocator.h ****   /**
  62:/usr/include/c++/7/bits/allocator.h ****    *  @addtogroup allocators
  63:/usr/include/c++/7/bits/allocator.h ****    *  @{
  64:/usr/include/c++/7/bits/allocator.h ****    */
  65:/usr/include/c++/7/bits/allocator.h **** 
  66:/usr/include/c++/7/bits/allocator.h ****   /// allocator<void> specialization.
  67:/usr/include/c++/7/bits/allocator.h ****   template<>
  68:/usr/include/c++/7/bits/allocator.h ****     class allocator<void>
  69:/usr/include/c++/7/bits/allocator.h ****     {
  70:/usr/include/c++/7/bits/allocator.h ****     public:
  71:/usr/include/c++/7/bits/allocator.h ****       typedef size_t      size_type;
  72:/usr/include/c++/7/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  73:/usr/include/c++/7/bits/allocator.h ****       typedef void*       pointer;
  74:/usr/include/c++/7/bits/allocator.h ****       typedef const void* const_pointer;
  75:/usr/include/c++/7/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/7/bits/allocator.h **** 
  77:/usr/include/c++/7/bits/allocator.h ****       template<typename _Tp1>
  78:/usr/include/c++/7/bits/allocator.h **** 	struct rebind
  79:/usr/include/c++/7/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  80:/usr/include/c++/7/bits/allocator.h **** 
  81:/usr/include/c++/7/bits/allocator.h **** #if __cplusplus >= 201103L
  82:/usr/include/c++/7/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/usr/include/c++/7/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  84:/usr/include/c++/7/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  85:/usr/include/c++/7/bits/allocator.h **** 
  86:/usr/include/c++/7/bits/allocator.h ****       typedef true_type is_always_equal;
  87:/usr/include/c++/7/bits/allocator.h **** 
  88:/usr/include/c++/7/bits/allocator.h ****       template<typename _Up, typename... _Args>
  89:/usr/include/c++/7/bits/allocator.h **** 	void
  90:/usr/include/c++/7/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  91:/usr/include/c++/7/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  92:/usr/include/c++/7/bits/allocator.h **** 
  93:/usr/include/c++/7/bits/allocator.h ****       template<typename _Up>
  94:/usr/include/c++/7/bits/allocator.h **** 	void
  95:/usr/include/c++/7/bits/allocator.h **** 	destroy(_Up* __p) { __p->~_Up(); }
  96:/usr/include/c++/7/bits/allocator.h **** #endif
  97:/usr/include/c++/7/bits/allocator.h ****     };
  98:/usr/include/c++/7/bits/allocator.h **** 
  99:/usr/include/c++/7/bits/allocator.h ****   /**
 100:/usr/include/c++/7/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 101:/usr/include/c++/7/bits/allocator.h ****    *
 102:/usr/include/c++/7/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 103:/usr/include/c++/7/bits/allocator.h ****    *  for further details.
 104:/usr/include/c++/7/bits/allocator.h ****    *
 105:/usr/include/c++/7/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 106:/usr/include/c++/7/bits/allocator.h ****    */
 107:/usr/include/c++/7/bits/allocator.h ****   template<typename _Tp>
 108:/usr/include/c++/7/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
 109:/usr/include/c++/7/bits/allocator.h ****     {
 110:/usr/include/c++/7/bits/allocator.h ****    public:
 111:/usr/include/c++/7/bits/allocator.h ****       typedef size_t     size_type;
 112:/usr/include/c++/7/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 113:/usr/include/c++/7/bits/allocator.h ****       typedef _Tp*       pointer;
 114:/usr/include/c++/7/bits/allocator.h ****       typedef const _Tp* const_pointer;
 115:/usr/include/c++/7/bits/allocator.h ****       typedef _Tp&       reference;
 116:/usr/include/c++/7/bits/allocator.h ****       typedef const _Tp& const_reference;
 117:/usr/include/c++/7/bits/allocator.h ****       typedef _Tp        value_type;
 118:/usr/include/c++/7/bits/allocator.h **** 
 119:/usr/include/c++/7/bits/allocator.h ****       template<typename _Tp1>
 120:/usr/include/c++/7/bits/allocator.h **** 	struct rebind
 121:/usr/include/c++/7/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 122:/usr/include/c++/7/bits/allocator.h **** 
 123:/usr/include/c++/7/bits/allocator.h **** #if __cplusplus >= 201103L
 124:/usr/include/c++/7/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 125:/usr/include/c++/7/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 126:/usr/include/c++/7/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 127:/usr/include/c++/7/bits/allocator.h **** 
 128:/usr/include/c++/7/bits/allocator.h ****       typedef true_type is_always_equal;
 129:/usr/include/c++/7/bits/allocator.h **** #endif
 130:/usr/include/c++/7/bits/allocator.h **** 
 131:/usr/include/c++/7/bits/allocator.h ****       allocator() throw() { }
 132:/usr/include/c++/7/bits/allocator.h **** 
 133:/usr/include/c++/7/bits/allocator.h ****       allocator(const allocator& __a) throw()
 134:/usr/include/c++/7/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 135:/usr/include/c++/7/bits/allocator.h **** 
 136:/usr/include/c++/7/bits/allocator.h ****       template<typename _Tp1>
 137:/usr/include/c++/7/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) throw() { }
 138:/usr/include/c++/7/bits/allocator.h **** 
 139:/usr/include/c++/7/bits/allocator.h ****       ~allocator() throw() { }
 2328              		.loc 7 139 0
 2329              		.cfi_startproc
 2330 0000 55       		pushq	%rbp
 2331              		.cfi_def_cfa_offset 16
 2332              		.cfi_offset 6, -16
 2333 0001 4889E5   		movq	%rsp, %rbp
 2334              		.cfi_def_cfa_register 6
 2335 0004 4883EC10 		subq	$16, %rsp
 2336 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2337              	.LBB23:
 2338              		.loc 7 139 0
 2339 000c 488B45F8 		movq	-8(%rbp), %rax
 2340 0010 4889C7   		movq	%rax, %rdi
 2341 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev@PLT
 2341      00
 2342              	.LBE23:
 2343 0018 90       		nop
 2344 0019 C9       		leave
 2345              		.cfi_def_cfa 7, 8
 2346 001a C3       		ret
 2347              		.cfi_endproc
 2348              	.LFE1506:
 2350              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev
 2351              		.set	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev,_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2352              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 2353              		.align 2
 2354              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 2356              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 2357              	.LFB1508:
 176:/usr/include/c++/7/bits/stl_vector.h ****       {
 2358              		.loc 4 176 0
 2359              		.cfi_startproc
 2360 0000 55       		pushq	%rbp
 2361              		.cfi_def_cfa_offset 16
 2362              		.cfi_offset 6, -16
 2363 0001 4889E5   		movq	%rsp, %rbp
 2364              		.cfi_def_cfa_register 6
 2365 0004 4883EC20 		subq	$32, %rsp
 2366 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2367 000c 488975F0 		movq	%rsi, -16(%rbp)
 2368 0010 488955E8 		movq	%rdx, -24(%rbp)
 179:/usr/include/c++/7/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2369              		.loc 4 179 0
 2370 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2370      00
 2371 0019 7417     		je	.L123
 180:/usr/include/c++/7/bits/stl_vector.h ****       }
 2372              		.loc 4 180 0
 2373 001b 488B45F8 		movq	-8(%rbp), %rax
 2374 001f 488B55E8 		movq	-24(%rbp), %rdx
 2375 0023 488B4DF0 		movq	-16(%rbp), %rcx
 2376 0027 4889CE   		movq	%rcx, %rsi
 2377 002a 4889C7   		movq	%rax, %rdi
 2378 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m@PLT
 2378      00
 2379              	.L123:
 181:/usr/include/c++/7/bits/stl_vector.h **** 
 2380              		.loc 4 181 0
 2381 0032 90       		nop
 2382 0033 C9       		leave
 2383              		.cfi_def_cfa 7, 8
 2384 0034 C3       		ret
 2385              		.cfi_endproc
 2386              	.LFE1508:
 2388              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 2389              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 2391              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 2392              	.LFB1509:
 127:/usr/include/c++/7/bits/stl_construct.h ****     {
 2393              		.loc 6 127 0
 2394              		.cfi_startproc
 2395 0000 55       		pushq	%rbp
 2396              		.cfi_def_cfa_offset 16
 2397              		.cfi_offset 6, -16
 2398 0001 4889E5   		movq	%rsp, %rbp
 2399              		.cfi_def_cfa_register 6
 2400 0004 4883EC10 		subq	$16, %rsp
 2401 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2402 000c 488975F0 		movq	%rsi, -16(%rbp)
 137:/usr/include/c++/7/bits/stl_construct.h ****     }
 2403              		.loc 6 137 0
 2404 0010 488B55F0 		movq	-16(%rbp), %rdx
 2405 0014 488B45F8 		movq	-8(%rbp), %rax
 2406 0018 4889D6   		movq	%rdx, %rsi
 2407 001b 4889C7   		movq	%rax, %rdi
 2408 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 2408      00
 138:/usr/include/c++/7/bits/stl_construct.h **** 
 2409              		.loc 6 138 0
 2410 0023 90       		nop
 2411 0024 C9       		leave
 2412              		.cfi_def_cfa 7, 8
 2413 0025 C3       		ret
 2414              		.cfi_endproc
 2415              	.LFE1509:
 2417              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2418              		.align 2
 2419              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2421              	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:
 2422              	.LFB1521:
 131:/usr/include/c++/7/bits/allocator.h **** 
 2423              		.loc 7 131 0
 2424              		.cfi_startproc
 2425 0000 55       		pushq	%rbp
 2426              		.cfi_def_cfa_offset 16
 2427              		.cfi_offset 6, -16
 2428 0001 4889E5   		movq	%rsp, %rbp
 2429              		.cfi_def_cfa_register 6
 2430 0004 4883EC10 		subq	$16, %rsp
 2431 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2432              	.LBB24:
 131:/usr/include/c++/7/bits/allocator.h **** 
 2433              		.loc 7 131 0
 2434 000c 488B45F8 		movq	-8(%rbp), %rax
 2435 0010 4889C7   		movq	%rax, %rdi
 2436 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2436      00
 2437              	.LBE24:
 2438 0018 90       		nop
 2439 0019 C9       		leave
 2440              		.cfi_def_cfa 7, 8
 2441 001a C3       		ret
 2442              		.cfi_endproc
 2443              	.LFE1521:
 2445              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
 2446              		.set	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev,_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2447              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_
 2448              		.align 2
 2449              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
 2451              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:
 2452              	.LFB1524:
 2453              		.file 8 "/usr/include/c++/7/ext/new_allocator.h"
   1:/usr/include/c++/7/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/7/ext/new_allocator.h **** 
   3:/usr/include/c++/7/ext/new_allocator.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/ext/new_allocator.h **** //
   5:/usr/include/c++/7/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/7/ext/new_allocator.h **** 
  11:/usr/include/c++/7/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/ext/new_allocator.h **** 
  16:/usr/include/c++/7/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/ext/new_allocator.h **** 
  20:/usr/include/c++/7/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/ext/new_allocator.h **** 
  25:/usr/include/c++/7/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/7/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/7/ext/new_allocator.h ****  */
  28:/usr/include/c++/7/ext/new_allocator.h **** 
  29:/usr/include/c++/7/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/7/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/7/ext/new_allocator.h **** 
  32:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/7/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/7/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/7/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/7/ext/new_allocator.h **** #endif
  39:/usr/include/c++/7/ext/new_allocator.h **** 
  40:/usr/include/c++/7/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/7/ext/new_allocator.h **** {
  42:/usr/include/c++/7/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/7/ext/new_allocator.h **** 
  44:/usr/include/c++/7/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/7/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/7/ext/new_allocator.h **** 
  47:/usr/include/c++/7/ext/new_allocator.h ****   /**
  48:/usr/include/c++/7/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/7/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/7/ext/new_allocator.h ****    *
  51:/usr/include/c++/7/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/usr/include/c++/7/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/7/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/7/ext/new_allocator.h ****    *
  55:/usr/include/c++/7/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/7/ext/new_allocator.h ****    */
  57:/usr/include/c++/7/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/7/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/7/ext/new_allocator.h ****     {
  60:/usr/include/c++/7/ext/new_allocator.h ****     public:
  61:/usr/include/c++/7/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/7/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/7/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/7/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/7/ext/new_allocator.h **** 
  69:/usr/include/c++/7/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/7/ext/new_allocator.h **** 	struct rebind
  71:/usr/include/c++/7/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/7/ext/new_allocator.h **** 
  73:/usr/include/c++/7/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/7/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/7/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/7/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/7/ext/new_allocator.h **** #endif
  78:/usr/include/c++/7/ext/new_allocator.h **** 
  79:/usr/include/c++/7/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/7/ext/new_allocator.h **** 
  81:/usr/include/c++/7/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/7/ext/new_allocator.h **** 
  83:/usr/include/c++/7/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/7/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/7/ext/new_allocator.h **** 
  86:/usr/include/c++/7/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2454              		.loc 8 86 0
 2455              		.cfi_startproc
 2456 0000 55       		pushq	%rbp
 2457              		.cfi_def_cfa_offset 16
 2458              		.cfi_offset 6, -16
 2459 0001 4889E5   		movq	%rsp, %rbp
 2460              		.cfi_def_cfa_register 6
 2461 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2462              		.loc 8 86 0
 2463 0008 90       		nop
 2464 0009 5D       		popq	%rbp
 2465              		.cfi_def_cfa 7, 8
 2466 000a C3       		ret
 2467              		.cfi_endproc
 2468              	.LFE1524:
 2470              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
 2471              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev,_ZN9__gnu_cxx13new_allocato
 2472              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_
 2473              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
 2475              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:
 2476              	.LFB1526:
 2477              		.file 9 "/usr/include/c++/7/ext/alloc_traits.h"
   1:/usr/include/c++/7/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/7/ext/alloc_traits.h **** 
   3:/usr/include/c++/7/ext/alloc_traits.h **** // Copyright (C) 2011-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/ext/alloc_traits.h **** //
   5:/usr/include/c++/7/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/7/ext/alloc_traits.h **** 
  11:/usr/include/c++/7/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/ext/alloc_traits.h **** 
  16:/usr/include/c++/7/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/ext/alloc_traits.h **** 
  20:/usr/include/c++/7/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/ext/alloc_traits.h **** 
  25:/usr/include/c++/7/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/7/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/7/ext/alloc_traits.h ****  */
  28:/usr/include/c++/7/ext/alloc_traits.h **** 
  29:/usr/include/c++/7/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/7/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/7/ext/alloc_traits.h **** 
  32:/usr/include/c++/7/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/7/ext/alloc_traits.h **** 
  34:/usr/include/c++/7/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/7/ext/alloc_traits.h **** # include <bits/move.h>
  36:/usr/include/c++/7/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/usr/include/c++/7/ext/alloc_traits.h **** #else
  38:/usr/include/c++/7/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/usr/include/c++/7/ext/alloc_traits.h **** #endif
  40:/usr/include/c++/7/ext/alloc_traits.h **** 
  41:/usr/include/c++/7/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/7/ext/alloc_traits.h **** {
  43:/usr/include/c++/7/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/7/ext/alloc_traits.h **** 
  45:/usr/include/c++/7/ext/alloc_traits.h **** /**
  46:/usr/include/c++/7/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  47:/usr/include/c++/7/ext/alloc_traits.h ****  * @ingroup allocators
  48:/usr/include/c++/7/ext/alloc_traits.h **** */
  49:/usr/include/c++/7/ext/alloc_traits.h **** template<typename _Alloc>
  50:/usr/include/c++/7/ext/alloc_traits.h ****   struct __alloc_traits
  51:/usr/include/c++/7/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  52:/usr/include/c++/7/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  53:/usr/include/c++/7/ext/alloc_traits.h **** #endif
  54:/usr/include/c++/7/ext/alloc_traits.h ****   {
  55:/usr/include/c++/7/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  56:/usr/include/c++/7/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  57:/usr/include/c++/7/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  58:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  59:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  60:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  61:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  62:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  63:/usr/include/c++/7/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  64:/usr/include/c++/7/ext/alloc_traits.h ****     typedef value_type&                             reference;
  65:/usr/include/c++/7/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  66:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::allocate;
  67:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::deallocate;
  68:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::construct;
  69:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::destroy;
  70:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::max_size;
  71:/usr/include/c++/7/ext/alloc_traits.h **** 
  72:/usr/include/c++/7/ext/alloc_traits.h ****   private:
  73:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Ptr>
  74:/usr/include/c++/7/ext/alloc_traits.h ****       using __is_custom_pointer
  75:/usr/include/c++/7/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  76:/usr/include/c++/7/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  77:/usr/include/c++/7/ext/alloc_traits.h **** 
  78:/usr/include/c++/7/ext/alloc_traits.h ****   public:
  79:/usr/include/c++/7/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
  80:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  81:/usr/include/c++/7/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  82:/usr/include/c++/7/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  83:/usr/include/c++/7/ext/alloc_traits.h ****       {
  84:/usr/include/c++/7/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::addressof(*__p),
  85:/usr/include/c++/7/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  86:/usr/include/c++/7/ext/alloc_traits.h ****       }
  87:/usr/include/c++/7/ext/alloc_traits.h **** 
  88:/usr/include/c++/7/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  89:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Ptr>
  90:/usr/include/c++/7/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  91:/usr/include/c++/7/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  92:/usr/include/c++/7/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::addressof(*__p)); }
  93:/usr/include/c++/7/ext/alloc_traits.h **** 
  94:/usr/include/c++/7/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
  95:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
  96:/usr/include/c++/7/ext/alloc_traits.h **** 
  97:/usr/include/c++/7/ext/alloc_traits.h ****     static void _S_on_swap(_Alloc& __a, _Alloc& __b)
  98:/usr/include/c++/7/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
  99:/usr/include/c++/7/ext/alloc_traits.h **** 
 100:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 101:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 102:/usr/include/c++/7/ext/alloc_traits.h **** 
 103:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 104:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 105:/usr/include/c++/7/ext/alloc_traits.h **** 
 106:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 107:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 108:/usr/include/c++/7/ext/alloc_traits.h **** 
 109:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 110:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::is_always_equal::value; }
 111:/usr/include/c++/7/ext/alloc_traits.h **** 
 112:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 113:/usr/include/c++/7/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 114:/usr/include/c++/7/ext/alloc_traits.h **** 
 115:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Tp>
 116:/usr/include/c++/7/ext/alloc_traits.h ****       struct rebind
 117:/usr/include/c++/7/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 118:/usr/include/c++/7/ext/alloc_traits.h **** #else
 119:/usr/include/c++/7/ext/alloc_traits.h **** 
 120:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 121:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 122:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 123:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 124:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 125:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 126:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 127:/usr/include/c++/7/ext/alloc_traits.h **** 
 128:/usr/include/c++/7/ext/alloc_traits.h ****     static pointer
 129:/usr/include/c++/7/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 130:/usr/include/c++/7/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 131:/usr/include/c++/7/ext/alloc_traits.h **** 
 132:/usr/include/c++/7/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 2478              		.loc 9 132 0
 2479              		.cfi_startproc
 2480 0000 55       		pushq	%rbp
 2481              		.cfi_def_cfa_offset 16
 2482              		.cfi_offset 6, -16
 2483 0001 4889E5   		movq	%rsp, %rbp
 2484              		.cfi_def_cfa_register 6
 2485 0004 4883EC20 		subq	$32, %rsp
 2486 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2487 000c 488975F0 		movq	%rsi, -16(%rbp)
 2488 0010 488955E8 		movq	%rdx, -24(%rbp)
 133:/usr/include/c++/7/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 2489              		.loc 9 133 0
 2490 0014 488B55E8 		movq	-24(%rbp), %rdx
 2491 0018 488B4DF0 		movq	-16(%rbp), %rcx
 2492 001c 488B45F8 		movq	-8(%rbp), %rax
 2493 0020 4889CE   		movq	%rcx, %rsi
 2494 0023 4889C7   		movq	%rax, %rdi
 2495 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 2495      00
 2496 002b 90       		nop
 2497 002c C9       		leave
 2498              		.cfi_def_cfa 7, 8
 2499 002d C3       		ret
 2500              		.cfi_endproc
 2501              	.LFE1526:
 2503              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 2504              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 2506              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 2507              	.LFB1527:
 105:/usr/include/c++/7/bits/stl_construct.h **** 	{
 2508              		.loc 6 105 0
 2509              		.cfi_startproc
 2510 0000 55       		pushq	%rbp
 2511              		.cfi_def_cfa_offset 16
 2512              		.cfi_offset 6, -16
 2513 0001 4889E5   		movq	%rsp, %rbp
 2514              		.cfi_def_cfa_register 6
 2515 0004 4883EC10 		subq	$16, %rsp
 2516 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2517 000c 488975F0 		movq	%rsi, -16(%rbp)
 2518              	.L130:
 107:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2519              		.loc 6 107 0 discriminator 2
 2520 0010 488B45F8 		movq	-8(%rbp), %rax
 2521 0014 483B45F0 		cmpq	-16(%rbp), %rax
 2522 0018 741B     		je	.L131
 108:/usr/include/c++/7/bits/stl_construct.h **** 	}
 2523              		.loc 6 108 0 discriminator 1
 2524 001a 488B45F8 		movq	-8(%rbp), %rax
 2525 001e 4889C7   		movq	%rax, %rdi
 2526 0021 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 2526      00
 2527 0026 4889C7   		movq	%rax, %rdi
 2528 0029 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 2528      00
 107:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2529              		.loc 6 107 0 discriminator 1
 2530 002e 48836DF8 		subq	$-128, -8(%rbp)
 2530      80
 2531 0033 EBDB     		jmp	.L130
 2532              	.L131:
 109:/usr/include/c++/7/bits/stl_construct.h ****     };
 2533              		.loc 6 109 0
 2534 0035 90       		nop
 2535 0036 C9       		leave
 2536              		.cfi_def_cfa 7, 8
 2537 0037 C3       		ret
 2538              		.cfi_endproc
 2539              	.LFE1527:
 2541              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_
 2542              		.align 2
 2543              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
 2545              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:
 2546              	.LFB1539:
  79:/usr/include/c++/7/ext/new_allocator.h **** 
 2547              		.loc 8 79 0
 2548              		.cfi_startproc
 2549 0000 55       		pushq	%rbp
 2550              		.cfi_def_cfa_offset 16
 2551              		.cfi_offset 6, -16
 2552 0001 4889E5   		movq	%rsp, %rbp
 2553              		.cfi_def_cfa_register 6
 2554 0004 48897DF8 		movq	%rdi, -8(%rbp)
  79:/usr/include/c++/7/ext/new_allocator.h **** 
 2555              		.loc 8 79 0
 2556 0008 90       		nop
 2557 0009 5D       		popq	%rbp
 2558              		.cfi_def_cfa 7, 8
 2559 000a C3       		ret
 2560              		.cfi_endproc
 2561              	.LFE1539:
 2563              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
 2564              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev,_ZN9__gnu_cxx13new_allocato
 2565              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 2566              		.align 2
 2567              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 2569              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 2570              	.LFB1541:
  87:/usr/include/c++/7/ext/new_allocator.h **** 
  88:/usr/include/c++/7/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/7/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/7/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/7/ext/new_allocator.h **** 
  92:/usr/include/c++/7/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/7/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/7/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/7/ext/new_allocator.h **** 
  96:/usr/include/c++/7/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/7/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/7/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/7/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 100:/usr/include/c++/7/ext/new_allocator.h ****       {
 101:/usr/include/c++/7/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/7/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/7/ext/new_allocator.h **** 
 104:/usr/include/c++/7/ext/new_allocator.h **** #if __cpp_aligned_new
 105:/usr/include/c++/7/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 106:/usr/include/c++/7/ext/new_allocator.h **** 	  {
 107:/usr/include/c++/7/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 108:/usr/include/c++/7/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 109:/usr/include/c++/7/ext/new_allocator.h **** 	  }
 110:/usr/include/c++/7/ext/new_allocator.h **** #endif
 111:/usr/include/c++/7/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 112:/usr/include/c++/7/ext/new_allocator.h ****       }
 113:/usr/include/c++/7/ext/new_allocator.h **** 
 114:/usr/include/c++/7/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 115:/usr/include/c++/7/ext/new_allocator.h ****       void
 116:/usr/include/c++/7/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 2571              		.loc 8 116 0
 2572              		.cfi_startproc
 2573 0000 55       		pushq	%rbp
 2574              		.cfi_def_cfa_offset 16
 2575              		.cfi_offset 6, -16
 2576 0001 4889E5   		movq	%rsp, %rbp
 2577              		.cfi_def_cfa_register 6
 2578 0004 4883EC20 		subq	$32, %rsp
 2579 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2580 000c 488975F0 		movq	%rsi, -16(%rbp)
 2581 0010 488955E8 		movq	%rdx, -24(%rbp)
 117:/usr/include/c++/7/ext/new_allocator.h ****       {
 118:/usr/include/c++/7/ext/new_allocator.h **** #if __cpp_aligned_new
 119:/usr/include/c++/7/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 120:/usr/include/c++/7/ext/new_allocator.h **** 	  {
 121:/usr/include/c++/7/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 122:/usr/include/c++/7/ext/new_allocator.h **** 	    return;
 123:/usr/include/c++/7/ext/new_allocator.h **** 	  }
 124:/usr/include/c++/7/ext/new_allocator.h **** #endif
 125:/usr/include/c++/7/ext/new_allocator.h **** 	::operator delete(__p);
 2582              		.loc 8 125 0
 2583 0014 488B45F0 		movq	-16(%rbp), %rax
 2584 0018 4889C7   		movq	%rax, %rdi
 2585 001b E8000000 		call	_ZdlPv@PLT
 2585      00
 126:/usr/include/c++/7/ext/new_allocator.h ****       }
 2586              		.loc 8 126 0
 2587 0020 90       		nop
 2588 0021 C9       		leave
 2589              		.cfi_def_cfa 7, 8
 2590 0022 C3       		ret
 2591              		.cfi_endproc
 2592              	.LFE1541:
 2594              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 2595              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 2597              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 2598              	.LFB1542:
 2599              		.file 10 "/usr/include/c++/7/bits/move.h"
   1:/usr/include/c++/7/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/c++/7/bits/move.h **** 
   3:/usr/include/c++/7/bits/move.h **** // Copyright (C) 2007-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/move.h **** //
   5:/usr/include/c++/7/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/move.h **** // any later version.
  10:/usr/include/c++/7/bits/move.h **** 
  11:/usr/include/c++/7/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/move.h **** 
  16:/usr/include/c++/7/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/move.h **** 
  20:/usr/include/c++/7/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/move.h **** 
  25:/usr/include/c++/7/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/7/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/7/bits/move.h ****  */
  29:/usr/include/c++/7/bits/move.h **** 
  30:/usr/include/c++/7/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/7/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/7/bits/move.h **** 
  33:/usr/include/c++/7/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/7/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/7/bits/move.h **** 
  36:/usr/include/c++/7/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/7/bits/move.h **** {
  38:/usr/include/c++/7/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/7/bits/move.h **** 
  40:/usr/include/c++/7/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/7/bits/move.h ****   /**
  42:/usr/include/c++/7/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/7/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/7/bits/move.h ****    */
  45:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/7/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/usr/include/c++/7/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 2600              		.loc 10 47 0
 2601              		.cfi_startproc
 2602 0000 55       		pushq	%rbp
 2603              		.cfi_def_cfa_offset 16
 2604              		.cfi_offset 6, -16
 2605 0001 4889E5   		movq	%rsp, %rbp
 2606              		.cfi_def_cfa_register 6
 2607 0004 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/7/bits/move.h ****     { return __builtin_addressof(__r); }
 2608              		.loc 10 48 0
 2609 0008 488B45F8 		movq	-8(%rbp), %rax
 2610 000c 5D       		popq	%rbp
 2611              		.cfi_def_cfa 7, 8
 2612 000d C3       		ret
 2613              		.cfi_endproc
 2614              	.LFE1542:
 2616              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2617              		.align 2
 2618              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
 2620              	_ZN8UnitTest18DeferredTestResultD2Ev:
 2621              	.LFB1545:
 2622              		.file 11 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
 2623              		.loc 11 10 0
 2624              		.cfi_startproc
 2625              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2626              		.cfi_lsda 0x1b,.LLSDA1545
 2627 0000 55       		pushq	%rbp
 2628              		.cfi_def_cfa_offset 16
 2629              		.cfi_offset 6, -16
 2630 0001 4889E5   		movq	%rsp, %rbp
 2631              		.cfi_def_cfa_register 6
 2632 0004 53       		pushq	%rbx
 2633 0005 4883EC18 		subq	$24, %rsp
 2634              		.cfi_offset 3, -24
 2635 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2636              	.LBB25:
 2637              		.loc 11 10 0
 2638 000d 488B45E8 		movq	-24(%rbp), %rax
 2639 0011 4883C060 		addq	$96, %rax
 2640 0015 4889C7   		movq	%rax, %rdi
 2641              	.LEHB39:
 2642 0018 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev@PLT
 2642      00
 2643              	.LEHE39:
 2644              		.loc 11 10 0 is_stmt 0 discriminator 2
 2645 001d 488B45E8 		movq	-24(%rbp), %rax
 2646 0021 4883C040 		addq	$64, %rax
 2647 0025 4889C7   		movq	%rax, %rdi
 2648              	.LEHB40:
 2649 0028 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2649      00
 2650              	.LEHE40:
 2651              		.loc 11 10 0 discriminator 4
 2652 002d 488B45E8 		movq	-24(%rbp), %rax
 2653 0031 4883C020 		addq	$32, %rax
 2654 0035 4889C7   		movq	%rax, %rdi
 2655              	.LEHB41:
 2656 0038 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2656      00
 2657              	.LEHE41:
 2658              		.loc 11 10 0 discriminator 6
 2659 003d 488B45E8 		movq	-24(%rbp), %rax
 2660 0041 4889C7   		movq	%rax, %rdi
 2661              	.LEHB42:
 2662 0044 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2662      00
 2663              	.LEHE42:
 2664              	.LBE25:
 2665 0049 EB44     		jmp	.L143
 2666              	.L140:
 2667 004b 4889C3   		movq	%rax, %rbx
 2668              	.LBB26:
 2669              		.loc 11 10 0
 2670 004e 488B45E8 		movq	-24(%rbp), %rax
 2671 0052 4883C040 		addq	$64, %rax
 2672 0056 4889C7   		movq	%rax, %rdi
 2673 0059 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2673      00
 2674 005e EB03     		jmp	.L138
 2675              	.L141:
 2676 0060 4889C3   		movq	%rax, %rbx
 2677              	.L138:
 2678              		.loc 11 10 0 discriminator 3
 2679 0063 488B45E8 		movq	-24(%rbp), %rax
 2680 0067 4883C020 		addq	$32, %rax
 2681 006b 4889C7   		movq	%rax, %rdi
 2682 006e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2682      00
 2683 0073 EB03     		jmp	.L139
 2684              	.L142:
 2685 0075 4889C3   		movq	%rax, %rbx
 2686              	.L139:
 2687              		.loc 11 10 0 discriminator 5
 2688 0078 488B45E8 		movq	-24(%rbp), %rax
 2689 007c 4889C7   		movq	%rax, %rdi
 2690 007f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2690      00
 2691 0084 4889D8   		movq	%rbx, %rax
 2692 0087 4889C7   		movq	%rax, %rdi
 2693              	.LEHB43:
 2694 008a E8000000 		call	_Unwind_Resume@PLT
 2694      00
 2695              	.LEHE43:
 2696              	.L143:
 2697              	.LBE26:
 2698              		.loc 11 10 0
 2699 008f 4883C418 		addq	$24, %rsp
 2700 0093 5B       		popq	%rbx
 2701 0094 5D       		popq	%rbp
 2702              		.cfi_def_cfa 7, 8
 2703 0095 C3       		ret
 2704              		.cfi_endproc
 2705              	.LFE1545:
 2706              		.section	.gcc_except_table
 2707              	.LLSDA1545:
 2708 00e3 FF       		.byte	0xff
 2709 00e4 FF       		.byte	0xff
 2710 00e5 01       		.byte	0x1
 2711 00e6 15       		.uleb128 .LLSDACSE1545-.LLSDACSB1545
 2712              	.LLSDACSB1545:
 2713 00e7 18       		.uleb128 .LEHB39-.LFB1545
 2714 00e8 05       		.uleb128 .LEHE39-.LEHB39
 2715 00e9 4B       		.uleb128 .L140-.LFB1545
 2716 00ea 00       		.uleb128 0
 2717 00eb 28       		.uleb128 .LEHB40-.LFB1545
 2718 00ec 05       		.uleb128 .LEHE40-.LEHB40
 2719 00ed 60       		.uleb128 .L141-.LFB1545
 2720 00ee 00       		.uleb128 0
 2721 00ef 38       		.uleb128 .LEHB41-.LFB1545
 2722 00f0 05       		.uleb128 .LEHE41-.LEHB41
 2723 00f1 75       		.uleb128 .L142-.LFB1545
 2724 00f2 00       		.uleb128 0
 2725 00f3 44       		.uleb128 .LEHB42-.LFB1545
 2726 00f4 05       		.uleb128 .LEHE42-.LEHB42
 2727 00f5 00       		.uleb128 0
 2728 00f6 00       		.uleb128 0
 2729 00f7 8A01     		.uleb128 .LEHB43-.LFB1545
 2730 00f9 05       		.uleb128 .LEHE43-.LEHB43
 2731 00fa 00       		.uleb128 0
 2732 00fb 00       		.uleb128 0
 2733              	.LLSDACSE1545:
 2734              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2736              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 2737              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 2738              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 2739              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 2741              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 2742              	.LFB1543:
  97:/usr/include/c++/7/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 2743              		.loc 6 97 0 is_stmt 1
 2744              		.cfi_startproc
 2745 0000 55       		pushq	%rbp
 2746              		.cfi_def_cfa_offset 16
 2747              		.cfi_offset 6, -16
 2748 0001 4889E5   		movq	%rsp, %rbp
 2749              		.cfi_def_cfa_register 6
 2750 0004 4883EC10 		subq	$16, %rsp
 2751 0008 48897DF8 		movq	%rdi, -8(%rbp)
  98:/usr/include/c++/7/bits/stl_construct.h **** 
 2752              		.loc 6 98 0
 2753 000c 488B45F8 		movq	-8(%rbp), %rax
 2754 0010 4889C7   		movq	%rax, %rdi
 2755 0013 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 2755      00
 2756 0018 90       		nop
 2757 0019 C9       		leave
 2758              		.cfi_def_cfa 7, 8
 2759 001a C3       		ret
 2760              		.cfi_endproc
 2761              	.LFE1543:
 2763              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 2764              		.align 2
 2765              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
 2767              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 2768              	.LFB1553:
 433:/usr/include/c++/7/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 2769              		.loc 4 433 0
 2770              		.cfi_startproc
 2771              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2772              		.cfi_lsda 0x1b,.LLSDA1553
 2773 0000 55       		pushq	%rbp
 2774              		.cfi_def_cfa_offset 16
 2775              		.cfi_offset 6, -16
 2776 0001 4889E5   		movq	%rsp, %rbp
 2777              		.cfi_def_cfa_register 6
 2778 0004 53       		pushq	%rbx
 2779 0005 4883EC18 		subq	$24, %rsp
 2780              		.cfi_offset 3, -24
 2781 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2782              	.LBB27:
 435:/usr/include/c++/7/bits/stl_vector.h **** 
 2783              		.loc 4 435 0
 2784 000d 488B45E8 		movq	-24(%rbp), %rax
 2785 0011 4889C7   		movq	%rax, %rdi
 2786 0014 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 2786      00
 2787 0019 4889C2   		movq	%rax, %rdx
 434:/usr/include/c++/7/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 2788              		.loc 4 434 0
 2789 001c 488B45E8 		movq	-24(%rbp), %rax
 2790 0020 488B4808 		movq	8(%rax), %rcx
 2791 0024 488B45E8 		movq	-24(%rbp), %rax
 2792 0028 488B00   		movq	(%rax), %rax
 2793 002b 4889CE   		movq	%rcx, %rsi
 2794 002e 4889C7   		movq	%rax, %rdi
 2795              	.LEHB44:
 2796 0031 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 2796      00
 2797              	.LEHE44:
 435:/usr/include/c++/7/bits/stl_vector.h **** 
 2798              		.loc 4 435 0
 2799 0036 488B45E8 		movq	-24(%rbp), %rax
 2800 003a 4889C7   		movq	%rax, %rdi
 2801              	.LEHB45:
 2802 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 2802      00
 2803              	.LEHE45:
 2804              	.LBE27:
 2805 0042 EB1A     		jmp	.L148
 2806              	.L147:
 2807 0044 4889C3   		movq	%rax, %rbx
 2808              	.LBB28:
 2809 0047 488B45E8 		movq	-24(%rbp), %rax
 2810 004b 4889C7   		movq	%rax, %rdi
 2811 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 2811      00
 2812 0053 4889D8   		movq	%rbx, %rax
 2813 0056 4889C7   		movq	%rax, %rdi
 2814              	.LEHB46:
 2815 0059 E8000000 		call	_Unwind_Resume@PLT
 2815      00
 2816              	.LEHE46:
 2817              	.L148:
 2818              	.LBE28:
 2819 005e 4883C418 		addq	$24, %rsp
 2820 0062 5B       		popq	%rbx
 2821 0063 5D       		popq	%rbp
 2822              		.cfi_def_cfa 7, 8
 2823 0064 C3       		ret
 2824              		.cfi_endproc
 2825              	.LFE1553:
 2826              		.section	.gcc_except_table
 2827              	.LLSDA1553:
 2828 00fc FF       		.byte	0xff
 2829 00fd FF       		.byte	0xff
 2830 00fe 01       		.byte	0x1
 2831 00ff 0C       		.uleb128 .LLSDACSE1553-.LLSDACSB1553
 2832              	.LLSDACSB1553:
 2833 0100 31       		.uleb128 .LEHB44-.LFB1553
 2834 0101 05       		.uleb128 .LEHE44-.LEHB44
 2835 0102 44       		.uleb128 .L147-.LFB1553
 2836 0103 00       		.uleb128 0
 2837 0104 3D       		.uleb128 .LEHB45-.LFB1553
 2838 0105 05       		.uleb128 .LEHE45-.LEHB45
 2839 0106 00       		.uleb128 0
 2840 0107 00       		.uleb128 0
 2841 0108 59       		.uleb128 .LEHB46-.LFB1553
 2842 0109 05       		.uleb128 .LEHE46-.LEHB46
 2843 010a 00       		.uleb128 0
 2844 010b 00       		.uleb128 0
 2845              	.LLSDACSE1553:
 2846              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 2848              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
 2849              		.set	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev,_ZNSt
 2850              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2851              		.align 2
 2852              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 2854              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector
 2855              	.LFB1557:
  81:/usr/include/c++/7/bits/stl_vector.h ****       : public _Tp_alloc_type
 2856              		.loc 4 81 0
 2857              		.cfi_startproc
 2858 0000 55       		pushq	%rbp
 2859              		.cfi_def_cfa_offset 16
 2860              		.cfi_offset 6, -16
 2861 0001 4889E5   		movq	%rsp, %rbp
 2862              		.cfi_def_cfa_register 6
 2863 0004 4883EC10 		subq	$16, %rsp
 2864 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2865              	.LBB29:
  81:/usr/include/c++/7/bits/stl_vector.h ****       : public _Tp_alloc_type
 2866              		.loc 4 81 0
 2867 000c 488B45F8 		movq	-8(%rbp), %rax
 2868 0010 4889C7   		movq	%rax, %rdi
 2869 0013 E8000000 		call	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev@PLT
 2869      00
 2870              	.LBE29:
 2871 0018 90       		nop
 2872 0019 C9       		leave
 2873              		.cfi_def_cfa 7, 8
 2874 001a C3       		ret
 2875              		.cfi_endproc
 2876              	.LFE1557:
 2878              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 2879              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 2880              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2881              		.align 2
 2882              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2
 2884              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 2885              	.LFB1559:
 161:/usr/include/c++/7/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 2886              		.loc 4 161 0
 2887              		.cfi_startproc
 2888              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2889              		.cfi_lsda 0x1b,.LLSDA1559
 2890 0000 55       		pushq	%rbp
 2891              		.cfi_def_cfa_offset 16
 2892              		.cfi_offset 6, -16
 2893 0001 4889E5   		movq	%rsp, %rbp
 2894              		.cfi_def_cfa_register 6
 2895 0004 53       		pushq	%rbx
 2896 0005 4883EC18 		subq	$24, %rsp
 2897              		.cfi_offset 3, -24
 2898 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2899              	.LBB30:
 162:/usr/include/c++/7/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2900              		.loc 4 162 0
 2901 000d 488B45E8 		movq	-24(%rbp), %rax
 2902 0011 488B4010 		movq	16(%rax), %rax
 163:/usr/include/c++/7/bits/stl_vector.h **** 
 2903              		.loc 4 163 0
 2904 0015 4889C2   		movq	%rax, %rdx
 2905 0018 488B45E8 		movq	-24(%rbp), %rax
 2906 001c 488B00   		movq	(%rax), %rax
 2907 001f 4829C2   		subq	%rax, %rdx
 2908 0022 4889D0   		movq	%rdx, %rax
 2909 0025 48C1F803 		sarq	$3, %rax
 2910 0029 4889C2   		movq	%rax, %rdx
 2911 002c 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 2911      CCCCCCCC 
 2911      CCCC
 2912 0036 480FAFC2 		imulq	%rdx, %rax
 162:/usr/include/c++/7/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2913              		.loc 4 162 0
 2914 003a 4889C2   		movq	%rax, %rdx
 2915 003d 488B45E8 		movq	-24(%rbp), %rax
 2916 0041 488B08   		movq	(%rax), %rcx
 2917 0044 488B45E8 		movq	-24(%rbp), %rax
 2918 0048 4889CE   		movq	%rcx, %rsi
 2919 004b 4889C7   		movq	%rax, %rdi
 2920              	.LEHB47:
 2921 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 2921      00
 2922              	.LEHE47:
 163:/usr/include/c++/7/bits/stl_vector.h **** 
 2923              		.loc 4 163 0
 2924 0053 488B45E8 		movq	-24(%rbp), %rax
 2925 0057 4889C7   		movq	%rax, %rdi
 2926 005a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 2926      00
 2927              	.LBE30:
 2928 005f EB1A     		jmp	.L153
 2929              	.L152:
 2930 0061 4889C3   		movq	%rax, %rbx
 2931              	.LBB31:
 2932 0064 488B45E8 		movq	-24(%rbp), %rax
 2933 0068 4889C7   		movq	%rax, %rdi
 2934 006b E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 2934      00
 2935 0070 4889D8   		movq	%rbx, %rax
 2936 0073 4889C7   		movq	%rax, %rdi
 2937              	.LEHB48:
 2938 0076 E8000000 		call	_Unwind_Resume@PLT
 2938      00
 2939              	.LEHE48:
 2940              	.L153:
 2941              	.LBE31:
 2942 007b 4883C418 		addq	$24, %rsp
 2943 007f 5B       		popq	%rbx
 2944 0080 5D       		popq	%rbp
 2945              		.cfi_def_cfa 7, 8
 2946 0081 C3       		ret
 2947              		.cfi_endproc
 2948              	.LFE1559:
 2949              		.section	.gcc_except_table
 2950              	.LLSDA1559:
 2951 010c FF       		.byte	0xff
 2952 010d FF       		.byte	0xff
 2953 010e 01       		.byte	0x1
 2954 010f 08       		.uleb128 .LLSDACSE1559-.LLSDACSB1559
 2955              	.LLSDACSB1559:
 2956 0110 4E       		.uleb128 .LEHB47-.LFB1559
 2957 0111 05       		.uleb128 .LEHE47-.LEHB47
 2958 0112 61       		.uleb128 .L152-.LFB1559
 2959 0113 00       		.uleb128 0
 2960 0114 76       		.uleb128 .LEHB48-.LFB1559
 2961 0115 05       		.uleb128 .LEHE48-.LEHB48
 2962 0116 00       		.uleb128 0
 2963 0117 00       		.uleb128 0
 2964              	.LLSDACSE1559:
 2965              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2967              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1
 2968              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1E
 2969              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2970              		.align 2
 2971              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 2973              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_
 2974              	.LFB1561:
 115:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2975              		.loc 4 115 0
 2976              		.cfi_startproc
 2977 0000 55       		pushq	%rbp
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 6, -16
 2980 0001 4889E5   		movq	%rsp, %rbp
 2981              		.cfi_def_cfa_register 6
 2982 0004 48897DF8 		movq	%rdi, -8(%rbp)
 116:/usr/include/c++/7/bits/stl_vector.h **** 
 2983              		.loc 4 116 0
 2984 0008 488B45F8 		movq	-8(%rbp), %rax
 2985 000c 5D       		popq	%rbp
 2986              		.cfi_def_cfa 7, 8
 2987 000d C3       		ret
 2988              		.cfi_endproc
 2989              	.LFE1561:
 2991              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT
 2992              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT
 2994              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:
 2995              	.LFB1562:
 203:/usr/include/c++/7/bits/stl_construct.h **** 	     allocator<_Tp>&)
 2996              		.loc 6 203 0
 2997              		.cfi_startproc
 2998 0000 55       		pushq	%rbp
 2999              		.cfi_def_cfa_offset 16
 3000              		.cfi_offset 6, -16
 3001 0001 4889E5   		movq	%rsp, %rbp
 3002              		.cfi_def_cfa_register 6
 3003 0004 4883EC20 		subq	$32, %rsp
 3004 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3005 000c 488975F0 		movq	%rsi, -16(%rbp)
 3006 0010 488955E8 		movq	%rdx, -24(%rbp)
 206:/usr/include/c++/7/bits/stl_construct.h ****     }
 3007              		.loc 6 206 0
 3008 0014 488B55F0 		movq	-16(%rbp), %rdx
 3009 0018 488B45F8 		movq	-8(%rbp), %rax
 3010 001c 4889D6   		movq	%rdx, %rsi
 3011 001f 4889C7   		movq	%rax, %rdi
 3012 0022 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 3012      00
 3013              		.loc 6 207 0
 3014 0027 90       		nop
 3015 0028 C9       		leave
 3016              		.cfi_def_cfa 7, 8
 3017 0029 C3       		ret
 3018              		.cfi_endproc
 3019              	.LFE1562:
 3021              		.section	.text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev,"axG",@pr
 3022              		.align 2
 3023              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
 3025              	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 3026              	.LFB1564:
 3027              		.loc 7 139 0
 3028              		.cfi_startproc
 3029 0000 55       		pushq	%rbp
 3030              		.cfi_def_cfa_offset 16
 3031              		.cfi_offset 6, -16
 3032 0001 4889E5   		movq	%rsp, %rbp
 3033              		.cfi_def_cfa_register 6
 3034 0004 4883EC10 		subq	$16, %rsp
 3035 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3036              	.LBB32:
 3037              		.loc 7 139 0
 3038 000c 488B45F8 		movq	-8(%rbp), %rax
 3039 0010 4889C7   		movq	%rax, %rdi
 3040 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 3040      00
 3041              	.LBE32:
 3042 0018 90       		nop
 3043 0019 C9       		leave
 3044              		.cfi_def_cfa 7, 8
 3045 001a C3       		ret
 3046              		.cfi_endproc
 3047              	.LFE1564:
 3049              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
 3050              		.set	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev,_ZNSaISt4pairIiNSt7
 3051              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3052              		.align 2
 3053              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13
 3055              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deal
 3056              	.LFB1566:
 176:/usr/include/c++/7/bits/stl_vector.h ****       {
 3057              		.loc 4 176 0
 3058              		.cfi_startproc
 3059 0000 55       		pushq	%rbp
 3060              		.cfi_def_cfa_offset 16
 3061              		.cfi_offset 6, -16
 3062 0001 4889E5   		movq	%rsp, %rbp
 3063              		.cfi_def_cfa_register 6
 3064 0004 4883EC20 		subq	$32, %rsp
 3065 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3066 000c 488975F0 		movq	%rsi, -16(%rbp)
 3067 0010 488955E8 		movq	%rdx, -24(%rbp)
 179:/usr/include/c++/7/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 3068              		.loc 4 179 0
 3069 0014 48837DF0 		cmpq	$0, -16(%rbp)
 3069      00
 3070 0019 7417     		je	.L160
 180:/usr/include/c++/7/bits/stl_vector.h ****       }
 3071              		.loc 4 180 0
 3072 001b 488B45F8 		movq	-8(%rbp), %rax
 3073 001f 488B55E8 		movq	-24(%rbp), %rdx
 3074 0023 488B4DF0 		movq	-16(%rbp), %rcx
 3075 0027 4889CE   		movq	%rcx, %rsi
 3076 002a 4889C7   		movq	%rax, %rdi
 3077 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 3077      00
 3078              	.L160:
 181:/usr/include/c++/7/bits/stl_vector.h **** 
 3079              		.loc 4 181 0
 3080 0032 90       		nop
 3081 0033 C9       		leave
 3082              		.cfi_def_cfa 7, 8
 3083 0034 C3       		ret
 3084              		.cfi_endproc
 3085              	.LFE1566:
 3087              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9
 3088              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
 3090              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:
 3091              	.LFB1567:
 127:/usr/include/c++/7/bits/stl_construct.h ****     {
 3092              		.loc 6 127 0
 3093              		.cfi_startproc
 3094 0000 55       		pushq	%rbp
 3095              		.cfi_def_cfa_offset 16
 3096              		.cfi_offset 6, -16
 3097 0001 4889E5   		movq	%rsp, %rbp
 3098              		.cfi_def_cfa_register 6
 3099 0004 4883EC10 		subq	$16, %rsp
 3100 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3101 000c 488975F0 		movq	%rsi, -16(%rbp)
 137:/usr/include/c++/7/bits/stl_construct.h ****     }
 3102              		.loc 6 137 0
 3103 0010 488B55F0 		movq	-16(%rbp), %rdx
 3104 0014 488B45F8 		movq	-8(%rbp), %rax
 3105 0018 4889D6   		movq	%rdx, %rsi
 3106 001b 4889C7   		movq	%rax, %rdi
 3107 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 3107      00
 138:/usr/include/c++/7/bits/stl_construct.h **** 
 3108              		.loc 6 138 0
 3109 0023 90       		nop
 3110 0024 C9       		leave
 3111              		.cfi_def_cfa 7, 8
 3112 0025 C3       		ret
 3113              		.cfi_endproc
 3114              	.LFE1567:
 3116              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3117              		.align 2
 3118              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3120              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 3121              	.LFB1569:
  86:/usr/include/c++/7/ext/new_allocator.h **** 
 3122              		.loc 8 86 0
 3123              		.cfi_startproc
 3124 0000 55       		pushq	%rbp
 3125              		.cfi_def_cfa_offset 16
 3126              		.cfi_offset 6, -16
 3127 0001 4889E5   		movq	%rsp, %rbp
 3128              		.cfi_def_cfa_register 6
 3129 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/7/ext/new_allocator.h **** 
 3130              		.loc 8 86 0
 3131 0008 90       		nop
 3132 0009 5D       		popq	%rbp
 3133              		.cfi_def_cfa 7, 8
 3134 000a C3       		ret
 3135              		.cfi_endproc
 3136              	.LFE1569:
 3138              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3139              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 3140              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3141              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3143              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10
 3144              	.LFB1571:
 132:/usr/include/c++/7/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 3145              		.loc 9 132 0
 3146              		.cfi_startproc
 3147 0000 55       		pushq	%rbp
 3148              		.cfi_def_cfa_offset 16
 3149              		.cfi_offset 6, -16
 3150 0001 4889E5   		movq	%rsp, %rbp
 3151              		.cfi_def_cfa_register 6
 3152 0004 4883EC20 		subq	$32, %rsp
 3153 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3154 000c 488975F0 		movq	%rsi, -16(%rbp)
 3155 0010 488955E8 		movq	%rdx, -24(%rbp)
 3156              		.loc 9 133 0
 3157 0014 488B55E8 		movq	-24(%rbp), %rdx
 3158 0018 488B4DF0 		movq	-16(%rbp), %rcx
 3159 001c 488B45F8 		movq	-8(%rbp), %rax
 3160 0020 4889CE   		movq	%rcx, %rsi
 3161 0023 4889C7   		movq	%rax, %rdi
 3162 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE1
 3162      00
 3163 002b 90       		nop
 3164 002c C9       		leave
 3165              		.cfi_def_cfa 7, 8
 3166 002d C3       		ret
 3167              		.cfi_endproc
 3168              	.LFE1571:
 3170              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_t
 3171              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcES
 3173              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3174              	.LFB1572:
 105:/usr/include/c++/7/bits/stl_construct.h **** 	{
 3175              		.loc 6 105 0
 3176              		.cfi_startproc
 3177 0000 55       		pushq	%rbp
 3178              		.cfi_def_cfa_offset 16
 3179              		.cfi_offset 6, -16
 3180 0001 4889E5   		movq	%rsp, %rbp
 3181              		.cfi_def_cfa_register 6
 3182 0004 4883EC10 		subq	$16, %rsp
 3183 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3184 000c 488975F0 		movq	%rsi, -16(%rbp)
 3185              	.L166:
 107:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3186              		.loc 6 107 0 discriminator 2
 3187 0010 488B45F8 		movq	-8(%rbp), %rax
 3188 0014 483B45F0 		cmpq	-16(%rbp), %rax
 3189 0018 741B     		je	.L167
 108:/usr/include/c++/7/bits/stl_construct.h **** 	}
 3190              		.loc 6 108 0 discriminator 1
 3191 001a 488B45F8 		movq	-8(%rbp), %rax
 3192 001e 4889C7   		movq	%rax, %rdi
 3193 0021 E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 3193      00
 3194 0026 4889C7   		movq	%rax, %rdi
 3195 0029 E8000000 		call	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_@PLT
 3195      00
 107:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3196              		.loc 6 107 0 discriminator 1
 3197 002e 488345F8 		addq	$40, -8(%rbp)
 3197      28
 3198 0033 EBDB     		jmp	.L166
 3199              	.L167:
 109:/usr/include/c++/7/bits/stl_construct.h ****     };
 3200              		.loc 6 109 0
 3201 0035 90       		nop
 3202 0036 C9       		leave
 3203              		.cfi_def_cfa 7, 8
 3204 0037 C3       		ret
 3205              		.cfi_endproc
 3206              	.LFE1572:
 3208              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3209              		.align 2
 3210              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3212              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deall
 3213              	.LFB1573:
 116:/usr/include/c++/7/ext/new_allocator.h ****       {
 3214              		.loc 8 116 0
 3215              		.cfi_startproc
 3216 0000 55       		pushq	%rbp
 3217              		.cfi_def_cfa_offset 16
 3218              		.cfi_offset 6, -16
 3219 0001 4889E5   		movq	%rsp, %rbp
 3220              		.cfi_def_cfa_register 6
 3221 0004 4883EC20 		subq	$32, %rsp
 3222 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3223 000c 488975F0 		movq	%rsi, -16(%rbp)
 3224 0010 488955E8 		movq	%rdx, -24(%rbp)
 125:/usr/include/c++/7/ext/new_allocator.h ****       }
 3225              		.loc 8 125 0
 3226 0014 488B45F0 		movq	-16(%rbp), %rax
 3227 0018 4889C7   		movq	%rax, %rdi
 3228 001b E8000000 		call	_ZdlPv@PLT
 3228      00
 3229              		.loc 8 126 0
 3230 0020 90       		nop
 3231 0021 C9       		leave
 3232              		.cfi_def_cfa 7, 8
 3233 0022 C3       		ret
 3234              		.cfi_endproc
 3235              	.LFE1573:
 3237              		.section	.text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT
 3238              		.weak	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
 3240              	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:
 3241              	.LFB1574:
  47:/usr/include/c++/7/bits/move.h ****     { return __builtin_addressof(__r); }
 3242              		.loc 10 47 0
 3243              		.cfi_startproc
 3244 0000 55       		pushq	%rbp
 3245              		.cfi_def_cfa_offset 16
 3246              		.cfi_offset 6, -16
 3247 0001 4889E5   		movq	%rsp, %rbp
 3248              		.cfi_def_cfa_register 6
 3249 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3250              		.loc 10 48 0
 3251 0008 488B45F8 		movq	-8(%rbp), %rax
 3252 000c 5D       		popq	%rbp
 3253              		.cfi_def_cfa 7, 8
 3254 000d C3       		ret
 3255              		.cfi_endproc
 3256              	.LFE1574:
 3258              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev,"axG",@progbi
 3259              		.align 2
 3260              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 3262              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
 3263              	.LFB1577:
 3264              		.file 12 "/usr/include/c++/7/bits/stl_pair.h"
   1:/usr/include/c++/7/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_pair.h **** 
   3:/usr/include/c++/7/bits/stl_pair.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_pair.h **** //
   5:/usr/include/c++/7/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_pair.h **** 
  11:/usr/include/c++/7/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_pair.h **** 
  16:/usr/include/c++/7/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_pair.h **** 
  20:/usr/include/c++/7/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_pair.h **** 
  25:/usr/include/c++/7/bits/stl_pair.h **** /*
  26:/usr/include/c++/7/bits/stl_pair.h ****  *
  27:/usr/include/c++/7/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_pair.h ****  *
  30:/usr/include/c++/7/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_pair.h ****  *
  38:/usr/include/c++/7/bits/stl_pair.h ****  *
  39:/usr/include/c++/7/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/7/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_pair.h ****  *
  42:/usr/include/c++/7/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_pair.h ****  */
  50:/usr/include/c++/7/bits/stl_pair.h **** 
  51:/usr/include/c++/7/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/7/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/7/bits/stl_pair.h ****  */
  55:/usr/include/c++/7/bits/stl_pair.h **** 
  56:/usr/include/c++/7/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/7/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/7/bits/stl_pair.h **** 
  59:/usr/include/c++/7/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/7/bits/stl_pair.h **** 
  61:/usr/include/c++/7/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/7/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/usr/include/c++/7/bits/stl_pair.h **** #endif
  64:/usr/include/c++/7/bits/stl_pair.h **** 
  65:/usr/include/c++/7/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/7/bits/stl_pair.h **** {
  67:/usr/include/c++/7/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/c++/7/bits/stl_pair.h **** 
  69:/usr/include/c++/7/bits/stl_pair.h ****   /**
  70:/usr/include/c++/7/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/usr/include/c++/7/bits/stl_pair.h ****    *  @{
  72:/usr/include/c++/7/bits/stl_pair.h ****    */
  73:/usr/include/c++/7/bits/stl_pair.h **** 
  74:/usr/include/c++/7/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/usr/include/c++/7/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/usr/include/c++/7/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  77:/usr/include/c++/7/bits/stl_pair.h **** 
  78:/usr/include/c++/7/bits/stl_pair.h ****   /// piecewise_construct
  79:/usr/include/c++/7/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  80:/usr/include/c++/7/bits/stl_pair.h ****     piecewise_construct_t();
  81:/usr/include/c++/7/bits/stl_pair.h **** 
  82:/usr/include/c++/7/bits/stl_pair.h ****   // Forward declarations.
  83:/usr/include/c++/7/bits/stl_pair.h ****   template<typename...>
  84:/usr/include/c++/7/bits/stl_pair.h ****     class tuple;
  85:/usr/include/c++/7/bits/stl_pair.h **** 
  86:/usr/include/c++/7/bits/stl_pair.h ****   template<std::size_t...>
  87:/usr/include/c++/7/bits/stl_pair.h ****     struct _Index_tuple;
  88:/usr/include/c++/7/bits/stl_pair.h **** 
  89:/usr/include/c++/7/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  90:/usr/include/c++/7/bits/stl_pair.h ****   // constructors.
  91:/usr/include/c++/7/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  92:/usr/include/c++/7/bits/stl_pair.h ****   // is_convertible if the types are the same to
  93:/usr/include/c++/7/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
  94:/usr/include/c++/7/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
  95:/usr/include/c++/7/bits/stl_pair.h ****     struct _PCC
  96:/usr/include/c++/7/bits/stl_pair.h ****     {
  97:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
  98:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
  99:/usr/include/c++/7/bits/stl_pair.h ****       {
 100:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 101:/usr/include/c++/7/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 102:/usr/include/c++/7/bits/stl_pair.h ****       }
 103:/usr/include/c++/7/bits/stl_pair.h **** 
 104:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 105:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 106:/usr/include/c++/7/bits/stl_pair.h ****       {
 107:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 108:/usr/include/c++/7/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 109:/usr/include/c++/7/bits/stl_pair.h ****       }
 110:/usr/include/c++/7/bits/stl_pair.h **** 
 111:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 112:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 113:/usr/include/c++/7/bits/stl_pair.h ****       {
 114:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 115:/usr/include/c++/7/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 116:/usr/include/c++/7/bits/stl_pair.h ****       }
 117:/usr/include/c++/7/bits/stl_pair.h **** 
 118:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 119:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 120:/usr/include/c++/7/bits/stl_pair.h ****       {
 121:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 122:/usr/include/c++/7/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 123:/usr/include/c++/7/bits/stl_pair.h ****       }
 124:/usr/include/c++/7/bits/stl_pair.h **** 
 125:/usr/include/c++/7/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 126:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 127:/usr/include/c++/7/bits/stl_pair.h ****       {
 128:/usr/include/c++/7/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 129:/usr/include/c++/7/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 130:/usr/include/c++/7/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 131:/usr/include/c++/7/bits/stl_pair.h **** 				       __do_converts,
 132:/usr/include/c++/7/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 133:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 134:/usr/include/c++/7/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 135:/usr/include/c++/7/bits/stl_pair.h **** 		      __converts
 136:/usr/include/c++/7/bits/stl_pair.h **** 		      >::value;
 137:/usr/include/c++/7/bits/stl_pair.h ****       }
 138:/usr/include/c++/7/bits/stl_pair.h **** 
 139:/usr/include/c++/7/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 140:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 141:/usr/include/c++/7/bits/stl_pair.h ****       {
 142:/usr/include/c++/7/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 143:/usr/include/c++/7/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 144:/usr/include/c++/7/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 145:/usr/include/c++/7/bits/stl_pair.h **** 				       __do_converts,
 146:/usr/include/c++/7/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 147:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 148:/usr/include/c++/7/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 149:/usr/include/c++/7/bits/stl_pair.h **** 		      __converts
 150:/usr/include/c++/7/bits/stl_pair.h **** 		      >::value;
 151:/usr/include/c++/7/bits/stl_pair.h ****       }
 152:/usr/include/c++/7/bits/stl_pair.h ****   };
 153:/usr/include/c++/7/bits/stl_pair.h **** 
 154:/usr/include/c++/7/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 155:/usr/include/c++/7/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 156:/usr/include/c++/7/bits/stl_pair.h ****     {
 157:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 158:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 159:/usr/include/c++/7/bits/stl_pair.h ****       {
 160:/usr/include/c++/7/bits/stl_pair.h **** 	return false;
 161:/usr/include/c++/7/bits/stl_pair.h ****       }
 162:/usr/include/c++/7/bits/stl_pair.h **** 
 163:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 165:/usr/include/c++/7/bits/stl_pair.h ****       {
 166:/usr/include/c++/7/bits/stl_pair.h **** 	return false;
 167:/usr/include/c++/7/bits/stl_pair.h ****       }
 168:/usr/include/c++/7/bits/stl_pair.h **** 
 169:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 171:/usr/include/c++/7/bits/stl_pair.h ****       {
 172:/usr/include/c++/7/bits/stl_pair.h **** 	return false;
 173:/usr/include/c++/7/bits/stl_pair.h ****       }
 174:/usr/include/c++/7/bits/stl_pair.h **** 
 175:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 177:/usr/include/c++/7/bits/stl_pair.h ****       {
 178:/usr/include/c++/7/bits/stl_pair.h **** 	return false;
 179:/usr/include/c++/7/bits/stl_pair.h ****       }
 180:/usr/include/c++/7/bits/stl_pair.h ****   };
 181:/usr/include/c++/7/bits/stl_pair.h **** 
 182:/usr/include/c++/7/bits/stl_pair.h ****   // PR libstdc++/79141, a utility type for preventing
 183:/usr/include/c++/7/bits/stl_pair.h ****   // initialization of an argument of a disabled assignment
 184:/usr/include/c++/7/bits/stl_pair.h ****   // operator from a pair of empty braces.
 185:/usr/include/c++/7/bits/stl_pair.h ****   struct __nonesuch_no_braces : std::__nonesuch {
 186:/usr/include/c++/7/bits/stl_pair.h ****     explicit __nonesuch_no_braces(const __nonesuch&) = delete;
 187:/usr/include/c++/7/bits/stl_pair.h ****   };
 188:/usr/include/c++/7/bits/stl_pair.h **** 
 189:/usr/include/c++/7/bits/stl_pair.h **** #endif
 190:/usr/include/c++/7/bits/stl_pair.h **** 
 191:/usr/include/c++/7/bits/stl_pair.h ****  /**
 192:/usr/include/c++/7/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 193:/usr/include/c++/7/bits/stl_pair.h ****    *
 194:/usr/include/c++/7/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 195:/usr/include/c++/7/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 196:/usr/include/c++/7/bits/stl_pair.h ****    */
 197:/usr/include/c++/7/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 198:/usr/include/c++/7/bits/stl_pair.h ****     struct pair
 3265              		.loc 12 198 0
 3266              		.cfi_startproc
 3267 0000 55       		pushq	%rbp
 3268              		.cfi_def_cfa_offset 16
 3269              		.cfi_offset 6, -16
 3270 0001 4889E5   		movq	%rsp, %rbp
 3271              		.cfi_def_cfa_register 6
 3272 0004 4883EC10 		subq	$16, %rsp
 3273 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3274              	.LBB33:
 3275              		.loc 12 198 0
 3276 000c 488B45F8 		movq	-8(%rbp), %rax
 3277 0010 4883C008 		addq	$8, %rax
 3278 0014 4889C7   		movq	%rax, %rdi
 3279 0017 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 3279      00
 3280              	.LBE33:
 3281 001c 90       		nop
 3282 001d C9       		leave
 3283              		.cfi_def_cfa 7, 8
 3284 001e C3       		ret
 3285              		.cfi_endproc
 3286              	.LFE1577:
 3288              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 3289              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev,_ZNSt4pairIiNSt7__cxx11
 3290              		.section	.text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_,"
 3291              		.weak	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
 3293              	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:
 3294              	.LFB1575:
  97:/usr/include/c++/7/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 3295              		.loc 6 97 0
 3296              		.cfi_startproc
 3297 0000 55       		pushq	%rbp
 3298              		.cfi_def_cfa_offset 16
 3299              		.cfi_offset 6, -16
 3300 0001 4889E5   		movq	%rsp, %rbp
 3301              		.cfi_def_cfa_register 6
 3302 0004 4883EC10 		subq	$16, %rsp
 3303 0008 48897DF8 		movq	%rdi, -8(%rbp)
  98:/usr/include/c++/7/bits/stl_construct.h **** 
 3304              		.loc 6 98 0
 3305 000c 488B45F8 		movq	-8(%rbp), %rax
 3306 0010 4889C7   		movq	%rax, %rdi
 3307 0013 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 3307      00
 3308 0018 90       		nop
 3309 0019 C9       		leave
 3310              		.cfi_def_cfa 7, 8
 3311 001a C3       		ret
 3312              		.cfi_endproc
 3313              	.LFE1575:
 3315              		.weak	_ZTVN8UnitTest15XmlTestReporterE
 3316              		.section	.data.rel.ro._ZTVN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTVN8UnitTest15XmlTestRepo
 3317              		.align 8
 3320              	_ZTVN8UnitTest15XmlTestReporterE:
 3321 0000 00000000 		.quad	0
 3321      00000000 
 3322 0008 00000000 		.quad	_ZTIN8UnitTest15XmlTestReporterE
 3322      00000000 
 3323 0010 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD1Ev
 3323      00000000 
 3324 0018 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD0Ev
 3324      00000000 
 3325 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 3325      00000000 
 3326 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 3326      00000000 
 3327 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 3327      00000000 
 3328 0038 00000000 		.quad	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 3328      00000000 
 3329              		.section	.text._ZN8UnitTest15XmlTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3330              		.align 2
 3331              		.weak	_ZN8UnitTest15XmlTestReporterD2Ev
 3333              	_ZN8UnitTest15XmlTestReporterD2Ev:
 3334              	.LFB1580:
 3335              		.file 13 "XmlTestReporter.h"
   1:XmlTestReporter.h **** #ifndef UNITTEST_XMLTESTREPORTER_H
   2:XmlTestReporter.h **** #define UNITTEST_XMLTESTREPORTER_H
   3:XmlTestReporter.h **** 
   4:XmlTestReporter.h **** #include "DeferredTestReporter.h"
   5:XmlTestReporter.h **** 
   6:XmlTestReporter.h **** #include <iosfwd>
   7:XmlTestReporter.h **** 
   8:XmlTestReporter.h **** namespace UnitTest
   9:XmlTestReporter.h **** {
  10:XmlTestReporter.h **** 
  11:XmlTestReporter.h **** class XmlTestReporter : public DeferredTestReporter
 3336              		.loc 13 11 0
 3337              		.cfi_startproc
 3338 0000 55       		pushq	%rbp
 3339              		.cfi_def_cfa_offset 16
 3340              		.cfi_offset 6, -16
 3341 0001 4889E5   		movq	%rsp, %rbp
 3342              		.cfi_def_cfa_register 6
 3343 0004 4883EC10 		subq	$16, %rsp
 3344 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3345              	.LBB34:
 3346              		.loc 13 11 0
 3347 000c 488B0500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rax
 3347      000000
 3348 0013 488D5010 		leaq	16(%rax), %rdx
 3349 0017 488B45F8 		movq	-8(%rbp), %rax
 3350 001b 488910   		movq	%rdx, (%rax)
 3351 001e 488B45F8 		movq	-8(%rbp), %rax
 3352 0022 4889C7   		movq	%rax, %rdi
 3353 0025 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD2Ev@PLT
 3353      00
 3354              	.LBE34:
 3355 002a 90       		nop
 3356 002b C9       		leave
 3357              		.cfi_def_cfa 7, 8
 3358 002c C3       		ret
 3359              		.cfi_endproc
 3360              	.LFE1580:
 3362              		.weak	_ZN8UnitTest15XmlTestReporterD1Ev
 3363              		.set	_ZN8UnitTest15XmlTestReporterD1Ev,_ZN8UnitTest15XmlTestReporterD2Ev
 3364              		.section	.text._ZN8UnitTest15XmlTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3365              		.align 2
 3366              		.weak	_ZN8UnitTest15XmlTestReporterD0Ev
 3368              	_ZN8UnitTest15XmlTestReporterD0Ev:
 3369              	.LFB1582:
 3370              		.loc 13 11 0
 3371              		.cfi_startproc
 3372              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3373              		.cfi_lsda 0x1b,.LLSDA1582
 3374 0000 55       		pushq	%rbp
 3375              		.cfi_def_cfa_offset 16
 3376              		.cfi_offset 6, -16
 3377 0001 4889E5   		movq	%rsp, %rbp
 3378              		.cfi_def_cfa_register 6
 3379 0004 53       		pushq	%rbx
 3380 0005 4883EC18 		subq	$24, %rsp
 3381              		.cfi_offset 3, -24
 3382 0009 48897DE8 		movq	%rdi, -24(%rbp)
 3383              		.loc 13 11 0
 3384 000d 488B45E8 		movq	-24(%rbp), %rax
 3385 0011 4889C7   		movq	%rax, %rdi
 3386              	.LEHB49:
 3387 0014 E8000000 		call	_ZN8UnitTest15XmlTestReporterD1Ev@PLT
 3387      00
 3388              	.LEHE49:
 3389              		.loc 13 11 0 is_stmt 0 discriminator 2
 3390 0019 488B45E8 		movq	-24(%rbp), %rax
 3391 001d 4889C7   		movq	%rax, %rdi
 3392 0020 E8000000 		call	_ZdlPv@PLT
 3392      00
 3393 0025 EB1A     		jmp	.L177
 3394              	.L176:
 3395 0027 4889C3   		movq	%rax, %rbx
 3396              		.loc 13 11 0
 3397 002a 488B45E8 		movq	-24(%rbp), %rax
 3398 002e 4889C7   		movq	%rax, %rdi
 3399 0031 E8000000 		call	_ZdlPv@PLT
 3399      00
 3400 0036 4889D8   		movq	%rbx, %rax
 3401 0039 4889C7   		movq	%rax, %rdi
 3402              	.LEHB50:
 3403 003c E8000000 		call	_Unwind_Resume@PLT
 3403      00
 3404              	.LEHE50:
 3405              	.L177:
 3406 0041 4883C418 		addq	$24, %rsp
 3407 0045 5B       		popq	%rbx
 3408 0046 5D       		popq	%rbp
 3409              		.cfi_def_cfa 7, 8
 3410 0047 C3       		ret
 3411              		.cfi_endproc
 3412              	.LFE1582:
 3413              		.section	.gcc_except_table
 3414              	.LLSDA1582:
 3415 0118 FF       		.byte	0xff
 3416 0119 FF       		.byte	0xff
 3417 011a 01       		.byte	0x1
 3418 011b 08       		.uleb128 .LLSDACSE1582-.LLSDACSB1582
 3419              	.LLSDACSB1582:
 3420 011c 14       		.uleb128 .LEHB49-.LFB1582
 3421 011d 05       		.uleb128 .LEHE49-.LEHB49
 3422 011e 27       		.uleb128 .L176-.LFB1582
 3423 011f 00       		.uleb128 0
 3424 0120 3C       		.uleb128 .LEHB50-.LFB1582
 3425 0121 05       		.uleb128 .LEHE50-.LEHB50
 3426 0122 00       		.uleb128 0
 3427 0123 00       		.uleb128 0
 3428              	.LLSDACSE1582:
 3429              		.section	.text._ZN8UnitTest15XmlTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3431              		.weak	_ZTIN8UnitTest15XmlTestReporterE
 3432              		.section	.data.rel.ro._ZTIN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTIN8UnitTest15XmlTestRepo
 3433              		.align 8
 3436              	_ZTIN8UnitTest15XmlTestReporterE:
 3437 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 3437      00000000 
 3438 0008 00000000 		.quad	_ZTSN8UnitTest15XmlTestReporterE
 3438      00000000 
 3439 0010 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 3439      00000000 
 3440              		.weak	_ZTSN8UnitTest15XmlTestReporterE
 3441              		.section	.rodata._ZTSN8UnitTest15XmlTestReporterE,"aG",@progbits,_ZTSN8UnitTest15XmlTestReporterE,
 3442              		.align 16
 3445              	_ZTSN8UnitTest15XmlTestReporterE:
 3446 0000 4E38556E 		.string	"N8UnitTest15XmlTestReporterE"
 3446      69745465 
 3446      73743135 
 3446      586D6C54 
 3446      65737452 
 3447              		.text
 3449              	_Z41__static_initialization_and_destruction_0ii:
 3450              	.LFB1583:
 126:XmlTestReporter.cpp **** 
 127:XmlTestReporter.cpp **** }
 3451              		.loc 1 127 0 is_stmt 1
 3452              		.cfi_startproc
 3453 0a3d 55       		pushq	%rbp
 3454              		.cfi_def_cfa_offset 16
 3455              		.cfi_offset 6, -16
 3456 0a3e 4889E5   		movq	%rsp, %rbp
 3457              		.cfi_def_cfa_register 6
 3458 0a41 4883EC10 		subq	$16, %rsp
 3459 0a45 897DFC   		movl	%edi, -4(%rbp)
 3460 0a48 8975F8   		movl	%esi, -8(%rbp)
 3461              		.loc 1 127 0
 3462 0a4b 837DFC01 		cmpl	$1, -4(%rbp)
 3463 0a4f 7532     		jne	.L180
 3464              		.loc 1 127 0 is_stmt 0 discriminator 1
 3465 0a51 817DF8FF 		cmpl	$65535, -8(%rbp)
 3465      FF0000
 3466 0a58 7529     		jne	.L180
 3467              		.file 14 "/usr/include/c++/7/iostream"
   1:/usr/include/c++/7/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/7/iostream **** 
   3:/usr/include/c++/7/iostream **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/iostream **** //
   5:/usr/include/c++/7/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/iostream **** // any later version.
  10:/usr/include/c++/7/iostream **** 
  11:/usr/include/c++/7/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/7/iostream **** 
  16:/usr/include/c++/7/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/iostream **** 
  20:/usr/include/c++/7/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/iostream **** 
  25:/usr/include/c++/7/iostream **** /** @file include/iostream
  26:/usr/include/c++/7/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/7/iostream ****  */
  28:/usr/include/c++/7/iostream **** 
  29:/usr/include/c++/7/iostream **** //
  30:/usr/include/c++/7/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/7/iostream **** //
  32:/usr/include/c++/7/iostream **** 
  33:/usr/include/c++/7/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/7/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/7/iostream **** 
  36:/usr/include/c++/7/iostream **** #pragma GCC system_header
  37:/usr/include/c++/7/iostream **** 
  38:/usr/include/c++/7/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/7/iostream **** #include <ostream>
  40:/usr/include/c++/7/iostream **** #include <istream>
  41:/usr/include/c++/7/iostream **** 
  42:/usr/include/c++/7/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/7/iostream **** {
  44:/usr/include/c++/7/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/7/iostream **** 
  46:/usr/include/c++/7/iostream ****   /**
  47:/usr/include/c++/7/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/7/iostream ****    *
  49:/usr/include/c++/7/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/7/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/7/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/7/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/7/iostream ****    *
  54:/usr/include/c++/7/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/7/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/7/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/7/iostream ****    *  manual linked to above.
  58:/usr/include/c++/7/iostream ****   */
  59:/usr/include/c++/7/iostream ****   //@{
  60:/usr/include/c++/7/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/7/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/7/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/7/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/7/iostream **** 
  65:/usr/include/c++/7/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/7/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/7/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/7/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/7/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/7/iostream **** #endif
  71:/usr/include/c++/7/iostream ****   //@}
  72:/usr/include/c++/7/iostream **** 
  73:/usr/include/c++/7/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/7/iostream ****   static ios_base::Init __ioinit;
 3468              		.loc 14 74 0 is_stmt 1
 3469 0a5a 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi
 3469      000000
 3470 0a61 E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT
 3470      00
 3471 0a66 488D1500 		leaq	__dso_handle(%rip), %rdx
 3471      000000
 3472 0a6d 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi
 3472      000000
 3473 0a74 488B0500 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rax
 3473      000000
 3474 0a7b 4889C7   		movq	%rax, %rdi
 3475 0a7e E8000000 		call	__cxa_atexit@PLT
 3475      00
 3476              	.L180:
 3477              		.loc 1 127 0
 3478 0a83 90       		nop
 3479 0a84 C9       		leave
 3480              		.cfi_def_cfa 7, 8
 3481 0a85 C3       		ret
 3482              		.cfi_endproc
 3483              	.LFE1583:
 3486              	_GLOBAL__sub_I_XmlTestReporter.cpp:
 3487              	.LFB1584:
 3488              		.loc 1 127 0
 3489              		.cfi_startproc
 3490 0a86 55       		pushq	%rbp
 3491              		.cfi_def_cfa_offset 16
 3492              		.cfi_offset 6, -16
 3493 0a87 4889E5   		movq	%rsp, %rbp
 3494              		.cfi_def_cfa_register 6
 3495              		.loc 1 127 0
 3496 0a8a BEFFFF00 		movl	$65535, %esi
 3496      00
 3497 0a8f BF010000 		movl	$1, %edi
 3497      00
 3498 0a94 E8A4FFFF 		call	_Z41__static_initialization_and_destruction_0ii
 3498      FF
 3499 0a99 5D       		popq	%rbp
 3500              		.cfi_def_cfa 7, 8
 3501 0a9a C3       		ret
 3502              		.cfi_endproc
 3503              	.LFE1584:
 3505              		.section	.init_array,"aw"
 3506              		.align 8
 3507 0000 00000000 		.quad	_GLOBAL__sub_I_XmlTestReporter.cpp
 3507      00000000 
 3508              		.text
 3509              	.Letext0:
 3510              		.file 15 "/usr/include/c++/7/bits/basic_string.h"
 3511              		.file 16 "/usr/include/c++/7/bits/basic_string.tcc"
 3512              		.file 17 "/usr/include/c++/7/bits/stringfwd.h"
 3513              		.file 18 "/usr/include/c++/7/bits/cpp_type_traits.h"
 3514              		.file 19 "/usr/include/c++/7/bits/stl_iterator_base_types.h"
 3515              		.file 20 "/usr/include/c++/7/cwchar"
 3516              		.file 21 "/usr/include/c++/7/bits/char_traits.h"
 3517              		.file 22 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h"
 3518              		.file 23 "/usr/include/c++/7/new"
 3519              		.file 24 "/usr/include/c++/7/clocale"
 3520              		.file 25 "/usr/include/c++/7/bits/vector.tcc"
 3521              		.file 26 "/usr/include/c++/7/bits/ios_base.h"
 3522              		.file 27 "/usr/include/c++/7/cwctype"
 3523              		.file 28 "/usr/include/c++/7/iosfwd"
 3524              		.file 29 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h"
 3525              		.file 30 "/usr/include/c++/7/debug/debug.h"
 3526              		.file 31 "/usr/include/c++/7/bits/predefined_ops.h"
 3527              		.file 32 "/usr/include/c++/7/ext/numeric_traits.h"
 3528              		.file 33 "/usr/include/c++/7/ext/type_traits.h"
 3529              		.file 34 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 3530              		.file 35 "<built-in>"
 3531              		.file 36 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 3532              		.file 37 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 3533              		.file 38 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 3534              		.file 39 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 3535              		.file 40 "/usr/include/wchar.h"
 3536              		.file 41 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 3537              		.file 42 "/usr/include/locale.h"
 3538              		.file 43 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3539              		.file 44 "/usr/include/time.h"
 3540              		.file 45 "/usr/include/x86_64-linux-gnu/c++/7/bits/atomic_word.h"
 3541              		.file 46 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h"
 3542              		.file 47 "/usr/include/wctype.h"
 20584              		.align 8
 20587              	DW.ref.__gxx_personality_v0:
 20588 0000 00000000 		.quad	__gxx_personality_v0
 20588      00000000 
 20589              		.hidden	__dso_handle
 20590              		.ident	"GCC: (Ubuntu 7.2.0-8ubuntu3.2) 7.2.0"
 20591              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 XmlTestReporter.cpp
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/ccbCBUZn.s:7      .text:0000000000000000 _ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
     /tmp/ccbCBUZn.s:76     .text:0000000000000076 _ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
     /tmp/ccbCBUZn.s:20587  .data.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccbCBUZn.s:437    .text:0000000000000324 _ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_
     /tmp/ccbCBUZn.s:566    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC2Ev
     /tmp/ccbCBUZn.s:566    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC1Ev
     /tmp/ccbCBUZn.s:597    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC2Ev
     /tmp/ccbCBUZn.s:1505   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccbCBUZn.s:597    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC1Ev
     /tmp/ccbCBUZn.s:674    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD2Ev
     /tmp/ccbCBUZn.s:1536   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccbCBUZn.s:674    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD1Ev
     /tmp/ccbCBUZn.s:758    .text._ZN8UnitTest20DeferredTestReporterD0Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD0Ev
     /tmp/ccbCBUZn.s:825    .text:000000000000043c _ZN8UnitTest15XmlTestReporterC2ERSo
     /tmp/ccbCBUZn.s:3320   .data.rel.ro._ZTVN8UnitTest15XmlTestReporterE:0000000000000000 _ZTVN8UnitTest15XmlTestReporterE
     /tmp/ccbCBUZn.s:825    .text:000000000000043c _ZN8UnitTest15XmlTestReporterC1ERSo
     /tmp/ccbCBUZn.s:863    .text:000000000000047a _ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
     /tmp/ccbCBUZn.s:1007   .text:00000000000005f8 _ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
     /tmp/ccbCBUZn.s:1072   .text:0000000000000670 _ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
     /tmp/ccbCBUZn.s:1623   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccbCBUZn.s:1663   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccbCBUZn.s:1702   .text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccbCBUZn.s:1769   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccbCBUZn.s:1196   .text:0000000000000798 _ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
     /tmp/ccbCBUZn.s:1792   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
     /tmp/ccbCBUZn.s:1316   .text:00000000000008aa _ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
     /tmp/ccbCBUZn.s:1267   .text:000000000000085e _ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
     /tmp/ccbCBUZn.s:1740   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccbCBUZn.s:1160   .text:0000000000000772 _ZN8UnitTest15XmlTestReporter10EndResultsERSo
     /tmp/ccbCBUZn.s:1815   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
     /tmp/ccbCBUZn.s:1855   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
     /tmp/ccbCBUZn.s:1894   .text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_
     /tmp/ccbCBUZn.s:1960   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEptEv
     /tmp/ccbCBUZn.s:1931   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv
     /tmp/ccbCBUZn.s:1505   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccbCBUZn.s:2013   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccbCBUZn.s:1536   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccbCBUZn.s:2129   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccbCBUZn.s:2150   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccbCBUZn.s:2043   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccbCBUZn.s:2182   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccbCBUZn.s:2213   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccbCBUZn.s:2235   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC1ERKSA_
     /tmp/ccbCBUZn.s:2266   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv
     /tmp/ccbCBUZn.s:1983   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
     /tmp/ccbCBUZn.s:2325   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccbCBUZn.s:1983   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
     /tmp/ccbCBUZn.s:2288   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
     /tmp/ccbCBUZn.s:2013   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccbCBUZn.s:2356   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccbCBUZn.s:2043   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccbCBUZn.s:2391   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccbCBUZn.s:2182   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccbCBUZn.s:2235   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_
     /tmp/ccbCBUZn.s:2288   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
     /tmp/ccbCBUZn.s:2421   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccbCBUZn.s:2451   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccbCBUZn.s:2325   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccbCBUZn.s:2475   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
     /tmp/ccbCBUZn.s:2506   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccbCBUZn.s:2545   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccbCBUZn.s:2421   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccbCBUZn.s:2451   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccbCBUZn.s:2569   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccbCBUZn.s:2597   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccbCBUZn.s:2741   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccbCBUZn.s:2545   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccbCBUZn.s:2620   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccbCBUZn.s:2767   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccbCBUZn.s:2620   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccbCBUZn.s:2767   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccbCBUZn.s:2973   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv
     /tmp/ccbCBUZn.s:2994   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E
     /tmp/ccbCBUZn.s:2884   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccbCBUZn.s:2854   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev
     /tmp/ccbCBUZn.s:3025   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccbCBUZn.s:2854   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD1Ev
     /tmp/ccbCBUZn.s:3055   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m
     /tmp/ccbCBUZn.s:2884   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccbCBUZn.s:3090   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
     /tmp/ccbCBUZn.s:3120   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccbCBUZn.s:3025   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccbCBUZn.s:3143   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateERS9_PS8_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateERS9_PS8_m
     /tmp/ccbCBUZn.s:3173   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_
     /tmp/ccbCBUZn.s:3120   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccbCBUZn.s:3212   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m
     /tmp/ccbCBUZn.s:3240   .text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:0000000000000000 _ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
     /tmp/ccbCBUZn.s:3293   .text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
     /tmp/ccbCBUZn.s:3262   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
     /tmp/ccbCBUZn.s:3262   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
     /tmp/ccbCBUZn.s:3436   .data.rel.ro._ZTIN8UnitTest15XmlTestReporterE:0000000000000000 _ZTIN8UnitTest15XmlTestReporterE
     /tmp/ccbCBUZn.s:3333   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD1Ev
     /tmp/ccbCBUZn.s:3368   .text._ZN8UnitTest15XmlTestReporterD0Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD0Ev
     /tmp/ccbCBUZn.s:3333   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD2Ev
     /tmp/ccbCBUZn.s:3445   .rodata._ZTSN8UnitTest15XmlTestReporterE:0000000000000000 _ZTSN8UnitTest15XmlTestReporterE
     /tmp/ccbCBUZn.s:3449   .text:0000000000000a3d _Z41__static_initialization_and_destruction_0ii
     /tmp/ccbCBUZn.s:3486   .text:0000000000000a86 _GLOBAL__sub_I_XmlTestReporter.cpp
                           .group:0000000000000000 _ZN8UnitTest12TestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterD5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC5ERKSA_
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED5Ev
                           .group:0000000000000000 _ZN8UnitTest15XmlTestReporterD5Ev

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmRKS4_
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
_ZNSaIcEC1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
_ZNSaIcED1Ev
_Unwind_Resume
__stack_chk_fail
__gxx_personality_v0
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNSolsEi
_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
_ZTVN8UnitTest12TestReporterE
_ZTVN8UnitTest20DeferredTestReporterE
_ZN8UnitTest12TestReporterD2Ev
_ZdlPv
_ZN8UnitTest20DeferredTestReporter10GetResultsEv
_ZNSolsEf
_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest20DeferredTestReporterE
_ZNSt8ios_base4InitC1Ev
__dso_handle
_ZNSt8ios_base4InitD1Ev
__cxa_atexit
