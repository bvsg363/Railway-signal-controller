   1              		.file	"DeferredTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text._ZnwmPv,"axG",@progbits,_ZnwmPv,comdat
   5              		.weak	_ZnwmPv
   7              	_ZnwmPv:
   8              	.LFB280:
   9              		.file 1 "/usr/include/c++/7/new"
   1:/usr/include/c++/7/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/c++/7/new **** 
   3:/usr/include/c++/7/new **** // Copyright (C) 1994-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/new **** 
   5:/usr/include/c++/7/new **** // This file is part of GCC.
   6:/usr/include/c++/7/new **** //
   7:/usr/include/c++/7/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/7/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/7/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/7/new **** // any later version.
  11:/usr/include/c++/7/new **** // 
  12:/usr/include/c++/7/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/7/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/7/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/7/new **** // GNU General Public License for more details.
  16:/usr/include/c++/7/new **** // 
  17:/usr/include/c++/7/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/7/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/7/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/7/new **** 
  21:/usr/include/c++/7/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/7/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/7/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/7/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/7/new **** 
  26:/usr/include/c++/7/new **** /** @file new
  27:/usr/include/c++/7/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/7/new ****  *
  29:/usr/include/c++/7/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/c++/7/new ****  *  handling memory allocation errors; see
  31:/usr/include/c++/7/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/usr/include/c++/7/new ****  */
  33:/usr/include/c++/7/new **** 
  34:/usr/include/c++/7/new **** #ifndef _NEW
  35:/usr/include/c++/7/new **** #define _NEW
  36:/usr/include/c++/7/new **** 
  37:/usr/include/c++/7/new **** #pragma GCC system_header
  38:/usr/include/c++/7/new **** 
  39:/usr/include/c++/7/new **** #include <bits/c++config.h>
  40:/usr/include/c++/7/new **** #include <exception>
  41:/usr/include/c++/7/new **** 
  42:/usr/include/c++/7/new **** #pragma GCC visibility push(default)
  43:/usr/include/c++/7/new **** 
  44:/usr/include/c++/7/new **** extern "C++" {
  45:/usr/include/c++/7/new **** 
  46:/usr/include/c++/7/new **** namespace std 
  47:/usr/include/c++/7/new **** {
  48:/usr/include/c++/7/new ****   /**
  49:/usr/include/c++/7/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/usr/include/c++/7/new ****    *  @ingroup exceptions
  51:/usr/include/c++/7/new ****    *
  52:/usr/include/c++/7/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/usr/include/c++/7/new ****    *  errors from the throwing forms of @c new.  */
  54:/usr/include/c++/7/new ****   class bad_alloc : public exception 
  55:/usr/include/c++/7/new ****   {
  56:/usr/include/c++/7/new ****   public:
  57:/usr/include/c++/7/new ****     bad_alloc() throw() { }
  58:/usr/include/c++/7/new **** 
  59:/usr/include/c++/7/new ****     // This declaration is not useless:
  60:/usr/include/c++/7/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  61:/usr/include/c++/7/new ****     virtual ~bad_alloc() throw();
  62:/usr/include/c++/7/new **** 
  63:/usr/include/c++/7/new ****     // See comment in eh_exception.cc.
  64:/usr/include/c++/7/new ****     virtual const char* what() const throw();
  65:/usr/include/c++/7/new ****   };
  66:/usr/include/c++/7/new **** 
  67:/usr/include/c++/7/new **** #if __cplusplus >= 201103L
  68:/usr/include/c++/7/new ****   class bad_array_new_length : public bad_alloc
  69:/usr/include/c++/7/new ****   {
  70:/usr/include/c++/7/new ****   public:
  71:/usr/include/c++/7/new ****     bad_array_new_length() throw() { };
  72:/usr/include/c++/7/new **** 
  73:/usr/include/c++/7/new ****     // This declaration is not useless:
  74:/usr/include/c++/7/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  75:/usr/include/c++/7/new ****     virtual ~bad_array_new_length() throw();
  76:/usr/include/c++/7/new **** 
  77:/usr/include/c++/7/new ****     // See comment in eh_exception.cc.
  78:/usr/include/c++/7/new ****     virtual const char* what() const throw();
  79:/usr/include/c++/7/new ****   };
  80:/usr/include/c++/7/new **** #endif
  81:/usr/include/c++/7/new **** 
  82:/usr/include/c++/7/new **** #if __cpp_aligned_new
  83:/usr/include/c++/7/new ****   enum class align_val_t: size_t {};
  84:/usr/include/c++/7/new **** #endif
  85:/usr/include/c++/7/new **** 
  86:/usr/include/c++/7/new ****   struct nothrow_t
  87:/usr/include/c++/7/new ****   {
  88:/usr/include/c++/7/new **** #if __cplusplus >= 201103L
  89:/usr/include/c++/7/new ****     explicit nothrow_t() = default;
  90:/usr/include/c++/7/new **** #endif
  91:/usr/include/c++/7/new ****   };
  92:/usr/include/c++/7/new **** 
  93:/usr/include/c++/7/new ****   extern const nothrow_t nothrow;
  94:/usr/include/c++/7/new **** 
  95:/usr/include/c++/7/new ****   /** If you write your own error handler to be called by @c new, it must
  96:/usr/include/c++/7/new ****    *  be of this type.  */
  97:/usr/include/c++/7/new ****   typedef void (*new_handler)();
  98:/usr/include/c++/7/new **** 
  99:/usr/include/c++/7/new ****   /// Takes a replacement handler as the argument, returns the
 100:/usr/include/c++/7/new ****   /// previous handler.
 101:/usr/include/c++/7/new ****   new_handler set_new_handler(new_handler) throw();
 102:/usr/include/c++/7/new **** 
 103:/usr/include/c++/7/new **** #if __cplusplus >= 201103L
 104:/usr/include/c++/7/new ****   /// Return the current new handler.
 105:/usr/include/c++/7/new ****   new_handler get_new_handler() noexcept;
 106:/usr/include/c++/7/new **** #endif
 107:/usr/include/c++/7/new **** } // namespace std
 108:/usr/include/c++/7/new **** 
 109:/usr/include/c++/7/new **** //@{
 110:/usr/include/c++/7/new **** /** These are replaceable signatures:
 111:/usr/include/c++/7/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 112:/usr/include/c++/7/new ****  *  - normal array new and delete (same)
 113:/usr/include/c++/7/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 114:/usr/include/c++/7/new ****  *    @c NULL on error)
 115:/usr/include/c++/7/new ****  *  - @c nothrow array new and delete (same)
 116:/usr/include/c++/7/new ****  *
 117:/usr/include/c++/7/new ****  *  Placement new and delete signatures (take a memory address argument,
 118:/usr/include/c++/7/new ****  *  does nothing) may not be replaced by a user's program.
 119:/usr/include/c++/7/new **** */
 120:/usr/include/c++/7/new **** void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 121:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 122:/usr/include/c++/7/new **** void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 123:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 124:/usr/include/c++/7/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 125:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 126:/usr/include/c++/7/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 127:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 128:/usr/include/c++/7/new **** #if __cpp_sized_deallocation
 129:/usr/include/c++/7/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 130:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 131:/usr/include/c++/7/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 132:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 133:/usr/include/c++/7/new **** #endif
 134:/usr/include/c++/7/new **** void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 135:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 136:/usr/include/c++/7/new **** void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 137:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 138:/usr/include/c++/7/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 139:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 140:/usr/include/c++/7/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 142:/usr/include/c++/7/new **** #if __cpp_aligned_new
 143:/usr/include/c++/7/new **** void* operator new(std::size_t, std::align_val_t)
 144:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 145:/usr/include/c++/7/new **** void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 146:/usr/include/c++/7/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 147:/usr/include/c++/7/new **** void operator delete(void*, std::align_val_t)
 148:/usr/include/c++/7/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 149:/usr/include/c++/7/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 150:/usr/include/c++/7/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 151:/usr/include/c++/7/new **** void* operator new[](std::size_t, std::align_val_t)
 152:/usr/include/c++/7/new ****   __attribute__((__externally_visible__));
 153:/usr/include/c++/7/new **** void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 154:/usr/include/c++/7/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/include/c++/7/new **** void operator delete[](void*, std::align_val_t)
 156:/usr/include/c++/7/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/include/c++/7/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 158:/usr/include/c++/7/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 159:/usr/include/c++/7/new **** #if __cpp_sized_deallocation
 160:/usr/include/c++/7/new **** void operator delete(void*, std::size_t, std::align_val_t)
 161:/usr/include/c++/7/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 162:/usr/include/c++/7/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 163:/usr/include/c++/7/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 164:/usr/include/c++/7/new **** #endif // __cpp_sized_deallocation
 165:/usr/include/c++/7/new **** #endif // __cpp_aligned_new
 166:/usr/include/c++/7/new **** 
 167:/usr/include/c++/7/new **** // Default placement versions of operator new.
 168:/usr/include/c++/7/new **** inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 169:/usr/include/c++/7/new **** { return __p; }
  10              		.loc 1 169 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 48897DF8 		movq	%rdi, -8(%rbp)
  18 0008 488975F0 		movq	%rsi, -16(%rbp)
  19              		.loc 1 169 0
  20 000c 488B45F0 		movq	-16(%rbp), %rax
  21 0010 5D       		popq	%rbp
  22              		.cfi_def_cfa 7, 8
  23 0011 C3       		ret
  24              		.cfi_endproc
  25              	.LFE280:
  27              		.section	.text._ZdlPvS_,"axG",@progbits,_ZdlPvS_,comdat
  28              		.weak	_ZdlPvS_
  30              	_ZdlPvS_:
  31              	.LFB282:
 170:/usr/include/c++/7/new **** inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 171:/usr/include/c++/7/new **** { return __p; }
 172:/usr/include/c++/7/new **** 
 173:/usr/include/c++/7/new **** // Default placement versions of operator delete.
 174:/usr/include/c++/7/new **** inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  32              		.loc 1 174 0
  33              		.cfi_startproc
  34 0000 55       		pushq	%rbp
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 6, -16
  37 0001 4889E5   		movq	%rsp, %rbp
  38              		.cfi_def_cfa_register 6
  39 0004 48897DF8 		movq	%rdi, -8(%rbp)
  40 0008 488975F0 		movq	%rsi, -16(%rbp)
  41              		.loc 1 174 0
  42 000c 90       		nop
  43 000d 5D       		popq	%rbp
  44              		.cfi_def_cfa 7, 8
  45 000e C3       		ret
  46              		.cfi_endproc
  47              	.LFE282:
  49              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
  50              		.align 2
  51              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
  53              	_ZN8UnitTest18DeferredTestResultD2Ev:
  54              	.LFB892:
  55              		.file 2 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
  56              		.loc 2 10 0
  57              		.cfi_startproc
  58              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  59              		.cfi_lsda 0x1b,.LLSDA892
  60 0000 55       		pushq	%rbp
  61              		.cfi_def_cfa_offset 16
  62              		.cfi_offset 6, -16
  63 0001 4889E5   		movq	%rsp, %rbp
  64              		.cfi_def_cfa_register 6
  65 0004 53       		pushq	%rbx
  66 0005 4883EC18 		subq	$24, %rsp
  67              		.cfi_offset 3, -24
  68 0009 48897DE8 		movq	%rdi, -24(%rbp)
  69              	.LBB2:
  70              		.loc 2 10 0
  71 000d 488B45E8 		movq	-24(%rbp), %rax
  72 0011 4883C060 		addq	$96, %rax
  73 0015 4889C7   		movq	%rax, %rdi
  74              	.LEHB0:
  75 0018 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev@PLT
  75      00
  76              	.LEHE0:
  77              		.loc 2 10 0 is_stmt 0 discriminator 2
  78 001d 488B45E8 		movq	-24(%rbp), %rax
  79 0021 4883C040 		addq	$64, %rax
  80 0025 4889C7   		movq	%rax, %rdi
  81              	.LEHB1:
  82 0028 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
  82      00
  83              	.LEHE1:
  84              		.loc 2 10 0 discriminator 4
  85 002d 488B45E8 		movq	-24(%rbp), %rax
  86 0031 4883C020 		addq	$32, %rax
  87 0035 4889C7   		movq	%rax, %rdi
  88              	.LEHB2:
  89 0038 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
  89      00
  90              	.LEHE2:
  91              		.loc 2 10 0 discriminator 6
  92 003d 488B45E8 		movq	-24(%rbp), %rax
  93 0041 4889C7   		movq	%rax, %rdi
  94              	.LEHB3:
  95 0044 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
  95      00
  96              	.LEHE3:
  97              	.LBE2:
  98 0049 EB44     		jmp	.L11
  99              	.L8:
 100 004b 4889C3   		movq	%rax, %rbx
 101              	.LBB3:
 102              		.loc 2 10 0
 103 004e 488B45E8 		movq	-24(%rbp), %rax
 104 0052 4883C040 		addq	$64, %rax
 105 0056 4889C7   		movq	%rax, %rdi
 106 0059 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 106      00
 107 005e EB03     		jmp	.L6
 108              	.L9:
 109 0060 4889C3   		movq	%rax, %rbx
 110              	.L6:
 111              		.loc 2 10 0 discriminator 3
 112 0063 488B45E8 		movq	-24(%rbp), %rax
 113 0067 4883C020 		addq	$32, %rax
 114 006b 4889C7   		movq	%rax, %rdi
 115 006e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 115      00
 116 0073 EB03     		jmp	.L7
 117              	.L10:
 118 0075 4889C3   		movq	%rax, %rbx
 119              	.L7:
 120              		.loc 2 10 0 discriminator 5
 121 0078 488B45E8 		movq	-24(%rbp), %rax
 122 007c 4889C7   		movq	%rax, %rdi
 123 007f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 123      00
 124 0084 4889D8   		movq	%rbx, %rax
 125 0087 4889C7   		movq	%rax, %rdi
 126              	.LEHB4:
 127 008a E8000000 		call	_Unwind_Resume@PLT
 127      00
 128              	.LEHE4:
 129              	.L11:
 130              	.LBE3:
 131              		.loc 2 10 0
 132 008f 4883C418 		addq	$24, %rsp
 133 0093 5B       		popq	%rbx
 134 0094 5D       		popq	%rbp
 135              		.cfi_def_cfa 7, 8
 136 0095 C3       		ret
 137              		.cfi_endproc
 138              	.LFE892:
 139              		.globl	__gxx_personality_v0
 140              		.section	.gcc_except_table._ZN8UnitTest18DeferredTestResultD2Ev,"aG",@progbits,_ZN8UnitTest18Defer
 141              	.LLSDA892:
 142 0000 FF       		.byte	0xff
 143 0001 FF       		.byte	0xff
 144 0002 01       		.byte	0x1
 145 0003 15       		.uleb128 .LLSDACSE892-.LLSDACSB892
 146              	.LLSDACSB892:
 147 0004 18       		.uleb128 .LEHB0-.LFB892
 148 0005 05       		.uleb128 .LEHE0-.LEHB0
 149 0006 4B       		.uleb128 .L8-.LFB892
 150 0007 00       		.uleb128 0
 151 0008 28       		.uleb128 .LEHB1-.LFB892
 152 0009 05       		.uleb128 .LEHE1-.LEHB1
 153 000a 60       		.uleb128 .L9-.LFB892
 154 000b 00       		.uleb128 0
 155 000c 38       		.uleb128 .LEHB2-.LFB892
 156 000d 05       		.uleb128 .LEHE2-.LEHB2
 157 000e 75       		.uleb128 .L10-.LFB892
 158 000f 00       		.uleb128 0
 159 0010 44       		.uleb128 .LEHB3-.LFB892
 160 0011 05       		.uleb128 .LEHE3-.LEHB3
 161 0012 00       		.uleb128 0
 162 0013 00       		.uleb128 0
 163 0014 8A01     		.uleb128 .LEHB4-.LFB892
 164 0016 05       		.uleb128 .LEHE4-.LEHB4
 165 0017 00       		.uleb128 0
 166 0018 00       		.uleb128 0
 167              	.LLSDACSE892:
 168              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 170              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 171              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 172              		.text
 173              		.align 2
 174              		.globl	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 176              	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE:
 177              	.LFB890:
 178              		.file 3 "DeferredTestReporter.cpp"
   1:DeferredTestReporter.cpp **** #include "DeferredTestReporter.h"
   2:DeferredTestReporter.cpp **** #include "TestDetails.h"
   3:DeferredTestReporter.cpp **** #include "Config.h"
   4:DeferredTestReporter.cpp **** 
   5:DeferredTestReporter.cpp **** using namespace UnitTest;
   6:DeferredTestReporter.cpp **** 
   7:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportTestStart(TestDetails const& details)
   8:DeferredTestReporter.cpp **** {
 179              		.loc 3 8 0 is_stmt 1
 180              		.cfi_startproc
 181              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 182              		.cfi_lsda 0x1b,.LLSDA890
 183 0000 55       		pushq	%rbp
 184              		.cfi_def_cfa_offset 16
 185              		.cfi_offset 6, -16
 186 0001 4889E5   		movq	%rsp, %rbp
 187              		.cfi_def_cfa_register 6
 188 0004 53       		pushq	%rbx
 189 0005 4881ECA8 		subq	$168, %rsp
 189      000000
 190              		.cfi_offset 3, -24
 191 000c 4889BD58 		movq	%rdi, -168(%rbp)
 191      FFFFFF
 192 0013 4889B550 		movq	%rsi, -176(%rbp)
 192      FFFFFF
 193              		.loc 3 8 0
 194 001a 64488B04 		movq	%fs:40, %rax
 194      25280000 
 194      00
 195 0023 488945E8 		movq	%rax, -24(%rbp)
 196 0027 31C0     		xorl	%eax, %eax
   9:DeferredTestReporter.cpp ****     m_results.push_back(DeferredTestResult(details.suiteName, details.testName));
 197              		.loc 3 9 0
 198 0029 488B8558 		movq	-168(%rbp), %rax
 198      FFFFFF
 199 0030 488D5808 		leaq	8(%rax), %rbx
 200 0034 488B8550 		movq	-176(%rbp), %rax
 200      FFFFFF
 201 003b 488B5008 		movq	8(%rax), %rdx
 202 003f 488B8550 		movq	-176(%rbp), %rax
 202      FFFFFF
 203 0046 488B08   		movq	(%rax), %rcx
 204 0049 488D8560 		leaq	-160(%rbp), %rax
 204      FFFFFF
 205 0050 4889CE   		movq	%rcx, %rsi
 206 0053 4889C7   		movq	%rax, %rdi
 207              	.LEHB5:
 208 0056 E8000000 		call	_ZN8UnitTest18DeferredTestResultC1EPKcS2_@PLT
 208      00
 209              	.LEHE5:
 210 005b 488D8560 		leaq	-160(%rbp), %rax
 210      FFFFFF
 211 0062 4889C6   		movq	%rax, %rsi
 212 0065 4889DF   		movq	%rbx, %rdi
 213              	.LEHB6:
 214 0068 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_@PLT
 214      00
 215              	.LEHE6:
 216              		.loc 3 9 0 is_stmt 0 discriminator 2
 217 006d 488D8560 		leaq	-160(%rbp), %rax
 217      FFFFFF
 218 0074 4889C7   		movq	%rax, %rdi
 219              	.LEHB7:
 220 0077 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 220      00
 221              	.LEHE7:
  10:DeferredTestReporter.cpp **** }
 222              		.loc 3 10 0 is_stmt 1 discriminator 2
 223 007c 90       		nop
 224 007d 488B45E8 		movq	-24(%rbp), %rax
 225 0081 64483304 		xorq	%fs:40, %rax
 225      25280000 
 225      00
 226 008a 7424     		je	.L14
 227 008c EB1D     		jmp	.L16
 228              	.L15:
 229 008e 4889C3   		movq	%rax, %rbx
   9:DeferredTestReporter.cpp ****     m_results.push_back(DeferredTestResult(details.suiteName, details.testName));
 230              		.loc 3 9 0
 231 0091 488D8560 		leaq	-160(%rbp), %rax
 231      FFFFFF
 232 0098 4889C7   		movq	%rax, %rdi
 233 009b E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 233      00
 234 00a0 4889D8   		movq	%rbx, %rax
 235 00a3 4889C7   		movq	%rax, %rdi
 236              	.LEHB8:
 237 00a6 E8000000 		call	_Unwind_Resume@PLT
 237      00
 238              	.LEHE8:
 239              	.L16:
 240              		.loc 3 10 0
 241 00ab E8000000 		call	__stack_chk_fail@PLT
 241      00
 242              	.L14:
 243 00b0 4881C4A8 		addq	$168, %rsp
 243      000000
 244 00b7 5B       		popq	%rbx
 245 00b8 5D       		popq	%rbp
 246              		.cfi_def_cfa 7, 8
 247 00b9 C3       		ret
 248              		.cfi_endproc
 249              	.LFE890:
 250              		.section	.gcc_except_table,"a",@progbits
 251              	.LLSDA890:
 252 0000 FF       		.byte	0xff
 253 0001 FF       		.byte	0xff
 254 0002 01       		.byte	0x1
 255 0003 12       		.uleb128 .LLSDACSE890-.LLSDACSB890
 256              	.LLSDACSB890:
 257 0004 56       		.uleb128 .LEHB5-.LFB890
 258 0005 05       		.uleb128 .LEHE5-.LEHB5
 259 0006 00       		.uleb128 0
 260 0007 00       		.uleb128 0
 261 0008 68       		.uleb128 .LEHB6-.LFB890
 262 0009 05       		.uleb128 .LEHE6-.LEHB6
 263 000a 8E01     		.uleb128 .L15-.LFB890
 264 000c 00       		.uleb128 0
 265 000d 77       		.uleb128 .LEHB7-.LFB890
 266 000e 05       		.uleb128 .LEHE7-.LEHB7
 267 000f 00       		.uleb128 0
 268 0010 00       		.uleb128 0
 269 0011 A601     		.uleb128 .LEHB8-.LFB890
 270 0013 05       		.uleb128 .LEHE8-.LEHB8
 271 0014 00       		.uleb128 0
 272 0015 00       		.uleb128 0
 273              	.LLSDACSE890:
 274              		.text
 276              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev,"axG",@progbi
 277              		.align 2
 278              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 280              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
 281              	.LFB896:
 282              		.file 4 "/usr/include/c++/7/bits/stl_pair.h"
   1:/usr/include/c++/7/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_pair.h **** 
   3:/usr/include/c++/7/bits/stl_pair.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_pair.h **** //
   5:/usr/include/c++/7/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_pair.h **** 
  11:/usr/include/c++/7/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_pair.h **** 
  16:/usr/include/c++/7/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_pair.h **** 
  20:/usr/include/c++/7/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_pair.h **** 
  25:/usr/include/c++/7/bits/stl_pair.h **** /*
  26:/usr/include/c++/7/bits/stl_pair.h ****  *
  27:/usr/include/c++/7/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_pair.h ****  *
  30:/usr/include/c++/7/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_pair.h ****  *
  38:/usr/include/c++/7/bits/stl_pair.h ****  *
  39:/usr/include/c++/7/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/7/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_pair.h ****  *
  42:/usr/include/c++/7/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_pair.h ****  */
  50:/usr/include/c++/7/bits/stl_pair.h **** 
  51:/usr/include/c++/7/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/7/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/7/bits/stl_pair.h ****  */
  55:/usr/include/c++/7/bits/stl_pair.h **** 
  56:/usr/include/c++/7/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/7/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/7/bits/stl_pair.h **** 
  59:/usr/include/c++/7/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/7/bits/stl_pair.h **** 
  61:/usr/include/c++/7/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/7/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/usr/include/c++/7/bits/stl_pair.h **** #endif
  64:/usr/include/c++/7/bits/stl_pair.h **** 
  65:/usr/include/c++/7/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/7/bits/stl_pair.h **** {
  67:/usr/include/c++/7/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/c++/7/bits/stl_pair.h **** 
  69:/usr/include/c++/7/bits/stl_pair.h ****   /**
  70:/usr/include/c++/7/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/usr/include/c++/7/bits/stl_pair.h ****    *  @{
  72:/usr/include/c++/7/bits/stl_pair.h ****    */
  73:/usr/include/c++/7/bits/stl_pair.h **** 
  74:/usr/include/c++/7/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/usr/include/c++/7/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/usr/include/c++/7/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  77:/usr/include/c++/7/bits/stl_pair.h **** 
  78:/usr/include/c++/7/bits/stl_pair.h ****   /// piecewise_construct
  79:/usr/include/c++/7/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  80:/usr/include/c++/7/bits/stl_pair.h ****     piecewise_construct_t();
  81:/usr/include/c++/7/bits/stl_pair.h **** 
  82:/usr/include/c++/7/bits/stl_pair.h ****   // Forward declarations.
  83:/usr/include/c++/7/bits/stl_pair.h ****   template<typename...>
  84:/usr/include/c++/7/bits/stl_pair.h ****     class tuple;
  85:/usr/include/c++/7/bits/stl_pair.h **** 
  86:/usr/include/c++/7/bits/stl_pair.h ****   template<std::size_t...>
  87:/usr/include/c++/7/bits/stl_pair.h ****     struct _Index_tuple;
  88:/usr/include/c++/7/bits/stl_pair.h **** 
  89:/usr/include/c++/7/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  90:/usr/include/c++/7/bits/stl_pair.h ****   // constructors.
  91:/usr/include/c++/7/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  92:/usr/include/c++/7/bits/stl_pair.h ****   // is_convertible if the types are the same to
  93:/usr/include/c++/7/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
  94:/usr/include/c++/7/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
  95:/usr/include/c++/7/bits/stl_pair.h ****     struct _PCC
  96:/usr/include/c++/7/bits/stl_pair.h ****     {
  97:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
  98:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
  99:/usr/include/c++/7/bits/stl_pair.h ****       {
 100:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 101:/usr/include/c++/7/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 102:/usr/include/c++/7/bits/stl_pair.h ****       }
 103:/usr/include/c++/7/bits/stl_pair.h **** 
 104:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 105:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 106:/usr/include/c++/7/bits/stl_pair.h ****       {
 107:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 108:/usr/include/c++/7/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 109:/usr/include/c++/7/bits/stl_pair.h ****       }
 110:/usr/include/c++/7/bits/stl_pair.h **** 
 111:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 112:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 113:/usr/include/c++/7/bits/stl_pair.h ****       {
 114:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 115:/usr/include/c++/7/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 116:/usr/include/c++/7/bits/stl_pair.h ****       }
 117:/usr/include/c++/7/bits/stl_pair.h **** 
 118:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 119:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 120:/usr/include/c++/7/bits/stl_pair.h ****       {
 121:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 122:/usr/include/c++/7/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 123:/usr/include/c++/7/bits/stl_pair.h ****       }
 124:/usr/include/c++/7/bits/stl_pair.h **** 
 125:/usr/include/c++/7/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 126:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 127:/usr/include/c++/7/bits/stl_pair.h ****       {
 128:/usr/include/c++/7/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 129:/usr/include/c++/7/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 130:/usr/include/c++/7/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 131:/usr/include/c++/7/bits/stl_pair.h **** 				       __do_converts,
 132:/usr/include/c++/7/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 133:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 134:/usr/include/c++/7/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 135:/usr/include/c++/7/bits/stl_pair.h **** 		      __converts
 136:/usr/include/c++/7/bits/stl_pair.h **** 		      >::value;
 137:/usr/include/c++/7/bits/stl_pair.h ****       }
 138:/usr/include/c++/7/bits/stl_pair.h **** 
 139:/usr/include/c++/7/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 140:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 141:/usr/include/c++/7/bits/stl_pair.h ****       {
 142:/usr/include/c++/7/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 143:/usr/include/c++/7/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 144:/usr/include/c++/7/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 145:/usr/include/c++/7/bits/stl_pair.h **** 				       __do_converts,
 146:/usr/include/c++/7/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 147:/usr/include/c++/7/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 148:/usr/include/c++/7/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 149:/usr/include/c++/7/bits/stl_pair.h **** 		      __converts
 150:/usr/include/c++/7/bits/stl_pair.h **** 		      >::value;
 151:/usr/include/c++/7/bits/stl_pair.h ****       }
 152:/usr/include/c++/7/bits/stl_pair.h ****   };
 153:/usr/include/c++/7/bits/stl_pair.h **** 
 154:/usr/include/c++/7/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 155:/usr/include/c++/7/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 156:/usr/include/c++/7/bits/stl_pair.h ****     {
 157:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 158:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 159:/usr/include/c++/7/bits/stl_pair.h ****       {
 160:/usr/include/c++/7/bits/stl_pair.h **** 	return false;
 161:/usr/include/c++/7/bits/stl_pair.h ****       }
 162:/usr/include/c++/7/bits/stl_pair.h **** 
 163:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 165:/usr/include/c++/7/bits/stl_pair.h ****       {
 166:/usr/include/c++/7/bits/stl_pair.h **** 	return false;
 167:/usr/include/c++/7/bits/stl_pair.h ****       }
 168:/usr/include/c++/7/bits/stl_pair.h **** 
 169:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 171:/usr/include/c++/7/bits/stl_pair.h ****       {
 172:/usr/include/c++/7/bits/stl_pair.h **** 	return false;
 173:/usr/include/c++/7/bits/stl_pair.h ****       }
 174:/usr/include/c++/7/bits/stl_pair.h **** 
 175:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/include/c++/7/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 177:/usr/include/c++/7/bits/stl_pair.h ****       {
 178:/usr/include/c++/7/bits/stl_pair.h **** 	return false;
 179:/usr/include/c++/7/bits/stl_pair.h ****       }
 180:/usr/include/c++/7/bits/stl_pair.h ****   };
 181:/usr/include/c++/7/bits/stl_pair.h **** 
 182:/usr/include/c++/7/bits/stl_pair.h ****   // PR libstdc++/79141, a utility type for preventing
 183:/usr/include/c++/7/bits/stl_pair.h ****   // initialization of an argument of a disabled assignment
 184:/usr/include/c++/7/bits/stl_pair.h ****   // operator from a pair of empty braces.
 185:/usr/include/c++/7/bits/stl_pair.h ****   struct __nonesuch_no_braces : std::__nonesuch {
 186:/usr/include/c++/7/bits/stl_pair.h ****     explicit __nonesuch_no_braces(const __nonesuch&) = delete;
 187:/usr/include/c++/7/bits/stl_pair.h ****   };
 188:/usr/include/c++/7/bits/stl_pair.h **** 
 189:/usr/include/c++/7/bits/stl_pair.h **** #endif
 190:/usr/include/c++/7/bits/stl_pair.h **** 
 191:/usr/include/c++/7/bits/stl_pair.h ****  /**
 192:/usr/include/c++/7/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 193:/usr/include/c++/7/bits/stl_pair.h ****    *
 194:/usr/include/c++/7/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 195:/usr/include/c++/7/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 196:/usr/include/c++/7/bits/stl_pair.h ****    */
 197:/usr/include/c++/7/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 198:/usr/include/c++/7/bits/stl_pair.h ****     struct pair
 283              		.loc 4 198 0
 284              		.cfi_startproc
 285 0000 55       		pushq	%rbp
 286              		.cfi_def_cfa_offset 16
 287              		.cfi_offset 6, -16
 288 0001 4889E5   		movq	%rsp, %rbp
 289              		.cfi_def_cfa_register 6
 290 0004 4883EC10 		subq	$16, %rsp
 291 0008 48897DF8 		movq	%rdi, -8(%rbp)
 292              	.LBB4:
 293              		.loc 4 198 0
 294 000c 488B45F8 		movq	-8(%rbp), %rax
 295 0010 4883C008 		addq	$8, %rax
 296 0014 4889C7   		movq	%rax, %rdi
 297 0017 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 297      00
 298              	.LBE4:
 299 001c 90       		nop
 300 001d C9       		leave
 301              		.cfi_def_cfa 7, 8
 302 001e C3       		ret
 303              		.cfi_endproc
 304              	.LFE896:
 306              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 307              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev,_ZNSt4pairIiNSt7__cxx11
 308              		.text
 309              		.align 2
 310              		.globl	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 312              	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc:
 313              	.LFB894:
  11:DeferredTestReporter.cpp **** 
  12:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportFailure(TestDetails const& details, char const* failure)
  13:DeferredTestReporter.cpp **** {
 314              		.loc 3 13 0
 315              		.cfi_startproc
 316              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 317              		.cfi_lsda 0x1b,.LLSDA894
 318 00ba 55       		pushq	%rbp
 319              		.cfi_def_cfa_offset 16
 320              		.cfi_offset 6, -16
 321 00bb 4889E5   		movq	%rsp, %rbp
 322              		.cfi_def_cfa_register 6
 323 00be 53       		pushq	%rbx
 324 00bf 4881EC88 		subq	$136, %rsp
 324      000000
 325              		.cfi_offset 3, -24
 326 00c6 48897D88 		movq	%rdi, -120(%rbp)
 327 00ca 48897580 		movq	%rsi, -128(%rbp)
 328 00ce 48899578 		movq	%rdx, -136(%rbp)
 328      FFFFFF
 329              		.loc 3 13 0
 330 00d5 64488B04 		movq	%fs:40, %rax
 330      25280000 
 330      00
 331 00de 488945E8 		movq	%rax, -24(%rbp)
 332 00e2 31C0     		xorl	%eax, %eax
  14:DeferredTestReporter.cpp ****     DeferredTestResult& r = m_results.back();
 333              		.loc 3 14 0
 334 00e4 488B4588 		movq	-120(%rbp), %rax
 335 00e8 4883C008 		addq	$8, %rax
 336 00ec 4889C7   		movq	%rax, %rdi
 337              	.LEHB9:
 338 00ef E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv@PLT
 338      00
 339              	.LEHE9:
 340 00f4 48894598 		movq	%rax, -104(%rbp)
  15:DeferredTestReporter.cpp ****     r.failed = true;
 341              		.loc 3 15 0
 342 00f8 488B4598 		movq	-104(%rbp), %rax
 343 00fc C6407C01 		movb	$1, 124(%rax)
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 344              		.loc 3 16 0
 345 0100 488B4598 		movq	-104(%rbp), %rax
 346 0104 488D5860 		leaq	96(%rax), %rbx
 347 0108 488D4597 		leaq	-105(%rbp), %rax
 348 010c 4889C7   		movq	%rax, %rdi
 349 010f E8000000 		call	_ZNSaIcEC1Ev@PLT
 349      00
 350 0114 488D5597 		leaq	-105(%rbp), %rdx
 351 0118 488B8D78 		movq	-136(%rbp), %rcx
 351      FFFFFF
 352 011f 488D45A0 		leaq	-96(%rbp), %rax
 353 0123 4889CE   		movq	%rcx, %rsi
 354 0126 4889C7   		movq	%rax, %rdi
 355              	.LEHB10:
 356 0129 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 356      00
 357              	.LEHE10:
 358              		.loc 3 16 0 is_stmt 0 discriminator 2
 359 012e 488B4580 		movq	-128(%rbp), %rax
 360 0132 488D4818 		leaq	24(%rax), %rcx
 361 0136 488D55A0 		leaq	-96(%rbp), %rdx
 362 013a 488D45C0 		leaq	-64(%rbp), %rax
 363 013e 4889CE   		movq	%rcx, %rsi
 364 0141 4889C7   		movq	%rax, %rdi
 365              	.LEHB11:
 366 0144 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKiRKS5_@PLT
 366      00
 367              	.LEHE11:
 368              		.loc 3 16 0 discriminator 4
 369 0149 488D45C0 		leaq	-64(%rbp), %rax
 370 014d 4889C6   		movq	%rax, %rsi
 371 0150 4889DF   		movq	%rbx, %rdi
 372              	.LEHB12:
 373 0153 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_back
 373      00
 374              	.LEHE12:
 375              		.loc 3 16 0 discriminator 6
 376 0158 488D45C0 		leaq	-64(%rbp), %rax
 377 015c 4889C7   		movq	%rax, %rdi
 378              	.LEHB13:
 379 015f E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 379      00
 380              	.LEHE13:
 381              		.loc 3 16 0 discriminator 8
 382 0164 488D45A0 		leaq	-96(%rbp), %rax
 383 0168 4889C7   		movq	%rax, %rdi
 384              	.LEHB14:
 385 016b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 385      00
 386              	.LEHE14:
 387              		.loc 3 16 0 discriminator 10
 388 0170 488D4597 		leaq	-105(%rbp), %rax
 389 0174 4889C7   		movq	%rax, %rdi
 390 0177 E8000000 		call	_ZNSaIcED1Ev@PLT
 390      00
  17:DeferredTestReporter.cpp ****     r.failureFile = details.filename;
 391              		.loc 3 17 0 is_stmt 1 discriminator 10
 392 017c 488B4580 		movq	-128(%rbp), %rax
 393 0180 488B4010 		movq	16(%rax), %rax
 394 0184 488B5598 		movq	-104(%rbp), %rdx
 395 0188 4883C240 		addq	$64, %rdx
 396 018c 4889C6   		movq	%rax, %rsi
 397 018f 4889D7   		movq	%rdx, %rdi
 398              	.LEHB15:
 399 0192 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@PLT
 399      00
 400              	.LEHE15:
  18:DeferredTestReporter.cpp **** }
 401              		.loc 3 18 0 discriminator 10
 402 0197 90       		nop
 403 0198 488B45E8 		movq	-24(%rbp), %rax
 404 019c 64483304 		xorq	%fs:40, %rax
 404      25280000 
 404      00
 405 01a5 7443     		je	.L22
 406 01a7 EB3C     		jmp	.L26
 407              	.L25:
 408 01a9 4889C3   		movq	%rax, %rbx
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 409              		.loc 3 16 0
 410 01ac 488D45C0 		leaq	-64(%rbp), %rax
 411 01b0 4889C7   		movq	%rax, %rdi
 412 01b3 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 412      00
 413 01b8 EB03     		jmp	.L20
 414              	.L24:
 415 01ba 4889C3   		movq	%rax, %rbx
 416              	.L20:
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 417              		.loc 3 16 0 is_stmt 0 discriminator 3
 418 01bd 488D45A0 		leaq	-96(%rbp), %rax
 419 01c1 4889C7   		movq	%rax, %rdi
 420 01c4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 420      00
 421 01c9 EB03     		jmp	.L21
 422              	.L23:
 423 01cb 4889C3   		movq	%rax, %rbx
 424              	.L21:
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 425              		.loc 3 16 0 discriminator 1
 426 01ce 488D4597 		leaq	-105(%rbp), %rax
 427 01d2 4889C7   		movq	%rax, %rdi
 428 01d5 E8000000 		call	_ZNSaIcED1Ev@PLT
 428      00
 429 01da 4889D8   		movq	%rbx, %rax
 430 01dd 4889C7   		movq	%rax, %rdi
 431              	.LEHB16:
 432 01e0 E8000000 		call	_Unwind_Resume@PLT
 432      00
 433              	.LEHE16:
 434              	.L26:
 435              		.loc 3 18 0 is_stmt 1
 436 01e5 E8000000 		call	__stack_chk_fail@PLT
 436      00
 437              	.L22:
 438 01ea 4881C488 		addq	$136, %rsp
 438      000000
 439 01f1 5B       		popq	%rbx
 440 01f2 5D       		popq	%rbp
 441              		.cfi_def_cfa 7, 8
 442 01f3 C3       		ret
 443              		.cfi_endproc
 444              	.LFE894:
 445              		.section	.gcc_except_table
 446              	.LLSDA894:
 447 0016 FF       		.byte	0xff
 448 0017 FF       		.byte	0xff
 449 0018 01       		.byte	0x1
 450 0019 2B       		.uleb128 .LLSDACSE894-.LLSDACSB894
 451              	.LLSDACSB894:
 452 001a 35       		.uleb128 .LEHB9-.LFB894
 453 001b 05       		.uleb128 .LEHE9-.LEHB9
 454 001c 00       		.uleb128 0
 455 001d 00       		.uleb128 0
 456 001e 6F       		.uleb128 .LEHB10-.LFB894
 457 001f 05       		.uleb128 .LEHE10-.LEHB10
 458 0020 9102     		.uleb128 .L23-.LFB894
 459 0022 00       		.uleb128 0
 460 0023 8A01     		.uleb128 .LEHB11-.LFB894
 461 0025 05       		.uleb128 .LEHE11-.LEHB11
 462 0026 8002     		.uleb128 .L24-.LFB894
 463 0028 00       		.uleb128 0
 464 0029 9901     		.uleb128 .LEHB12-.LFB894
 465 002b 05       		.uleb128 .LEHE12-.LEHB12
 466 002c EF01     		.uleb128 .L25-.LFB894
 467 002e 00       		.uleb128 0
 468 002f A501     		.uleb128 .LEHB13-.LFB894
 469 0031 05       		.uleb128 .LEHE13-.LEHB13
 470 0032 8002     		.uleb128 .L24-.LFB894
 471 0034 00       		.uleb128 0
 472 0035 B101     		.uleb128 .LEHB14-.LFB894
 473 0037 05       		.uleb128 .LEHE14-.LEHB14
 474 0038 9102     		.uleb128 .L23-.LFB894
 475 003a 00       		.uleb128 0
 476 003b D801     		.uleb128 .LEHB15-.LFB894
 477 003d 05       		.uleb128 .LEHE15-.LEHB15
 478 003e 00       		.uleb128 0
 479 003f 00       		.uleb128 0
 480 0040 A602     		.uleb128 .LEHB16-.LFB894
 481 0042 05       		.uleb128 .LEHE16-.LEHB16
 482 0043 00       		.uleb128 0
 483 0044 00       		.uleb128 0
 484              	.LLSDACSE894:
 485              		.text
 487              		.align 2
 488              		.globl	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 490              	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf:
 491              	.LFB898:
  19:DeferredTestReporter.cpp **** 
  20:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportTestFinish(TestDetails const&, float secondsElapsed)
  21:DeferredTestReporter.cpp **** {
 492              		.loc 3 21 0
 493              		.cfi_startproc
 494 01f4 55       		pushq	%rbp
 495              		.cfi_def_cfa_offset 16
 496              		.cfi_offset 6, -16
 497 01f5 4889E5   		movq	%rsp, %rbp
 498              		.cfi_def_cfa_register 6
 499 01f8 4883EC30 		subq	$48, %rsp
 500 01fc 48897DE8 		movq	%rdi, -24(%rbp)
 501 0200 488975E0 		movq	%rsi, -32(%rbp)
 502 0204 F30F1145 		movss	%xmm0, -36(%rbp)
 502      DC
  22:DeferredTestReporter.cpp ****     DeferredTestResult& r = m_results.back();
 503              		.loc 3 22 0
 504 0209 488B45E8 		movq	-24(%rbp), %rax
 505 020d 4883C008 		addq	$8, %rax
 506 0211 4889C7   		movq	%rax, %rdi
 507 0214 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv@PLT
 507      00
 508 0219 488945F8 		movq	%rax, -8(%rbp)
  23:DeferredTestReporter.cpp ****     r.timeElapsed = secondsElapsed;
 509              		.loc 3 23 0
 510 021d 488B45F8 		movq	-8(%rbp), %rax
 511 0221 F30F1045 		movss	-36(%rbp), %xmm0
 511      DC
 512 0226 F30F1140 		movss	%xmm0, 120(%rax)
 512      78
  24:DeferredTestReporter.cpp **** }
 513              		.loc 3 24 0
 514 022b 90       		nop
 515 022c C9       		leave
 516              		.cfi_def_cfa 7, 8
 517 022d C3       		ret
 518              		.cfi_endproc
 519              	.LFE898:
 521              		.align 2
 522              		.globl	_ZN8UnitTest20DeferredTestReporter10GetResultsEv
 524              	_ZN8UnitTest20DeferredTestReporter10GetResultsEv:
 525              	.LFB899:
  25:DeferredTestReporter.cpp **** 
  26:DeferredTestReporter.cpp **** DeferredTestReporter::DeferredTestResultList& DeferredTestReporter::GetResults()
  27:DeferredTestReporter.cpp **** {
 526              		.loc 3 27 0
 527              		.cfi_startproc
 528 022e 55       		pushq	%rbp
 529              		.cfi_def_cfa_offset 16
 530              		.cfi_offset 6, -16
 531 022f 4889E5   		movq	%rsp, %rbp
 532              		.cfi_def_cfa_register 6
 533 0232 48897DF8 		movq	%rdi, -8(%rbp)
  28:DeferredTestReporter.cpp ****     return m_results;
 534              		.loc 3 28 0
 535 0236 488B45F8 		movq	-8(%rbp), %rax
 536 023a 4883C008 		addq	$8, %rax
  29:DeferredTestReporter.cpp **** }
 537              		.loc 3 29 0
 538 023e 5D       		popq	%rbp
 539              		.cfi_def_cfa 7, 8
 540 023f C3       		ret
 541              		.cfi_endproc
 542              	.LFE899:
 544              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 545              		.align 2
 546              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
 548              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 549              	.LFB908:
 550              		.file 5 "/usr/include/c++/7/bits/stl_vector.h"
   1:/usr/include/c++/7/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_vector.h **** 
   3:/usr/include/c++/7/bits/stl_vector.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_vector.h **** //
   5:/usr/include/c++/7/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_vector.h **** 
  11:/usr/include/c++/7/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_vector.h **** 
  16:/usr/include/c++/7/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_vector.h **** 
  20:/usr/include/c++/7/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_vector.h **** 
  25:/usr/include/c++/7/bits/stl_vector.h **** /*
  26:/usr/include/c++/7/bits/stl_vector.h ****  *
  27:/usr/include/c++/7/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_vector.h ****  *
  30:/usr/include/c++/7/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_vector.h ****  *
  38:/usr/include/c++/7/bits/stl_vector.h ****  *
  39:/usr/include/c++/7/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/7/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_vector.h ****  *
  42:/usr/include/c++/7/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/7/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_vector.h ****  */
  50:/usr/include/c++/7/bits/stl_vector.h **** 
  51:/usr/include/c++/7/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/7/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/7/bits/stl_vector.h ****  */
  55:/usr/include/c++/7/bits/stl_vector.h **** 
  56:/usr/include/c++/7/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/7/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/7/bits/stl_vector.h **** 
  59:/usr/include/c++/7/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/7/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/7/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/7/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/7/bits/stl_vector.h **** #endif
  65:/usr/include/c++/7/bits/stl_vector.h **** 
  66:/usr/include/c++/7/bits/stl_vector.h **** #include <debug/assertions.h>
  67:/usr/include/c++/7/bits/stl_vector.h **** 
  68:/usr/include/c++/7/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:/usr/include/c++/7/bits/stl_vector.h **** {
  70:/usr/include/c++/7/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  71:/usr/include/c++/7/bits/stl_vector.h **** 
  72:/usr/include/c++/7/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  73:/usr/include/c++/7/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  74:/usr/include/c++/7/bits/stl_vector.h ****     struct _Vector_base
  75:/usr/include/c++/7/bits/stl_vector.h ****     {
  76:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  77:/usr/include/c++/7/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  78:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  79:/usr/include/c++/7/bits/stl_vector.h ****        	pointer;
  80:/usr/include/c++/7/bits/stl_vector.h **** 
  81:/usr/include/c++/7/bits/stl_vector.h ****       struct _Vector_impl
  82:/usr/include/c++/7/bits/stl_vector.h ****       : public _Tp_alloc_type
  83:/usr/include/c++/7/bits/stl_vector.h ****       {
  84:/usr/include/c++/7/bits/stl_vector.h **** 	pointer _M_start;
  85:/usr/include/c++/7/bits/stl_vector.h **** 	pointer _M_finish;
  86:/usr/include/c++/7/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  87:/usr/include/c++/7/bits/stl_vector.h **** 
  88:/usr/include/c++/7/bits/stl_vector.h **** 	_Vector_impl()
  89:/usr/include/c++/7/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  90:/usr/include/c++/7/bits/stl_vector.h **** 	{ }
  91:/usr/include/c++/7/bits/stl_vector.h **** 
  92:/usr/include/c++/7/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  93:/usr/include/c++/7/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  94:/usr/include/c++/7/bits/stl_vector.h **** 	{ }
  95:/usr/include/c++/7/bits/stl_vector.h **** 
  96:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
  97:/usr/include/c++/7/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  98:/usr/include/c++/7/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  99:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_start(), _M_finish(), _M_end_of_storage()
 100:/usr/include/c++/7/bits/stl_vector.h **** 	{ }
 101:/usr/include/c++/7/bits/stl_vector.h **** #endif
 102:/usr/include/c++/7/bits/stl_vector.h **** 
 103:/usr/include/c++/7/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 104:/usr/include/c++/7/bits/stl_vector.h **** 	{
 105:/usr/include/c++/7/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 106:/usr/include/c++/7/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 107:/usr/include/c++/7/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 108:/usr/include/c++/7/bits/stl_vector.h **** 	}
 109:/usr/include/c++/7/bits/stl_vector.h ****       };
 110:/usr/include/c++/7/bits/stl_vector.h **** 
 111:/usr/include/c++/7/bits/stl_vector.h ****     public:
 112:/usr/include/c++/7/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 113:/usr/include/c++/7/bits/stl_vector.h **** 
 114:/usr/include/c++/7/bits/stl_vector.h ****       _Tp_alloc_type&
 115:/usr/include/c++/7/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 116:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 117:/usr/include/c++/7/bits/stl_vector.h **** 
 118:/usr/include/c++/7/bits/stl_vector.h ****       const _Tp_alloc_type&
 119:/usr/include/c++/7/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 120:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 121:/usr/include/c++/7/bits/stl_vector.h **** 
 122:/usr/include/c++/7/bits/stl_vector.h ****       allocator_type
 123:/usr/include/c++/7/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 124:/usr/include/c++/7/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 125:/usr/include/c++/7/bits/stl_vector.h **** 
 126:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base()
 127:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl() { }
 128:/usr/include/c++/7/bits/stl_vector.h **** 
 129:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 130:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(__a) { }
 131:/usr/include/c++/7/bits/stl_vector.h **** 
 132:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(size_t __n)
 133:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl()
 134:/usr/include/c++/7/bits/stl_vector.h ****       { _M_create_storage(__n); }
 135:/usr/include/c++/7/bits/stl_vector.h **** 
 136:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 137:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(__a)
 138:/usr/include/c++/7/bits/stl_vector.h ****       { _M_create_storage(__n); }
 139:/usr/include/c++/7/bits/stl_vector.h **** 
 140:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 142:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 143:/usr/include/c++/7/bits/stl_vector.h **** 
 144:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 145:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 146:/usr/include/c++/7/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 147:/usr/include/c++/7/bits/stl_vector.h **** 
 148:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 149:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(__a)
 150:/usr/include/c++/7/bits/stl_vector.h ****       {
 151:/usr/include/c++/7/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 152:/usr/include/c++/7/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 153:/usr/include/c++/7/bits/stl_vector.h **** 	else
 154:/usr/include/c++/7/bits/stl_vector.h **** 	  {
 155:/usr/include/c++/7/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 156:/usr/include/c++/7/bits/stl_vector.h **** 	    _M_create_storage(__n);
 157:/usr/include/c++/7/bits/stl_vector.h **** 	  }
 158:/usr/include/c++/7/bits/stl_vector.h ****       }
 159:/usr/include/c++/7/bits/stl_vector.h **** #endif
 160:/usr/include/c++/7/bits/stl_vector.h **** 
 161:/usr/include/c++/7/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 162:/usr/include/c++/7/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 163:/usr/include/c++/7/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 164:/usr/include/c++/7/bits/stl_vector.h **** 
 165:/usr/include/c++/7/bits/stl_vector.h ****     public:
 166:/usr/include/c++/7/bits/stl_vector.h ****       _Vector_impl _M_impl;
 167:/usr/include/c++/7/bits/stl_vector.h **** 
 168:/usr/include/c++/7/bits/stl_vector.h ****       pointer
 169:/usr/include/c++/7/bits/stl_vector.h ****       _M_allocate(size_t __n)
 170:/usr/include/c++/7/bits/stl_vector.h ****       {
 171:/usr/include/c++/7/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 172:/usr/include/c++/7/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 173:/usr/include/c++/7/bits/stl_vector.h ****       }
 174:/usr/include/c++/7/bits/stl_vector.h **** 
 175:/usr/include/c++/7/bits/stl_vector.h ****       void
 176:/usr/include/c++/7/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 177:/usr/include/c++/7/bits/stl_vector.h ****       {
 178:/usr/include/c++/7/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 179:/usr/include/c++/7/bits/stl_vector.h **** 	if (__p)
 180:/usr/include/c++/7/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 181:/usr/include/c++/7/bits/stl_vector.h ****       }
 182:/usr/include/c++/7/bits/stl_vector.h **** 
 183:/usr/include/c++/7/bits/stl_vector.h ****     private:
 184:/usr/include/c++/7/bits/stl_vector.h ****       void
 185:/usr/include/c++/7/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 186:/usr/include/c++/7/bits/stl_vector.h ****       {
 187:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 188:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 189:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 190:/usr/include/c++/7/bits/stl_vector.h ****       }
 191:/usr/include/c++/7/bits/stl_vector.h ****     };
 192:/usr/include/c++/7/bits/stl_vector.h **** 
 193:/usr/include/c++/7/bits/stl_vector.h **** 
 194:/usr/include/c++/7/bits/stl_vector.h ****   /**
 195:/usr/include/c++/7/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 196:/usr/include/c++/7/bits/stl_vector.h ****    *  individual elements in any order.
 197:/usr/include/c++/7/bits/stl_vector.h ****    *
 198:/usr/include/c++/7/bits/stl_vector.h ****    *  @ingroup sequences
 199:/usr/include/c++/7/bits/stl_vector.h ****    *
 200:/usr/include/c++/7/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 201:/usr/include/c++/7/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 202:/usr/include/c++/7/bits/stl_vector.h ****    *
 203:/usr/include/c++/7/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 204:/usr/include/c++/7/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 205:/usr/include/c++/7/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 206:/usr/include/c++/7/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 207:/usr/include/c++/7/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 208:/usr/include/c++/7/bits/stl_vector.h ****    *
 209:/usr/include/c++/7/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 210:/usr/include/c++/7/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 211:/usr/include/c++/7/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 212:/usr/include/c++/7/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 213:/usr/include/c++/7/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 214:/usr/include/c++/7/bits/stl_vector.h ****   */
 215:/usr/include/c++/7/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 216:/usr/include/c++/7/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 217:/usr/include/c++/7/bits/stl_vector.h ****     {
 218:/usr/include/c++/7/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 219:/usr/include/c++/7/bits/stl_vector.h ****       // Concept requirements.
 220:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 221:/usr/include/c++/7/bits/stl_vector.h **** # if __cplusplus < 201103L
 222:/usr/include/c++/7/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 223:/usr/include/c++/7/bits/stl_vector.h **** # endif
 224:/usr/include/c++/7/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 225:/usr/include/c++/7/bits/stl_vector.h **** #endif
 226:/usr/include/c++/7/bits/stl_vector.h **** 
 227:/usr/include/c++/7/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 228:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 229:/usr/include/c++/7/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 230:/usr/include/c++/7/bits/stl_vector.h **** 
 231:/usr/include/c++/7/bits/stl_vector.h ****     public:
 232:/usr/include/c++/7/bits/stl_vector.h ****       typedef _Tp					value_type;
 233:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 234:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 235:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 236:/usr/include/c++/7/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 237:/usr/include/c++/7/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 238:/usr/include/c++/7/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 239:/usr/include/c++/7/bits/stl_vector.h ****       const_iterator;
 240:/usr/include/c++/7/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 241:/usr/include/c++/7/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 242:/usr/include/c++/7/bits/stl_vector.h ****       typedef size_t					size_type;
 243:/usr/include/c++/7/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 244:/usr/include/c++/7/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 245:/usr/include/c++/7/bits/stl_vector.h **** 
 246:/usr/include/c++/7/bits/stl_vector.h ****     protected:
 247:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::_M_allocate;
 248:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::_M_deallocate;
 249:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::_M_impl;
 250:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 251:/usr/include/c++/7/bits/stl_vector.h **** 
 252:/usr/include/c++/7/bits/stl_vector.h ****     public:
 253:/usr/include/c++/7/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 254:/usr/include/c++/7/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 255:/usr/include/c++/7/bits/stl_vector.h **** 
 256:/usr/include/c++/7/bits/stl_vector.h ****       /**
 257:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 258:/usr/include/c++/7/bits/stl_vector.h ****        */
 259:/usr/include/c++/7/bits/stl_vector.h ****       vector()
 260:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 261:/usr/include/c++/7/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 262:/usr/include/c++/7/bits/stl_vector.h **** #endif
 263:/usr/include/c++/7/bits/stl_vector.h ****       : _Base() { }
 264:/usr/include/c++/7/bits/stl_vector.h **** 
 265:/usr/include/c++/7/bits/stl_vector.h ****       /**
 266:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 267:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 268:/usr/include/c++/7/bits/stl_vector.h ****        */
 269:/usr/include/c++/7/bits/stl_vector.h ****       explicit
 270:/usr/include/c++/7/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 271:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__a) { }
 272:/usr/include/c++/7/bits/stl_vector.h **** 
 273:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 274:/usr/include/c++/7/bits/stl_vector.h ****       /**
 275:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 276:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 277:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 278:/usr/include/c++/7/bits/stl_vector.h ****        *
 279:/usr/include/c++/7/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 280:/usr/include/c++/7/bits/stl_vector.h ****        *  constructed elements.
 281:/usr/include/c++/7/bits/stl_vector.h ****        */
 282:/usr/include/c++/7/bits/stl_vector.h ****       explicit
 283:/usr/include/c++/7/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 284:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__n, __a)
 285:/usr/include/c++/7/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 286:/usr/include/c++/7/bits/stl_vector.h **** 
 287:/usr/include/c++/7/bits/stl_vector.h ****       /**
 288:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 289:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 290:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 291:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 292:/usr/include/c++/7/bits/stl_vector.h ****        *
 293:/usr/include/c++/7/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 294:/usr/include/c++/7/bits/stl_vector.h ****        */
 295:/usr/include/c++/7/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 296:/usr/include/c++/7/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 297:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__n, __a)
 298:/usr/include/c++/7/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 299:/usr/include/c++/7/bits/stl_vector.h **** #else
 300:/usr/include/c++/7/bits/stl_vector.h ****       /**
 301:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 302:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 303:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 304:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 305:/usr/include/c++/7/bits/stl_vector.h ****        *
 306:/usr/include/c++/7/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 307:/usr/include/c++/7/bits/stl_vector.h ****        */
 308:/usr/include/c++/7/bits/stl_vector.h ****       explicit
 309:/usr/include/c++/7/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 310:/usr/include/c++/7/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 311:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__n, __a)
 312:/usr/include/c++/7/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 313:/usr/include/c++/7/bits/stl_vector.h **** #endif
 314:/usr/include/c++/7/bits/stl_vector.h **** 
 315:/usr/include/c++/7/bits/stl_vector.h ****       /**
 316:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 317:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 318:/usr/include/c++/7/bits/stl_vector.h ****        *
 319:/usr/include/c++/7/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 320:/usr/include/c++/7/bits/stl_vector.h ****        *  @a __x  will not be copied
 321:/usr/include/c++/7/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 322:/usr/include/c++/7/bits/stl_vector.h ****        *
 323:/usr/include/c++/7/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 324:/usr/include/c++/7/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 325:/usr/include/c++/7/bits/stl_vector.h ****        */
 326:/usr/include/c++/7/bits/stl_vector.h ****       vector(const vector& __x)
 327:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__x.size(),
 328:/usr/include/c++/7/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 329:/usr/include/c++/7/bits/stl_vector.h ****       {
 330:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 331:/usr/include/c++/7/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 332:/usr/include/c++/7/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 333:/usr/include/c++/7/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 334:/usr/include/c++/7/bits/stl_vector.h ****       }
 335:/usr/include/c++/7/bits/stl_vector.h **** 
 336:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 337:/usr/include/c++/7/bits/stl_vector.h ****       /**
 338:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 339:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 340:/usr/include/c++/7/bits/stl_vector.h ****        *
 341:/usr/include/c++/7/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 342:/usr/include/c++/7/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 343:/usr/include/c++/7/bits/stl_vector.h ****        */
 344:/usr/include/c++/7/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 345:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 346:/usr/include/c++/7/bits/stl_vector.h **** 
 347:/usr/include/c++/7/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 348:/usr/include/c++/7/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 349:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 350:/usr/include/c++/7/bits/stl_vector.h ****       {
 351:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 352:/usr/include/c++/7/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 353:/usr/include/c++/7/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 354:/usr/include/c++/7/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 355:/usr/include/c++/7/bits/stl_vector.h ****       }
 356:/usr/include/c++/7/bits/stl_vector.h **** 
 357:/usr/include/c++/7/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 358:/usr/include/c++/7/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 359:/usr/include/c++/7/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 360:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 361:/usr/include/c++/7/bits/stl_vector.h ****       {
 362:/usr/include/c++/7/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 363:/usr/include/c++/7/bits/stl_vector.h **** 	  {
 364:/usr/include/c++/7/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 365:/usr/include/c++/7/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 366:/usr/include/c++/7/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 367:/usr/include/c++/7/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 368:/usr/include/c++/7/bits/stl_vector.h **** 	    __rv.clear();
 369:/usr/include/c++/7/bits/stl_vector.h **** 	  }
 370:/usr/include/c++/7/bits/stl_vector.h ****       }
 371:/usr/include/c++/7/bits/stl_vector.h **** 
 372:/usr/include/c++/7/bits/stl_vector.h ****       /**
 373:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 374:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 375:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 376:/usr/include/c++/7/bits/stl_vector.h ****        *
 377:/usr/include/c++/7/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 378:/usr/include/c++/7/bits/stl_vector.h ****        *  initializer_list @a __l.
 379:/usr/include/c++/7/bits/stl_vector.h ****        *
 380:/usr/include/c++/7/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 381:/usr/include/c++/7/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 382:/usr/include/c++/7/bits/stl_vector.h ****        */
 383:/usr/include/c++/7/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 384:/usr/include/c++/7/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 385:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__a)
 386:/usr/include/c++/7/bits/stl_vector.h ****       {
 387:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 388:/usr/include/c++/7/bits/stl_vector.h **** 			    random_access_iterator_tag());
 389:/usr/include/c++/7/bits/stl_vector.h ****       }
 390:/usr/include/c++/7/bits/stl_vector.h **** #endif
 391:/usr/include/c++/7/bits/stl_vector.h **** 
 392:/usr/include/c++/7/bits/stl_vector.h ****       /**
 393:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 394:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 395:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 396:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __a  An allocator.
 397:/usr/include/c++/7/bits/stl_vector.h ****        *
 398:/usr/include/c++/7/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 399:/usr/include/c++/7/bits/stl_vector.h ****        *  [first,last).
 400:/usr/include/c++/7/bits/stl_vector.h ****        *
 401:/usr/include/c++/7/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 402:/usr/include/c++/7/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 403:/usr/include/c++/7/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 404:/usr/include/c++/7/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 405:/usr/include/c++/7/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 406:/usr/include/c++/7/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 407:/usr/include/c++/7/bits/stl_vector.h ****        */
 408:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 409:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator,
 410:/usr/include/c++/7/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 411:/usr/include/c++/7/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 412:/usr/include/c++/7/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 413:/usr/include/c++/7/bits/stl_vector.h **** 	: _Base(__a)
 414:/usr/include/c++/7/bits/stl_vector.h **** 	{ _M_initialize_dispatch(__first, __last, __false_type()); }
 415:/usr/include/c++/7/bits/stl_vector.h **** #else
 416:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
 417:/usr/include/c++/7/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 418:/usr/include/c++/7/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 419:/usr/include/c++/7/bits/stl_vector.h **** 	: _Base(__a)
 420:/usr/include/c++/7/bits/stl_vector.h **** 	{
 421:/usr/include/c++/7/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 422:/usr/include/c++/7/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 423:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 424:/usr/include/c++/7/bits/stl_vector.h **** 	}
 425:/usr/include/c++/7/bits/stl_vector.h **** #endif
 426:/usr/include/c++/7/bits/stl_vector.h **** 
 427:/usr/include/c++/7/bits/stl_vector.h ****       /**
 428:/usr/include/c++/7/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 429:/usr/include/c++/7/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 430:/usr/include/c++/7/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 431:/usr/include/c++/7/bits/stl_vector.h ****        *  responsibility.
 432:/usr/include/c++/7/bits/stl_vector.h ****        */
 433:/usr/include/c++/7/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 551              		.loc 5 433 0
 552              		.cfi_startproc
 553              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 554              		.cfi_lsda 0x1b,.LLSDA908
 555 0000 55       		pushq	%rbp
 556              		.cfi_def_cfa_offset 16
 557              		.cfi_offset 6, -16
 558 0001 4889E5   		movq	%rsp, %rbp
 559              		.cfi_def_cfa_register 6
 560 0004 53       		pushq	%rbx
 561 0005 4883EC18 		subq	$24, %rsp
 562              		.cfi_offset 3, -24
 563 0009 48897DE8 		movq	%rdi, -24(%rbp)
 564              	.LBB5:
 434:/usr/include/c++/7/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 435:/usr/include/c++/7/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 565              		.loc 5 435 0
 566 000d 488B45E8 		movq	-24(%rbp), %rax
 567 0011 4889C7   		movq	%rax, %rdi
 568 0014 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 568      00
 569 0019 4889C2   		movq	%rax, %rdx
 434:/usr/include/c++/7/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 570              		.loc 5 434 0
 571 001c 488B45E8 		movq	-24(%rbp), %rax
 572 0020 488B4808 		movq	8(%rax), %rcx
 573 0024 488B45E8 		movq	-24(%rbp), %rax
 574 0028 488B00   		movq	(%rax), %rax
 575 002b 4889CE   		movq	%rcx, %rsi
 576 002e 4889C7   		movq	%rax, %rdi
 577              	.LEHB17:
 578 0031 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 578      00
 579              	.LEHE17:
 580              		.loc 5 435 0
 581 0036 488B45E8 		movq	-24(%rbp), %rax
 582 003a 4889C7   		movq	%rax, %rdi
 583              	.LEHB18:
 584 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 584      00
 585              	.LEHE18:
 586              	.LBE5:
 587 0042 EB1A     		jmp	.L33
 588              	.L32:
 589 0044 4889C3   		movq	%rax, %rbx
 590              	.LBB6:
 591 0047 488B45E8 		movq	-24(%rbp), %rax
 592 004b 4889C7   		movq	%rax, %rdi
 593 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 593      00
 594 0053 4889D8   		movq	%rbx, %rax
 595 0056 4889C7   		movq	%rax, %rdi
 596              	.LEHB19:
 597 0059 E8000000 		call	_Unwind_Resume@PLT
 597      00
 598              	.LEHE19:
 599              	.L33:
 600              	.LBE6:
 601 005e 4883C418 		addq	$24, %rsp
 602 0062 5B       		popq	%rbx
 603 0063 5D       		popq	%rbp
 604              		.cfi_def_cfa 7, 8
 605 0064 C3       		ret
 606              		.cfi_endproc
 607              	.LFE908:
 608              		.section	.gcc_except_table
 609              	.LLSDA908:
 610 0045 FF       		.byte	0xff
 611 0046 FF       		.byte	0xff
 612 0047 01       		.byte	0x1
 613 0048 0C       		.uleb128 .LLSDACSE908-.LLSDACSB908
 614              	.LLSDACSB908:
 615 0049 31       		.uleb128 .LEHB17-.LFB908
 616 004a 05       		.uleb128 .LEHE17-.LEHB17
 617 004b 44       		.uleb128 .L32-.LFB908
 618 004c 00       		.uleb128 0
 619 004d 3D       		.uleb128 .LEHB18-.LFB908
 620 004e 05       		.uleb128 .LEHE18-.LEHB18
 621 004f 00       		.uleb128 0
 622 0050 00       		.uleb128 0
 623 0051 59       		.uleb128 .LEHB19-.LFB908
 624 0052 05       		.uleb128 .LEHE19-.LEHB19
 625 0053 00       		.uleb128 0
 626 0054 00       		.uleb128 0
 627              	.LLSDACSE908:
 628              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 630              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
 631              		.set	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev,_ZNSt
 632              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_,"axG",@progbit
 633              		.align 2
 634              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_
 636              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_:
 637              	.LFB910:
 436:/usr/include/c++/7/bits/stl_vector.h **** 
 437:/usr/include/c++/7/bits/stl_vector.h ****       /**
 438:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 439:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 440:/usr/include/c++/7/bits/stl_vector.h ****        *
 441:/usr/include/c++/7/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 442:/usr/include/c++/7/bits/stl_vector.h ****        *  @a __x will not be copied.
 443:/usr/include/c++/7/bits/stl_vector.h ****        *
 444:/usr/include/c++/7/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 445:/usr/include/c++/7/bits/stl_vector.h ****        */
 446:/usr/include/c++/7/bits/stl_vector.h ****       vector&
 447:/usr/include/c++/7/bits/stl_vector.h ****       operator=(const vector& __x);
 448:/usr/include/c++/7/bits/stl_vector.h **** 
 449:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 450:/usr/include/c++/7/bits/stl_vector.h ****       /**
 451:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 452:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 453:/usr/include/c++/7/bits/stl_vector.h ****        *
 454:/usr/include/c++/7/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 455:/usr/include/c++/7/bits/stl_vector.h ****        *  if the allocators permit it).
 456:/usr/include/c++/7/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 457:/usr/include/c++/7/bits/stl_vector.h ****        *
 458:/usr/include/c++/7/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 459:/usr/include/c++/7/bits/stl_vector.h ****        */
 460:/usr/include/c++/7/bits/stl_vector.h ****       vector&
 461:/usr/include/c++/7/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 462:/usr/include/c++/7/bits/stl_vector.h ****       {
 463:/usr/include/c++/7/bits/stl_vector.h **** 	constexpr bool __move_storage =
 464:/usr/include/c++/7/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 465:/usr/include/c++/7/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 466:/usr/include/c++/7/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 467:/usr/include/c++/7/bits/stl_vector.h **** 	return *this;
 468:/usr/include/c++/7/bits/stl_vector.h ****       }
 469:/usr/include/c++/7/bits/stl_vector.h **** 
 470:/usr/include/c++/7/bits/stl_vector.h ****       /**
 471:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 472:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 473:/usr/include/c++/7/bits/stl_vector.h ****        *
 474:/usr/include/c++/7/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 475:/usr/include/c++/7/bits/stl_vector.h ****        *  initializer list @a __l.
 476:/usr/include/c++/7/bits/stl_vector.h ****        *
 477:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 478:/usr/include/c++/7/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 479:/usr/include/c++/7/bits/stl_vector.h ****        *  of elements assigned.
 480:/usr/include/c++/7/bits/stl_vector.h ****        */
 481:/usr/include/c++/7/bits/stl_vector.h ****       vector&
 482:/usr/include/c++/7/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 483:/usr/include/c++/7/bits/stl_vector.h ****       {
 484:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 485:/usr/include/c++/7/bits/stl_vector.h **** 			    random_access_iterator_tag());
 486:/usr/include/c++/7/bits/stl_vector.h **** 	return *this;
 487:/usr/include/c++/7/bits/stl_vector.h ****       }
 488:/usr/include/c++/7/bits/stl_vector.h **** #endif
 489:/usr/include/c++/7/bits/stl_vector.h **** 
 490:/usr/include/c++/7/bits/stl_vector.h ****       /**
 491:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 492:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 493:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 494:/usr/include/c++/7/bits/stl_vector.h ****        *
 495:/usr/include/c++/7/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 496:/usr/include/c++/7/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 497:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 498:/usr/include/c++/7/bits/stl_vector.h ****        *  the number of elements assigned.
 499:/usr/include/c++/7/bits/stl_vector.h ****        */
 500:/usr/include/c++/7/bits/stl_vector.h ****       void
 501:/usr/include/c++/7/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 502:/usr/include/c++/7/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 503:/usr/include/c++/7/bits/stl_vector.h **** 
 504:/usr/include/c++/7/bits/stl_vector.h ****       /**
 505:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 506:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 507:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 508:/usr/include/c++/7/bits/stl_vector.h ****        *
 509:/usr/include/c++/7/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 510:/usr/include/c++/7/bits/stl_vector.h ****        *  range [__first,__last).
 511:/usr/include/c++/7/bits/stl_vector.h ****        *
 512:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 513:/usr/include/c++/7/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 514:/usr/include/c++/7/bits/stl_vector.h ****        *  of elements assigned.
 515:/usr/include/c++/7/bits/stl_vector.h ****        */
 516:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 517:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator,
 518:/usr/include/c++/7/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 519:/usr/include/c++/7/bits/stl_vector.h **** 	void
 520:/usr/include/c++/7/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 521:/usr/include/c++/7/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 522:/usr/include/c++/7/bits/stl_vector.h **** #else
 523:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
 524:/usr/include/c++/7/bits/stl_vector.h **** 	void
 525:/usr/include/c++/7/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 526:/usr/include/c++/7/bits/stl_vector.h **** 	{
 527:/usr/include/c++/7/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 528:/usr/include/c++/7/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 529:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 530:/usr/include/c++/7/bits/stl_vector.h **** 	}
 531:/usr/include/c++/7/bits/stl_vector.h **** #endif
 532:/usr/include/c++/7/bits/stl_vector.h **** 
 533:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 534:/usr/include/c++/7/bits/stl_vector.h ****       /**
 535:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 536:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 537:/usr/include/c++/7/bits/stl_vector.h ****        *
 538:/usr/include/c++/7/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 539:/usr/include/c++/7/bits/stl_vector.h ****        *  initializer list @a __l.
 540:/usr/include/c++/7/bits/stl_vector.h ****        *
 541:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 542:/usr/include/c++/7/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 543:/usr/include/c++/7/bits/stl_vector.h ****        *  of elements assigned.
 544:/usr/include/c++/7/bits/stl_vector.h ****        */
 545:/usr/include/c++/7/bits/stl_vector.h ****       void
 546:/usr/include/c++/7/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 547:/usr/include/c++/7/bits/stl_vector.h ****       {
 548:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 549:/usr/include/c++/7/bits/stl_vector.h **** 			    random_access_iterator_tag());
 550:/usr/include/c++/7/bits/stl_vector.h ****       }
 551:/usr/include/c++/7/bits/stl_vector.h **** #endif
 552:/usr/include/c++/7/bits/stl_vector.h **** 
 553:/usr/include/c++/7/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 554:/usr/include/c++/7/bits/stl_vector.h ****       using _Base::get_allocator;
 555:/usr/include/c++/7/bits/stl_vector.h **** 
 556:/usr/include/c++/7/bits/stl_vector.h ****       // iterators
 557:/usr/include/c++/7/bits/stl_vector.h ****       /**
 558:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 559:/usr/include/c++/7/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 560:/usr/include/c++/7/bits/stl_vector.h ****        *  element order.
 561:/usr/include/c++/7/bits/stl_vector.h ****        */
 562:/usr/include/c++/7/bits/stl_vector.h ****       iterator
 563:/usr/include/c++/7/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 564:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 565:/usr/include/c++/7/bits/stl_vector.h **** 
 566:/usr/include/c++/7/bits/stl_vector.h ****       /**
 567:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 568:/usr/include/c++/7/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 569:/usr/include/c++/7/bits/stl_vector.h ****        *  element order.
 570:/usr/include/c++/7/bits/stl_vector.h ****        */
 571:/usr/include/c++/7/bits/stl_vector.h ****       const_iterator
 572:/usr/include/c++/7/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 573:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 574:/usr/include/c++/7/bits/stl_vector.h **** 
 575:/usr/include/c++/7/bits/stl_vector.h ****       /**
 576:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 577:/usr/include/c++/7/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 578:/usr/include/c++/7/bits/stl_vector.h ****        *  element order.
 579:/usr/include/c++/7/bits/stl_vector.h ****        */
 580:/usr/include/c++/7/bits/stl_vector.h ****       iterator
 581:/usr/include/c++/7/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 582:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 583:/usr/include/c++/7/bits/stl_vector.h **** 
 584:/usr/include/c++/7/bits/stl_vector.h ****       /**
 585:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 586:/usr/include/c++/7/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 587:/usr/include/c++/7/bits/stl_vector.h ****        *  ordinary element order.
 588:/usr/include/c++/7/bits/stl_vector.h ****        */
 589:/usr/include/c++/7/bits/stl_vector.h ****       const_iterator
 590:/usr/include/c++/7/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 591:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 592:/usr/include/c++/7/bits/stl_vector.h **** 
 593:/usr/include/c++/7/bits/stl_vector.h ****       /**
 594:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 595:/usr/include/c++/7/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 596:/usr/include/c++/7/bits/stl_vector.h ****        *  element order.
 597:/usr/include/c++/7/bits/stl_vector.h ****        */
 598:/usr/include/c++/7/bits/stl_vector.h ****       reverse_iterator
 599:/usr/include/c++/7/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 600:/usr/include/c++/7/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 601:/usr/include/c++/7/bits/stl_vector.h **** 
 602:/usr/include/c++/7/bits/stl_vector.h ****       /**
 603:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 604:/usr/include/c++/7/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 605:/usr/include/c++/7/bits/stl_vector.h ****        *  reverse element order.
 606:/usr/include/c++/7/bits/stl_vector.h ****        */
 607:/usr/include/c++/7/bits/stl_vector.h ****       const_reverse_iterator
 608:/usr/include/c++/7/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 609:/usr/include/c++/7/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 610:/usr/include/c++/7/bits/stl_vector.h **** 
 611:/usr/include/c++/7/bits/stl_vector.h ****       /**
 612:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 613:/usr/include/c++/7/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 614:/usr/include/c++/7/bits/stl_vector.h ****        *  in reverse element order.
 615:/usr/include/c++/7/bits/stl_vector.h ****        */
 616:/usr/include/c++/7/bits/stl_vector.h ****       reverse_iterator
 617:/usr/include/c++/7/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 618:/usr/include/c++/7/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 619:/usr/include/c++/7/bits/stl_vector.h **** 
 620:/usr/include/c++/7/bits/stl_vector.h ****       /**
 621:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 622:/usr/include/c++/7/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 623:/usr/include/c++/7/bits/stl_vector.h ****        *  is done in reverse element order.
 624:/usr/include/c++/7/bits/stl_vector.h ****        */
 625:/usr/include/c++/7/bits/stl_vector.h ****       const_reverse_iterator
 626:/usr/include/c++/7/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 627:/usr/include/c++/7/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 628:/usr/include/c++/7/bits/stl_vector.h **** 
 629:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 630:/usr/include/c++/7/bits/stl_vector.h ****       /**
 631:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 632:/usr/include/c++/7/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 633:/usr/include/c++/7/bits/stl_vector.h ****        *  element order.
 634:/usr/include/c++/7/bits/stl_vector.h ****        */
 635:/usr/include/c++/7/bits/stl_vector.h ****       const_iterator
 636:/usr/include/c++/7/bits/stl_vector.h ****       cbegin() const noexcept
 637:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 638:/usr/include/c++/7/bits/stl_vector.h **** 
 639:/usr/include/c++/7/bits/stl_vector.h ****       /**
 640:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 641:/usr/include/c++/7/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 642:/usr/include/c++/7/bits/stl_vector.h ****        *  ordinary element order.
 643:/usr/include/c++/7/bits/stl_vector.h ****        */
 644:/usr/include/c++/7/bits/stl_vector.h ****       const_iterator
 645:/usr/include/c++/7/bits/stl_vector.h ****       cend() const noexcept
 646:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 647:/usr/include/c++/7/bits/stl_vector.h **** 
 648:/usr/include/c++/7/bits/stl_vector.h ****       /**
 649:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 650:/usr/include/c++/7/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 651:/usr/include/c++/7/bits/stl_vector.h ****        *  reverse element order.
 652:/usr/include/c++/7/bits/stl_vector.h ****        */
 653:/usr/include/c++/7/bits/stl_vector.h ****       const_reverse_iterator
 654:/usr/include/c++/7/bits/stl_vector.h ****       crbegin() const noexcept
 655:/usr/include/c++/7/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 656:/usr/include/c++/7/bits/stl_vector.h **** 
 657:/usr/include/c++/7/bits/stl_vector.h ****       /**
 658:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 659:/usr/include/c++/7/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 660:/usr/include/c++/7/bits/stl_vector.h ****        *  is done in reverse element order.
 661:/usr/include/c++/7/bits/stl_vector.h ****        */
 662:/usr/include/c++/7/bits/stl_vector.h ****       const_reverse_iterator
 663:/usr/include/c++/7/bits/stl_vector.h ****       crend() const noexcept
 664:/usr/include/c++/7/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 665:/usr/include/c++/7/bits/stl_vector.h **** #endif
 666:/usr/include/c++/7/bits/stl_vector.h **** 
 667:/usr/include/c++/7/bits/stl_vector.h ****       // [23.2.4.2] capacity
 668:/usr/include/c++/7/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 669:/usr/include/c++/7/bits/stl_vector.h ****       size_type
 670:/usr/include/c++/7/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 671:/usr/include/c++/7/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 672:/usr/include/c++/7/bits/stl_vector.h **** 
 673:/usr/include/c++/7/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 674:/usr/include/c++/7/bits/stl_vector.h ****       size_type
 675:/usr/include/c++/7/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 676:/usr/include/c++/7/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 677:/usr/include/c++/7/bits/stl_vector.h **** 
 678:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 679:/usr/include/c++/7/bits/stl_vector.h ****       /**
 680:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 681:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 682:/usr/include/c++/7/bits/stl_vector.h ****        *
 683:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 684:/usr/include/c++/7/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 685:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 686:/usr/include/c++/7/bits/stl_vector.h ****        *  default constructed elements are appended.
 687:/usr/include/c++/7/bits/stl_vector.h ****        */
 688:/usr/include/c++/7/bits/stl_vector.h ****       void
 689:/usr/include/c++/7/bits/stl_vector.h ****       resize(size_type __new_size)
 690:/usr/include/c++/7/bits/stl_vector.h ****       {
 691:/usr/include/c++/7/bits/stl_vector.h **** 	if (__new_size > size())
 692:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 693:/usr/include/c++/7/bits/stl_vector.h **** 	else if (__new_size < size())
 694:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 695:/usr/include/c++/7/bits/stl_vector.h ****       }
 696:/usr/include/c++/7/bits/stl_vector.h **** 
 697:/usr/include/c++/7/bits/stl_vector.h ****       /**
 698:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 699:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 700:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 701:/usr/include/c++/7/bits/stl_vector.h ****        *
 702:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 703:/usr/include/c++/7/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 704:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 705:/usr/include/c++/7/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 706:/usr/include/c++/7/bits/stl_vector.h ****        *  given data.
 707:/usr/include/c++/7/bits/stl_vector.h ****        */
 708:/usr/include/c++/7/bits/stl_vector.h ****       void
 709:/usr/include/c++/7/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 710:/usr/include/c++/7/bits/stl_vector.h ****       {
 711:/usr/include/c++/7/bits/stl_vector.h **** 	if (__new_size > size())
 712:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 713:/usr/include/c++/7/bits/stl_vector.h **** 	else if (__new_size < size())
 714:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 715:/usr/include/c++/7/bits/stl_vector.h ****       }
 716:/usr/include/c++/7/bits/stl_vector.h **** #else
 717:/usr/include/c++/7/bits/stl_vector.h ****       /**
 718:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 719:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 720:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 721:/usr/include/c++/7/bits/stl_vector.h ****        *
 722:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 723:/usr/include/c++/7/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 724:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 725:/usr/include/c++/7/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 726:/usr/include/c++/7/bits/stl_vector.h ****        *  given data.
 727:/usr/include/c++/7/bits/stl_vector.h ****        */
 728:/usr/include/c++/7/bits/stl_vector.h ****       void
 729:/usr/include/c++/7/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 730:/usr/include/c++/7/bits/stl_vector.h ****       {
 731:/usr/include/c++/7/bits/stl_vector.h **** 	if (__new_size > size())
 732:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 733:/usr/include/c++/7/bits/stl_vector.h **** 	else if (__new_size < size())
 734:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 735:/usr/include/c++/7/bits/stl_vector.h ****       }
 736:/usr/include/c++/7/bits/stl_vector.h **** #endif
 737:/usr/include/c++/7/bits/stl_vector.h **** 
 738:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 739:/usr/include/c++/7/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 740:/usr/include/c++/7/bits/stl_vector.h ****       void
 741:/usr/include/c++/7/bits/stl_vector.h ****       shrink_to_fit()
 742:/usr/include/c++/7/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 743:/usr/include/c++/7/bits/stl_vector.h **** #endif
 744:/usr/include/c++/7/bits/stl_vector.h **** 
 745:/usr/include/c++/7/bits/stl_vector.h ****       /**
 746:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 747:/usr/include/c++/7/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 748:/usr/include/c++/7/bits/stl_vector.h ****        */
 749:/usr/include/c++/7/bits/stl_vector.h ****       size_type
 750:/usr/include/c++/7/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 751:/usr/include/c++/7/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 752:/usr/include/c++/7/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 753:/usr/include/c++/7/bits/stl_vector.h **** 
 754:/usr/include/c++/7/bits/stl_vector.h ****       /**
 755:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 756:/usr/include/c++/7/bits/stl_vector.h ****        *  equal end().)
 757:/usr/include/c++/7/bits/stl_vector.h ****        */
 758:/usr/include/c++/7/bits/stl_vector.h ****       bool
 759:/usr/include/c++/7/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
 760:/usr/include/c++/7/bits/stl_vector.h ****       { return begin() == end(); }
 761:/usr/include/c++/7/bits/stl_vector.h **** 
 762:/usr/include/c++/7/bits/stl_vector.h ****       /**
 763:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 764:/usr/include/c++/7/bits/stl_vector.h ****        *          elements.
 765:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
 766:/usr/include/c++/7/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 767:/usr/include/c++/7/bits/stl_vector.h ****        *
 768:/usr/include/c++/7/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 769:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 770:/usr/include/c++/7/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 771:/usr/include/c++/7/bits/stl_vector.h ****        *  thrown.
 772:/usr/include/c++/7/bits/stl_vector.h ****        *
 773:/usr/include/c++/7/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 774:/usr/include/c++/7/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 775:/usr/include/c++/7/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 776:/usr/include/c++/7/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 777:/usr/include/c++/7/bits/stl_vector.h ****        *  and copying of %vector data.
 778:/usr/include/c++/7/bits/stl_vector.h ****        */
 779:/usr/include/c++/7/bits/stl_vector.h ****       void
 780:/usr/include/c++/7/bits/stl_vector.h ****       reserve(size_type __n);
 781:/usr/include/c++/7/bits/stl_vector.h **** 
 782:/usr/include/c++/7/bits/stl_vector.h ****       // element access
 783:/usr/include/c++/7/bits/stl_vector.h ****       /**
 784:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 785:/usr/include/c++/7/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 786:/usr/include/c++/7/bits/stl_vector.h ****        *  accessed.
 787:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 788:/usr/include/c++/7/bits/stl_vector.h ****        *
 789:/usr/include/c++/7/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 790:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 791:/usr/include/c++/7/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 792:/usr/include/c++/7/bits/stl_vector.h ****        *  see at().)
 793:/usr/include/c++/7/bits/stl_vector.h ****        */
 794:/usr/include/c++/7/bits/stl_vector.h ****       reference
 795:/usr/include/c++/7/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 796:/usr/include/c++/7/bits/stl_vector.h ****       {
 797:/usr/include/c++/7/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
 798:/usr/include/c++/7/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
 799:/usr/include/c++/7/bits/stl_vector.h ****       }
 800:/usr/include/c++/7/bits/stl_vector.h **** 
 801:/usr/include/c++/7/bits/stl_vector.h ****       /**
 802:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 803:/usr/include/c++/7/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 804:/usr/include/c++/7/bits/stl_vector.h ****        *  accessed.
 805:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 806:/usr/include/c++/7/bits/stl_vector.h ****        *
 807:/usr/include/c++/7/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 808:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 809:/usr/include/c++/7/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 810:/usr/include/c++/7/bits/stl_vector.h ****        *  see at().)
 811:/usr/include/c++/7/bits/stl_vector.h ****        */
 812:/usr/include/c++/7/bits/stl_vector.h ****       const_reference
 813:/usr/include/c++/7/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 814:/usr/include/c++/7/bits/stl_vector.h ****       {
 815:/usr/include/c++/7/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
 816:/usr/include/c++/7/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
 817:/usr/include/c++/7/bits/stl_vector.h ****       }
 818:/usr/include/c++/7/bits/stl_vector.h **** 
 819:/usr/include/c++/7/bits/stl_vector.h ****     protected:
 820:/usr/include/c++/7/bits/stl_vector.h ****       /// Safety check used only from at().
 821:/usr/include/c++/7/bits/stl_vector.h ****       void
 822:/usr/include/c++/7/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 823:/usr/include/c++/7/bits/stl_vector.h ****       {
 824:/usr/include/c++/7/bits/stl_vector.h **** 	if (__n >= this->size())
 825:/usr/include/c++/7/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 826:/usr/include/c++/7/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
 827:/usr/include/c++/7/bits/stl_vector.h **** 				       "(which is %zu)"),
 828:/usr/include/c++/7/bits/stl_vector.h **** 				   __n, this->size());
 829:/usr/include/c++/7/bits/stl_vector.h ****       }
 830:/usr/include/c++/7/bits/stl_vector.h **** 
 831:/usr/include/c++/7/bits/stl_vector.h ****     public:
 832:/usr/include/c++/7/bits/stl_vector.h ****       /**
 833:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 834:/usr/include/c++/7/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 835:/usr/include/c++/7/bits/stl_vector.h ****        *  accessed.
 836:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 837:/usr/include/c++/7/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 838:/usr/include/c++/7/bits/stl_vector.h ****        *
 839:/usr/include/c++/7/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 840:/usr/include/c++/7/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 841:/usr/include/c++/7/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 842:/usr/include/c++/7/bits/stl_vector.h ****        */
 843:/usr/include/c++/7/bits/stl_vector.h ****       reference
 844:/usr/include/c++/7/bits/stl_vector.h ****       at(size_type __n)
 845:/usr/include/c++/7/bits/stl_vector.h ****       {
 846:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_check(__n);
 847:/usr/include/c++/7/bits/stl_vector.h **** 	return (*this)[__n];
 848:/usr/include/c++/7/bits/stl_vector.h ****       }
 849:/usr/include/c++/7/bits/stl_vector.h **** 
 850:/usr/include/c++/7/bits/stl_vector.h ****       /**
 851:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 852:/usr/include/c++/7/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 853:/usr/include/c++/7/bits/stl_vector.h ****        *  accessed.
 854:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 855:/usr/include/c++/7/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 856:/usr/include/c++/7/bits/stl_vector.h ****        *
 857:/usr/include/c++/7/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 858:/usr/include/c++/7/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 859:/usr/include/c++/7/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 860:/usr/include/c++/7/bits/stl_vector.h ****        */
 861:/usr/include/c++/7/bits/stl_vector.h ****       const_reference
 862:/usr/include/c++/7/bits/stl_vector.h ****       at(size_type __n) const
 863:/usr/include/c++/7/bits/stl_vector.h ****       {
 864:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_check(__n);
 865:/usr/include/c++/7/bits/stl_vector.h **** 	return (*this)[__n];
 866:/usr/include/c++/7/bits/stl_vector.h ****       }
 867:/usr/include/c++/7/bits/stl_vector.h **** 
 868:/usr/include/c++/7/bits/stl_vector.h ****       /**
 869:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 870:/usr/include/c++/7/bits/stl_vector.h ****        *  element of the %vector.
 871:/usr/include/c++/7/bits/stl_vector.h ****        */
 872:/usr/include/c++/7/bits/stl_vector.h ****       reference
 873:/usr/include/c++/7/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
 874:/usr/include/c++/7/bits/stl_vector.h ****       {
 875:/usr/include/c++/7/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
 876:/usr/include/c++/7/bits/stl_vector.h **** 	return *begin();
 877:/usr/include/c++/7/bits/stl_vector.h ****       }
 878:/usr/include/c++/7/bits/stl_vector.h **** 
 879:/usr/include/c++/7/bits/stl_vector.h ****       /**
 880:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 881:/usr/include/c++/7/bits/stl_vector.h ****        *  element of the %vector.
 882:/usr/include/c++/7/bits/stl_vector.h ****        */
 883:/usr/include/c++/7/bits/stl_vector.h ****       const_reference
 884:/usr/include/c++/7/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
 885:/usr/include/c++/7/bits/stl_vector.h ****       {
 886:/usr/include/c++/7/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
 887:/usr/include/c++/7/bits/stl_vector.h **** 	return *begin();
 888:/usr/include/c++/7/bits/stl_vector.h ****       }
 889:/usr/include/c++/7/bits/stl_vector.h **** 
 890:/usr/include/c++/7/bits/stl_vector.h ****       /**
 891:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 892:/usr/include/c++/7/bits/stl_vector.h ****        *  element of the %vector.
 893:/usr/include/c++/7/bits/stl_vector.h ****        */
 894:/usr/include/c++/7/bits/stl_vector.h ****       reference
 895:/usr/include/c++/7/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
 896:/usr/include/c++/7/bits/stl_vector.h ****       {
 897:/usr/include/c++/7/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
 898:/usr/include/c++/7/bits/stl_vector.h **** 	return *(end() - 1);
 899:/usr/include/c++/7/bits/stl_vector.h ****       }
 900:/usr/include/c++/7/bits/stl_vector.h **** 
 901:/usr/include/c++/7/bits/stl_vector.h ****       /**
 902:/usr/include/c++/7/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 903:/usr/include/c++/7/bits/stl_vector.h ****        *  last element of the %vector.
 904:/usr/include/c++/7/bits/stl_vector.h ****        */
 905:/usr/include/c++/7/bits/stl_vector.h ****       const_reference
 906:/usr/include/c++/7/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
 907:/usr/include/c++/7/bits/stl_vector.h ****       {
 908:/usr/include/c++/7/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
 909:/usr/include/c++/7/bits/stl_vector.h **** 	return *(end() - 1);
 910:/usr/include/c++/7/bits/stl_vector.h ****       }
 911:/usr/include/c++/7/bits/stl_vector.h **** 
 912:/usr/include/c++/7/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 913:/usr/include/c++/7/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 914:/usr/include/c++/7/bits/stl_vector.h ****       // data access
 915:/usr/include/c++/7/bits/stl_vector.h ****       /**
 916:/usr/include/c++/7/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 917:/usr/include/c++/7/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 918:/usr/include/c++/7/bits/stl_vector.h ****        */
 919:/usr/include/c++/7/bits/stl_vector.h ****       _Tp*
 920:/usr/include/c++/7/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
 921:/usr/include/c++/7/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 922:/usr/include/c++/7/bits/stl_vector.h **** 
 923:/usr/include/c++/7/bits/stl_vector.h ****       const _Tp*
 924:/usr/include/c++/7/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
 925:/usr/include/c++/7/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 926:/usr/include/c++/7/bits/stl_vector.h **** 
 927:/usr/include/c++/7/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 928:/usr/include/c++/7/bits/stl_vector.h ****       /**
 929:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 930:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  Data to be added.
 931:/usr/include/c++/7/bits/stl_vector.h ****        *
 932:/usr/include/c++/7/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 933:/usr/include/c++/7/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 934:/usr/include/c++/7/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 935:/usr/include/c++/7/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 936:/usr/include/c++/7/bits/stl_vector.h ****        *  available.
 937:/usr/include/c++/7/bits/stl_vector.h ****        */
 938:/usr/include/c++/7/bits/stl_vector.h ****       void
 939:/usr/include/c++/7/bits/stl_vector.h ****       push_back(const value_type& __x)
 638              		.loc 5 939 0
 639              		.cfi_startproc
 640 0000 55       		pushq	%rbp
 641              		.cfi_def_cfa_offset 16
 642              		.cfi_offset 6, -16
 643 0001 4889E5   		movq	%rsp, %rbp
 644              		.cfi_def_cfa_register 6
 645 0004 4883EC10 		subq	$16, %rsp
 646 0008 48897DF8 		movq	%rdi, -8(%rbp)
 647 000c 488975F0 		movq	%rsi, -16(%rbp)
 940:/usr/include/c++/7/bits/stl_vector.h ****       {
 941:/usr/include/c++/7/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 648              		.loc 5 941 0
 649 0010 488B45F8 		movq	-8(%rbp), %rax
 650 0014 488B5008 		movq	8(%rax), %rdx
 651 0018 488B45F8 		movq	-8(%rbp), %rax
 652 001c 488B4010 		movq	16(%rax), %rax
 653 0020 4839C2   		cmpq	%rax, %rdx
 654 0023 7434     		je	.L35
 942:/usr/include/c++/7/bits/stl_vector.h **** 	  {
 943:/usr/include/c++/7/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 655              		.loc 5 943 0
 656 0025 488B45F8 		movq	-8(%rbp), %rax
 657 0029 488B4808 		movq	8(%rax), %rcx
 658 002d 488B45F8 		movq	-8(%rbp), %rax
 659 0031 488B55F0 		movq	-16(%rbp), %rdx
 660 0035 4889CE   		movq	%rcx, %rsi
 661 0038 4889C7   		movq	%rax, %rdi
 662 003b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RK
 662      00
 944:/usr/include/c++/7/bits/stl_vector.h **** 				     __x);
 945:/usr/include/c++/7/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 663              		.loc 5 945 0
 664 0040 488B45F8 		movq	-8(%rbp), %rax
 665 0044 488B4008 		movq	8(%rax), %rax
 666 0048 488D9080 		leaq	128(%rax), %rdx
 666      000000
 667 004f 488B45F8 		movq	-8(%rbp), %rax
 668 0053 48895008 		movq	%rdx, 8(%rax)
 946:/usr/include/c++/7/bits/stl_vector.h **** 	  }
 947:/usr/include/c++/7/bits/stl_vector.h **** 	else
 948:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
 949:/usr/include/c++/7/bits/stl_vector.h ****       }
 669              		.loc 5 949 0
 670 0057 EB22     		jmp	.L37
 671              	.L35:
 948:/usr/include/c++/7/bits/stl_vector.h ****       }
 672              		.loc 5 948 0
 673 0059 488B45F8 		movq	-8(%rbp), %rax
 674 005d 4889C7   		movq	%rax, %rdi
 675 0060 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 675      00
 676 0065 4889C1   		movq	%rax, %rcx
 677 0068 488B55F0 		movq	-16(%rbp), %rdx
 678 006c 488B45F8 		movq	-8(%rbp), %rax
 679 0070 4889CE   		movq	%rcx, %rsi
 680 0073 4889C7   		movq	%rax, %rdi
 681 0076 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__normal
 681      00
 682              	.L37:
 683              		.loc 5 949 0
 684 007b 90       		nop
 685 007c C9       		leave
 686              		.cfi_def_cfa 7, 8
 687 007d C3       		ret
 688              		.cfi_endproc
 689              	.LFE910:
 691              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv,"axG",@progbits,_ZNSt6v
 692              		.align 2
 693              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv
 695              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv:
 696              	.LFB911:
 895:/usr/include/c++/7/bits/stl_vector.h ****       {
 697              		.loc 5 895 0
 698              		.cfi_startproc
 699 0000 55       		pushq	%rbp
 700              		.cfi_def_cfa_offset 16
 701              		.cfi_offset 6, -16
 702 0001 4889E5   		movq	%rsp, %rbp
 703              		.cfi_def_cfa_register 6
 704 0004 4883EC30 		subq	$48, %rsp
 705 0008 48897DD8 		movq	%rdi, -40(%rbp)
 895:/usr/include/c++/7/bits/stl_vector.h ****       {
 706              		.loc 5 895 0
 707 000c 64488B04 		movq	%fs:40, %rax
 707      25280000 
 707      00
 708 0015 488945F8 		movq	%rax, -8(%rbp)
 709 0019 31C0     		xorl	%eax, %eax
 898:/usr/include/c++/7/bits/stl_vector.h ****       }
 710              		.loc 5 898 0
 711 001b 488B45D8 		movq	-40(%rbp), %rax
 712 001f 4889C7   		movq	%rax, %rdi
 713 0022 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 713      00
 714 0027 488945E8 		movq	%rax, -24(%rbp)
 715 002b 488D45E8 		leaq	-24(%rbp), %rax
 716 002f BE010000 		movl	$1, %esi
 716      00
 717 0034 4889C7   		movq	%rax, %rdi
 718 0037 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl@
 718      00
 719 003c 488945F0 		movq	%rax, -16(%rbp)
 720 0040 488D45F0 		leaq	-16(%rbp), %rax
 721 0044 4889C7   		movq	%rax, %rdi
 722 0047 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv@
 722      00
 899:/usr/include/c++/7/bits/stl_vector.h **** 
 723              		.loc 5 899 0
 724 004c 488B55F8 		movq	-8(%rbp), %rdx
 725 0050 64483314 		xorq	%fs:40, %rdx
 725      25280000 
 725      00
 726 0059 7405     		je	.L40
 727 005b E8000000 		call	__stack_chk_fail@PLT
 727      00
 728              	.L40:
 729 0060 C9       		leave
 730              		.cfi_def_cfa 7, 8
 731 0061 C3       		ret
 732              		.cfi_endproc
 733              	.LFE911:
 735              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_,"axG",
 736              		.align 2
 737              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_
 739              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_:
 740              	.LFB922:
 199:/usr/include/c++/7/bits/stl_pair.h ****     {
 200:/usr/include/c++/7/bits/stl_pair.h ****       typedef _T1 first_type;    /// @c first_type is the first bound type
 201:/usr/include/c++/7/bits/stl_pair.h ****       typedef _T2 second_type;   /// @c second_type is the second bound type
 202:/usr/include/c++/7/bits/stl_pair.h **** 
 203:/usr/include/c++/7/bits/stl_pair.h ****       _T1 first;                 /// @c first is a copy of the first object
 204:/usr/include/c++/7/bits/stl_pair.h ****       _T2 second;                /// @c second is a copy of the second object
 205:/usr/include/c++/7/bits/stl_pair.h **** 
 206:/usr/include/c++/7/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 207:/usr/include/c++/7/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 208:/usr/include/c++/7/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 209:/usr/include/c++/7/bits/stl_pair.h ****        *  respective default constructors.  */
 210:/usr/include/c++/7/bits/stl_pair.h **** #if __cplusplus >= 201103L
 211:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1 = _T1,
 212:/usr/include/c++/7/bits/stl_pair.h ****                 typename _U2 = _T2,
 213:/usr/include/c++/7/bits/stl_pair.h ****                 typename enable_if<__and_<
 214:/usr/include/c++/7/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 215:/usr/include/c++/7/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 216:/usr/include/c++/7/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 217:/usr/include/c++/7/bits/stl_pair.h **** #endif
 218:/usr/include/c++/7/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 219:/usr/include/c++/7/bits/stl_pair.h ****       : first(), second() { }
 220:/usr/include/c++/7/bits/stl_pair.h **** 
 221:/usr/include/c++/7/bits/stl_pair.h **** #if __cplusplus >= 201103L
 222:/usr/include/c++/7/bits/stl_pair.h ****       template <typename _U1 = _T1,
 223:/usr/include/c++/7/bits/stl_pair.h ****                 typename _U2 = _T2,
 224:/usr/include/c++/7/bits/stl_pair.h ****                 typename enable_if<__and_<
 225:/usr/include/c++/7/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 226:/usr/include/c++/7/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 227:/usr/include/c++/7/bits/stl_pair.h ****                        __not_<
 228:/usr/include/c++/7/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 229:/usr/include/c++/7/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 230:/usr/include/c++/7/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 231:/usr/include/c++/7/bits/stl_pair.h ****       explicit constexpr pair()
 232:/usr/include/c++/7/bits/stl_pair.h ****       : first(), second() { }
 233:/usr/include/c++/7/bits/stl_pair.h **** #endif
 234:/usr/include/c++/7/bits/stl_pair.h **** 
 235:/usr/include/c++/7/bits/stl_pair.h ****       /** Two objects may be passed to a @c pair constructor to be copied.  */
 236:/usr/include/c++/7/bits/stl_pair.h **** #if __cplusplus < 201103L
 237:/usr/include/c++/7/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 741              		.loc 4 237 0
 742              		.cfi_startproc
 743 0000 55       		pushq	%rbp
 744              		.cfi_def_cfa_offset 16
 745              		.cfi_offset 6, -16
 746 0001 4889E5   		movq	%rsp, %rbp
 747              		.cfi_def_cfa_register 6
 748 0004 4883EC20 		subq	$32, %rsp
 749 0008 48897DF8 		movq	%rdi, -8(%rbp)
 750 000c 488975F0 		movq	%rsi, -16(%rbp)
 751 0010 488955E8 		movq	%rdx, -24(%rbp)
 752              	.LBB7:
 238:/usr/include/c++/7/bits/stl_pair.h ****       : first(__a), second(__b) { }
 753              		.loc 4 238 0
 754 0014 488B45F0 		movq	-16(%rbp), %rax
 755 0018 8B10     		movl	(%rax), %edx
 756 001a 488B45F8 		movq	-8(%rbp), %rax
 757 001e 8910     		movl	%edx, (%rax)
 758 0020 488B45F8 		movq	-8(%rbp), %rax
 759 0024 488D5008 		leaq	8(%rax), %rdx
 760 0028 488B45E8 		movq	-24(%rbp), %rax
 761 002c 4889C6   		movq	%rax, %rsi
 762 002f 4889D7   		movq	%rdx, %rdi
 763 0032 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 763      00
 764              	.LBE7:
 765 0037 90       		nop
 766 0038 C9       		leave
 767              		.cfi_def_cfa 7, 8
 768 0039 C3       		ret
 769              		.cfi_endproc
 770              	.LFE922:
 772              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKiRKS5_
 773              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKiRKS5_,_ZNSt4pairIiNSt7
 774              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 775              		.align 2
 776              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_bac
 778              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_backERKS7_
 779              	.LFB924:
 939:/usr/include/c++/7/bits/stl_vector.h ****       {
 780              		.loc 5 939 0
 781              		.cfi_startproc
 782 0000 55       		pushq	%rbp
 783              		.cfi_def_cfa_offset 16
 784              		.cfi_offset 6, -16
 785 0001 4889E5   		movq	%rsp, %rbp
 786              		.cfi_def_cfa_register 6
 787 0004 4883EC10 		subq	$16, %rsp
 788 0008 48897DF8 		movq	%rdi, -8(%rbp)
 789 000c 488975F0 		movq	%rsi, -16(%rbp)
 941:/usr/include/c++/7/bits/stl_vector.h **** 	  {
 790              		.loc 5 941 0
 791 0010 488B45F8 		movq	-8(%rbp), %rax
 792 0014 488B5008 		movq	8(%rax), %rdx
 793 0018 488B45F8 		movq	-8(%rbp), %rax
 794 001c 488B4010 		movq	16(%rax), %rax
 795 0020 4839C2   		cmpq	%rax, %rdx
 796 0023 7431     		je	.L43
 943:/usr/include/c++/7/bits/stl_vector.h **** 				     __x);
 797              		.loc 5 943 0
 798 0025 488B45F8 		movq	-8(%rbp), %rax
 799 0029 488B4808 		movq	8(%rax), %rcx
 800 002d 488B45F8 		movq	-8(%rbp), %rax
 801 0031 488B55F0 		movq	-16(%rbp), %rdx
 802 0035 4889CE   		movq	%rcx, %rsi
 803 0038 4889C7   		movq	%rax, %rdi
 804 003b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 804      00
 945:/usr/include/c++/7/bits/stl_vector.h **** 	  }
 805              		.loc 5 945 0
 806 0040 488B45F8 		movq	-8(%rbp), %rax
 807 0044 488B4008 		movq	8(%rax), %rax
 808 0048 488D5028 		leaq	40(%rax), %rdx
 809 004c 488B45F8 		movq	-8(%rbp), %rax
 810 0050 48895008 		movq	%rdx, 8(%rax)
 811              		.loc 5 949 0
 812 0054 EB22     		jmp	.L45
 813              	.L43:
 948:/usr/include/c++/7/bits/stl_vector.h ****       }
 814              		.loc 5 948 0
 815 0056 488B45F8 		movq	-8(%rbp), %rax
 816 005a 4889C7   		movq	%rax, %rdi
 817 005d E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv@PLT
 817      00
 818 0062 4889C1   		movq	%rax, %rcx
 819 0065 488B55F0 		movq	-16(%rbp), %rdx
 820 0069 488B45F8 		movq	-8(%rbp), %rax
 821 006d 4889CE   		movq	%rcx, %rsi
 822 0070 4889C7   		movq	%rax, %rdi
 823 0073 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_reall
 823      00
 824              	.L45:
 825              		.loc 5 949 0
 826 0078 90       		nop
 827 0079 C9       		leave
 828              		.cfi_def_cfa 7, 8
 829 007a C3       		ret
 830              		.cfi_endproc
 831              	.LFE924:
 833              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 834              		.align 2
 835              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 837              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector
 838              	.LFB931:
  81:/usr/include/c++/7/bits/stl_vector.h ****       : public _Tp_alloc_type
 839              		.loc 5 81 0
 840              		.cfi_startproc
 841 0000 55       		pushq	%rbp
 842              		.cfi_def_cfa_offset 16
 843              		.cfi_offset 6, -16
 844 0001 4889E5   		movq	%rsp, %rbp
 845              		.cfi_def_cfa_register 6
 846 0004 4883EC10 		subq	$16, %rsp
 847 0008 48897DF8 		movq	%rdi, -8(%rbp)
 848              	.LBB8:
  81:/usr/include/c++/7/bits/stl_vector.h ****       : public _Tp_alloc_type
 849              		.loc 5 81 0
 850 000c 488B45F8 		movq	-8(%rbp), %rax
 851 0010 4889C7   		movq	%rax, %rdi
 852 0013 E8000000 		call	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev@PLT
 852      00
 853              	.LBE8:
 854 0018 90       		nop
 855 0019 C9       		leave
 856              		.cfi_def_cfa 7, 8
 857 001a C3       		ret
 858              		.cfi_endproc
 859              	.LFE931:
 861              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 862              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 863              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 864              		.align 2
 865              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2
 867              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 868              	.LFB933:
 161:/usr/include/c++/7/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 869              		.loc 5 161 0
 870              		.cfi_startproc
 871              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 872              		.cfi_lsda 0x1b,.LLSDA933
 873 0000 55       		pushq	%rbp
 874              		.cfi_def_cfa_offset 16
 875              		.cfi_offset 6, -16
 876 0001 4889E5   		movq	%rsp, %rbp
 877              		.cfi_def_cfa_register 6
 878 0004 53       		pushq	%rbx
 879 0005 4883EC18 		subq	$24, %rsp
 880              		.cfi_offset 3, -24
 881 0009 48897DE8 		movq	%rdi, -24(%rbp)
 882              	.LBB9:
 162:/usr/include/c++/7/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 883              		.loc 5 162 0
 884 000d 488B45E8 		movq	-24(%rbp), %rax
 885 0011 488B4010 		movq	16(%rax), %rax
 163:/usr/include/c++/7/bits/stl_vector.h **** 
 886              		.loc 5 163 0
 887 0015 4889C2   		movq	%rax, %rdx
 888 0018 488B45E8 		movq	-24(%rbp), %rax
 889 001c 488B00   		movq	(%rax), %rax
 890 001f 4829C2   		subq	%rax, %rdx
 891 0022 4889D0   		movq	%rdx, %rax
 892 0025 48C1F803 		sarq	$3, %rax
 893 0029 4889C2   		movq	%rax, %rdx
 894 002c 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 894      CCCCCCCC 
 894      CCCC
 895 0036 480FAFC2 		imulq	%rdx, %rax
 162:/usr/include/c++/7/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 896              		.loc 5 162 0
 897 003a 4889C2   		movq	%rax, %rdx
 898 003d 488B45E8 		movq	-24(%rbp), %rax
 899 0041 488B08   		movq	(%rax), %rcx
 900 0044 488B45E8 		movq	-24(%rbp), %rax
 901 0048 4889CE   		movq	%rcx, %rsi
 902 004b 4889C7   		movq	%rax, %rdi
 903              	.LEHB20:
 904 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 904      00
 905              	.LEHE20:
 163:/usr/include/c++/7/bits/stl_vector.h **** 
 906              		.loc 5 163 0
 907 0053 488B45E8 		movq	-24(%rbp), %rax
 908 0057 4889C7   		movq	%rax, %rdi
 909 005a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 909      00
 910              	.LBE9:
 911 005f EB1A     		jmp	.L50
 912              	.L49:
 913 0061 4889C3   		movq	%rax, %rbx
 914              	.LBB10:
 915 0064 488B45E8 		movq	-24(%rbp), %rax
 916 0068 4889C7   		movq	%rax, %rdi
 917 006b E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 917      00
 918 0070 4889D8   		movq	%rbx, %rax
 919 0073 4889C7   		movq	%rax, %rdi
 920              	.LEHB21:
 921 0076 E8000000 		call	_Unwind_Resume@PLT
 921      00
 922              	.LEHE21:
 923              	.L50:
 924              	.LBE10:
 925 007b 4883C418 		addq	$24, %rsp
 926 007f 5B       		popq	%rbx
 927 0080 5D       		popq	%rbp
 928              		.cfi_def_cfa 7, 8
 929 0081 C3       		ret
 930              		.cfi_endproc
 931              	.LFE933:
 932              		.section	.gcc_except_table
 933              	.LLSDA933:
 934 0055 FF       		.byte	0xff
 935 0056 FF       		.byte	0xff
 936 0057 01       		.byte	0x1
 937 0058 08       		.uleb128 .LLSDACSE933-.LLSDACSB933
 938              	.LLSDACSB933:
 939 0059 4E       		.uleb128 .LEHB20-.LFB933
 940 005a 05       		.uleb128 .LEHE20-.LEHB20
 941 005b 61       		.uleb128 .L49-.LFB933
 942 005c 00       		.uleb128 0
 943 005d 76       		.uleb128 .LEHB21-.LFB933
 944 005e 05       		.uleb128 .LEHE21-.LEHB21
 945 005f 00       		.uleb128 0
 946 0060 00       		.uleb128 0
 947              	.LLSDACSE933:
 948              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 950              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1
 951              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1E
 952              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 953              		.align 2
 954              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 956              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_
 957              	.LFB935:
 115:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 958              		.loc 5 115 0
 959              		.cfi_startproc
 960 0000 55       		pushq	%rbp
 961              		.cfi_def_cfa_offset 16
 962              		.cfi_offset 6, -16
 963 0001 4889E5   		movq	%rsp, %rbp
 964              		.cfi_def_cfa_register 6
 965 0004 48897DF8 		movq	%rdi, -8(%rbp)
 116:/usr/include/c++/7/bits/stl_vector.h **** 
 966              		.loc 5 116 0
 967 0008 488B45F8 		movq	-8(%rbp), %rax
 968 000c 5D       		popq	%rbp
 969              		.cfi_def_cfa 7, 8
 970 000d C3       		ret
 971              		.cfi_endproc
 972              	.LFE935:
 974              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT
 975              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT
 977              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:
 978              	.LFB936:
 979              		.file 6 "/usr/include/c++/7/bits/stl_construct.h"
   1:/usr/include/c++/7/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_construct.h **** 
   3:/usr/include/c++/7/bits/stl_construct.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_construct.h **** //
   5:/usr/include/c++/7/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_construct.h **** 
  11:/usr/include/c++/7/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_construct.h **** 
  16:/usr/include/c++/7/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_construct.h **** 
  20:/usr/include/c++/7/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_construct.h **** 
  25:/usr/include/c++/7/bits/stl_construct.h **** /*
  26:/usr/include/c++/7/bits/stl_construct.h ****  *
  27:/usr/include/c++/7/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_construct.h ****  *
  30:/usr/include/c++/7/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_construct.h ****  *
  38:/usr/include/c++/7/bits/stl_construct.h ****  *
  39:/usr/include/c++/7/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/7/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_construct.h ****  *
  42:/usr/include/c++/7/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_construct.h ****  */
  50:/usr/include/c++/7/bits/stl_construct.h **** 
  51:/usr/include/c++/7/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/7/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/7/bits/stl_construct.h ****  */
  55:/usr/include/c++/7/bits/stl_construct.h **** 
  56:/usr/include/c++/7/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/7/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/7/bits/stl_construct.h **** 
  59:/usr/include/c++/7/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/7/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/7/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/7/bits/stl_construct.h **** 
  63:/usr/include/c++/7/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/7/bits/stl_construct.h **** {
  65:/usr/include/c++/7/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/7/bits/stl_construct.h **** 
  67:/usr/include/c++/7/bits/stl_construct.h ****   /**
  68:/usr/include/c++/7/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/7/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/7/bits/stl_construct.h ****    */
  71:/usr/include/c++/7/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/7/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/7/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/7/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/7/bits/stl_construct.h **** #else
  77:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/7/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/7/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/7/bits/stl_construct.h ****     {
  81:/usr/include/c++/7/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/7/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/7/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/7/bits/stl_construct.h ****     }
  85:/usr/include/c++/7/bits/stl_construct.h **** #endif
  86:/usr/include/c++/7/bits/stl_construct.h **** 
  87:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _T1>
  88:/usr/include/c++/7/bits/stl_construct.h ****     inline void
  89:/usr/include/c++/7/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
  90:/usr/include/c++/7/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
  91:/usr/include/c++/7/bits/stl_construct.h **** 
  92:/usr/include/c++/7/bits/stl_construct.h ****   /**
  93:/usr/include/c++/7/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  94:/usr/include/c++/7/bits/stl_construct.h ****    */
  95:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _Tp>
  96:/usr/include/c++/7/bits/stl_construct.h ****     inline void
  97:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  98:/usr/include/c++/7/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  99:/usr/include/c++/7/bits/stl_construct.h **** 
 100:/usr/include/c++/7/bits/stl_construct.h ****   template<bool>
 101:/usr/include/c++/7/bits/stl_construct.h ****     struct _Destroy_aux
 102:/usr/include/c++/7/bits/stl_construct.h ****     {
 103:/usr/include/c++/7/bits/stl_construct.h ****       template<typename _ForwardIterator>
 104:/usr/include/c++/7/bits/stl_construct.h ****         static void
 105:/usr/include/c++/7/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 106:/usr/include/c++/7/bits/stl_construct.h **** 	{
 107:/usr/include/c++/7/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 108:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 109:/usr/include/c++/7/bits/stl_construct.h **** 	}
 110:/usr/include/c++/7/bits/stl_construct.h ****     };
 111:/usr/include/c++/7/bits/stl_construct.h **** 
 112:/usr/include/c++/7/bits/stl_construct.h ****   template<>
 113:/usr/include/c++/7/bits/stl_construct.h ****     struct _Destroy_aux<true>
 114:/usr/include/c++/7/bits/stl_construct.h ****     {
 115:/usr/include/c++/7/bits/stl_construct.h ****       template<typename _ForwardIterator>
 116:/usr/include/c++/7/bits/stl_construct.h ****         static void
 117:/usr/include/c++/7/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 118:/usr/include/c++/7/bits/stl_construct.h ****     };
 119:/usr/include/c++/7/bits/stl_construct.h **** 
 120:/usr/include/c++/7/bits/stl_construct.h ****   /**
 121:/usr/include/c++/7/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 122:/usr/include/c++/7/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 123:/usr/include/c++/7/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 124:/usr/include/c++/7/bits/stl_construct.h ****    */
 125:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _ForwardIterator>
 126:/usr/include/c++/7/bits/stl_construct.h ****     inline void
 127:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 128:/usr/include/c++/7/bits/stl_construct.h ****     {
 129:/usr/include/c++/7/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 130:/usr/include/c++/7/bits/stl_construct.h ****                        _Value_type;
 131:/usr/include/c++/7/bits/stl_construct.h **** #if __cplusplus >= 201103L
 132:/usr/include/c++/7/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 133:/usr/include/c++/7/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 134:/usr/include/c++/7/bits/stl_construct.h **** 		    "value type is destructible");
 135:/usr/include/c++/7/bits/stl_construct.h **** #endif
 136:/usr/include/c++/7/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 137:/usr/include/c++/7/bits/stl_construct.h **** 	__destroy(__first, __last);
 138:/usr/include/c++/7/bits/stl_construct.h ****     }
 139:/usr/include/c++/7/bits/stl_construct.h **** 
 140:/usr/include/c++/7/bits/stl_construct.h ****   template<bool>
 141:/usr/include/c++/7/bits/stl_construct.h ****     struct _Destroy_n_aux
 142:/usr/include/c++/7/bits/stl_construct.h ****     {
 143:/usr/include/c++/7/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 144:/usr/include/c++/7/bits/stl_construct.h ****         static _ForwardIterator
 145:/usr/include/c++/7/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 146:/usr/include/c++/7/bits/stl_construct.h **** 	{
 147:/usr/include/c++/7/bits/stl_construct.h **** 	  for (; __count > 0; (void)++__first, --__count)
 148:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 149:/usr/include/c++/7/bits/stl_construct.h **** 	  return __first;
 150:/usr/include/c++/7/bits/stl_construct.h **** 	}
 151:/usr/include/c++/7/bits/stl_construct.h ****     };
 152:/usr/include/c++/7/bits/stl_construct.h **** 
 153:/usr/include/c++/7/bits/stl_construct.h ****   template<>
 154:/usr/include/c++/7/bits/stl_construct.h ****     struct _Destroy_n_aux<true>
 155:/usr/include/c++/7/bits/stl_construct.h ****     {
 156:/usr/include/c++/7/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 157:/usr/include/c++/7/bits/stl_construct.h ****         static _ForwardIterator
 158:/usr/include/c++/7/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 159:/usr/include/c++/7/bits/stl_construct.h **** 	{
 160:/usr/include/c++/7/bits/stl_construct.h **** 	  std::advance(__first, __count);
 161:/usr/include/c++/7/bits/stl_construct.h **** 	  return __first;
 162:/usr/include/c++/7/bits/stl_construct.h **** 	}
 163:/usr/include/c++/7/bits/stl_construct.h ****     };
 164:/usr/include/c++/7/bits/stl_construct.h **** 
 165:/usr/include/c++/7/bits/stl_construct.h ****   /**
 166:/usr/include/c++/7/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 167:/usr/include/c++/7/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 168:/usr/include/c++/7/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 169:/usr/include/c++/7/bits/stl_construct.h ****    */
 170:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Size>
 171:/usr/include/c++/7/bits/stl_construct.h ****     inline _ForwardIterator
 172:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy_n(_ForwardIterator __first, _Size __count)
 173:/usr/include/c++/7/bits/stl_construct.h ****     {
 174:/usr/include/c++/7/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 175:/usr/include/c++/7/bits/stl_construct.h ****                        _Value_type;
 176:/usr/include/c++/7/bits/stl_construct.h **** #if __cplusplus >= 201103L
 177:/usr/include/c++/7/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 178:/usr/include/c++/7/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 179:/usr/include/c++/7/bits/stl_construct.h **** 		    "value type is destructible");
 180:/usr/include/c++/7/bits/stl_construct.h **** #endif
 181:/usr/include/c++/7/bits/stl_construct.h ****       return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 182:/usr/include/c++/7/bits/stl_construct.h **** 	__destroy_n(__first, __count);
 183:/usr/include/c++/7/bits/stl_construct.h ****     }
 184:/usr/include/c++/7/bits/stl_construct.h **** 
 185:/usr/include/c++/7/bits/stl_construct.h ****   /**
 186:/usr/include/c++/7/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 187:/usr/include/c++/7/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 188:/usr/include/c++/7/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 189:/usr/include/c++/7/bits/stl_construct.h ****    */
 190:/usr/include/c++/7/bits/stl_construct.h **** 
 191:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 192:/usr/include/c++/7/bits/stl_construct.h ****     void
 193:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 194:/usr/include/c++/7/bits/stl_construct.h **** 	     _Allocator& __alloc)
 195:/usr/include/c++/7/bits/stl_construct.h ****     {
 196:/usr/include/c++/7/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 197:/usr/include/c++/7/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 198:/usr/include/c++/7/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 199:/usr/include/c++/7/bits/stl_construct.h ****     }
 200:/usr/include/c++/7/bits/stl_construct.h **** 
 201:/usr/include/c++/7/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 202:/usr/include/c++/7/bits/stl_construct.h ****     inline void
 203:/usr/include/c++/7/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 980              		.loc 6 203 0
 981              		.cfi_startproc
 982 0000 55       		pushq	%rbp
 983              		.cfi_def_cfa_offset 16
 984              		.cfi_offset 6, -16
 985 0001 4889E5   		movq	%rsp, %rbp
 986              		.cfi_def_cfa_register 6
 987 0004 4883EC20 		subq	$32, %rsp
 988 0008 48897DF8 		movq	%rdi, -8(%rbp)
 989 000c 488975F0 		movq	%rsi, -16(%rbp)
 990 0010 488955E8 		movq	%rdx, -24(%rbp)
 204:/usr/include/c++/7/bits/stl_construct.h **** 	     allocator<_Tp>&)
 205:/usr/include/c++/7/bits/stl_construct.h ****     {
 206:/usr/include/c++/7/bits/stl_construct.h ****       _Destroy(__first, __last);
 991              		.loc 6 206 0
 992 0014 488B55F0 		movq	-16(%rbp), %rdx
 993 0018 488B45F8 		movq	-8(%rbp), %rax
 994 001c 4889D6   		movq	%rdx, %rsi
 995 001f 4889C7   		movq	%rax, %rdi
 996 0022 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 996      00
 207:/usr/include/c++/7/bits/stl_construct.h ****     }
 997              		.loc 6 207 0
 998 0027 90       		nop
 999 0028 C9       		leave
 1000              		.cfi_def_cfa 7, 8
 1001 0029 C3       		ret
 1002              		.cfi_endproc
 1003              	.LFE936:
 1005              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEv
 1006              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_R
 1008              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_:
 1009              	.LFB937:
 1010              		.file 7 "/usr/include/c++/7/ext/alloc_traits.h"
   1:/usr/include/c++/7/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/7/ext/alloc_traits.h **** 
   3:/usr/include/c++/7/ext/alloc_traits.h **** // Copyright (C) 2011-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/ext/alloc_traits.h **** //
   5:/usr/include/c++/7/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/7/ext/alloc_traits.h **** 
  11:/usr/include/c++/7/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/ext/alloc_traits.h **** 
  16:/usr/include/c++/7/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/ext/alloc_traits.h **** 
  20:/usr/include/c++/7/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/ext/alloc_traits.h **** 
  25:/usr/include/c++/7/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/7/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/7/ext/alloc_traits.h ****  */
  28:/usr/include/c++/7/ext/alloc_traits.h **** 
  29:/usr/include/c++/7/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/7/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/7/ext/alloc_traits.h **** 
  32:/usr/include/c++/7/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/7/ext/alloc_traits.h **** 
  34:/usr/include/c++/7/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/7/ext/alloc_traits.h **** # include <bits/move.h>
  36:/usr/include/c++/7/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/usr/include/c++/7/ext/alloc_traits.h **** #else
  38:/usr/include/c++/7/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/usr/include/c++/7/ext/alloc_traits.h **** #endif
  40:/usr/include/c++/7/ext/alloc_traits.h **** 
  41:/usr/include/c++/7/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/7/ext/alloc_traits.h **** {
  43:/usr/include/c++/7/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/7/ext/alloc_traits.h **** 
  45:/usr/include/c++/7/ext/alloc_traits.h **** /**
  46:/usr/include/c++/7/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  47:/usr/include/c++/7/ext/alloc_traits.h ****  * @ingroup allocators
  48:/usr/include/c++/7/ext/alloc_traits.h **** */
  49:/usr/include/c++/7/ext/alloc_traits.h **** template<typename _Alloc>
  50:/usr/include/c++/7/ext/alloc_traits.h ****   struct __alloc_traits
  51:/usr/include/c++/7/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  52:/usr/include/c++/7/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  53:/usr/include/c++/7/ext/alloc_traits.h **** #endif
  54:/usr/include/c++/7/ext/alloc_traits.h ****   {
  55:/usr/include/c++/7/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  56:/usr/include/c++/7/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  57:/usr/include/c++/7/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  58:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  59:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  60:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  61:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  62:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  63:/usr/include/c++/7/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  64:/usr/include/c++/7/ext/alloc_traits.h ****     typedef value_type&                             reference;
  65:/usr/include/c++/7/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  66:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::allocate;
  67:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::deallocate;
  68:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::construct;
  69:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::destroy;
  70:/usr/include/c++/7/ext/alloc_traits.h ****     using _Base_type::max_size;
  71:/usr/include/c++/7/ext/alloc_traits.h **** 
  72:/usr/include/c++/7/ext/alloc_traits.h ****   private:
  73:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Ptr>
  74:/usr/include/c++/7/ext/alloc_traits.h ****       using __is_custom_pointer
  75:/usr/include/c++/7/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  76:/usr/include/c++/7/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  77:/usr/include/c++/7/ext/alloc_traits.h **** 
  78:/usr/include/c++/7/ext/alloc_traits.h ****   public:
  79:/usr/include/c++/7/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
  80:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  81:/usr/include/c++/7/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  82:/usr/include/c++/7/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  83:/usr/include/c++/7/ext/alloc_traits.h ****       {
  84:/usr/include/c++/7/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::addressof(*__p),
  85:/usr/include/c++/7/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  86:/usr/include/c++/7/ext/alloc_traits.h ****       }
  87:/usr/include/c++/7/ext/alloc_traits.h **** 
  88:/usr/include/c++/7/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  89:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Ptr>
  90:/usr/include/c++/7/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  91:/usr/include/c++/7/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  92:/usr/include/c++/7/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::addressof(*__p)); }
  93:/usr/include/c++/7/ext/alloc_traits.h **** 
  94:/usr/include/c++/7/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
  95:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
  96:/usr/include/c++/7/ext/alloc_traits.h **** 
  97:/usr/include/c++/7/ext/alloc_traits.h ****     static void _S_on_swap(_Alloc& __a, _Alloc& __b)
  98:/usr/include/c++/7/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
  99:/usr/include/c++/7/ext/alloc_traits.h **** 
 100:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 101:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 102:/usr/include/c++/7/ext/alloc_traits.h **** 
 103:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 104:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 105:/usr/include/c++/7/ext/alloc_traits.h **** 
 106:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 107:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 108:/usr/include/c++/7/ext/alloc_traits.h **** 
 109:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 110:/usr/include/c++/7/ext/alloc_traits.h ****     { return _Base_type::is_always_equal::value; }
 111:/usr/include/c++/7/ext/alloc_traits.h **** 
 112:/usr/include/c++/7/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 113:/usr/include/c++/7/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 114:/usr/include/c++/7/ext/alloc_traits.h **** 
 115:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Tp>
 116:/usr/include/c++/7/ext/alloc_traits.h ****       struct rebind
 117:/usr/include/c++/7/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 118:/usr/include/c++/7/ext/alloc_traits.h **** #else
 119:/usr/include/c++/7/ext/alloc_traits.h **** 
 120:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 121:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 122:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 123:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 124:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 125:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 126:/usr/include/c++/7/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 127:/usr/include/c++/7/ext/alloc_traits.h **** 
 128:/usr/include/c++/7/ext/alloc_traits.h ****     static pointer
 129:/usr/include/c++/7/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 130:/usr/include/c++/7/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 131:/usr/include/c++/7/ext/alloc_traits.h **** 
 132:/usr/include/c++/7/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 133:/usr/include/c++/7/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 134:/usr/include/c++/7/ext/alloc_traits.h **** 
 135:/usr/include/c++/7/ext/alloc_traits.h ****     template<typename _Tp>
 136:/usr/include/c++/7/ext/alloc_traits.h ****       static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 1011              		.loc 7 136 0
 1012              		.cfi_startproc
 1013 0000 55       		pushq	%rbp
 1014              		.cfi_def_cfa_offset 16
 1015              		.cfi_offset 6, -16
 1016 0001 4889E5   		movq	%rsp, %rbp
 1017              		.cfi_def_cfa_register 6
 1018 0004 4883EC20 		subq	$32, %rsp
 1019 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1020 000c 488975F0 		movq	%rsi, -16(%rbp)
 1021 0010 488955E8 		movq	%rdx, -24(%rbp)
 137:/usr/include/c++/7/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 1022              		.loc 7 137 0
 1023 0014 488B55E8 		movq	-24(%rbp), %rdx
 1024 0018 488B4DF0 		movq	-16(%rbp), %rcx
 1025 001c 488B45F8 		movq	-8(%rbp), %rax
 1026 0020 4889CE   		movq	%rcx, %rsi
 1027 0023 4889C7   		movq	%rax, %rdi
 1028 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_@PLT
 1028      00
 1029 002b 90       		nop
 1030 002c C9       		leave
 1031              		.cfi_def_cfa 7, 8
 1032 002d C3       		ret
 1033              		.cfi_endproc
 1034              	.LFE937:
 1036              		.section	.rodata
 1037              	.LC0:
 1038 0000 76656374 		.string	"vector::_M_realloc_insert"
 1038      6F723A3A 
 1038      5F4D5F72 
 1038      65616C6C 
 1038      6F635F69 
 1039              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx
 1040              		.align 2
 1041              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__norma
 1043              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__normal_itera
 1044              	.LFB938:
 1045              		.file 8 "/usr/include/c++/7/bits/vector.tcc"
   1:/usr/include/c++/7/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/7/bits/vector.tcc **** 
   3:/usr/include/c++/7/bits/vector.tcc **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/vector.tcc **** //
   5:/usr/include/c++/7/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/vector.tcc **** // any later version.
  10:/usr/include/c++/7/bits/vector.tcc **** 
  11:/usr/include/c++/7/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/vector.tcc **** 
  16:/usr/include/c++/7/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/vector.tcc **** 
  20:/usr/include/c++/7/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/vector.tcc **** 
  25:/usr/include/c++/7/bits/vector.tcc **** /*
  26:/usr/include/c++/7/bits/vector.tcc ****  *
  27:/usr/include/c++/7/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/vector.tcc ****  *
  30:/usr/include/c++/7/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/vector.tcc ****  *
  38:/usr/include/c++/7/bits/vector.tcc ****  *
  39:/usr/include/c++/7/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/c++/7/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/vector.tcc ****  *
  42:/usr/include/c++/7/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/7/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/vector.tcc ****  */
  50:/usr/include/c++/7/bits/vector.tcc **** 
  51:/usr/include/c++/7/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/usr/include/c++/7/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/7/bits/vector.tcc ****  */
  55:/usr/include/c++/7/bits/vector.tcc **** 
  56:/usr/include/c++/7/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/c++/7/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/c++/7/bits/vector.tcc **** 
  59:/usr/include/c++/7/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/7/bits/vector.tcc **** {
  61:/usr/include/c++/7/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:/usr/include/c++/7/bits/vector.tcc **** 
  63:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  64:/usr/include/c++/7/bits/vector.tcc ****     void
  65:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  66:/usr/include/c++/7/bits/vector.tcc ****     reserve(size_type __n)
  67:/usr/include/c++/7/bits/vector.tcc ****     {
  68:/usr/include/c++/7/bits/vector.tcc ****       if (__n > this->max_size())
  69:/usr/include/c++/7/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  70:/usr/include/c++/7/bits/vector.tcc ****       if (this->capacity() < __n)
  71:/usr/include/c++/7/bits/vector.tcc **** 	{
  72:/usr/include/c++/7/bits/vector.tcc **** 	  const size_type __old_size = size();
  73:/usr/include/c++/7/bits/vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n,
  74:/usr/include/c++/7/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  75:/usr/include/c++/7/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  76:/usr/include/c++/7/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  77:/usr/include/c++/7/bits/vector.tcc **** 			_M_get_Tp_allocator());
  78:/usr/include/c++/7/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  79:/usr/include/c++/7/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  80:/usr/include/c++/7/bits/vector.tcc **** 			- this->_M_impl._M_start);
  81:/usr/include/c++/7/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  82:/usr/include/c++/7/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  83:/usr/include/c++/7/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  84:/usr/include/c++/7/bits/vector.tcc **** 	}
  85:/usr/include/c++/7/bits/vector.tcc ****     }
  86:/usr/include/c++/7/bits/vector.tcc **** 
  87:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
  88:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  89:/usr/include/c++/7/bits/vector.tcc ****     template<typename... _Args>
  90:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus > 201402L
  91:/usr/include/c++/7/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::reference
  92:/usr/include/c++/7/bits/vector.tcc **** #else
  93:/usr/include/c++/7/bits/vector.tcc ****       void
  94:/usr/include/c++/7/bits/vector.tcc **** #endif
  95:/usr/include/c++/7/bits/vector.tcc ****       vector<_Tp, _Alloc>::
  96:/usr/include/c++/7/bits/vector.tcc ****       emplace_back(_Args&&... __args)
  97:/usr/include/c++/7/bits/vector.tcc ****       {
  98:/usr/include/c++/7/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  99:/usr/include/c++/7/bits/vector.tcc **** 	  {
 100:/usr/include/c++/7/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 101:/usr/include/c++/7/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 102:/usr/include/c++/7/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 103:/usr/include/c++/7/bits/vector.tcc **** 	  }
 104:/usr/include/c++/7/bits/vector.tcc **** 	else
 105:/usr/include/c++/7/bits/vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 106:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus > 201402L
 107:/usr/include/c++/7/bits/vector.tcc **** 	return back();
 108:/usr/include/c++/7/bits/vector.tcc **** #endif
 109:/usr/include/c++/7/bits/vector.tcc ****       }
 110:/usr/include/c++/7/bits/vector.tcc **** #endif
 111:/usr/include/c++/7/bits/vector.tcc **** 
 112:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 113:/usr/include/c++/7/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 114:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 115:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
 116:/usr/include/c++/7/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 117:/usr/include/c++/7/bits/vector.tcc **** #else
 118:/usr/include/c++/7/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 119:/usr/include/c++/7/bits/vector.tcc **** #endif
 120:/usr/include/c++/7/bits/vector.tcc ****     {
 121:/usr/include/c++/7/bits/vector.tcc ****       const size_type __n = __position - begin();
 122:/usr/include/c++/7/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 123:/usr/include/c++/7/bits/vector.tcc **** 	if (__position == end())
 124:/usr/include/c++/7/bits/vector.tcc **** 	  {
 125:/usr/include/c++/7/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 126:/usr/include/c++/7/bits/vector.tcc **** 				     __x);
 127:/usr/include/c++/7/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 128:/usr/include/c++/7/bits/vector.tcc **** 	  }
 129:/usr/include/c++/7/bits/vector.tcc **** 	else
 130:/usr/include/c++/7/bits/vector.tcc **** 	  {
 131:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
 132:/usr/include/c++/7/bits/vector.tcc **** 	    const auto __pos = begin() + (__position - cbegin());
 133:/usr/include/c++/7/bits/vector.tcc **** 	    // __x could be an existing element of this vector, so make a
 134:/usr/include/c++/7/bits/vector.tcc **** 	    // copy of it before _M_insert_aux moves elements around.
 135:/usr/include/c++/7/bits/vector.tcc **** 	    _Temporary_value __x_copy(this, __x);
 136:/usr/include/c++/7/bits/vector.tcc **** 	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 137:/usr/include/c++/7/bits/vector.tcc **** #else
 138:/usr/include/c++/7/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 139:/usr/include/c++/7/bits/vector.tcc **** #endif
 140:/usr/include/c++/7/bits/vector.tcc **** 	  }
 141:/usr/include/c++/7/bits/vector.tcc ****       else
 142:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
 143:/usr/include/c++/7/bits/vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 144:/usr/include/c++/7/bits/vector.tcc **** #else
 145:/usr/include/c++/7/bits/vector.tcc **** 	_M_realloc_insert(__position, __x);
 146:/usr/include/c++/7/bits/vector.tcc **** #endif
 147:/usr/include/c++/7/bits/vector.tcc **** 
 148:/usr/include/c++/7/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 149:/usr/include/c++/7/bits/vector.tcc ****     }
 150:/usr/include/c++/7/bits/vector.tcc **** 
 151:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 152:/usr/include/c++/7/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 153:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 154:/usr/include/c++/7/bits/vector.tcc ****     _M_erase(iterator __position)
 155:/usr/include/c++/7/bits/vector.tcc ****     {
 156:/usr/include/c++/7/bits/vector.tcc ****       if (__position + 1 != end())
 157:/usr/include/c++/7/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 158:/usr/include/c++/7/bits/vector.tcc ****       --this->_M_impl._M_finish;
 159:/usr/include/c++/7/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 160:/usr/include/c++/7/bits/vector.tcc ****       return __position;
 161:/usr/include/c++/7/bits/vector.tcc ****     }
 162:/usr/include/c++/7/bits/vector.tcc **** 
 163:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 164:/usr/include/c++/7/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 165:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 166:/usr/include/c++/7/bits/vector.tcc ****     _M_erase(iterator __first, iterator __last)
 167:/usr/include/c++/7/bits/vector.tcc ****     {
 168:/usr/include/c++/7/bits/vector.tcc ****       if (__first != __last)
 169:/usr/include/c++/7/bits/vector.tcc **** 	{
 170:/usr/include/c++/7/bits/vector.tcc **** 	  if (__last != end())
 171:/usr/include/c++/7/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 172:/usr/include/c++/7/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 173:/usr/include/c++/7/bits/vector.tcc **** 	}
 174:/usr/include/c++/7/bits/vector.tcc ****       return __first;
 175:/usr/include/c++/7/bits/vector.tcc ****     }
 176:/usr/include/c++/7/bits/vector.tcc **** 
 177:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 178:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 179:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 180:/usr/include/c++/7/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 181:/usr/include/c++/7/bits/vector.tcc ****     {
 182:/usr/include/c++/7/bits/vector.tcc ****       if (&__x != this)
 183:/usr/include/c++/7/bits/vector.tcc **** 	{
 184:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
 185:/usr/include/c++/7/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 186:/usr/include/c++/7/bits/vector.tcc **** 	    {
 187:/usr/include/c++/7/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 188:/usr/include/c++/7/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 189:/usr/include/c++/7/bits/vector.tcc **** 	        {
 190:/usr/include/c++/7/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 191:/usr/include/c++/7/bits/vector.tcc **** 		  this->clear();
 192:/usr/include/c++/7/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 193:/usr/include/c++/7/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 194:/usr/include/c++/7/bits/vector.tcc **** 				- this->_M_impl._M_start);
 195:/usr/include/c++/7/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 196:/usr/include/c++/7/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 197:/usr/include/c++/7/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 198:/usr/include/c++/7/bits/vector.tcc **** 		}
 199:/usr/include/c++/7/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 200:/usr/include/c++/7/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 201:/usr/include/c++/7/bits/vector.tcc **** 	    }
 202:/usr/include/c++/7/bits/vector.tcc **** #endif
 203:/usr/include/c++/7/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 204:/usr/include/c++/7/bits/vector.tcc **** 	  if (__xlen > capacity())
 205:/usr/include/c++/7/bits/vector.tcc **** 	    {
 206:/usr/include/c++/7/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 207:/usr/include/c++/7/bits/vector.tcc **** 						   __x.end());
 208:/usr/include/c++/7/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 209:/usr/include/c++/7/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 210:/usr/include/c++/7/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 211:/usr/include/c++/7/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 212:/usr/include/c++/7/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 213:/usr/include/c++/7/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 214:/usr/include/c++/7/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 215:/usr/include/c++/7/bits/vector.tcc **** 	    }
 216:/usr/include/c++/7/bits/vector.tcc **** 	  else if (size() >= __xlen)
 217:/usr/include/c++/7/bits/vector.tcc **** 	    {
 218:/usr/include/c++/7/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 219:/usr/include/c++/7/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 220:/usr/include/c++/7/bits/vector.tcc **** 	    }
 221:/usr/include/c++/7/bits/vector.tcc **** 	  else
 222:/usr/include/c++/7/bits/vector.tcc **** 	    {
 223:/usr/include/c++/7/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 224:/usr/include/c++/7/bits/vector.tcc **** 			this->_M_impl._M_start);
 225:/usr/include/c++/7/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 226:/usr/include/c++/7/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 227:/usr/include/c++/7/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 228:/usr/include/c++/7/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 229:/usr/include/c++/7/bits/vector.tcc **** 	    }
 230:/usr/include/c++/7/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 231:/usr/include/c++/7/bits/vector.tcc **** 	}
 232:/usr/include/c++/7/bits/vector.tcc ****       return *this;
 233:/usr/include/c++/7/bits/vector.tcc ****     }
 234:/usr/include/c++/7/bits/vector.tcc **** 
 235:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 236:/usr/include/c++/7/bits/vector.tcc ****     void
 237:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 238:/usr/include/c++/7/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 239:/usr/include/c++/7/bits/vector.tcc ****     {
 240:/usr/include/c++/7/bits/vector.tcc ****       if (__n > capacity())
 241:/usr/include/c++/7/bits/vector.tcc **** 	{
 242:/usr/include/c++/7/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 243:/usr/include/c++/7/bits/vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 244:/usr/include/c++/7/bits/vector.tcc **** 	}
 245:/usr/include/c++/7/bits/vector.tcc ****       else if (__n > size())
 246:/usr/include/c++/7/bits/vector.tcc **** 	{
 247:/usr/include/c++/7/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 248:/usr/include/c++/7/bits/vector.tcc **** 	  this->_M_impl._M_finish =
 249:/usr/include/c++/7/bits/vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 250:/usr/include/c++/7/bits/vector.tcc **** 					  __n - size(), __val,
 251:/usr/include/c++/7/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 252:/usr/include/c++/7/bits/vector.tcc **** 	}
 253:/usr/include/c++/7/bits/vector.tcc ****       else
 254:/usr/include/c++/7/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 255:/usr/include/c++/7/bits/vector.tcc ****     }
 256:/usr/include/c++/7/bits/vector.tcc **** 
 257:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 258:/usr/include/c++/7/bits/vector.tcc ****     template<typename _InputIterator>
 259:/usr/include/c++/7/bits/vector.tcc ****       void
 260:/usr/include/c++/7/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 261:/usr/include/c++/7/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 262:/usr/include/c++/7/bits/vector.tcc **** 		    std::input_iterator_tag)
 263:/usr/include/c++/7/bits/vector.tcc ****       {
 264:/usr/include/c++/7/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 265:/usr/include/c++/7/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 266:/usr/include/c++/7/bits/vector.tcc **** 	     ++__cur, ++__first)
 267:/usr/include/c++/7/bits/vector.tcc **** 	  *__cur = *__first;
 268:/usr/include/c++/7/bits/vector.tcc **** 	if (__first == __last)
 269:/usr/include/c++/7/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 270:/usr/include/c++/7/bits/vector.tcc **** 	else
 271:/usr/include/c++/7/bits/vector.tcc **** 	  _M_range_insert(end(), __first, __last,
 272:/usr/include/c++/7/bits/vector.tcc **** 			  std::__iterator_category(__first));
 273:/usr/include/c++/7/bits/vector.tcc ****       }
 274:/usr/include/c++/7/bits/vector.tcc **** 
 275:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 276:/usr/include/c++/7/bits/vector.tcc ****     template<typename _ForwardIterator>
 277:/usr/include/c++/7/bits/vector.tcc ****       void
 278:/usr/include/c++/7/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 279:/usr/include/c++/7/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 280:/usr/include/c++/7/bits/vector.tcc **** 		    std::forward_iterator_tag)
 281:/usr/include/c++/7/bits/vector.tcc ****       {
 282:/usr/include/c++/7/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 283:/usr/include/c++/7/bits/vector.tcc **** 
 284:/usr/include/c++/7/bits/vector.tcc **** 	if (__len > capacity())
 285:/usr/include/c++/7/bits/vector.tcc **** 	  {
 286:/usr/include/c++/7/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 287:/usr/include/c++/7/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 288:/usr/include/c++/7/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 289:/usr/include/c++/7/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 290:/usr/include/c++/7/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
 291:/usr/include/c++/7/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 292:/usr/include/c++/7/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 293:/usr/include/c++/7/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 294:/usr/include/c++/7/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 295:/usr/include/c++/7/bits/vector.tcc **** 	  }
 296:/usr/include/c++/7/bits/vector.tcc **** 	else if (size() >= __len)
 297:/usr/include/c++/7/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 298:/usr/include/c++/7/bits/vector.tcc **** 	else
 299:/usr/include/c++/7/bits/vector.tcc **** 	  {
 300:/usr/include/c++/7/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 301:/usr/include/c++/7/bits/vector.tcc **** 	    std::advance(__mid, size());
 302:/usr/include/c++/7/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 303:/usr/include/c++/7/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 304:/usr/include/c++/7/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 305:/usr/include/c++/7/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 306:/usr/include/c++/7/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 307:/usr/include/c++/7/bits/vector.tcc **** 	  }
 308:/usr/include/c++/7/bits/vector.tcc ****       }
 309:/usr/include/c++/7/bits/vector.tcc **** 
 310:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
 311:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 312:/usr/include/c++/7/bits/vector.tcc ****     auto
 313:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 314:/usr/include/c++/7/bits/vector.tcc ****     _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
 315:/usr/include/c++/7/bits/vector.tcc ****     {
 316:/usr/include/c++/7/bits/vector.tcc ****       const auto __n = __position - cbegin();
 317:/usr/include/c++/7/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 318:/usr/include/c++/7/bits/vector.tcc **** 	if (__position == cend())
 319:/usr/include/c++/7/bits/vector.tcc **** 	  {
 320:/usr/include/c++/7/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 321:/usr/include/c++/7/bits/vector.tcc **** 				     std::move(__v));
 322:/usr/include/c++/7/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 323:/usr/include/c++/7/bits/vector.tcc **** 	  }
 324:/usr/include/c++/7/bits/vector.tcc **** 	else
 325:/usr/include/c++/7/bits/vector.tcc **** 	  _M_insert_aux(begin() + __n, std::move(__v));
 326:/usr/include/c++/7/bits/vector.tcc ****       else
 327:/usr/include/c++/7/bits/vector.tcc **** 	_M_realloc_insert(begin() + __n, std::move(__v));
 328:/usr/include/c++/7/bits/vector.tcc **** 
 329:/usr/include/c++/7/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 330:/usr/include/c++/7/bits/vector.tcc ****     }
 331:/usr/include/c++/7/bits/vector.tcc **** 
 332:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 333:/usr/include/c++/7/bits/vector.tcc ****     template<typename... _Args>
 334:/usr/include/c++/7/bits/vector.tcc ****       auto
 335:/usr/include/c++/7/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 336:/usr/include/c++/7/bits/vector.tcc ****       _M_emplace_aux(const_iterator __position, _Args&&... __args)
 337:/usr/include/c++/7/bits/vector.tcc ****       -> iterator
 338:/usr/include/c++/7/bits/vector.tcc ****       {
 339:/usr/include/c++/7/bits/vector.tcc **** 	const auto __n = __position - cbegin();
 340:/usr/include/c++/7/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 341:/usr/include/c++/7/bits/vector.tcc **** 	  if (__position == cend())
 342:/usr/include/c++/7/bits/vector.tcc **** 	    {
 343:/usr/include/c++/7/bits/vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 344:/usr/include/c++/7/bits/vector.tcc **** 				       std::forward<_Args>(__args)...);
 345:/usr/include/c++/7/bits/vector.tcc **** 	      ++this->_M_impl._M_finish;
 346:/usr/include/c++/7/bits/vector.tcc **** 	    }
 347:/usr/include/c++/7/bits/vector.tcc **** 	  else
 348:/usr/include/c++/7/bits/vector.tcc **** 	    {
 349:/usr/include/c++/7/bits/vector.tcc **** 	      // We need to construct a temporary because something in __args...
 350:/usr/include/c++/7/bits/vector.tcc **** 	      // could alias one of the elements of the container and so we
 351:/usr/include/c++/7/bits/vector.tcc **** 	      // need to use it before _M_insert_aux moves elements around.
 352:/usr/include/c++/7/bits/vector.tcc **** 	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
 353:/usr/include/c++/7/bits/vector.tcc **** 	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
 354:/usr/include/c++/7/bits/vector.tcc **** 	    }
 355:/usr/include/c++/7/bits/vector.tcc **** 	else
 356:/usr/include/c++/7/bits/vector.tcc **** 	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
 357:/usr/include/c++/7/bits/vector.tcc **** 
 358:/usr/include/c++/7/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 359:/usr/include/c++/7/bits/vector.tcc ****       }
 360:/usr/include/c++/7/bits/vector.tcc **** 
 361:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 362:/usr/include/c++/7/bits/vector.tcc ****     template<typename _Arg>
 363:/usr/include/c++/7/bits/vector.tcc ****       void
 364:/usr/include/c++/7/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 365:/usr/include/c++/7/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Arg&& __arg)
 366:/usr/include/c++/7/bits/vector.tcc **** #else
 367:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 368:/usr/include/c++/7/bits/vector.tcc ****     void
 369:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 370:/usr/include/c++/7/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 371:/usr/include/c++/7/bits/vector.tcc **** #endif
 372:/usr/include/c++/7/bits/vector.tcc ****     {
 373:/usr/include/c++/7/bits/vector.tcc ****       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 374:/usr/include/c++/7/bits/vector.tcc **** 			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 375:/usr/include/c++/7/bits/vector.tcc **** 					       - 1)));
 376:/usr/include/c++/7/bits/vector.tcc ****       ++this->_M_impl._M_finish;
 377:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus < 201103L
 378:/usr/include/c++/7/bits/vector.tcc ****       _Tp __x_copy = __x;
 379:/usr/include/c++/7/bits/vector.tcc **** #endif
 380:/usr/include/c++/7/bits/vector.tcc ****       _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 381:/usr/include/c++/7/bits/vector.tcc **** 			      this->_M_impl._M_finish - 2,
 382:/usr/include/c++/7/bits/vector.tcc **** 			      this->_M_impl._M_finish - 1);
 383:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus < 201103L
 384:/usr/include/c++/7/bits/vector.tcc ****       *__position = __x_copy;
 385:/usr/include/c++/7/bits/vector.tcc **** #else
 386:/usr/include/c++/7/bits/vector.tcc ****       *__position = std::forward<_Arg>(__arg);
 387:/usr/include/c++/7/bits/vector.tcc **** #endif
 388:/usr/include/c++/7/bits/vector.tcc ****     }
 389:/usr/include/c++/7/bits/vector.tcc **** 
 390:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
 391:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 392:/usr/include/c++/7/bits/vector.tcc ****     template<typename... _Args>
 393:/usr/include/c++/7/bits/vector.tcc ****       void
 394:/usr/include/c++/7/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 395:/usr/include/c++/7/bits/vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 396:/usr/include/c++/7/bits/vector.tcc **** #else
 397:/usr/include/c++/7/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 398:/usr/include/c++/7/bits/vector.tcc ****     void
 399:/usr/include/c++/7/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 1046              		.loc 8 399 0
 1047              		.cfi_startproc
 1048              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1049              		.cfi_lsda 0x1b,.LLSDA938
 1050 0000 55       		pushq	%rbp
 1051              		.cfi_def_cfa_offset 16
 1052              		.cfi_offset 6, -16
 1053 0001 4889E5   		movq	%rsp, %rbp
 1054              		.cfi_def_cfa_register 6
 1055 0004 4154     		pushq	%r12
 1056 0006 53       		pushq	%rbx
 1057 0007 4883EC50 		subq	$80, %rsp
 1058              		.cfi_offset 12, -24
 1059              		.cfi_offset 3, -32
 1060 000b 48897DB8 		movq	%rdi, -72(%rbp)
 1061 000f 488975B0 		movq	%rsi, -80(%rbp)
 1062 0013 488955A8 		movq	%rdx, -88(%rbp)
 1063              		.loc 8 399 0
 1064 0017 64488B04 		movq	%fs:40, %rax
 1064      25280000 
 1064      00
 1065 0020 488945E8 		movq	%rax, -24(%rbp)
 1066 0024 31C0     		xorl	%eax, %eax
 400:/usr/include/c++/7/bits/vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 401:/usr/include/c++/7/bits/vector.tcc **** #endif
 402:/usr/include/c++/7/bits/vector.tcc ****     {
 403:/usr/include/c++/7/bits/vector.tcc ****       const size_type __len =
 1067              		.loc 8 403 0
 1068 0026 488B45B8 		movq	-72(%rbp), %rax
 1069 002a 488D1500 		leaq	.LC0(%rip), %rdx
 1069      000000
 1070 0031 BE010000 		movl	$1, %esi
 1070      00
 1071 0036 4889C7   		movq	%rax, %rdi
 1072              	.LEHB22:
 1073 0039 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc@PLT
 1073      00
 1074 003e 488945D0 		movq	%rax, -48(%rbp)
 404:/usr/include/c++/7/bits/vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 405:/usr/include/c++/7/bits/vector.tcc ****       const size_type __elems_before = __position - begin();
 1075              		.loc 8 405 0
 1076 0042 488B45B8 		movq	-72(%rbp), %rax
 1077 0046 4889C7   		movq	%rax, %rdi
 1078 0049 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 1078      00
 1079 004e 488945C0 		movq	%rax, -64(%rbp)
 1080 0052 488D55C0 		leaq	-64(%rbp), %rdx
 1081 0056 488D45B0 		leaq	-80(%rbp), %rax
 1082 005a 4889D6   		movq	%rdx, %rsi
 1083 005d 4889C7   		movq	%rax, %rdi
 1084 0060 E8000000 		call	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iterator
 1084      00
 1085 0065 488945D8 		movq	%rax, -40(%rbp)
 406:/usr/include/c++/7/bits/vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 1086              		.loc 8 406 0
 1087 0069 488B45B8 		movq	-72(%rbp), %rax
 1088 006d 488B55D0 		movq	-48(%rbp), %rdx
 1089 0071 4889D6   		movq	%rdx, %rsi
 1090 0074 4889C7   		movq	%rax, %rdi
 1091 0077 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm@PLT
 1091      00
 1092              	.LEHE22:
 1093 007c 488945E0 		movq	%rax, -32(%rbp)
 407:/usr/include/c++/7/bits/vector.tcc ****       pointer __new_finish(__new_start);
 1094              		.loc 8 407 0
 1095 0080 488B45E0 		movq	-32(%rbp), %rax
 1096 0084 488945C8 		movq	%rax, -56(%rbp)
 408:/usr/include/c++/7/bits/vector.tcc ****       __try
 409:/usr/include/c++/7/bits/vector.tcc **** 	{
 410:/usr/include/c++/7/bits/vector.tcc **** 	  // The order of the three operations is dictated by the C++11
 411:/usr/include/c++/7/bits/vector.tcc **** 	  // case, where the moves could alter a new element belonging
 412:/usr/include/c++/7/bits/vector.tcc **** 	  // to the existing vector.  This is an issue only for callers
 413:/usr/include/c++/7/bits/vector.tcc **** 	  // taking the element by lvalue ref (see last bullet of C++11
 414:/usr/include/c++/7/bits/vector.tcc **** 	  // [res.on.arguments]).
 415:/usr/include/c++/7/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl,
 416:/usr/include/c++/7/bits/vector.tcc **** 				   __new_start + __elems_before,
 1097              		.loc 8 416 0
 1098 0088 488B45D8 		movq	-40(%rbp), %rax
 1099 008c 48C1E007 		salq	$7, %rax
 1100 0090 4889C2   		movq	%rax, %rdx
 415:/usr/include/c++/7/bits/vector.tcc **** 				   __new_start + __elems_before,
 1101              		.loc 8 415 0
 1102 0093 488B45E0 		movq	-32(%rbp), %rax
 1103 0097 488D0C02 		leaq	(%rdx,%rax), %rcx
 1104 009b 488B45B8 		movq	-72(%rbp), %rax
 1105 009f 488B55A8 		movq	-88(%rbp), %rdx
 1106 00a3 4889CE   		movq	%rcx, %rsi
 1107 00a6 4889C7   		movq	%rax, %rdi
 1108              	.LEHB23:
 1109 00a9 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RK
 1109      00
 417:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
 418:/usr/include/c++/7/bits/vector.tcc **** 				   std::forward<_Args>(__args)...);
 419:/usr/include/c++/7/bits/vector.tcc **** #else
 420:/usr/include/c++/7/bits/vector.tcc **** 				   __x);
 421:/usr/include/c++/7/bits/vector.tcc **** #endif
 422:/usr/include/c++/7/bits/vector.tcc **** 	  __new_finish = pointer();
 1110              		.loc 8 422 0
 1111 00ae 48C745C8 		movq	$0, -56(%rbp)
 1111      00000000 
 423:/usr/include/c++/7/bits/vector.tcc **** 
 424:/usr/include/c++/7/bits/vector.tcc **** 	  __new_finish
 425:/usr/include/c++/7/bits/vector.tcc **** 	    = std::__uninitialized_move_if_noexcept_a
 426:/usr/include/c++/7/bits/vector.tcc **** 	    (this->_M_impl._M_start, __position.base(),
 427:/usr/include/c++/7/bits/vector.tcc **** 	     __new_start, _M_get_Tp_allocator());
 1112              		.loc 8 427 0
 1113 00b6 488B45B8 		movq	-72(%rbp), %rax
 1114 00ba 4889C7   		movq	%rax, %rdi
 1115 00bd E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1115      00
 1116 00c2 4889C3   		movq	%rax, %rbx
 426:/usr/include/c++/7/bits/vector.tcc **** 	     __new_start, _M_get_Tp_allocator());
 1117              		.loc 8 426 0
 1118 00c5 488D45B0 		leaq	-80(%rbp), %rax
 1119 00c9 4889C7   		movq	%rax, %rdi
 1120 00cc E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1120      00
 1121 00d1 488B30   		movq	(%rax), %rsi
 1122 00d4 488B45B8 		movq	-72(%rbp), %rax
 1123 00d8 488B00   		movq	(%rax), %rax
 424:/usr/include/c++/7/bits/vector.tcc **** 	    = std::__uninitialized_move_if_noexcept_a
 1124              		.loc 8 424 0
 1125 00db 488B55E0 		movq	-32(%rbp), %rdx
 1126 00df 4889D9   		movq	%rbx, %rcx
 1127 00e2 4889C7   		movq	%rax, %rdi
 1128 00e5 E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S
 1128      00
 1129 00ea 488945C8 		movq	%rax, -56(%rbp)
 428:/usr/include/c++/7/bits/vector.tcc **** 
 429:/usr/include/c++/7/bits/vector.tcc **** 	  ++__new_finish;
 1130              		.loc 8 429 0
 1131 00ee 48836DC8 		subq	$-128, -56(%rbp)
 1131      80
 430:/usr/include/c++/7/bits/vector.tcc **** 
 431:/usr/include/c++/7/bits/vector.tcc **** 	  __new_finish
 432:/usr/include/c++/7/bits/vector.tcc **** 	    = std::__uninitialized_move_if_noexcept_a
 433:/usr/include/c++/7/bits/vector.tcc **** 	    (__position.base(), this->_M_impl._M_finish,
 434:/usr/include/c++/7/bits/vector.tcc **** 	     __new_finish, _M_get_Tp_allocator());
 1132              		.loc 8 434 0
 1133 00f3 488B45B8 		movq	-72(%rbp), %rax
 1134 00f7 4889C7   		movq	%rax, %rdi
 1135 00fa E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1135      00
 1136 00ff 4989C4   		movq	%rax, %r12
 433:/usr/include/c++/7/bits/vector.tcc **** 	     __new_finish, _M_get_Tp_allocator());
 1137              		.loc 8 433 0
 1138 0102 488B45B8 		movq	-72(%rbp), %rax
 1139 0106 488B5808 		movq	8(%rax), %rbx
 1140 010a 488D45B0 		leaq	-80(%rbp), %rax
 1141 010e 4889C7   		movq	%rax, %rdi
 1142 0111 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1142      00
 1143 0116 488B00   		movq	(%rax), %rax
 431:/usr/include/c++/7/bits/vector.tcc **** 	    = std::__uninitialized_move_if_noexcept_a
 1144              		.loc 8 431 0
 1145 0119 488B55C8 		movq	-56(%rbp), %rdx
 1146 011d 4C89E1   		movq	%r12, %rcx
 1147 0120 4889DE   		movq	%rbx, %rsi
 1148 0123 4889C7   		movq	%rax, %rdi
 1149 0126 E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S
 1149      00
 1150              	.LEHE23:
 431:/usr/include/c++/7/bits/vector.tcc **** 	    = std::__uninitialized_move_if_noexcept_a
 1151              		.loc 8 431 0 is_stmt 0 discriminator 1
 1152 012b 488945C8 		movq	%rax, -56(%rbp)
 435:/usr/include/c++/7/bits/vector.tcc **** 	}
 436:/usr/include/c++/7/bits/vector.tcc ****       __catch(...)
 437:/usr/include/c++/7/bits/vector.tcc **** 	{
 438:/usr/include/c++/7/bits/vector.tcc **** 	  if (!__new_finish)
 439:/usr/include/c++/7/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 440:/usr/include/c++/7/bits/vector.tcc **** 				   __new_start + __elems_before);
 441:/usr/include/c++/7/bits/vector.tcc **** 	  else
 442:/usr/include/c++/7/bits/vector.tcc **** 	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 443:/usr/include/c++/7/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 444:/usr/include/c++/7/bits/vector.tcc **** 	  __throw_exception_again;
 445:/usr/include/c++/7/bits/vector.tcc **** 	}
 446:/usr/include/c++/7/bits/vector.tcc ****       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 447:/usr/include/c++/7/bits/vector.tcc **** 		    _M_get_Tp_allocator());
 1153              		.loc 8 447 0 is_stmt 1 discriminator 1
 1154 012f 488B45B8 		movq	-72(%rbp), %rax
 1155 0133 4889C7   		movq	%rax, %rdi
 1156 0136 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1156      00
 1157 013b 4889C2   		movq	%rax, %rdx
 446:/usr/include/c++/7/bits/vector.tcc **** 		    _M_get_Tp_allocator());
 1158              		.loc 8 446 0 discriminator 1
 1159 013e 488B45B8 		movq	-72(%rbp), %rax
 1160 0142 488B4808 		movq	8(%rax), %rcx
 1161 0146 488B45B8 		movq	-72(%rbp), %rax
 1162 014a 488B00   		movq	(%rax), %rax
 1163 014d 4889CE   		movq	%rcx, %rsi
 1164 0150 4889C7   		movq	%rax, %rdi
 1165              	.LEHB24:
 1166 0153 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1166      00
 448:/usr/include/c++/7/bits/vector.tcc ****       _M_deallocate(this->_M_impl._M_start,
 1167              		.loc 8 448 0 discriminator 1
 1168 0158 488B45B8 		movq	-72(%rbp), %rax
 449:/usr/include/c++/7/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage
 1169              		.loc 8 449 0 discriminator 1
 1170 015c 488B55B8 		movq	-72(%rbp), %rdx
 1171 0160 488B5210 		movq	16(%rdx), %rdx
 450:/usr/include/c++/7/bits/vector.tcc **** 		    - this->_M_impl._M_start);
 1172              		.loc 8 450 0 discriminator 1
 1173 0164 4889D1   		movq	%rdx, %rcx
 1174 0167 488B55B8 		movq	-72(%rbp), %rdx
 1175 016b 488B12   		movq	(%rdx), %rdx
 1176 016e 4829D1   		subq	%rdx, %rcx
 1177 0171 4889CA   		movq	%rcx, %rdx
 1178 0174 48C1FA07 		sarq	$7, %rdx
 448:/usr/include/c++/7/bits/vector.tcc ****       _M_deallocate(this->_M_impl._M_start,
 1179              		.loc 8 448 0 discriminator 1
 1180 0178 4889D6   		movq	%rdx, %rsi
 1181 017b 488B55B8 		movq	-72(%rbp), %rdx
 1182 017f 488B0A   		movq	(%rdx), %rcx
 1183 0182 4889F2   		movq	%rsi, %rdx
 1184 0185 4889CE   		movq	%rcx, %rsi
 1185 0188 4889C7   		movq	%rax, %rdi
 1186 018b E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1186      00
 1187              	.LEHE24:
 451:/usr/include/c++/7/bits/vector.tcc ****       this->_M_impl._M_start = __new_start;
 1188              		.loc 8 451 0 discriminator 1
 1189 0190 488B45B8 		movq	-72(%rbp), %rax
 1190 0194 488B55E0 		movq	-32(%rbp), %rdx
 1191 0198 488910   		movq	%rdx, (%rax)
 452:/usr/include/c++/7/bits/vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 1192              		.loc 8 452 0 discriminator 1
 1193 019b 488B45B8 		movq	-72(%rbp), %rax
 1194 019f 488B55C8 		movq	-56(%rbp), %rdx
 1195 01a3 48895008 		movq	%rdx, 8(%rax)
 453:/usr/include/c++/7/bits/vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 1196              		.loc 8 453 0 discriminator 1
 1197 01a7 488B45D0 		movq	-48(%rbp), %rax
 1198 01ab 48C1E007 		salq	$7, %rax
 1199 01af 4889C2   		movq	%rax, %rdx
 1200 01b2 488B45E0 		movq	-32(%rbp), %rax
 1201 01b6 4801C2   		addq	%rax, %rdx
 1202 01b9 488B45B8 		movq	-72(%rbp), %rax
 1203 01bd 48895010 		movq	%rdx, 16(%rax)
 454:/usr/include/c++/7/bits/vector.tcc ****     }
 1204              		.loc 8 454 0 discriminator 1
 1205 01c1 90       		nop
 1206 01c2 488B45E8 		movq	-24(%rbp), %rax
 1207 01c6 64483304 		xorq	%fs:40, %rax
 1207      25280000 
 1207      00
 1208 01cf 0F848D00 		je	.L60
 1208      0000
 1209 01d5 E9830000 		jmp	.L63
 1209      00
 1210              	.L61:
 436:/usr/include/c++/7/bits/vector.tcc **** 	{
 1211              		.loc 8 436 0
 1212 01da 4889C7   		movq	%rax, %rdi
 1213 01dd E8000000 		call	__cxa_begin_catch@PLT
 1213      00
 438:/usr/include/c++/7/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 1214              		.loc 8 438 0
 1215 01e2 48837DC8 		cmpq	$0, -56(%rbp)
 1215      00
 1216 01e7 7523     		jne	.L57
 440:/usr/include/c++/7/bits/vector.tcc **** 	  else
 1217              		.loc 8 440 0
 1218 01e9 488B45D8 		movq	-40(%rbp), %rax
 1219 01ed 48C1E007 		salq	$7, %rax
 1220 01f1 4889C2   		movq	%rax, %rdx
 439:/usr/include/c++/7/bits/vector.tcc **** 				   __new_start + __elems_before);
 1221              		.loc 8 439 0
 1222 01f4 488B45E0 		movq	-32(%rbp), %rax
 1223 01f8 4801C2   		addq	%rax, %rdx
 1224 01fb 488B45B8 		movq	-72(%rbp), %rax
 1225 01ff 4889D6   		movq	%rdx, %rsi
 1226 0202 4889C7   		movq	%rax, %rdi
 1227              	.LEHB25:
 1228 0205 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_@PLT
 1228      00
 1229 020a EB22     		jmp	.L58
 1230              	.L57:
 442:/usr/include/c++/7/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 1231              		.loc 8 442 0
 1232 020c 488B45B8 		movq	-72(%rbp), %rax
 1233 0210 4889C7   		movq	%rax, %rdi
 1234 0213 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1234      00
 1235 0218 4889C2   		movq	%rax, %rdx
 1236 021b 488B4DC8 		movq	-56(%rbp), %rcx
 1237 021f 488B45E0 		movq	-32(%rbp), %rax
 1238 0223 4889CE   		movq	%rcx, %rsi
 1239 0226 4889C7   		movq	%rax, %rdi
 1240 0229 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1240      00
 1241              	.L58:
 443:/usr/include/c++/7/bits/vector.tcc **** 	  __throw_exception_again;
 1242              		.loc 8 443 0
 1243 022e 488B45B8 		movq	-72(%rbp), %rax
 1244 0232 488B55D0 		movq	-48(%rbp), %rdx
 1245 0236 488B4DE0 		movq	-32(%rbp), %rcx
 1246 023a 4889CE   		movq	%rcx, %rsi
 1247 023d 4889C7   		movq	%rax, %rdi
 1248 0240 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1248      00
 444:/usr/include/c++/7/bits/vector.tcc **** 	}
 1249              		.loc 8 444 0
 1250 0245 E8000000 		call	__cxa_rethrow@PLT
 1250      00
 1251              	.LEHE25:
 1252              	.L62:
 1253 024a 4889C3   		movq	%rax, %rbx
 436:/usr/include/c++/7/bits/vector.tcc **** 	{
 1254              		.loc 8 436 0
 1255 024d E8000000 		call	__cxa_end_catch@PLT
 1255      00
 1256 0252 4889D8   		movq	%rbx, %rax
 1257 0255 4889C7   		movq	%rax, %rdi
 1258              	.LEHB26:
 1259 0258 E8000000 		call	_Unwind_Resume@PLT
 1259      00
 1260              	.LEHE26:
 1261              	.L63:
 1262              		.loc 8 454 0
 1263 025d E8000000 		call	__stack_chk_fail@PLT
 1263      00
 1264              	.L60:
 1265 0262 4883C450 		addq	$80, %rsp
 1266 0266 5B       		popq	%rbx
 1267 0267 415C     		popq	%r12
 1268 0269 5D       		popq	%rbp
 1269              		.cfi_def_cfa 7, 8
 1270 026a C3       		ret
 1271              		.cfi_endproc
 1272              	.LFE938:
 1273              		.section	.gcc_except_table
 1274 0061 000000   		.align 4
 1275              	.LLSDA938:
 1276 0064 FF       		.byte	0xff
 1277 0065 9B       		.byte	0x9b
 1278 0066 25       		.uleb128 .LLSDATT938-.LLSDATTD938
 1279              	.LLSDATTD938:
 1280 0067 01       		.byte	0x1
 1281 0068 1B       		.uleb128 .LLSDACSE938-.LLSDACSB938
 1282              	.LLSDACSB938:
 1283 0069 39       		.uleb128 .LEHB22-.LFB938
 1284 006a 43       		.uleb128 .LEHE22-.LEHB22
 1285 006b 00       		.uleb128 0
 1286 006c 00       		.uleb128 0
 1287 006d A901     		.uleb128 .LEHB23-.LFB938
 1288 006f 8201     		.uleb128 .LEHE23-.LEHB23
 1289 0071 DA03     		.uleb128 .L61-.LFB938
 1290 0073 01       		.uleb128 0x1
 1291 0074 D302     		.uleb128 .LEHB24-.LFB938
 1292 0076 3D       		.uleb128 .LEHE24-.LEHB24
 1293 0077 00       		.uleb128 0
 1294 0078 00       		.uleb128 0
 1295 0079 8504     		.uleb128 .LEHB25-.LFB938
 1296 007b 45       		.uleb128 .LEHE25-.LEHB25
 1297 007c CA04     		.uleb128 .L62-.LFB938
 1298 007e 00       		.uleb128 0
 1299 007f D804     		.uleb128 .LEHB26-.LFB938
 1300 0081 05       		.uleb128 .LEHE26-.LEHB26
 1301 0082 00       		.uleb128 0
 1302 0083 00       		.uleb128 0
 1303              	.LLSDACSE938:
 1304 0084 01       		.byte	0x1
 1305 0085 00       		.byte	0
 1306 0086 0000     		.align 4
 1307 0088 00000000 		.long	0
 1308              	
 1309              	.LLSDATT938:
 1310              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx
 1312              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNSt6ve
 1313              		.align 2
 1314              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1316              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1317              	.LFB939:
 581:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1318              		.loc 5 581 0
 1319              		.cfi_startproc
 1320 0000 55       		pushq	%rbp
 1321              		.cfi_def_cfa_offset 16
 1322              		.cfi_offset 6, -16
 1323 0001 4889E5   		movq	%rsp, %rbp
 1324              		.cfi_def_cfa_register 6
 1325 0004 4883EC20 		subq	$32, %rsp
 1326 0008 48897DE8 		movq	%rdi, -24(%rbp)
 581:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1327              		.loc 5 581 0
 1328 000c 64488B04 		movq	%fs:40, %rax
 1328      25280000 
 1328      00
 1329 0015 488945F8 		movq	%rax, -8(%rbp)
 1330 0019 31C0     		xorl	%eax, %eax
 582:/usr/include/c++/7/bits/stl_vector.h **** 
 1331              		.loc 5 582 0
 1332 001b 488B45E8 		movq	-24(%rbp), %rax
 1333 001f 488D5008 		leaq	8(%rax), %rdx
 1334 0023 488D45F0 		leaq	-16(%rbp), %rax
 1335 0027 4889D6   		movq	%rdx, %rsi
 1336 002a 4889C7   		movq	%rax, %rdi
 1337 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 1337      00
 1338 0032 488B45F0 		movq	-16(%rbp), %rax
 1339 0036 488B4DF8 		movq	-8(%rbp), %rcx
 1340 003a 6448330C 		xorq	%fs:40, %rcx
 1340      25280000 
 1340      00
 1341 0043 7405     		je	.L66
 1342 0045 E8000000 		call	__stack_chk_fail@PLT
 1342      00
 1343              	.L66:
 1344 004a C9       		leave
 1345              		.cfi_def_cfa 7, 8
 1346 004b C3       		ret
 1347              		.cfi_endproc
 1348              	.LFE939:
 1350              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1351              		.align 2
 1352              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl
 1354              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl:
 1355              	.LFB940:
 1356              		.file 9 "/usr/include/c++/7/bits/stl_iterator.h"
   1:/usr/include/c++/7/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_iterator.h **** 
   3:/usr/include/c++/7/bits/stl_iterator.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_iterator.h **** //
   5:/usr/include/c++/7/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_iterator.h **** 
  11:/usr/include/c++/7/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_iterator.h **** 
  16:/usr/include/c++/7/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_iterator.h **** 
  20:/usr/include/c++/7/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_iterator.h **** 
  25:/usr/include/c++/7/bits/stl_iterator.h **** /*
  26:/usr/include/c++/7/bits/stl_iterator.h ****  *
  27:/usr/include/c++/7/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_iterator.h ****  *
  30:/usr/include/c++/7/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_iterator.h ****  *
  38:/usr/include/c++/7/bits/stl_iterator.h ****  *
  39:/usr/include/c++/7/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/7/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_iterator.h ****  *
  42:/usr/include/c++/7/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_iterator.h ****  */
  50:/usr/include/c++/7/bits/stl_iterator.h **** 
  51:/usr/include/c++/7/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/7/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/7/bits/stl_iterator.h ****  *
  55:/usr/include/c++/7/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/7/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/7/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/7/bits/stl_iterator.h ****  */
  59:/usr/include/c++/7/bits/stl_iterator.h **** 
  60:/usr/include/c++/7/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/7/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/7/bits/stl_iterator.h **** 
  63:/usr/include/c++/7/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/7/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/7/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/7/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/7/bits/stl_iterator.h **** 
  68:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus > 201402L
  69:/usr/include/c++/7/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201603
  70:/usr/include/c++/7/bits/stl_iterator.h **** #endif
  71:/usr/include/c++/7/bits/stl_iterator.h **** 
  72:/usr/include/c++/7/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:/usr/include/c++/7/bits/stl_iterator.h **** {
  74:/usr/include/c++/7/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:/usr/include/c++/7/bits/stl_iterator.h **** 
  76:/usr/include/c++/7/bits/stl_iterator.h ****   /**
  77:/usr/include/c++/7/bits/stl_iterator.h ****    * @addtogroup iterators
  78:/usr/include/c++/7/bits/stl_iterator.h ****    * @{
  79:/usr/include/c++/7/bits/stl_iterator.h ****    */
  80:/usr/include/c++/7/bits/stl_iterator.h **** 
  81:/usr/include/c++/7/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  82:/usr/include/c++/7/bits/stl_iterator.h ****   /**
  83:/usr/include/c++/7/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  84:/usr/include/c++/7/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  85:/usr/include/c++/7/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  86:/usr/include/c++/7/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  87:/usr/include/c++/7/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  88:/usr/include/c++/7/bits/stl_iterator.h ****    *  @code
  89:/usr/include/c++/7/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  90:/usr/include/c++/7/bits/stl_iterator.h ****    *  @endcode
  91:/usr/include/c++/7/bits/stl_iterator.h ****    *
  92:/usr/include/c++/7/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  93:/usr/include/c++/7/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  94:/usr/include/c++/7/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  95:/usr/include/c++/7/bits/stl_iterator.h ****    *
  96:/usr/include/c++/7/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  97:/usr/include/c++/7/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  98:/usr/include/c++/7/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  99:/usr/include/c++/7/bits/stl_iterator.h ****   */
 100:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 101:/usr/include/c++/7/bits/stl_iterator.h ****     class reverse_iterator
 102:/usr/include/c++/7/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 103:/usr/include/c++/7/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 104:/usr/include/c++/7/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 105:/usr/include/c++/7/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 106:/usr/include/c++/7/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 107:/usr/include/c++/7/bits/stl_iterator.h ****     {
 108:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 109:/usr/include/c++/7/bits/stl_iterator.h ****       _Iterator current;
 110:/usr/include/c++/7/bits/stl_iterator.h **** 
 111:/usr/include/c++/7/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 112:/usr/include/c++/7/bits/stl_iterator.h **** 
 113:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 114:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 115:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 116:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 117:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 118:/usr/include/c++/7/bits/stl_iterator.h **** 
 119:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 120:/usr/include/c++/7/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 121:/usr/include/c++/7/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 122:/usr/include/c++/7/bits/stl_iterator.h ****       */
 123:/usr/include/c++/7/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 124:/usr/include/c++/7/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 125:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 126:/usr/include/c++/7/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 127:/usr/include/c++/7/bits/stl_iterator.h **** 
 128:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 129:/usr/include/c++/7/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 130:/usr/include/c++/7/bits/stl_iterator.h ****       */
 131:/usr/include/c++/7/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 132:/usr/include/c++/7/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 133:/usr/include/c++/7/bits/stl_iterator.h **** 
 134:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 135:/usr/include/c++/7/bits/stl_iterator.h ****        *  The copy constructor is normal.
 136:/usr/include/c++/7/bits/stl_iterator.h ****       */
 137:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 138:/usr/include/c++/7/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 139:/usr/include/c++/7/bits/stl_iterator.h ****       : current(__x.current) { }
 140:/usr/include/c++/7/bits/stl_iterator.h **** 
 141:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 142:/usr/include/c++/7/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 143:/usr/include/c++/7/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 144:/usr/include/c++/7/bits/stl_iterator.h ****       */
 145:/usr/include/c++/7/bits/stl_iterator.h ****       template<typename _Iter>
 146:/usr/include/c++/7/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 147:/usr/include/c++/7/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 148:/usr/include/c++/7/bits/stl_iterator.h **** 	: current(__x.base()) { }
 149:/usr/include/c++/7/bits/stl_iterator.h **** 
 150:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 152:/usr/include/c++/7/bits/stl_iterator.h ****       */
 153:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 154:/usr/include/c++/7/bits/stl_iterator.h ****       base() const
 155:/usr/include/c++/7/bits/stl_iterator.h ****       { return current; }
 156:/usr/include/c++/7/bits/stl_iterator.h **** 
 157:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 158:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 159:/usr/include/c++/7/bits/stl_iterator.h ****        *
 160:/usr/include/c++/7/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 161:/usr/include/c++/7/bits/stl_iterator.h ****        *
 162:/usr/include/c++/7/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 163:/usr/include/c++/7/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 164:/usr/include/c++/7/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 165:/usr/include/c++/7/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 166:/usr/include/c++/7/bits/stl_iterator.h ****       */
 167:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 168:/usr/include/c++/7/bits/stl_iterator.h ****       operator*() const
 169:/usr/include/c++/7/bits/stl_iterator.h ****       {
 170:/usr/include/c++/7/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 171:/usr/include/c++/7/bits/stl_iterator.h **** 	return *--__tmp;
 172:/usr/include/c++/7/bits/stl_iterator.h ****       }
 173:/usr/include/c++/7/bits/stl_iterator.h **** 
 174:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 175:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 176:/usr/include/c++/7/bits/stl_iterator.h ****        *
 177:/usr/include/c++/7/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 178:/usr/include/c++/7/bits/stl_iterator.h ****       */
 179:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 180:/usr/include/c++/7/bits/stl_iterator.h ****       operator->() const
 181:/usr/include/c++/7/bits/stl_iterator.h ****       { return &(operator*()); }
 182:/usr/include/c++/7/bits/stl_iterator.h **** 
 183:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 184:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  @c *this
 185:/usr/include/c++/7/bits/stl_iterator.h ****        *
 186:/usr/include/c++/7/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 187:/usr/include/c++/7/bits/stl_iterator.h ****       */
 188:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 189:/usr/include/c++/7/bits/stl_iterator.h ****       operator++()
 190:/usr/include/c++/7/bits/stl_iterator.h ****       {
 191:/usr/include/c++/7/bits/stl_iterator.h **** 	--current;
 192:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 193:/usr/include/c++/7/bits/stl_iterator.h ****       }
 194:/usr/include/c++/7/bits/stl_iterator.h **** 
 195:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 196:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 197:/usr/include/c++/7/bits/stl_iterator.h ****        *
 198:/usr/include/c++/7/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 199:/usr/include/c++/7/bits/stl_iterator.h ****       */
 200:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 201:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int)
 202:/usr/include/c++/7/bits/stl_iterator.h ****       {
 203:/usr/include/c++/7/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 204:/usr/include/c++/7/bits/stl_iterator.h **** 	--current;
 205:/usr/include/c++/7/bits/stl_iterator.h **** 	return __tmp;
 206:/usr/include/c++/7/bits/stl_iterator.h ****       }
 207:/usr/include/c++/7/bits/stl_iterator.h **** 
 208:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 209:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  @c *this
 210:/usr/include/c++/7/bits/stl_iterator.h ****        *
 211:/usr/include/c++/7/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 212:/usr/include/c++/7/bits/stl_iterator.h ****       */
 213:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 214:/usr/include/c++/7/bits/stl_iterator.h ****       operator--()
 215:/usr/include/c++/7/bits/stl_iterator.h ****       {
 216:/usr/include/c++/7/bits/stl_iterator.h **** 	++current;
 217:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 218:/usr/include/c++/7/bits/stl_iterator.h ****       }
 219:/usr/include/c++/7/bits/stl_iterator.h **** 
 220:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 221:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 222:/usr/include/c++/7/bits/stl_iterator.h ****        *
 223:/usr/include/c++/7/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 224:/usr/include/c++/7/bits/stl_iterator.h ****       */
 225:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 226:/usr/include/c++/7/bits/stl_iterator.h ****       operator--(int)
 227:/usr/include/c++/7/bits/stl_iterator.h ****       {
 228:/usr/include/c++/7/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 229:/usr/include/c++/7/bits/stl_iterator.h **** 	++current;
 230:/usr/include/c++/7/bits/stl_iterator.h **** 	return __tmp;
 231:/usr/include/c++/7/bits/stl_iterator.h ****       }
 232:/usr/include/c++/7/bits/stl_iterator.h **** 
 233:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 234:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 235:/usr/include/c++/7/bits/stl_iterator.h ****        *
 236:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 237:/usr/include/c++/7/bits/stl_iterator.h ****       */
 238:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 239:/usr/include/c++/7/bits/stl_iterator.h ****       operator+(difference_type __n) const
 240:/usr/include/c++/7/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 241:/usr/include/c++/7/bits/stl_iterator.h **** 
 242:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 243:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  *this
 244:/usr/include/c++/7/bits/stl_iterator.h ****        *
 245:/usr/include/c++/7/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 246:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 247:/usr/include/c++/7/bits/stl_iterator.h ****       */
 248:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 249:/usr/include/c++/7/bits/stl_iterator.h ****       operator+=(difference_type __n)
 250:/usr/include/c++/7/bits/stl_iterator.h ****       {
 251:/usr/include/c++/7/bits/stl_iterator.h **** 	current -= __n;
 252:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 253:/usr/include/c++/7/bits/stl_iterator.h ****       }
 254:/usr/include/c++/7/bits/stl_iterator.h **** 
 255:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 256:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 257:/usr/include/c++/7/bits/stl_iterator.h ****        *
 258:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 259:/usr/include/c++/7/bits/stl_iterator.h ****       */
 260:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 261:/usr/include/c++/7/bits/stl_iterator.h ****       operator-(difference_type __n) const
 262:/usr/include/c++/7/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 263:/usr/include/c++/7/bits/stl_iterator.h **** 
 264:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 265:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  *this
 266:/usr/include/c++/7/bits/stl_iterator.h ****        *
 267:/usr/include/c++/7/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 268:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 269:/usr/include/c++/7/bits/stl_iterator.h ****       */
 270:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 271:/usr/include/c++/7/bits/stl_iterator.h ****       operator-=(difference_type __n)
 272:/usr/include/c++/7/bits/stl_iterator.h ****       {
 273:/usr/include/c++/7/bits/stl_iterator.h **** 	current += __n;
 274:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 275:/usr/include/c++/7/bits/stl_iterator.h ****       }
 276:/usr/include/c++/7/bits/stl_iterator.h **** 
 277:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 278:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 279:/usr/include/c++/7/bits/stl_iterator.h ****        *
 280:/usr/include/c++/7/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 281:/usr/include/c++/7/bits/stl_iterator.h ****       */
 282:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 283:/usr/include/c++/7/bits/stl_iterator.h ****       operator[](difference_type __n) const
 284:/usr/include/c++/7/bits/stl_iterator.h ****       { return *(*this + __n); }
 285:/usr/include/c++/7/bits/stl_iterator.h ****     };
 286:/usr/include/c++/7/bits/stl_iterator.h **** 
 287:/usr/include/c++/7/bits/stl_iterator.h ****   //@{
 288:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 289:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 290:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 291:/usr/include/c++/7/bits/stl_iterator.h ****    *  @return  A simple bool.
 292:/usr/include/c++/7/bits/stl_iterator.h ****    *
 293:/usr/include/c++/7/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 294:/usr/include/c++/7/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 295:/usr/include/c++/7/bits/stl_iterator.h ****    *
 296:/usr/include/c++/7/bits/stl_iterator.h ****   */
 297:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 298:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 299:/usr/include/c++/7/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 300:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 301:/usr/include/c++/7/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 302:/usr/include/c++/7/bits/stl_iterator.h **** 
 303:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 304:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 305:/usr/include/c++/7/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 306:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 307:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 308:/usr/include/c++/7/bits/stl_iterator.h **** 
 309:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 310:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 311:/usr/include/c++/7/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 312:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 313:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__x == __y); }
 314:/usr/include/c++/7/bits/stl_iterator.h **** 
 315:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 316:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 317:/usr/include/c++/7/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 318:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 319:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y < __x; }
 320:/usr/include/c++/7/bits/stl_iterator.h **** 
 321:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 322:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 323:/usr/include/c++/7/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 324:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 325:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__y < __x); }
 326:/usr/include/c++/7/bits/stl_iterator.h **** 
 327:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 328:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 329:/usr/include/c++/7/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 330:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 331:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__x < __y); }
 332:/usr/include/c++/7/bits/stl_iterator.h **** 
 333:/usr/include/c++/7/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 334:/usr/include/c++/7/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 335:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 336:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 337:/usr/include/c++/7/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 338:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 339:/usr/include/c++/7/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 340:/usr/include/c++/7/bits/stl_iterator.h **** 
 341:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 342:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 343:/usr/include/c++/7/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 344:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 345:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 346:/usr/include/c++/7/bits/stl_iterator.h **** 
 347:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 348:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 349:/usr/include/c++/7/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 350:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 351:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__x == __y); }
 352:/usr/include/c++/7/bits/stl_iterator.h **** 
 353:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 354:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 355:/usr/include/c++/7/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 356:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 357:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y < __x; }
 358:/usr/include/c++/7/bits/stl_iterator.h **** 
 359:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 360:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 361:/usr/include/c++/7/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 362:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 363:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__y < __x); }
 364:/usr/include/c++/7/bits/stl_iterator.h **** 
 365:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 366:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 367:/usr/include/c++/7/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 368:/usr/include/c++/7/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 369:/usr/include/c++/7/bits/stl_iterator.h ****     { return !(__x < __y); }
 370:/usr/include/c++/7/bits/stl_iterator.h ****   //@}
 371:/usr/include/c++/7/bits/stl_iterator.h **** 
 372:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus < 201103L
 373:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 374:/usr/include/c++/7/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 375:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 376:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 377:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 378:/usr/include/c++/7/bits/stl_iterator.h **** 
 379:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 380:/usr/include/c++/7/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 381:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 382:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 383:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 384:/usr/include/c++/7/bits/stl_iterator.h **** #else
 385:/usr/include/c++/7/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 386:/usr/include/c++/7/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 387:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 388:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 389:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 390:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 391:/usr/include/c++/7/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 392:/usr/include/c++/7/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 393:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 394:/usr/include/c++/7/bits/stl_iterator.h **** 
 395:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 396:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 397:/usr/include/c++/7/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 398:/usr/include/c++/7/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 399:/usr/include/c++/7/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 400:/usr/include/c++/7/bits/stl_iterator.h **** 
 401:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 402:/usr/include/c++/7/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++03 mode too.
 403:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 404:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 405:/usr/include/c++/7/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 406:/usr/include/c++/7/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 407:/usr/include/c++/7/bits/stl_iterator.h **** 
 408:/usr/include/c++/7/bits/stl_iterator.h **** # if __cplusplus > 201103L
 409:/usr/include/c++/7/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 410:/usr/include/c++/7/bits/stl_iterator.h **** 
 411:/usr/include/c++/7/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 412:/usr/include/c++/7/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 413:/usr/include/c++/7/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 414:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 415:/usr/include/c++/7/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 416:/usr/include/c++/7/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 417:/usr/include/c++/7/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 418:/usr/include/c++/7/bits/stl_iterator.h **** # endif
 419:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 420:/usr/include/c++/7/bits/stl_iterator.h **** 
 421:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 422:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 423:/usr/include/c++/7/bits/stl_iterator.h ****     auto
 424:/usr/include/c++/7/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 425:/usr/include/c++/7/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 426:/usr/include/c++/7/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 427:/usr/include/c++/7/bits/stl_iterator.h **** 
 428:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 429:/usr/include/c++/7/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 430:/usr/include/c++/7/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 431:/usr/include/c++/7/bits/stl_iterator.h ****     { };
 432:/usr/include/c++/7/bits/stl_iterator.h **** 
 433:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator>
 434:/usr/include/c++/7/bits/stl_iterator.h ****     auto
 435:/usr/include/c++/7/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 436:/usr/include/c++/7/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 437:/usr/include/c++/7/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 438:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 439:/usr/include/c++/7/bits/stl_iterator.h **** 
 440:/usr/include/c++/7/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 441:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 442:/usr/include/c++/7/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 443:/usr/include/c++/7/bits/stl_iterator.h ****    *
 444:/usr/include/c++/7/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 445:/usr/include/c++/7/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 446:/usr/include/c++/7/bits/stl_iterator.h ****    *  push_back.
 447:/usr/include/c++/7/bits/stl_iterator.h ****    *
 448:/usr/include/c++/7/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 449:/usr/include/c++/7/bits/stl_iterator.h ****    *  save typing.
 450:/usr/include/c++/7/bits/stl_iterator.h ****   */
 451:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 452:/usr/include/c++/7/bits/stl_iterator.h ****     class back_insert_iterator
 453:/usr/include/c++/7/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 454:/usr/include/c++/7/bits/stl_iterator.h ****     {
 455:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 456:/usr/include/c++/7/bits/stl_iterator.h ****       _Container* container;
 457:/usr/include/c++/7/bits/stl_iterator.h **** 
 458:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 459:/usr/include/c++/7/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 460:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Container          container_type;
 461:/usr/include/c++/7/bits/stl_iterator.h **** 
 462:/usr/include/c++/7/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 463:/usr/include/c++/7/bits/stl_iterator.h ****       explicit
 464:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 465:/usr/include/c++/7/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 466:/usr/include/c++/7/bits/stl_iterator.h **** 
 467:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 468:/usr/include/c++/7/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 469:/usr/include/c++/7/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 470:/usr/include/c++/7/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 471:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 472:/usr/include/c++/7/bits/stl_iterator.h ****        *
 473:/usr/include/c++/7/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 474:/usr/include/c++/7/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 475:/usr/include/c++/7/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 476:/usr/include/c++/7/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 477:/usr/include/c++/7/bits/stl_iterator.h ****       */
 478:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus < 201103L
 479:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 480:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 481:/usr/include/c++/7/bits/stl_iterator.h ****       {
 482:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_back(__value);
 483:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 484:/usr/include/c++/7/bits/stl_iterator.h ****       }
 485:/usr/include/c++/7/bits/stl_iterator.h **** #else
 486:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 487:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 488:/usr/include/c++/7/bits/stl_iterator.h ****       {
 489:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_back(__value);
 490:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 491:/usr/include/c++/7/bits/stl_iterator.h ****       }
 492:/usr/include/c++/7/bits/stl_iterator.h **** 
 493:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 494:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 495:/usr/include/c++/7/bits/stl_iterator.h ****       {
 496:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 497:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 498:/usr/include/c++/7/bits/stl_iterator.h ****       }
 499:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 500:/usr/include/c++/7/bits/stl_iterator.h **** 
 501:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.
 502:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 503:/usr/include/c++/7/bits/stl_iterator.h ****       operator*()
 504:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 505:/usr/include/c++/7/bits/stl_iterator.h **** 
 506:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 507:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator&
 508:/usr/include/c++/7/bits/stl_iterator.h ****       operator++()
 509:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 510:/usr/include/c++/7/bits/stl_iterator.h **** 
 511:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 512:/usr/include/c++/7/bits/stl_iterator.h ****       back_insert_iterator
 513:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int)
 514:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 515:/usr/include/c++/7/bits/stl_iterator.h ****     };
 516:/usr/include/c++/7/bits/stl_iterator.h **** 
 517:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 518:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 519:/usr/include/c++/7/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 520:/usr/include/c++/7/bits/stl_iterator.h ****    *
 521:/usr/include/c++/7/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 522:/usr/include/c++/7/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 523:/usr/include/c++/7/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 524:/usr/include/c++/7/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 525:/usr/include/c++/7/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 526:/usr/include/c++/7/bits/stl_iterator.h ****    *  types for you.
 527:/usr/include/c++/7/bits/stl_iterator.h ****   */
 528:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 529:/usr/include/c++/7/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 530:/usr/include/c++/7/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 531:/usr/include/c++/7/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 532:/usr/include/c++/7/bits/stl_iterator.h **** 
 533:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 534:/usr/include/c++/7/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 535:/usr/include/c++/7/bits/stl_iterator.h ****    *
 536:/usr/include/c++/7/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 537:/usr/include/c++/7/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 538:/usr/include/c++/7/bits/stl_iterator.h ****    *  push_front.
 539:/usr/include/c++/7/bits/stl_iterator.h ****    *
 540:/usr/include/c++/7/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 541:/usr/include/c++/7/bits/stl_iterator.h ****    *  save typing.
 542:/usr/include/c++/7/bits/stl_iterator.h ****   */
 543:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 544:/usr/include/c++/7/bits/stl_iterator.h ****     class front_insert_iterator
 545:/usr/include/c++/7/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 546:/usr/include/c++/7/bits/stl_iterator.h ****     {
 547:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 548:/usr/include/c++/7/bits/stl_iterator.h ****       _Container* container;
 549:/usr/include/c++/7/bits/stl_iterator.h **** 
 550:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 551:/usr/include/c++/7/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 552:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Container          container_type;
 553:/usr/include/c++/7/bits/stl_iterator.h **** 
 554:/usr/include/c++/7/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 555:/usr/include/c++/7/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x)
 556:/usr/include/c++/7/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 557:/usr/include/c++/7/bits/stl_iterator.h **** 
 558:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 559:/usr/include/c++/7/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 560:/usr/include/c++/7/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 561:/usr/include/c++/7/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 562:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 563:/usr/include/c++/7/bits/stl_iterator.h ****        *
 564:/usr/include/c++/7/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 565:/usr/include/c++/7/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 566:/usr/include/c++/7/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 567:/usr/include/c++/7/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 568:/usr/include/c++/7/bits/stl_iterator.h ****       */
 569:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus < 201103L
 570:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 571:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 572:/usr/include/c++/7/bits/stl_iterator.h ****       {
 573:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_front(__value);
 574:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 575:/usr/include/c++/7/bits/stl_iterator.h ****       }
 576:/usr/include/c++/7/bits/stl_iterator.h **** #else
 577:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 578:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 579:/usr/include/c++/7/bits/stl_iterator.h ****       {
 580:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_front(__value);
 581:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 582:/usr/include/c++/7/bits/stl_iterator.h ****       }
 583:/usr/include/c++/7/bits/stl_iterator.h **** 
 584:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 585:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 586:/usr/include/c++/7/bits/stl_iterator.h ****       {
 587:/usr/include/c++/7/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 588:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 589:/usr/include/c++/7/bits/stl_iterator.h ****       }
 590:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 591:/usr/include/c++/7/bits/stl_iterator.h **** 
 592:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.
 593:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 594:/usr/include/c++/7/bits/stl_iterator.h ****       operator*()
 595:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 596:/usr/include/c++/7/bits/stl_iterator.h **** 
 597:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 598:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator&
 599:/usr/include/c++/7/bits/stl_iterator.h ****       operator++()
 600:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 601:/usr/include/c++/7/bits/stl_iterator.h **** 
 602:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 603:/usr/include/c++/7/bits/stl_iterator.h ****       front_insert_iterator
 604:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int)
 605:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 606:/usr/include/c++/7/bits/stl_iterator.h ****     };
 607:/usr/include/c++/7/bits/stl_iterator.h **** 
 608:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 609:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 610:/usr/include/c++/7/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 611:/usr/include/c++/7/bits/stl_iterator.h ****    *
 612:/usr/include/c++/7/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 613:/usr/include/c++/7/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 614:/usr/include/c++/7/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 615:/usr/include/c++/7/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 616:/usr/include/c++/7/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 617:/usr/include/c++/7/bits/stl_iterator.h ****    *  types for you.
 618:/usr/include/c++/7/bits/stl_iterator.h ****   */
 619:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 620:/usr/include/c++/7/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 621:/usr/include/c++/7/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 622:/usr/include/c++/7/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 623:/usr/include/c++/7/bits/stl_iterator.h **** 
 624:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 625:/usr/include/c++/7/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 626:/usr/include/c++/7/bits/stl_iterator.h ****    *
 627:/usr/include/c++/7/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 628:/usr/include/c++/7/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 629:/usr/include/c++/7/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 630:/usr/include/c++/7/bits/stl_iterator.h ****    *  position.
 631:/usr/include/c++/7/bits/stl_iterator.h ****    *
 632:/usr/include/c++/7/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 633:/usr/include/c++/7/bits/stl_iterator.h ****    *  %iterator's position.)
 634:/usr/include/c++/7/bits/stl_iterator.h ****    *
 635:/usr/include/c++/7/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 636:/usr/include/c++/7/bits/stl_iterator.h ****    *  save typing.
 637:/usr/include/c++/7/bits/stl_iterator.h ****   */
 638:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container>
 639:/usr/include/c++/7/bits/stl_iterator.h ****     class insert_iterator
 640:/usr/include/c++/7/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 641:/usr/include/c++/7/bits/stl_iterator.h ****     {
 642:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 643:/usr/include/c++/7/bits/stl_iterator.h ****       _Container* container;
 644:/usr/include/c++/7/bits/stl_iterator.h ****       typename _Container::iterator iter;
 645:/usr/include/c++/7/bits/stl_iterator.h **** 
 646:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 647:/usr/include/c++/7/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 648:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Container          container_type;
 649:/usr/include/c++/7/bits/stl_iterator.h **** 
 650:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 651:/usr/include/c++/7/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 652:/usr/include/c++/7/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 653:/usr/include/c++/7/bits/stl_iterator.h ****       */
 654:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 655:/usr/include/c++/7/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 656:/usr/include/c++/7/bits/stl_iterator.h **** 
 657:/usr/include/c++/7/bits/stl_iterator.h ****       /**
 658:/usr/include/c++/7/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 659:/usr/include/c++/7/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 660:/usr/include/c++/7/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 661:/usr/include/c++/7/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 662:/usr/include/c++/7/bits/stl_iterator.h ****        *
 663:/usr/include/c++/7/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 664:/usr/include/c++/7/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 665:/usr/include/c++/7/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 666:/usr/include/c++/7/bits/stl_iterator.h ****        *
 667:/usr/include/c++/7/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 668:/usr/include/c++/7/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 669:/usr/include/c++/7/bits/stl_iterator.h ****        *  @code
 670:/usr/include/c++/7/bits/stl_iterator.h ****        *     // vector v contains A and Z
 671:/usr/include/c++/7/bits/stl_iterator.h ****        *
 672:/usr/include/c++/7/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 673:/usr/include/c++/7/bits/stl_iterator.h ****        *     i = 1;
 674:/usr/include/c++/7/bits/stl_iterator.h ****        *     i = 2;
 675:/usr/include/c++/7/bits/stl_iterator.h ****        *     i = 3;
 676:/usr/include/c++/7/bits/stl_iterator.h ****        *
 677:/usr/include/c++/7/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 678:/usr/include/c++/7/bits/stl_iterator.h ****        *  @endcode
 679:/usr/include/c++/7/bits/stl_iterator.h ****       */
 680:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus < 201103L
 681:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 682:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 683:/usr/include/c++/7/bits/stl_iterator.h ****       {
 684:/usr/include/c++/7/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 685:/usr/include/c++/7/bits/stl_iterator.h **** 	++iter;
 686:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 687:/usr/include/c++/7/bits/stl_iterator.h ****       }
 688:/usr/include/c++/7/bits/stl_iterator.h **** #else
 689:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 690:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 691:/usr/include/c++/7/bits/stl_iterator.h ****       {
 692:/usr/include/c++/7/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 693:/usr/include/c++/7/bits/stl_iterator.h **** 	++iter;
 694:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 695:/usr/include/c++/7/bits/stl_iterator.h ****       }
 696:/usr/include/c++/7/bits/stl_iterator.h **** 
 697:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 698:/usr/include/c++/7/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 699:/usr/include/c++/7/bits/stl_iterator.h ****       {
 700:/usr/include/c++/7/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 701:/usr/include/c++/7/bits/stl_iterator.h **** 	++iter;
 702:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 703:/usr/include/c++/7/bits/stl_iterator.h ****       }
 704:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 705:/usr/include/c++/7/bits/stl_iterator.h **** 
 706:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.
 707:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 708:/usr/include/c++/7/bits/stl_iterator.h ****       operator*()
 709:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 710:/usr/include/c++/7/bits/stl_iterator.h **** 
 711:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 712:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 713:/usr/include/c++/7/bits/stl_iterator.h ****       operator++()
 714:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 715:/usr/include/c++/7/bits/stl_iterator.h **** 
 716:/usr/include/c++/7/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 717:/usr/include/c++/7/bits/stl_iterator.h ****       insert_iterator&
 718:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int)
 719:/usr/include/c++/7/bits/stl_iterator.h ****       { return *this; }
 720:/usr/include/c++/7/bits/stl_iterator.h ****     };
 721:/usr/include/c++/7/bits/stl_iterator.h **** 
 722:/usr/include/c++/7/bits/stl_iterator.h ****   /**
 723:/usr/include/c++/7/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 724:/usr/include/c++/7/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 725:/usr/include/c++/7/bits/stl_iterator.h ****    *
 726:/usr/include/c++/7/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 727:/usr/include/c++/7/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 728:/usr/include/c++/7/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 729:/usr/include/c++/7/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 730:/usr/include/c++/7/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 731:/usr/include/c++/7/bits/stl_iterator.h ****    *  types for you.
 732:/usr/include/c++/7/bits/stl_iterator.h ****   */
 733:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 734:/usr/include/c++/7/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 735:/usr/include/c++/7/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 736:/usr/include/c++/7/bits/stl_iterator.h ****     {
 737:/usr/include/c++/7/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 738:/usr/include/c++/7/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 739:/usr/include/c++/7/bits/stl_iterator.h ****     }
 740:/usr/include/c++/7/bits/stl_iterator.h **** 
 741:/usr/include/c++/7/bits/stl_iterator.h ****   // @} group iterators
 742:/usr/include/c++/7/bits/stl_iterator.h **** 
 743:/usr/include/c++/7/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 744:/usr/include/c++/7/bits/stl_iterator.h **** } // namespace
 745:/usr/include/c++/7/bits/stl_iterator.h **** 
 746:/usr/include/c++/7/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 747:/usr/include/c++/7/bits/stl_iterator.h **** {
 748:/usr/include/c++/7/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 749:/usr/include/c++/7/bits/stl_iterator.h **** 
 750:/usr/include/c++/7/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 751:/usr/include/c++/7/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 752:/usr/include/c++/7/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 753:/usr/include/c++/7/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 754:/usr/include/c++/7/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 755:/usr/include/c++/7/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 756:/usr/include/c++/7/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 757:/usr/include/c++/7/bits/stl_iterator.h ****   using std::iterator_traits;
 758:/usr/include/c++/7/bits/stl_iterator.h ****   using std::iterator;
 759:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 760:/usr/include/c++/7/bits/stl_iterator.h ****     class __normal_iterator
 761:/usr/include/c++/7/bits/stl_iterator.h ****     {
 762:/usr/include/c++/7/bits/stl_iterator.h ****     protected:
 763:/usr/include/c++/7/bits/stl_iterator.h ****       _Iterator _M_current;
 764:/usr/include/c++/7/bits/stl_iterator.h **** 
 765:/usr/include/c++/7/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 766:/usr/include/c++/7/bits/stl_iterator.h **** 
 767:/usr/include/c++/7/bits/stl_iterator.h ****     public:
 768:/usr/include/c++/7/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 769:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 770:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 771:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 772:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 773:/usr/include/c++/7/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 774:/usr/include/c++/7/bits/stl_iterator.h **** 
 775:/usr/include/c++/7/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 776:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 777:/usr/include/c++/7/bits/stl_iterator.h **** 
 778:/usr/include/c++/7/bits/stl_iterator.h ****       explicit
 779:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 780:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(__i) { }
 781:/usr/include/c++/7/bits/stl_iterator.h **** 
 782:/usr/include/c++/7/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 783:/usr/include/c++/7/bits/stl_iterator.h ****       template<typename _Iter>
 784:/usr/include/c++/7/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 785:/usr/include/c++/7/bits/stl_iterator.h **** 			  typename __enable_if<
 786:/usr/include/c++/7/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 787:/usr/include/c++/7/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 788:/usr/include/c++/7/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 789:/usr/include/c++/7/bits/stl_iterator.h **** 
 790:/usr/include/c++/7/bits/stl_iterator.h ****       // Forward iterator requirements
 791:/usr/include/c++/7/bits/stl_iterator.h ****       reference
 792:/usr/include/c++/7/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 793:/usr/include/c++/7/bits/stl_iterator.h ****       { return *_M_current; }
 794:/usr/include/c++/7/bits/stl_iterator.h **** 
 795:/usr/include/c++/7/bits/stl_iterator.h ****       pointer
 796:/usr/include/c++/7/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 797:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 798:/usr/include/c++/7/bits/stl_iterator.h **** 
 799:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator&
 800:/usr/include/c++/7/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 801:/usr/include/c++/7/bits/stl_iterator.h ****       {
 802:/usr/include/c++/7/bits/stl_iterator.h **** 	++_M_current;
 803:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 804:/usr/include/c++/7/bits/stl_iterator.h ****       }
 805:/usr/include/c++/7/bits/stl_iterator.h **** 
 806:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator
 807:/usr/include/c++/7/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 808:/usr/include/c++/7/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 809:/usr/include/c++/7/bits/stl_iterator.h **** 
 810:/usr/include/c++/7/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 811:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator&
 812:/usr/include/c++/7/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 813:/usr/include/c++/7/bits/stl_iterator.h ****       {
 814:/usr/include/c++/7/bits/stl_iterator.h **** 	--_M_current;
 815:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 816:/usr/include/c++/7/bits/stl_iterator.h ****       }
 817:/usr/include/c++/7/bits/stl_iterator.h **** 
 818:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator
 819:/usr/include/c++/7/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 820:/usr/include/c++/7/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 821:/usr/include/c++/7/bits/stl_iterator.h **** 
 822:/usr/include/c++/7/bits/stl_iterator.h ****       // Random access iterator requirements
 823:/usr/include/c++/7/bits/stl_iterator.h ****       reference
 824:/usr/include/c++/7/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 825:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current[__n]; }
 826:/usr/include/c++/7/bits/stl_iterator.h **** 
 827:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator&
 828:/usr/include/c++/7/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 829:/usr/include/c++/7/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 830:/usr/include/c++/7/bits/stl_iterator.h **** 
 831:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator
 832:/usr/include/c++/7/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 833:/usr/include/c++/7/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 834:/usr/include/c++/7/bits/stl_iterator.h **** 
 835:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator&
 836:/usr/include/c++/7/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 837:/usr/include/c++/7/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 838:/usr/include/c++/7/bits/stl_iterator.h **** 
 839:/usr/include/c++/7/bits/stl_iterator.h ****       __normal_iterator
 840:/usr/include/c++/7/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 1357              		.loc 9 840 0
 1358              		.cfi_startproc
 1359 0000 55       		pushq	%rbp
 1360              		.cfi_def_cfa_offset 16
 1361              		.cfi_offset 6, -16
 1362 0001 4889E5   		movq	%rsp, %rbp
 1363              		.cfi_def_cfa_register 6
 1364 0004 4883EC30 		subq	$48, %rsp
 1365 0008 48897DD8 		movq	%rdi, -40(%rbp)
 1366 000c 488975D0 		movq	%rsi, -48(%rbp)
 1367              		.loc 9 840 0
 1368 0010 64488B04 		movq	%fs:40, %rax
 1368      25280000 
 1368      00
 1369 0019 488945F8 		movq	%rax, -8(%rbp)
 1370 001d 31C0     		xorl	%eax, %eax
 841:/usr/include/c++/7/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 1371              		.loc 9 841 0
 1372 001f 488B45D8 		movq	-40(%rbp), %rax
 1373 0023 488B00   		movq	(%rax), %rax
 1374 0026 488B55D0 		movq	-48(%rbp), %rdx
 1375 002a 48C1E207 		salq	$7, %rdx
 1376 002e 48F7DA   		negq	%rdx
 1377 0031 4801D0   		addq	%rdx, %rax
 1378 0034 488945E8 		movq	%rax, -24(%rbp)
 1379 0038 488D55E8 		leaq	-24(%rbp), %rdx
 1380 003c 488D45F0 		leaq	-16(%rbp), %rax
 1381 0040 4889D6   		movq	%rdx, %rsi
 1382 0043 4889C7   		movq	%rax, %rdi
 1383 0046 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 1383      00
 1384 004b 488B45F0 		movq	-16(%rbp), %rax
 1385 004f 488B4DF8 		movq	-8(%rbp), %rcx
 1386 0053 6448330C 		xorq	%fs:40, %rcx
 1386      25280000 
 1386      00
 1387 005c 7405     		je	.L69
 1388 005e E8000000 		call	__stack_chk_fail@PLT
 1388      00
 1389              	.L69:
 1390 0063 C9       		leave
 1391              		.cfi_def_cfa 7, 8
 1392 0064 C3       		ret
 1393              		.cfi_endproc
 1394              	.LFE940:
 1396              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1397              		.align 2
 1398              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 1400              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1401              	.LFB941:
 792:/usr/include/c++/7/bits/stl_iterator.h ****       { return *_M_current; }
 1402              		.loc 9 792 0
 1403              		.cfi_startproc
 1404 0000 55       		pushq	%rbp
 1405              		.cfi_def_cfa_offset 16
 1406              		.cfi_offset 6, -16
 1407 0001 4889E5   		movq	%rsp, %rbp
 1408              		.cfi_def_cfa_register 6
 1409 0004 48897DF8 		movq	%rdi, -8(%rbp)
 793:/usr/include/c++/7/bits/stl_iterator.h **** 
 1410              		.loc 9 793 0
 1411 0008 488B45F8 		movq	-8(%rbp), %rax
 1412 000c 488B00   		movq	(%rax), %rax
 1413 000f 5D       		popq	%rbp
 1414              		.cfi_def_cfa 7, 8
 1415 0010 C3       		ret
 1416              		.cfi_endproc
 1417              	.LFE941:
 1419              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 1420              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 1422              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9c
 1423              	.LFB956:
 136:/usr/include/c++/7/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 1424              		.loc 7 136 0
 1425              		.cfi_startproc
 1426 0000 55       		pushq	%rbp
 1427              		.cfi_def_cfa_offset 16
 1428              		.cfi_offset 6, -16
 1429 0001 4889E5   		movq	%rsp, %rbp
 1430              		.cfi_def_cfa_register 6
 1431 0004 4883EC20 		subq	$32, %rsp
 1432 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1433 000c 488975F0 		movq	%rsi, -16(%rbp)
 1434 0010 488955E8 		movq	%rdx, -24(%rbp)
 1435              		.loc 7 137 0
 1436 0014 488B55E8 		movq	-24(%rbp), %rdx
 1437 0018 488B4DF0 		movq	-16(%rbp), %rcx
 1438 001c 488B45F8 		movq	-8(%rbp), %rax
 1439 0020 4889CE   		movq	%rcx, %rsi
 1440 0023 4889C7   		movq	%rax, %rdi
 1441 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9
 1441      00
 1442 002b 90       		nop
 1443 002c C9       		leave
 1444              		.cfi_def_cfa 7, 8
 1445 002d C3       		ret
 1446              		.cfi_endproc
 1447              	.LFE956:
 1449              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 1450              		.align 2
 1451              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_real
 1453              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_realloc_ins
 1454              	.LFB957:
 399:/usr/include/c++/7/bits/vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 1455              		.loc 8 399 0
 1456              		.cfi_startproc
 1457              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1458              		.cfi_lsda 0x1b,.LLSDA957
 1459 0000 55       		pushq	%rbp
 1460              		.cfi_def_cfa_offset 16
 1461              		.cfi_offset 6, -16
 1462 0001 4889E5   		movq	%rsp, %rbp
 1463              		.cfi_def_cfa_register 6
 1464 0004 4154     		pushq	%r12
 1465 0006 53       		pushq	%rbx
 1466 0007 4883EC50 		subq	$80, %rsp
 1467              		.cfi_offset 12, -24
 1468              		.cfi_offset 3, -32
 1469 000b 48897DB8 		movq	%rdi, -72(%rbp)
 1470 000f 488975B0 		movq	%rsi, -80(%rbp)
 1471 0013 488955A8 		movq	%rdx, -88(%rbp)
 399:/usr/include/c++/7/bits/vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 1472              		.loc 8 399 0
 1473 0017 64488B04 		movq	%fs:40, %rax
 1473      25280000 
 1473      00
 1474 0020 488945E8 		movq	%rax, -24(%rbp)
 1475 0024 31C0     		xorl	%eax, %eax
 403:/usr/include/c++/7/bits/vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 1476              		.loc 8 403 0
 1477 0026 488B45B8 		movq	-72(%rbp), %rax
 1478 002a 488D1500 		leaq	.LC0(%rip), %rdx
 1478      000000
 1479 0031 BE010000 		movl	$1, %esi
 1479      00
 1480 0036 4889C7   		movq	%rax, %rdi
 1481              	.LEHB27:
 1482 0039 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_chec
 1482      00
 1483 003e 488945D0 		movq	%rax, -48(%rbp)
 405:/usr/include/c++/7/bits/vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 1484              		.loc 8 405 0
 1485 0042 488B45B8 		movq	-72(%rbp), %rax
 1486 0046 4889C7   		movq	%rax, %rdi
 1487 0049 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv@P
 1487      00
 1488 004e 488945C0 		movq	%rax, -64(%rbp)
 1489 0052 488D55C0 		leaq	-64(%rbp), %rdx
 1490 0056 488D45B0 		leaq	-80(%rbp), %rax
 1491 005a 4889D6   		movq	%rdx, %rsi
 1492 005d 4889C7   		movq	%rax, %rdi
 1493 0060 E8000000 		call	_ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_S
 1493      00
 1494 0065 488945D8 		movq	%rax, -40(%rbp)
 406:/usr/include/c++/7/bits/vector.tcc ****       pointer __new_finish(__new_start);
 1495              		.loc 8 406 0
 1496 0069 488B45B8 		movq	-72(%rbp), %rax
 1497 006d 488B55D0 		movq	-48(%rbp), %rdx
 1498 0071 4889D6   		movq	%rdx, %rsi
 1499 0074 4889C7   		movq	%rax, %rdi
 1500 0077 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_
 1500      00
 1501              	.LEHE27:
 1502 007c 488945E0 		movq	%rax, -32(%rbp)
 407:/usr/include/c++/7/bits/vector.tcc ****       __try
 1503              		.loc 8 407 0
 1504 0080 488B45E0 		movq	-32(%rbp), %rax
 1505 0084 488945C8 		movq	%rax, -56(%rbp)
 416:/usr/include/c++/7/bits/vector.tcc **** #if __cplusplus >= 201103L
 1506              		.loc 8 416 0
 1507 0088 488B55D8 		movq	-40(%rbp), %rdx
 1508 008c 4889D0   		movq	%rdx, %rax
 1509 008f 48C1E002 		salq	$2, %rax
 1510 0093 4801D0   		addq	%rdx, %rax
 1511 0096 48C1E003 		salq	$3, %rax
 1512 009a 4889C2   		movq	%rax, %rdx
 415:/usr/include/c++/7/bits/vector.tcc **** 				   __new_start + __elems_before,
 1513              		.loc 8 415 0
 1514 009d 488B45E0 		movq	-32(%rbp), %rax
 1515 00a1 488D0C02 		leaq	(%rdx,%rax), %rcx
 1516 00a5 488B45B8 		movq	-72(%rbp), %rax
 1517 00a9 488B55A8 		movq	-88(%rbp), %rdx
 1518 00ad 4889CE   		movq	%rcx, %rsi
 1519 00b0 4889C7   		movq	%rax, %rdi
 1520              	.LEHB28:
 1521 00b3 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 1521      00
 422:/usr/include/c++/7/bits/vector.tcc **** 
 1522              		.loc 8 422 0
 1523 00b8 48C745C8 		movq	$0, -56(%rbp)
 1523      00000000 
 427:/usr/include/c++/7/bits/vector.tcc **** 
 1524              		.loc 8 427 0
 1525 00c0 488B45B8 		movq	-72(%rbp), %rax
 1526 00c4 4889C7   		movq	%rax, %rdi
 1527 00c7 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 1527      00
 1528 00cc 4889C3   		movq	%rax, %rbx
 426:/usr/include/c++/7/bits/vector.tcc **** 	     __new_start, _M_get_Tp_allocator());
 1529              		.loc 8 426 0
 1530 00cf 488D45B0 		leaq	-80(%rbp), %rax
 1531 00d3 4889C7   		movq	%rax, %rdi
 1532 00d6 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1532      00
 1533 00db 488B30   		movq	(%rax), %rsi
 1534 00de 488B45B8 		movq	-72(%rbp), %rax
 1535 00e2 488B00   		movq	(%rax), %rax
 424:/usr/include/c++/7/bits/vector.tcc **** 	    = std::__uninitialized_move_if_noexcept_a
 1536              		.loc 8 424 0
 1537 00e5 488B55E0 		movq	-32(%rbp), %rdx
 1538 00e9 4889D9   		movq	%rbx, %rcx
 1539 00ec 4889C7   		movq	%rax, %rdi
 1540 00ef E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traits
 1540      00
 1541 00f4 488945C8 		movq	%rax, -56(%rbp)
 429:/usr/include/c++/7/bits/vector.tcc **** 
 1542              		.loc 8 429 0
 1543 00f8 488345C8 		addq	$40, -56(%rbp)
 1543      28
 434:/usr/include/c++/7/bits/vector.tcc **** 	}
 1544              		.loc 8 434 0
 1545 00fd 488B45B8 		movq	-72(%rbp), %rax
 1546 0101 4889C7   		movq	%rax, %rdi
 1547 0104 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 1547      00
 1548 0109 4989C4   		movq	%rax, %r12
 433:/usr/include/c++/7/bits/vector.tcc **** 	     __new_finish, _M_get_Tp_allocator());
 1549              		.loc 8 433 0
 1550 010c 488B45B8 		movq	-72(%rbp), %rax
 1551 0110 488B5808 		movq	8(%rax), %rbx
 1552 0114 488D45B0 		leaq	-80(%rbp), %rax
 1553 0118 4889C7   		movq	%rax, %rdi
 1554 011b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1554      00
 1555 0120 488B00   		movq	(%rax), %rax
 431:/usr/include/c++/7/bits/vector.tcc **** 	    = std::__uninitialized_move_if_noexcept_a
 1556              		.loc 8 431 0
 1557 0123 488B55C8 		movq	-56(%rbp), %rdx
 1558 0127 4C89E1   		movq	%r12, %rcx
 1559 012a 4889DE   		movq	%rbx, %rsi
 1560 012d 4889C7   		movq	%rax, %rdi
 1561 0130 E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traits
 1561      00
 1562              	.LEHE28:
 431:/usr/include/c++/7/bits/vector.tcc **** 	    = std::__uninitialized_move_if_noexcept_a
 1563              		.loc 8 431 0 is_stmt 0 discriminator 1
 1564 0135 488945C8 		movq	%rax, -56(%rbp)
 447:/usr/include/c++/7/bits/vector.tcc ****       _M_deallocate(this->_M_impl._M_start,
 1565              		.loc 8 447 0 is_stmt 1 discriminator 1
 1566 0139 488B45B8 		movq	-72(%rbp), %rax
 1567 013d 4889C7   		movq	%rax, %rdi
 1568 0140 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 1568      00
 1569 0145 4889C2   		movq	%rax, %rdx
 446:/usr/include/c++/7/bits/vector.tcc **** 		    _M_get_Tp_allocator());
 1570              		.loc 8 446 0 discriminator 1
 1571 0148 488B45B8 		movq	-72(%rbp), %rax
 1572 014c 488B4808 		movq	8(%rax), %rcx
 1573 0150 488B45B8 		movq	-72(%rbp), %rax
 1574 0154 488B00   		movq	(%rax), %rax
 1575 0157 4889CE   		movq	%rcx, %rsi
 1576 015a 4889C7   		movq	%rax, %rdi
 1577              	.LEHB29:
 1578 015d E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 1578      00
 448:/usr/include/c++/7/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage
 1579              		.loc 8 448 0 discriminator 1
 1580 0162 488B45B8 		movq	-72(%rbp), %rax
 449:/usr/include/c++/7/bits/vector.tcc **** 		    - this->_M_impl._M_start);
 1581              		.loc 8 449 0 discriminator 1
 1582 0166 488B55B8 		movq	-72(%rbp), %rdx
 1583 016a 488B5210 		movq	16(%rdx), %rdx
 450:/usr/include/c++/7/bits/vector.tcc ****       this->_M_impl._M_start = __new_start;
 1584              		.loc 8 450 0 discriminator 1
 1585 016e 4889D1   		movq	%rdx, %rcx
 1586 0171 488B55B8 		movq	-72(%rbp), %rdx
 1587 0175 488B12   		movq	(%rdx), %rdx
 1588 0178 4829D1   		subq	%rdx, %rcx
 1589 017b 4889CA   		movq	%rcx, %rdx
 1590 017e 4889D1   		movq	%rdx, %rcx
 1591 0181 48C1F903 		sarq	$3, %rcx
 1592 0185 48BACDCC 		movabsq	$-3689348814741910323, %rdx
 1592      CCCCCCCC 
 1592      CCCC
 1593 018f 480FAFD1 		imulq	%rcx, %rdx
 448:/usr/include/c++/7/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage
 1594              		.loc 8 448 0 discriminator 1
 1595 0193 4889D6   		movq	%rdx, %rsi
 1596 0196 488B55B8 		movq	-72(%rbp), %rdx
 1597 019a 488B0A   		movq	(%rdx), %rcx
 1598 019d 4889F2   		movq	%rsi, %rdx
 1599 01a0 4889CE   		movq	%rcx, %rsi
 1600 01a3 4889C7   		movq	%rax, %rdi
 1601 01a6 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 1601      00
 1602              	.LEHE29:
 451:/usr/include/c++/7/bits/vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 1603              		.loc 8 451 0 discriminator 1
 1604 01ab 488B45B8 		movq	-72(%rbp), %rax
 1605 01af 488B55E0 		movq	-32(%rbp), %rdx
 1606 01b3 488910   		movq	%rdx, (%rax)
 452:/usr/include/c++/7/bits/vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 1607              		.loc 8 452 0 discriminator 1
 1608 01b6 488B45B8 		movq	-72(%rbp), %rax
 1609 01ba 488B55C8 		movq	-56(%rbp), %rdx
 1610 01be 48895008 		movq	%rdx, 8(%rax)
 453:/usr/include/c++/7/bits/vector.tcc ****     }
 1611              		.loc 8 453 0 discriminator 1
 1612 01c2 488B55D0 		movq	-48(%rbp), %rdx
 1613 01c6 4889D0   		movq	%rdx, %rax
 1614 01c9 48C1E002 		salq	$2, %rax
 1615 01cd 4801D0   		addq	%rdx, %rax
 1616 01d0 48C1E003 		salq	$3, %rax
 1617 01d4 4889C2   		movq	%rax, %rdx
 1618 01d7 488B45E0 		movq	-32(%rbp), %rax
 1619 01db 4801C2   		addq	%rax, %rdx
 1620 01de 488B45B8 		movq	-72(%rbp), %rax
 1621 01e2 48895010 		movq	%rdx, 16(%rax)
 1622              		.loc 8 454 0 discriminator 1
 1623 01e6 90       		nop
 1624 01e7 488B45E8 		movq	-24(%rbp), %rax
 1625 01eb 64483304 		xorq	%fs:40, %rax
 1625      25280000 
 1625      00
 1626 01f4 0F849700 		je	.L78
 1626      0000
 1627 01fa E98D0000 		jmp	.L81
 1627      00
 1628              	.L79:
 436:/usr/include/c++/7/bits/vector.tcc **** 	{
 1629              		.loc 8 436 0
 1630 01ff 4889C7   		movq	%rax, %rdi
 1631 0202 E8000000 		call	__cxa_begin_catch@PLT
 1631      00
 438:/usr/include/c++/7/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 1632              		.loc 8 438 0
 1633 0207 48837DC8 		cmpq	$0, -56(%rbp)
 1633      00
 1634 020c 752D     		jne	.L75
 440:/usr/include/c++/7/bits/vector.tcc **** 	  else
 1635              		.loc 8 440 0
 1636 020e 488B55D8 		movq	-40(%rbp), %rdx
 1637 0212 4889D0   		movq	%rdx, %rax
 1638 0215 48C1E002 		salq	$2, %rax
 1639 0219 4801D0   		addq	%rdx, %rax
 1640 021c 48C1E003 		salq	$3, %rax
 1641 0220 4889C2   		movq	%rax, %rdx
 439:/usr/include/c++/7/bits/vector.tcc **** 				   __new_start + __elems_before);
 1642              		.loc 8 439 0
 1643 0223 488B45E0 		movq	-32(%rbp), %rax
 1644 0227 4801C2   		addq	%rax, %rdx
 1645 022a 488B45B8 		movq	-72(%rbp), %rax
 1646 022e 4889D6   		movq	%rdx, %rsi
 1647 0231 4889C7   		movq	%rax, %rdi
 1648              	.LEHB30:
 1649 0234 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 1649      00
 1650 0239 EB22     		jmp	.L76
 1651              	.L75:
 442:/usr/include/c++/7/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 1652              		.loc 8 442 0
 1653 023b 488B45B8 		movq	-72(%rbp), %rax
 1654 023f 4889C7   		movq	%rax, %rdi
 1655 0242 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 1655      00
 1656 0247 4889C2   		movq	%rax, %rdx
 1657 024a 488B4DC8 		movq	-56(%rbp), %rcx
 1658 024e 488B45E0 		movq	-32(%rbp), %rax
 1659 0252 4889CE   		movq	%rcx, %rsi
 1660 0255 4889C7   		movq	%rax, %rdi
 1661 0258 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 1661      00
 1662              	.L76:
 443:/usr/include/c++/7/bits/vector.tcc **** 	  __throw_exception_again;
 1663              		.loc 8 443 0
 1664 025d 488B45B8 		movq	-72(%rbp), %rax
 1665 0261 488B55D0 		movq	-48(%rbp), %rdx
 1666 0265 488B4DE0 		movq	-32(%rbp), %rcx
 1667 0269 4889CE   		movq	%rcx, %rsi
 1668 026c 4889C7   		movq	%rax, %rdi
 1669 026f E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 1669      00
 444:/usr/include/c++/7/bits/vector.tcc **** 	}
 1670              		.loc 8 444 0
 1671 0274 E8000000 		call	__cxa_rethrow@PLT
 1671      00
 1672              	.LEHE30:
 1673              	.L80:
 1674 0279 4889C3   		movq	%rax, %rbx
 436:/usr/include/c++/7/bits/vector.tcc **** 	{
 1675              		.loc 8 436 0
 1676 027c E8000000 		call	__cxa_end_catch@PLT
 1676      00
 1677 0281 4889D8   		movq	%rbx, %rax
 1678 0284 4889C7   		movq	%rax, %rdi
 1679              	.LEHB31:
 1680 0287 E8000000 		call	_Unwind_Resume@PLT
 1680      00
 1681              	.LEHE31:
 1682              	.L81:
 1683              		.loc 8 454 0
 1684 028c E8000000 		call	__stack_chk_fail@PLT
 1684      00
 1685              	.L78:
 1686 0291 4883C450 		addq	$80, %rsp
 1687 0295 5B       		popq	%rbx
 1688 0296 415C     		popq	%r12
 1689 0298 5D       		popq	%rbp
 1690              		.cfi_def_cfa 7, 8
 1691 0299 C3       		ret
 1692              		.cfi_endproc
 1693              	.LFE957:
 1694              		.section	.gcc_except_table
 1695              		.align 4
 1696              	.LLSDA957:
 1697 008c FF       		.byte	0xff
 1698 008d 9B       		.byte	0x9b
 1699 008e 25       		.uleb128 .LLSDATT957-.LLSDATTD957
 1700              	.LLSDATTD957:
 1701 008f 01       		.byte	0x1
 1702 0090 1B       		.uleb128 .LLSDACSE957-.LLSDACSB957
 1703              	.LLSDACSB957:
 1704 0091 39       		.uleb128 .LEHB27-.LFB957
 1705 0092 43       		.uleb128 .LEHE27-.LEHB27
 1706 0093 00       		.uleb128 0
 1707 0094 00       		.uleb128 0
 1708 0095 B301     		.uleb128 .LEHB28-.LFB957
 1709 0097 8201     		.uleb128 .LEHE28-.LEHB28
 1710 0099 FF03     		.uleb128 .L79-.LFB957
 1711 009b 01       		.uleb128 0x1
 1712 009c DD02     		.uleb128 .LEHB29-.LFB957
 1713 009e 4E       		.uleb128 .LEHE29-.LEHB29
 1714 009f 00       		.uleb128 0
 1715 00a0 00       		.uleb128 0
 1716 00a1 B404     		.uleb128 .LEHB30-.LFB957
 1717 00a3 45       		.uleb128 .LEHE30-.LEHB30
 1718 00a4 F904     		.uleb128 .L80-.LFB957
 1719 00a6 00       		.uleb128 0
 1720 00a7 8705     		.uleb128 .LEHB31-.LFB957
 1721 00a9 05       		.uleb128 .LEHE31-.LEHB31
 1722 00aa 00       		.uleb128 0
 1723 00ab 00       		.uleb128 0
 1724              	.LLSDACSE957:
 1725 00ac 01       		.byte	0x1
 1726 00ad 00       		.byte	0
 1727 00ae 0000     		.align 4
 1728 00b0 00000000 		.long	0
 1729              	
 1730              	.LLSDATT957:
 1731              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 1733              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 1734              		.align 2
 1735              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
 1737              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:
 1738              	.LFB958:
 581:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1739              		.loc 5 581 0
 1740              		.cfi_startproc
 1741 0000 55       		pushq	%rbp
 1742              		.cfi_def_cfa_offset 16
 1743              		.cfi_offset 6, -16
 1744 0001 4889E5   		movq	%rsp, %rbp
 1745              		.cfi_def_cfa_register 6
 1746 0004 4883EC20 		subq	$32, %rsp
 1747 0008 48897DE8 		movq	%rdi, -24(%rbp)
 581:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1748              		.loc 5 581 0
 1749 000c 64488B04 		movq	%fs:40, %rax
 1749      25280000 
 1749      00
 1750 0015 488945F8 		movq	%rax, -8(%rbp)
 1751 0019 31C0     		xorl	%eax, %eax
 582:/usr/include/c++/7/bits/stl_vector.h **** 
 1752              		.loc 5 582 0
 1753 001b 488B45E8 		movq	-24(%rbp), %rax
 1754 001f 488D5008 		leaq	8(%rax), %rdx
 1755 0023 488D45F0 		leaq	-16(%rbp), %rax
 1756 0027 4889D6   		movq	%rdx, %rsi
 1757 002a 4889C7   		movq	%rax, %rdi
 1758 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 1758      00
 1759 0032 488B45F0 		movq	-16(%rbp), %rax
 1760 0036 488B4DF8 		movq	-8(%rbp), %rcx
 1761 003a 6448330C 		xorq	%fs:40, %rcx
 1761      25280000 
 1761      00
 1762 0043 7405     		je	.L84
 1763 0045 E8000000 		call	__stack_chk_fail@PLT
 1763      00
 1764              	.L84:
 1765 004a C9       		leave
 1766              		.cfi_def_cfa 7, 8
 1767 004b C3       		ret
 1768              		.cfi_endproc
 1769              	.LFE958:
 1771              		.section	.text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev,"axG",@pr
 1772              		.align 2
 1773              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
 1775              	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 1776              	.LFB963:
 1777              		.file 10 "/usr/include/c++/7/bits/allocator.h"
   1:/usr/include/c++/7/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/7/bits/allocator.h **** 
   3:/usr/include/c++/7/bits/allocator.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/allocator.h **** //
   5:/usr/include/c++/7/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/allocator.h **** // any later version.
  10:/usr/include/c++/7/bits/allocator.h **** 
  11:/usr/include/c++/7/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/allocator.h **** 
  16:/usr/include/c++/7/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/allocator.h **** 
  20:/usr/include/c++/7/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/allocator.h **** 
  25:/usr/include/c++/7/bits/allocator.h **** /*
  26:/usr/include/c++/7/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/7/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/7/bits/allocator.h ****  *
  29:/usr/include/c++/7/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/7/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/7/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/7/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/7/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/7/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/7/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/7/bits/allocator.h ****  */
  37:/usr/include/c++/7/bits/allocator.h **** 
  38:/usr/include/c++/7/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/7/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/7/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/7/bits/allocator.h ****  */
  42:/usr/include/c++/7/bits/allocator.h **** 
  43:/usr/include/c++/7/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/7/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/7/bits/allocator.h **** 
  46:/usr/include/c++/7/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/7/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/7/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/7/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/7/bits/allocator.h **** #endif
  51:/usr/include/c++/7/bits/allocator.h **** 
  52:/usr/include/c++/7/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/7/bits/allocator.h **** #if __cplusplus >= 201103L
  54:/usr/include/c++/7/bits/allocator.h **** # define __cpp_lib_allocator_is_always_equal 201411
  55:/usr/include/c++/7/bits/allocator.h **** #endif
  56:/usr/include/c++/7/bits/allocator.h **** 
  57:/usr/include/c++/7/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/c++/7/bits/allocator.h **** {
  59:/usr/include/c++/7/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/c++/7/bits/allocator.h **** 
  61:/usr/include/c++/7/bits/allocator.h ****   /**
  62:/usr/include/c++/7/bits/allocator.h ****    *  @addtogroup allocators
  63:/usr/include/c++/7/bits/allocator.h ****    *  @{
  64:/usr/include/c++/7/bits/allocator.h ****    */
  65:/usr/include/c++/7/bits/allocator.h **** 
  66:/usr/include/c++/7/bits/allocator.h ****   /// allocator<void> specialization.
  67:/usr/include/c++/7/bits/allocator.h ****   template<>
  68:/usr/include/c++/7/bits/allocator.h ****     class allocator<void>
  69:/usr/include/c++/7/bits/allocator.h ****     {
  70:/usr/include/c++/7/bits/allocator.h ****     public:
  71:/usr/include/c++/7/bits/allocator.h ****       typedef size_t      size_type;
  72:/usr/include/c++/7/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  73:/usr/include/c++/7/bits/allocator.h ****       typedef void*       pointer;
  74:/usr/include/c++/7/bits/allocator.h ****       typedef const void* const_pointer;
  75:/usr/include/c++/7/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/7/bits/allocator.h **** 
  77:/usr/include/c++/7/bits/allocator.h ****       template<typename _Tp1>
  78:/usr/include/c++/7/bits/allocator.h **** 	struct rebind
  79:/usr/include/c++/7/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  80:/usr/include/c++/7/bits/allocator.h **** 
  81:/usr/include/c++/7/bits/allocator.h **** #if __cplusplus >= 201103L
  82:/usr/include/c++/7/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/usr/include/c++/7/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  84:/usr/include/c++/7/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  85:/usr/include/c++/7/bits/allocator.h **** 
  86:/usr/include/c++/7/bits/allocator.h ****       typedef true_type is_always_equal;
  87:/usr/include/c++/7/bits/allocator.h **** 
  88:/usr/include/c++/7/bits/allocator.h ****       template<typename _Up, typename... _Args>
  89:/usr/include/c++/7/bits/allocator.h **** 	void
  90:/usr/include/c++/7/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  91:/usr/include/c++/7/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  92:/usr/include/c++/7/bits/allocator.h **** 
  93:/usr/include/c++/7/bits/allocator.h ****       template<typename _Up>
  94:/usr/include/c++/7/bits/allocator.h **** 	void
  95:/usr/include/c++/7/bits/allocator.h **** 	destroy(_Up* __p) { __p->~_Up(); }
  96:/usr/include/c++/7/bits/allocator.h **** #endif
  97:/usr/include/c++/7/bits/allocator.h ****     };
  98:/usr/include/c++/7/bits/allocator.h **** 
  99:/usr/include/c++/7/bits/allocator.h ****   /**
 100:/usr/include/c++/7/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 101:/usr/include/c++/7/bits/allocator.h ****    *
 102:/usr/include/c++/7/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 103:/usr/include/c++/7/bits/allocator.h ****    *  for further details.
 104:/usr/include/c++/7/bits/allocator.h ****    *
 105:/usr/include/c++/7/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 106:/usr/include/c++/7/bits/allocator.h ****    */
 107:/usr/include/c++/7/bits/allocator.h ****   template<typename _Tp>
 108:/usr/include/c++/7/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
 109:/usr/include/c++/7/bits/allocator.h ****     {
 110:/usr/include/c++/7/bits/allocator.h ****    public:
 111:/usr/include/c++/7/bits/allocator.h ****       typedef size_t     size_type;
 112:/usr/include/c++/7/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 113:/usr/include/c++/7/bits/allocator.h ****       typedef _Tp*       pointer;
 114:/usr/include/c++/7/bits/allocator.h ****       typedef const _Tp* const_pointer;
 115:/usr/include/c++/7/bits/allocator.h ****       typedef _Tp&       reference;
 116:/usr/include/c++/7/bits/allocator.h ****       typedef const _Tp& const_reference;
 117:/usr/include/c++/7/bits/allocator.h ****       typedef _Tp        value_type;
 118:/usr/include/c++/7/bits/allocator.h **** 
 119:/usr/include/c++/7/bits/allocator.h ****       template<typename _Tp1>
 120:/usr/include/c++/7/bits/allocator.h **** 	struct rebind
 121:/usr/include/c++/7/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 122:/usr/include/c++/7/bits/allocator.h **** 
 123:/usr/include/c++/7/bits/allocator.h **** #if __cplusplus >= 201103L
 124:/usr/include/c++/7/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 125:/usr/include/c++/7/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 126:/usr/include/c++/7/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 127:/usr/include/c++/7/bits/allocator.h **** 
 128:/usr/include/c++/7/bits/allocator.h ****       typedef true_type is_always_equal;
 129:/usr/include/c++/7/bits/allocator.h **** #endif
 130:/usr/include/c++/7/bits/allocator.h **** 
 131:/usr/include/c++/7/bits/allocator.h ****       allocator() throw() { }
 132:/usr/include/c++/7/bits/allocator.h **** 
 133:/usr/include/c++/7/bits/allocator.h ****       allocator(const allocator& __a) throw()
 134:/usr/include/c++/7/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 135:/usr/include/c++/7/bits/allocator.h **** 
 136:/usr/include/c++/7/bits/allocator.h ****       template<typename _Tp1>
 137:/usr/include/c++/7/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) throw() { }
 138:/usr/include/c++/7/bits/allocator.h **** 
 139:/usr/include/c++/7/bits/allocator.h ****       ~allocator() throw() { }
 1778              		.loc 10 139 0
 1779              		.cfi_startproc
 1780 0000 55       		pushq	%rbp
 1781              		.cfi_def_cfa_offset 16
 1782              		.cfi_offset 6, -16
 1783 0001 4889E5   		movq	%rsp, %rbp
 1784              		.cfi_def_cfa_register 6
 1785 0004 4883EC10 		subq	$16, %rsp
 1786 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1787              	.LBB11:
 1788              		.loc 10 139 0
 1789 000c 488B45F8 		movq	-8(%rbp), %rax
 1790 0010 4889C7   		movq	%rax, %rdi
 1791 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 1791      00
 1792              	.LBE11:
 1793 0018 90       		nop
 1794 0019 C9       		leave
 1795              		.cfi_def_cfa 7, 8
 1796 001a C3       		ret
 1797              		.cfi_endproc
 1798              	.LFE963:
 1800              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
 1801              		.set	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev,_ZNSaISt4pairIiNSt7
 1802              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 1803              		.align 2
 1804              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13
 1806              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deal
 1807              	.LFB965:
 176:/usr/include/c++/7/bits/stl_vector.h ****       {
 1808              		.loc 5 176 0
 1809              		.cfi_startproc
 1810 0000 55       		pushq	%rbp
 1811              		.cfi_def_cfa_offset 16
 1812              		.cfi_offset 6, -16
 1813 0001 4889E5   		movq	%rsp, %rbp
 1814              		.cfi_def_cfa_register 6
 1815 0004 4883EC20 		subq	$32, %rsp
 1816 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1817 000c 488975F0 		movq	%rsi, -16(%rbp)
 1818 0010 488955E8 		movq	%rdx, -24(%rbp)
 179:/usr/include/c++/7/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1819              		.loc 5 179 0
 1820 0014 48837DF0 		cmpq	$0, -16(%rbp)
 1820      00
 1821 0019 7417     		je	.L88
 180:/usr/include/c++/7/bits/stl_vector.h ****       }
 1822              		.loc 5 180 0
 1823 001b 488B45F8 		movq	-8(%rbp), %rax
 1824 001f 488B55E8 		movq	-24(%rbp), %rdx
 1825 0023 488B4DF0 		movq	-16(%rbp), %rcx
 1826 0027 4889CE   		movq	%rcx, %rsi
 1827 002a 4889C7   		movq	%rax, %rdi
 1828 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 1828      00
 1829              	.L88:
 181:/usr/include/c++/7/bits/stl_vector.h **** 
 1830              		.loc 5 181 0
 1831 0032 90       		nop
 1832 0033 C9       		leave
 1833              		.cfi_def_cfa 7, 8
 1834 0034 C3       		ret
 1835              		.cfi_endproc
 1836              	.LFE965:
 1838              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9
 1839              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
 1841              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:
 1842              	.LFB966:
 127:/usr/include/c++/7/bits/stl_construct.h ****     {
 1843              		.loc 6 127 0
 1844              		.cfi_startproc
 1845 0000 55       		pushq	%rbp
 1846              		.cfi_def_cfa_offset 16
 1847              		.cfi_offset 6, -16
 1848 0001 4889E5   		movq	%rsp, %rbp
 1849              		.cfi_def_cfa_register 6
 1850 0004 4883EC10 		subq	$16, %rsp
 1851 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1852 000c 488975F0 		movq	%rsi, -16(%rbp)
 137:/usr/include/c++/7/bits/stl_construct.h ****     }
 1853              		.loc 6 137 0
 1854 0010 488B55F0 		movq	-16(%rbp), %rdx
 1855 0014 488B45F8 		movq	-8(%rbp), %rax
 1856 0018 4889D6   		movq	%rdx, %rsi
 1857 001b 4889C7   		movq	%rax, %rdi
 1858 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 1858      00
 138:/usr/include/c++/7/bits/stl_construct.h **** 
 1859              		.loc 6 138 0
 1860 0023 90       		nop
 1861 0024 C9       		leave
 1862              		.cfi_def_cfa 7, 8
 1863 0025 C3       		ret
 1864              		.cfi_endproc
 1865              	.LFE966:
 1867              		.section	.text._ZN8UnitTest18DeferredTestResultC2ERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 1868              		.align 2
 1869              		.weak	_ZN8UnitTest18DeferredTestResultC2ERKS0_
 1871              	_ZN8UnitTest18DeferredTestResultC2ERKS0_:
 1872              	.LFB969:
 1873              		.loc 2 10 0
 1874              		.cfi_startproc
 1875              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1876              		.cfi_lsda 0x1b,.LLSDA969
 1877 0000 55       		pushq	%rbp
 1878              		.cfi_def_cfa_offset 16
 1879              		.cfi_offset 6, -16
 1880 0001 4889E5   		movq	%rsp, %rbp
 1881              		.cfi_def_cfa_register 6
 1882 0004 53       		pushq	%rbx
 1883 0005 4883EC18 		subq	$24, %rsp
 1884              		.cfi_offset 3, -24
 1885 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1886 000d 488975E0 		movq	%rsi, -32(%rbp)
 1887              	.LBB12:
 1888              		.loc 2 10 0
 1889 0011 488B45E8 		movq	-24(%rbp), %rax
 1890 0015 488B55E0 		movq	-32(%rbp), %rdx
 1891 0019 4889D6   		movq	%rdx, %rsi
 1892 001c 4889C7   		movq	%rax, %rdi
 1893              	.LEHB32:
 1894 001f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1894      00
 1895              	.LEHE32:
 1896 0024 488B45E8 		movq	-24(%rbp), %rax
 1897 0028 4883C020 		addq	$32, %rax
 1898 002c 488B55E0 		movq	-32(%rbp), %rdx
 1899 0030 4883C220 		addq	$32, %rdx
 1900 0034 4889D6   		movq	%rdx, %rsi
 1901 0037 4889C7   		movq	%rax, %rdi
 1902              	.LEHB33:
 1903 003a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1903      00
 1904              	.LEHE33:
 1905              		.loc 2 10 0 is_stmt 0 discriminator 2
 1906 003f 488B45E8 		movq	-24(%rbp), %rax
 1907 0043 4883C040 		addq	$64, %rax
 1908 0047 488B55E0 		movq	-32(%rbp), %rdx
 1909 004b 4883C240 		addq	$64, %rdx
 1910 004f 4889D6   		movq	%rdx, %rsi
 1911 0052 4889C7   		movq	%rax, %rdi
 1912              	.LEHB34:
 1913 0055 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1913      00
 1914              	.LEHE34:
 1915              		.loc 2 10 0 discriminator 4
 1916 005a 488B45E8 		movq	-24(%rbp), %rax
 1917 005e 4883C060 		addq	$96, %rax
 1918 0062 488B55E0 		movq	-32(%rbp), %rdx
 1919 0066 4883C260 		addq	$96, %rdx
 1920 006a 4889D6   		movq	%rdx, %rsi
 1921 006d 4889C7   		movq	%rax, %rdi
 1922              	.LEHB35:
 1923 0070 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1ERKS9_@P
 1923      00
 1924              	.LEHE35:
 1925              		.loc 2 10 0 discriminator 6
 1926 0075 488B45E0 		movq	-32(%rbp), %rax
 1927 0079 F30F1040 		movss	120(%rax), %xmm0
 1927      78
 1928 007e 488B45E8 		movq	-24(%rbp), %rax
 1929 0082 F30F1140 		movss	%xmm0, 120(%rax)
 1929      78
 1930 0087 488B45E0 		movq	-32(%rbp), %rax
 1931 008b 0FB6507C 		movzbl	124(%rax), %edx
 1932 008f 488B45E8 		movq	-24(%rbp), %rax
 1933 0093 88507C   		movb	%dl, 124(%rax)
 1934              	.LBE12:
 1935 0096 EB44     		jmp	.L97
 1936              	.L96:
 1937 0098 4889C3   		movq	%rax, %rbx
 1938              	.LBB13:
 1939              		.loc 2 10 0
 1940 009b 488B45E8 		movq	-24(%rbp), %rax
 1941 009f 4883C040 		addq	$64, %rax
 1942 00a3 4889C7   		movq	%rax, %rdi
 1943 00a6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1943      00
 1944 00ab EB03     		jmp	.L92
 1945              	.L95:
 1946 00ad 4889C3   		movq	%rax, %rbx
 1947              	.L92:
 1948              		.loc 2 10 0 discriminator 3
 1949 00b0 488B45E8 		movq	-24(%rbp), %rax
 1950 00b4 4883C020 		addq	$32, %rax
 1951 00b8 4889C7   		movq	%rax, %rdi
 1952 00bb E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1952      00
 1953 00c0 EB03     		jmp	.L93
 1954              	.L94:
 1955 00c2 4889C3   		movq	%rax, %rbx
 1956              	.L93:
 1957              		.loc 2 10 0 discriminator 1
 1958 00c5 488B45E8 		movq	-24(%rbp), %rax
 1959 00c9 4889C7   		movq	%rax, %rdi
 1960 00cc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1960      00
 1961 00d1 4889D8   		movq	%rbx, %rax
 1962 00d4 4889C7   		movq	%rax, %rdi
 1963              	.LEHB36:
 1964 00d7 E8000000 		call	_Unwind_Resume@PLT
 1964      00
 1965              	.LEHE36:
 1966              	.L97:
 1967              	.LBE13:
 1968              		.loc 2 10 0
 1969 00dc 4883C418 		addq	$24, %rsp
 1970 00e0 5B       		popq	%rbx
 1971 00e1 5D       		popq	%rbp
 1972              		.cfi_def_cfa 7, 8
 1973 00e2 C3       		ret
 1974              		.cfi_endproc
 1975              	.LFE969:
 1976              		.section	.gcc_except_table
 1977              	.LLSDA969:
 1978 00b4 FF       		.byte	0xff
 1979 00b5 FF       		.byte	0xff
 1980 00b6 01       		.byte	0x1
 1981 00b7 18       		.uleb128 .LLSDACSE969-.LLSDACSB969
 1982              	.LLSDACSB969:
 1983 00b8 1F       		.uleb128 .LEHB32-.LFB969
 1984 00b9 05       		.uleb128 .LEHE32-.LEHB32
 1985 00ba 00       		.uleb128 0
 1986 00bb 00       		.uleb128 0
 1987 00bc 3A       		.uleb128 .LEHB33-.LFB969
 1988 00bd 05       		.uleb128 .LEHE33-.LEHB33
 1989 00be C201     		.uleb128 .L94-.LFB969
 1990 00c0 00       		.uleb128 0
 1991 00c1 55       		.uleb128 .LEHB34-.LFB969
 1992 00c2 05       		.uleb128 .LEHE34-.LEHB34
 1993 00c3 AD01     		.uleb128 .L95-.LFB969
 1994 00c5 00       		.uleb128 0
 1995 00c6 70       		.uleb128 .LEHB35-.LFB969
 1996 00c7 05       		.uleb128 .LEHE35-.LEHB35
 1997 00c8 9801     		.uleb128 .L96-.LFB969
 1998 00ca 00       		.uleb128 0
 1999 00cb D701     		.uleb128 .LEHB36-.LFB969
 2000 00cd 05       		.uleb128 .LEHE36-.LEHB36
 2001 00ce 00       		.uleb128 0
 2002 00cf 00       		.uleb128 0
 2003              	.LLSDACSE969:
 2004              		.section	.text._ZN8UnitTest18DeferredTestResultC2ERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 2006              		.weak	_ZN8UnitTest18DeferredTestResultC1ERKS0_
 2007              		.set	_ZN8UnitTest18DeferredTestResultC1ERKS0_,_ZN8UnitTest18DeferredTestResultC2ERKS0_
 2008              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_,"
 2009              		.align 2
 2010              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_
 2012              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_:
 2013              	.LFB967:
 2014              		.file 11 "/usr/include/c++/7/ext/new_allocator.h"
   1:/usr/include/c++/7/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/7/ext/new_allocator.h **** 
   3:/usr/include/c++/7/ext/new_allocator.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/ext/new_allocator.h **** //
   5:/usr/include/c++/7/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/7/ext/new_allocator.h **** 
  11:/usr/include/c++/7/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/ext/new_allocator.h **** 
  16:/usr/include/c++/7/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/ext/new_allocator.h **** 
  20:/usr/include/c++/7/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/ext/new_allocator.h **** 
  25:/usr/include/c++/7/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/7/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/7/ext/new_allocator.h ****  */
  28:/usr/include/c++/7/ext/new_allocator.h **** 
  29:/usr/include/c++/7/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/7/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/7/ext/new_allocator.h **** 
  32:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/7/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/7/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/7/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/7/ext/new_allocator.h **** #endif
  39:/usr/include/c++/7/ext/new_allocator.h **** 
  40:/usr/include/c++/7/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/7/ext/new_allocator.h **** {
  42:/usr/include/c++/7/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/7/ext/new_allocator.h **** 
  44:/usr/include/c++/7/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/7/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/7/ext/new_allocator.h **** 
  47:/usr/include/c++/7/ext/new_allocator.h ****   /**
  48:/usr/include/c++/7/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/7/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/7/ext/new_allocator.h ****    *
  51:/usr/include/c++/7/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/usr/include/c++/7/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/7/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/7/ext/new_allocator.h ****    *
  55:/usr/include/c++/7/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/7/ext/new_allocator.h ****    */
  57:/usr/include/c++/7/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/7/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/7/ext/new_allocator.h ****     {
  60:/usr/include/c++/7/ext/new_allocator.h ****     public:
  61:/usr/include/c++/7/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/7/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/7/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/7/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/7/ext/new_allocator.h **** 
  69:/usr/include/c++/7/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/7/ext/new_allocator.h **** 	struct rebind
  71:/usr/include/c++/7/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/7/ext/new_allocator.h **** 
  73:/usr/include/c++/7/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/7/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/7/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/7/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/7/ext/new_allocator.h **** #endif
  78:/usr/include/c++/7/ext/new_allocator.h **** 
  79:/usr/include/c++/7/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/7/ext/new_allocator.h **** 
  81:/usr/include/c++/7/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/7/ext/new_allocator.h **** 
  83:/usr/include/c++/7/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/7/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/7/ext/new_allocator.h **** 
  86:/usr/include/c++/7/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/7/ext/new_allocator.h **** 
  88:/usr/include/c++/7/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/7/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/7/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/7/ext/new_allocator.h **** 
  92:/usr/include/c++/7/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/7/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/7/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/7/ext/new_allocator.h **** 
  96:/usr/include/c++/7/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/7/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/7/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/7/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 100:/usr/include/c++/7/ext/new_allocator.h ****       {
 101:/usr/include/c++/7/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/7/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/7/ext/new_allocator.h **** 
 104:/usr/include/c++/7/ext/new_allocator.h **** #if __cpp_aligned_new
 105:/usr/include/c++/7/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 106:/usr/include/c++/7/ext/new_allocator.h **** 	  {
 107:/usr/include/c++/7/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 108:/usr/include/c++/7/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 109:/usr/include/c++/7/ext/new_allocator.h **** 	  }
 110:/usr/include/c++/7/ext/new_allocator.h **** #endif
 111:/usr/include/c++/7/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 112:/usr/include/c++/7/ext/new_allocator.h ****       }
 113:/usr/include/c++/7/ext/new_allocator.h **** 
 114:/usr/include/c++/7/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 115:/usr/include/c++/7/ext/new_allocator.h ****       void
 116:/usr/include/c++/7/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 117:/usr/include/c++/7/ext/new_allocator.h ****       {
 118:/usr/include/c++/7/ext/new_allocator.h **** #if __cpp_aligned_new
 119:/usr/include/c++/7/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 120:/usr/include/c++/7/ext/new_allocator.h **** 	  {
 121:/usr/include/c++/7/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 122:/usr/include/c++/7/ext/new_allocator.h **** 	    return;
 123:/usr/include/c++/7/ext/new_allocator.h **** 	  }
 124:/usr/include/c++/7/ext/new_allocator.h **** #endif
 125:/usr/include/c++/7/ext/new_allocator.h **** 	::operator delete(__p);
 126:/usr/include/c++/7/ext/new_allocator.h ****       }
 127:/usr/include/c++/7/ext/new_allocator.h **** 
 128:/usr/include/c++/7/ext/new_allocator.h ****       size_type
 129:/usr/include/c++/7/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 130:/usr/include/c++/7/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 131:/usr/include/c++/7/ext/new_allocator.h **** 
 132:/usr/include/c++/7/ext/new_allocator.h **** #if __cplusplus >= 201103L
 133:/usr/include/c++/7/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 134:/usr/include/c++/7/ext/new_allocator.h **** 	void
 135:/usr/include/c++/7/ext/new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 136:/usr/include/c++/7/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 137:/usr/include/c++/7/ext/new_allocator.h **** 
 138:/usr/include/c++/7/ext/new_allocator.h ****       template<typename _Up>
 139:/usr/include/c++/7/ext/new_allocator.h **** 	void
 140:/usr/include/c++/7/ext/new_allocator.h **** 	destroy(_Up* __p) { __p->~_Up(); }
 141:/usr/include/c++/7/ext/new_allocator.h **** #else
 142:/usr/include/c++/7/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 143:/usr/include/c++/7/ext/new_allocator.h ****       // 402. wrong new expression in [some_] allocator::construct
 144:/usr/include/c++/7/ext/new_allocator.h ****       void
 145:/usr/include/c++/7/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val)
 2015              		.loc 11 145 0 is_stmt 1
 2016              		.cfi_startproc
 2017              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2018              		.cfi_lsda 0x1b,.LLSDA967
 2019 0000 55       		pushq	%rbp
 2020              		.cfi_def_cfa_offset 16
 2021              		.cfi_offset 6, -16
 2022 0001 4889E5   		movq	%rsp, %rbp
 2023              		.cfi_def_cfa_register 6
 2024 0004 4155     		pushq	%r13
 2025 0006 4154     		pushq	%r12
 2026 0008 53       		pushq	%rbx
 2027 0009 4883EC28 		subq	$40, %rsp
 2028              		.cfi_offset 13, -24
 2029              		.cfi_offset 12, -32
 2030              		.cfi_offset 3, -40
 2031 000d 48897DD8 		movq	%rdi, -40(%rbp)
 2032 0011 488975D0 		movq	%rsi, -48(%rbp)
 2033 0015 488955C8 		movq	%rdx, -56(%rbp)
 146:/usr/include/c++/7/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 2034              		.loc 11 146 0
 2035 0019 4C8B65D0 		movq	-48(%rbp), %r12
 2036 001d 4C89E6   		movq	%r12, %rsi
 2037 0020 BF800000 		movl	$128, %edi
 2037      00
 2038 0025 E8000000 		call	_ZnwmPv@PLT
 2038      00
 2039 002a 4889C3   		movq	%rax, %rbx
 2040 002d 4885DB   		testq	%rbx, %rbx
 2041 0030 742A     		je	.L103
 2042              		.loc 11 146 0 is_stmt 0 discriminator 1
 2043 0032 488B45C8 		movq	-56(%rbp), %rax
 2044 0036 4889C6   		movq	%rax, %rsi
 2045 0039 4889DF   		movq	%rbx, %rdi
 2046              	.LEHB37:
 2047 003c E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 2047      00
 2048              	.LEHE37:
 2049              		.loc 11 146 0
 2050 0041 EB19     		jmp	.L103
 2051              	.L102:
 2052 0043 4989C5   		movq	%rax, %r13
 2053 0046 4C89E6   		movq	%r12, %rsi
 2054 0049 4889DF   		movq	%rbx, %rdi
 2055 004c E8000000 		call	_ZdlPvS_@PLT
 2055      00
 2056 0051 4C89E8   		movq	%r13, %rax
 2057 0054 4889C7   		movq	%rax, %rdi
 2058              	.LEHB38:
 2059 0057 E8000000 		call	_Unwind_Resume@PLT
 2059      00
 2060              	.LEHE38:
 2061              	.L103:
 2062 005c 90       		nop
 2063 005d 4883C428 		addq	$40, %rsp
 2064 0061 5B       		popq	%rbx
 2065 0062 415C     		popq	%r12
 2066 0064 415D     		popq	%r13
 2067 0066 5D       		popq	%rbp
 2068              		.cfi_def_cfa 7, 8
 2069 0067 C3       		ret
 2070              		.cfi_endproc
 2071              	.LFE967:
 2072              		.section	.gcc_except_table
 2073              	.LLSDA967:
 2074 00d0 FF       		.byte	0xff
 2075 00d1 FF       		.byte	0xff
 2076 00d2 01       		.byte	0x1
 2077 00d3 08       		.uleb128 .LLSDACSE967-.LLSDACSB967
 2078              	.LLSDACSB967:
 2079 00d4 3C       		.uleb128 .LEHB37-.LFB967
 2080 00d5 05       		.uleb128 .LEHE37-.LEHB37
 2081 00d6 43       		.uleb128 .L102-.LFB967
 2082 00d7 00       		.uleb128 0
 2083 00d8 57       		.uleb128 .LEHB38-.LFB967
 2084 00d9 05       		.uleb128 .LEHE38-.LEHB38
 2085 00da 00       		.uleb128 0
 2086 00db 00       		.uleb128 0
 2087              	.LLSDACSE967:
 2088              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_,"
 2090              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc,"axG",@pro
 2091              		.align 2
 2092              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc
 2094              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc:
 2095              	.LFB971:
 950:/usr/include/c++/7/bits/stl_vector.h **** 
 951:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 952:/usr/include/c++/7/bits/stl_vector.h ****       void
 953:/usr/include/c++/7/bits/stl_vector.h ****       push_back(value_type&& __x)
 954:/usr/include/c++/7/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
 955:/usr/include/c++/7/bits/stl_vector.h **** 
 956:/usr/include/c++/7/bits/stl_vector.h ****       template<typename... _Args>
 957:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus > 201402L
 958:/usr/include/c++/7/bits/stl_vector.h **** 	reference
 959:/usr/include/c++/7/bits/stl_vector.h **** #else
 960:/usr/include/c++/7/bits/stl_vector.h **** 	void
 961:/usr/include/c++/7/bits/stl_vector.h **** #endif
 962:/usr/include/c++/7/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
 963:/usr/include/c++/7/bits/stl_vector.h **** #endif
 964:/usr/include/c++/7/bits/stl_vector.h **** 
 965:/usr/include/c++/7/bits/stl_vector.h ****       /**
 966:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Removes last element.
 967:/usr/include/c++/7/bits/stl_vector.h ****        *
 968:/usr/include/c++/7/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 969:/usr/include/c++/7/bits/stl_vector.h ****        *
 970:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
 971:/usr/include/c++/7/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 972:/usr/include/c++/7/bits/stl_vector.h ****        *  called.
 973:/usr/include/c++/7/bits/stl_vector.h ****        */
 974:/usr/include/c++/7/bits/stl_vector.h ****       void
 975:/usr/include/c++/7/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
 976:/usr/include/c++/7/bits/stl_vector.h ****       {
 977:/usr/include/c++/7/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
 978:/usr/include/c++/7/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
 979:/usr/include/c++/7/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 980:/usr/include/c++/7/bits/stl_vector.h ****       }
 981:/usr/include/c++/7/bits/stl_vector.h **** 
 982:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
 983:/usr/include/c++/7/bits/stl_vector.h ****       /**
 984:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 985:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 986:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __args  Arguments.
 987:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 988:/usr/include/c++/7/bits/stl_vector.h ****        *
 989:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
 990:/usr/include/c++/7/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 991:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 992:/usr/include/c++/7/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
 993:/usr/include/c++/7/bits/stl_vector.h ****        *  std::list.
 994:/usr/include/c++/7/bits/stl_vector.h ****        */
 995:/usr/include/c++/7/bits/stl_vector.h ****       template<typename... _Args>
 996:/usr/include/c++/7/bits/stl_vector.h **** 	iterator
 997:/usr/include/c++/7/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
 998:/usr/include/c++/7/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
 999:/usr/include/c++/7/bits/stl_vector.h **** 
1000:/usr/include/c++/7/bits/stl_vector.h ****       /**
1001:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1002:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1003:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1004:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1005:/usr/include/c++/7/bits/stl_vector.h ****        *
1006:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1007:/usr/include/c++/7/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1008:/usr/include/c++/7/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1009:/usr/include/c++/7/bits/stl_vector.h ****        *  used the user should consider using std::list.
1010:/usr/include/c++/7/bits/stl_vector.h ****        */
1011:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1012:/usr/include/c++/7/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1013:/usr/include/c++/7/bits/stl_vector.h **** #else
1014:/usr/include/c++/7/bits/stl_vector.h ****       /**
1015:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1016:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1017:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1018:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1019:/usr/include/c++/7/bits/stl_vector.h ****        *
1020:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1021:/usr/include/c++/7/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1022:/usr/include/c++/7/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1023:/usr/include/c++/7/bits/stl_vector.h ****        *  used the user should consider using std::list.
1024:/usr/include/c++/7/bits/stl_vector.h ****        */
1025:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1026:/usr/include/c++/7/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1027:/usr/include/c++/7/bits/stl_vector.h **** #endif
1028:/usr/include/c++/7/bits/stl_vector.h **** 
1029:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1030:/usr/include/c++/7/bits/stl_vector.h ****       /**
1031:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1032:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1033:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1034:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1035:/usr/include/c++/7/bits/stl_vector.h ****        *
1036:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1037:/usr/include/c++/7/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1038:/usr/include/c++/7/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1039:/usr/include/c++/7/bits/stl_vector.h ****        *  used the user should consider using std::list.
1040:/usr/include/c++/7/bits/stl_vector.h ****        */
1041:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1042:/usr/include/c++/7/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1043:/usr/include/c++/7/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1044:/usr/include/c++/7/bits/stl_vector.h **** 
1045:/usr/include/c++/7/bits/stl_vector.h ****       /**
1046:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1047:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1048:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1049:/usr/include/c++/7/bits/stl_vector.h ****        *
1050:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1051:/usr/include/c++/7/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1052:/usr/include/c++/7/bits/stl_vector.h ****        *  specified by @a position.
1053:/usr/include/c++/7/bits/stl_vector.h ****        *
1054:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1055:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1056:/usr/include/c++/7/bits/stl_vector.h ****        *  consider using std::list.
1057:/usr/include/c++/7/bits/stl_vector.h ****        */
1058:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1059:/usr/include/c++/7/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1060:/usr/include/c++/7/bits/stl_vector.h ****       {
1061:/usr/include/c++/7/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1062:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1063:/usr/include/c++/7/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1064:/usr/include/c++/7/bits/stl_vector.h **** 	return begin() + __offset;
1065:/usr/include/c++/7/bits/stl_vector.h ****       }
1066:/usr/include/c++/7/bits/stl_vector.h **** #endif
1067:/usr/include/c++/7/bits/stl_vector.h **** 
1068:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1069:/usr/include/c++/7/bits/stl_vector.h ****       /**
1070:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1071:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1072:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1073:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1074:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1075:/usr/include/c++/7/bits/stl_vector.h ****        *
1076:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1077:/usr/include/c++/7/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1078:/usr/include/c++/7/bits/stl_vector.h ****        *
1079:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1080:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1081:/usr/include/c++/7/bits/stl_vector.h ****        *  consider using std::list.
1082:/usr/include/c++/7/bits/stl_vector.h ****        */
1083:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1084:/usr/include/c++/7/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1085:/usr/include/c++/7/bits/stl_vector.h ****       {
1086:/usr/include/c++/7/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1087:/usr/include/c++/7/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1088:/usr/include/c++/7/bits/stl_vector.h **** 	return begin() + __offset;
1089:/usr/include/c++/7/bits/stl_vector.h ****       }
1090:/usr/include/c++/7/bits/stl_vector.h **** #else
1091:/usr/include/c++/7/bits/stl_vector.h ****       /**
1092:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1093:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1094:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1095:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1096:/usr/include/c++/7/bits/stl_vector.h ****        *
1097:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1098:/usr/include/c++/7/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1099:/usr/include/c++/7/bits/stl_vector.h ****        *
1100:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1101:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1102:/usr/include/c++/7/bits/stl_vector.h ****        *  consider using std::list.
1103:/usr/include/c++/7/bits/stl_vector.h ****        */
1104:/usr/include/c++/7/bits/stl_vector.h ****       void
1105:/usr/include/c++/7/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1106:/usr/include/c++/7/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1107:/usr/include/c++/7/bits/stl_vector.h **** #endif
1108:/usr/include/c++/7/bits/stl_vector.h **** 
1109:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1110:/usr/include/c++/7/bits/stl_vector.h ****       /**
1111:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1112:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1113:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1114:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1115:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1116:/usr/include/c++/7/bits/stl_vector.h ****        *
1117:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1118:/usr/include/c++/7/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1119:/usr/include/c++/7/bits/stl_vector.h ****        *  by @a pos.
1120:/usr/include/c++/7/bits/stl_vector.h ****        *
1121:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1122:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1123:/usr/include/c++/7/bits/stl_vector.h ****        *  consider using std::list.
1124:/usr/include/c++/7/bits/stl_vector.h ****        */
1125:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator,
1126:/usr/include/c++/7/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1127:/usr/include/c++/7/bits/stl_vector.h **** 	iterator
1128:/usr/include/c++/7/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1129:/usr/include/c++/7/bits/stl_vector.h **** 	       _InputIterator __last)
1130:/usr/include/c++/7/bits/stl_vector.h **** 	{
1131:/usr/include/c++/7/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1132:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1133:/usr/include/c++/7/bits/stl_vector.h **** 			     __first, __last, __false_type());
1134:/usr/include/c++/7/bits/stl_vector.h **** 	  return begin() + __offset;
1135:/usr/include/c++/7/bits/stl_vector.h **** 	}
1136:/usr/include/c++/7/bits/stl_vector.h **** #else
1137:/usr/include/c++/7/bits/stl_vector.h ****       /**
1138:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1139:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1140:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1141:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1142:/usr/include/c++/7/bits/stl_vector.h ****        *
1143:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1144:/usr/include/c++/7/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1145:/usr/include/c++/7/bits/stl_vector.h ****        *  by @a pos.
1146:/usr/include/c++/7/bits/stl_vector.h ****        *
1147:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1148:/usr/include/c++/7/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1149:/usr/include/c++/7/bits/stl_vector.h ****        *  consider using std::list.
1150:/usr/include/c++/7/bits/stl_vector.h ****        */
1151:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
1152:/usr/include/c++/7/bits/stl_vector.h **** 	void
1153:/usr/include/c++/7/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1154:/usr/include/c++/7/bits/stl_vector.h **** 	       _InputIterator __last)
1155:/usr/include/c++/7/bits/stl_vector.h **** 	{
1156:/usr/include/c++/7/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1157:/usr/include/c++/7/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1158:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1159:/usr/include/c++/7/bits/stl_vector.h **** 	}
1160:/usr/include/c++/7/bits/stl_vector.h **** #endif
1161:/usr/include/c++/7/bits/stl_vector.h **** 
1162:/usr/include/c++/7/bits/stl_vector.h ****       /**
1163:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1164:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1165:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1166:/usr/include/c++/7/bits/stl_vector.h ****        *
1167:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1168:/usr/include/c++/7/bits/stl_vector.h ****        *  shorten the %vector by one.
1169:/usr/include/c++/7/bits/stl_vector.h ****        *
1170:/usr/include/c++/7/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1171:/usr/include/c++/7/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1172:/usr/include/c++/7/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1173:/usr/include/c++/7/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1174:/usr/include/c++/7/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1175:/usr/include/c++/7/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1176:/usr/include/c++/7/bits/stl_vector.h ****        */
1177:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1178:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1179:/usr/include/c++/7/bits/stl_vector.h ****       erase(const_iterator __position)
1180:/usr/include/c++/7/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1181:/usr/include/c++/7/bits/stl_vector.h **** #else
1182:/usr/include/c++/7/bits/stl_vector.h ****       erase(iterator __position)
1183:/usr/include/c++/7/bits/stl_vector.h ****       { return _M_erase(__position); }
1184:/usr/include/c++/7/bits/stl_vector.h **** #endif
1185:/usr/include/c++/7/bits/stl_vector.h **** 
1186:/usr/include/c++/7/bits/stl_vector.h ****       /**
1187:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1188:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1189:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1190:/usr/include/c++/7/bits/stl_vector.h ****        *                  erased.
1191:/usr/include/c++/7/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1192:/usr/include/c++/7/bits/stl_vector.h ****        *           prior to erasing (or end()).
1193:/usr/include/c++/7/bits/stl_vector.h ****        *
1194:/usr/include/c++/7/bits/stl_vector.h ****        *  This function will erase the elements in the range
1195:/usr/include/c++/7/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1196:/usr/include/c++/7/bits/stl_vector.h ****        *
1197:/usr/include/c++/7/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1198:/usr/include/c++/7/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1199:/usr/include/c++/7/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1200:/usr/include/c++/7/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1201:/usr/include/c++/7/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1202:/usr/include/c++/7/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1203:/usr/include/c++/7/bits/stl_vector.h ****        */
1204:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1205:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1206:/usr/include/c++/7/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1207:/usr/include/c++/7/bits/stl_vector.h ****       {
1208:/usr/include/c++/7/bits/stl_vector.h **** 	const auto __beg = begin();
1209:/usr/include/c++/7/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1210:/usr/include/c++/7/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1211:/usr/include/c++/7/bits/stl_vector.h ****       }
1212:/usr/include/c++/7/bits/stl_vector.h **** #else
1213:/usr/include/c++/7/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1214:/usr/include/c++/7/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1215:/usr/include/c++/7/bits/stl_vector.h **** #endif
1216:/usr/include/c++/7/bits/stl_vector.h **** 
1217:/usr/include/c++/7/bits/stl_vector.h ****       /**
1218:/usr/include/c++/7/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1219:/usr/include/c++/7/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1220:/usr/include/c++/7/bits/stl_vector.h ****        *
1221:/usr/include/c++/7/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1222:/usr/include/c++/7/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1223:/usr/include/c++/7/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1224:/usr/include/c++/7/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1225:/usr/include/c++/7/bits/stl_vector.h ****        *
1226:/usr/include/c++/7/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1227:/usr/include/c++/7/bits/stl_vector.h ****        */
1228:/usr/include/c++/7/bits/stl_vector.h ****       void
1229:/usr/include/c++/7/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1230:/usr/include/c++/7/bits/stl_vector.h ****       {
1231:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1232:/usr/include/c++/7/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1233:/usr/include/c++/7/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1234:/usr/include/c++/7/bits/stl_vector.h **** #endif
1235:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1236:/usr/include/c++/7/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1237:/usr/include/c++/7/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1238:/usr/include/c++/7/bits/stl_vector.h ****       }
1239:/usr/include/c++/7/bits/stl_vector.h **** 
1240:/usr/include/c++/7/bits/stl_vector.h ****       /**
1241:/usr/include/c++/7/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1242:/usr/include/c++/7/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1243:/usr/include/c++/7/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1244:/usr/include/c++/7/bits/stl_vector.h ****        *  the user's responsibility.
1245:/usr/include/c++/7/bits/stl_vector.h ****        */
1246:/usr/include/c++/7/bits/stl_vector.h ****       void
1247:/usr/include/c++/7/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1248:/usr/include/c++/7/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1249:/usr/include/c++/7/bits/stl_vector.h **** 
1250:/usr/include/c++/7/bits/stl_vector.h ****     protected:
1251:/usr/include/c++/7/bits/stl_vector.h ****       /**
1252:/usr/include/c++/7/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1253:/usr/include/c++/7/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1254:/usr/include/c++/7/bits/stl_vector.h ****        */
1255:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _ForwardIterator>
1256:/usr/include/c++/7/bits/stl_vector.h **** 	pointer
1257:/usr/include/c++/7/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1258:/usr/include/c++/7/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1259:/usr/include/c++/7/bits/stl_vector.h **** 	{
1260:/usr/include/c++/7/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1261:/usr/include/c++/7/bits/stl_vector.h **** 	  __try
1262:/usr/include/c++/7/bits/stl_vector.h **** 	    {
1263:/usr/include/c++/7/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1264:/usr/include/c++/7/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1265:/usr/include/c++/7/bits/stl_vector.h **** 	      return __result;
1266:/usr/include/c++/7/bits/stl_vector.h **** 	    }
1267:/usr/include/c++/7/bits/stl_vector.h **** 	  __catch(...)
1268:/usr/include/c++/7/bits/stl_vector.h **** 	    {
1269:/usr/include/c++/7/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1270:/usr/include/c++/7/bits/stl_vector.h **** 	      __throw_exception_again;
1271:/usr/include/c++/7/bits/stl_vector.h **** 	    }
1272:/usr/include/c++/7/bits/stl_vector.h **** 	}
1273:/usr/include/c++/7/bits/stl_vector.h **** 
1274:/usr/include/c++/7/bits/stl_vector.h **** 
1275:/usr/include/c++/7/bits/stl_vector.h ****       // Internal constructor functions follow.
1276:/usr/include/c++/7/bits/stl_vector.h **** 
1277:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1278:/usr/include/c++/7/bits/stl_vector.h **** 
1279:/usr/include/c++/7/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1280:/usr/include/c++/7/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1281:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _Integer>
1282:/usr/include/c++/7/bits/stl_vector.h **** 	void
1283:/usr/include/c++/7/bits/stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1284:/usr/include/c++/7/bits/stl_vector.h **** 	{
1285:/usr/include/c++/7/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
1286:/usr/include/c++/7/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1287:/usr/include/c++/7/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1288:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1289:/usr/include/c++/7/bits/stl_vector.h **** 	}
1290:/usr/include/c++/7/bits/stl_vector.h **** 
1291:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1292:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
1293:/usr/include/c++/7/bits/stl_vector.h **** 	void
1294:/usr/include/c++/7/bits/stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1295:/usr/include/c++/7/bits/stl_vector.h **** 			       __false_type)
1296:/usr/include/c++/7/bits/stl_vector.h **** 	{
1297:/usr/include/c++/7/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1298:/usr/include/c++/7/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1299:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1300:/usr/include/c++/7/bits/stl_vector.h **** 	}
1301:/usr/include/c++/7/bits/stl_vector.h **** 
1302:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1303:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
1304:/usr/include/c++/7/bits/stl_vector.h **** 	void
1305:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_initialize(_InputIterator __first,
1306:/usr/include/c++/7/bits/stl_vector.h **** 			    _InputIterator __last, std::input_iterator_tag)
1307:/usr/include/c++/7/bits/stl_vector.h **** 	{
1308:/usr/include/c++/7/bits/stl_vector.h **** 	  for (; __first != __last; ++__first)
1309:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1310:/usr/include/c++/7/bits/stl_vector.h **** 	    emplace_back(*__first);
1311:/usr/include/c++/7/bits/stl_vector.h **** #else
1312:/usr/include/c++/7/bits/stl_vector.h **** 	    push_back(*__first);
1313:/usr/include/c++/7/bits/stl_vector.h **** #endif
1314:/usr/include/c++/7/bits/stl_vector.h **** 	}
1315:/usr/include/c++/7/bits/stl_vector.h **** 
1316:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1317:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _ForwardIterator>
1318:/usr/include/c++/7/bits/stl_vector.h **** 	void
1319:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first,
1320:/usr/include/c++/7/bits/stl_vector.h **** 			    _ForwardIterator __last, std::forward_iterator_tag)
1321:/usr/include/c++/7/bits/stl_vector.h **** 	{
1322:/usr/include/c++/7/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1323:/usr/include/c++/7/bits/stl_vector.h **** 	  this->_M_impl._M_start = this->_M_allocate(__n);
1324:/usr/include/c++/7/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1325:/usr/include/c++/7/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1326:/usr/include/c++/7/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1327:/usr/include/c++/7/bits/stl_vector.h **** 					this->_M_impl._M_start,
1328:/usr/include/c++/7/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1329:/usr/include/c++/7/bits/stl_vector.h **** 	}
1330:/usr/include/c++/7/bits/stl_vector.h **** 
1331:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1332:/usr/include/c++/7/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1333:/usr/include/c++/7/bits/stl_vector.h ****       void
1334:/usr/include/c++/7/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1335:/usr/include/c++/7/bits/stl_vector.h ****       {
1336:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1337:/usr/include/c++/7/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1338:/usr/include/c++/7/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1339:/usr/include/c++/7/bits/stl_vector.h ****       }
1340:/usr/include/c++/7/bits/stl_vector.h **** 
1341:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1342:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1343:/usr/include/c++/7/bits/stl_vector.h ****       void
1344:/usr/include/c++/7/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1345:/usr/include/c++/7/bits/stl_vector.h ****       {
1346:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1347:/usr/include/c++/7/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1348:/usr/include/c++/7/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1349:/usr/include/c++/7/bits/stl_vector.h ****       }
1350:/usr/include/c++/7/bits/stl_vector.h **** #endif
1351:/usr/include/c++/7/bits/stl_vector.h **** 
1352:/usr/include/c++/7/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1353:/usr/include/c++/7/bits/stl_vector.h ****       // assignment work for the range versions.
1354:/usr/include/c++/7/bits/stl_vector.h **** 
1355:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1356:/usr/include/c++/7/bits/stl_vector.h **** 
1357:/usr/include/c++/7/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1358:/usr/include/c++/7/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1359:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _Integer>
1360:/usr/include/c++/7/bits/stl_vector.h **** 	void
1361:/usr/include/c++/7/bits/stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1362:/usr/include/c++/7/bits/stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1363:/usr/include/c++/7/bits/stl_vector.h **** 
1364:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1365:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
1366:/usr/include/c++/7/bits/stl_vector.h **** 	void
1367:/usr/include/c++/7/bits/stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1368:/usr/include/c++/7/bits/stl_vector.h **** 			   __false_type)
1369:/usr/include/c++/7/bits/stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1370:/usr/include/c++/7/bits/stl_vector.h **** 
1371:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1372:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
1373:/usr/include/c++/7/bits/stl_vector.h **** 	void
1374:/usr/include/c++/7/bits/stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1375:/usr/include/c++/7/bits/stl_vector.h **** 		      std::input_iterator_tag);
1376:/usr/include/c++/7/bits/stl_vector.h **** 
1377:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1378:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _ForwardIterator>
1379:/usr/include/c++/7/bits/stl_vector.h **** 	void
1380:/usr/include/c++/7/bits/stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1381:/usr/include/c++/7/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1382:/usr/include/c++/7/bits/stl_vector.h **** 
1383:/usr/include/c++/7/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1384:/usr/include/c++/7/bits/stl_vector.h ****       // to be the same thing.
1385:/usr/include/c++/7/bits/stl_vector.h ****       void
1386:/usr/include/c++/7/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1387:/usr/include/c++/7/bits/stl_vector.h **** 
1388:/usr/include/c++/7/bits/stl_vector.h ****       // Internal insert functions follow.
1389:/usr/include/c++/7/bits/stl_vector.h **** 
1390:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1391:/usr/include/c++/7/bits/stl_vector.h **** 
1392:/usr/include/c++/7/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1393:/usr/include/c++/7/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1394:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _Integer>
1395:/usr/include/c++/7/bits/stl_vector.h **** 	void
1396:/usr/include/c++/7/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1397:/usr/include/c++/7/bits/stl_vector.h **** 			   __true_type)
1398:/usr/include/c++/7/bits/stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1399:/usr/include/c++/7/bits/stl_vector.h **** 
1400:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1401:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
1402:/usr/include/c++/7/bits/stl_vector.h **** 	void
1403:/usr/include/c++/7/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1404:/usr/include/c++/7/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1405:/usr/include/c++/7/bits/stl_vector.h **** 	{
1406:/usr/include/c++/7/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1407:/usr/include/c++/7/bits/stl_vector.h **** 			  std::__iterator_category(__first));
1408:/usr/include/c++/7/bits/stl_vector.h **** 	}
1409:/usr/include/c++/7/bits/stl_vector.h **** 
1410:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1411:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _InputIterator>
1412:/usr/include/c++/7/bits/stl_vector.h **** 	void
1413:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1414:/usr/include/c++/7/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1415:/usr/include/c++/7/bits/stl_vector.h **** 
1416:/usr/include/c++/7/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1417:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _ForwardIterator>
1418:/usr/include/c++/7/bits/stl_vector.h **** 	void
1419:/usr/include/c++/7/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1420:/usr/include/c++/7/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1421:/usr/include/c++/7/bits/stl_vector.h **** 
1422:/usr/include/c++/7/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1423:/usr/include/c++/7/bits/stl_vector.h ****       // the same thing.
1424:/usr/include/c++/7/bits/stl_vector.h ****       void
1425:/usr/include/c++/7/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1426:/usr/include/c++/7/bits/stl_vector.h **** 
1427:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus >= 201103L
1428:/usr/include/c++/7/bits/stl_vector.h ****       // Called by resize(n).
1429:/usr/include/c++/7/bits/stl_vector.h ****       void
1430:/usr/include/c++/7/bits/stl_vector.h ****       _M_default_append(size_type __n);
1431:/usr/include/c++/7/bits/stl_vector.h **** 
1432:/usr/include/c++/7/bits/stl_vector.h ****       bool
1433:/usr/include/c++/7/bits/stl_vector.h ****       _M_shrink_to_fit();
1434:/usr/include/c++/7/bits/stl_vector.h **** #endif
1435:/usr/include/c++/7/bits/stl_vector.h **** 
1436:/usr/include/c++/7/bits/stl_vector.h **** #if __cplusplus < 201103L
1437:/usr/include/c++/7/bits/stl_vector.h ****       // Called by insert(p,x)
1438:/usr/include/c++/7/bits/stl_vector.h ****       void
1439:/usr/include/c++/7/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1440:/usr/include/c++/7/bits/stl_vector.h **** 
1441:/usr/include/c++/7/bits/stl_vector.h ****       void
1442:/usr/include/c++/7/bits/stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1443:/usr/include/c++/7/bits/stl_vector.h **** #else
1444:/usr/include/c++/7/bits/stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1445:/usr/include/c++/7/bits/stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1446:/usr/include/c++/7/bits/stl_vector.h ****       struct _Temporary_value
1447:/usr/include/c++/7/bits/stl_vector.h ****       {
1448:/usr/include/c++/7/bits/stl_vector.h **** 	template<typename... _Args>
1449:/usr/include/c++/7/bits/stl_vector.h **** 	  explicit
1450:/usr/include/c++/7/bits/stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1451:/usr/include/c++/7/bits/stl_vector.h **** 	  {
1452:/usr/include/c++/7/bits/stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1453:/usr/include/c++/7/bits/stl_vector.h **** 				     std::forward<_Args>(__args)...);
1454:/usr/include/c++/7/bits/stl_vector.h **** 	  }
1455:/usr/include/c++/7/bits/stl_vector.h **** 
1456:/usr/include/c++/7/bits/stl_vector.h **** 	~_Temporary_value()
1457:/usr/include/c++/7/bits/stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1458:/usr/include/c++/7/bits/stl_vector.h **** 
1459:/usr/include/c++/7/bits/stl_vector.h **** 	value_type&
1460:/usr/include/c++/7/bits/stl_vector.h **** 	_M_val() { return *reinterpret_cast<_Tp*>(&__buf); }
1461:/usr/include/c++/7/bits/stl_vector.h **** 
1462:/usr/include/c++/7/bits/stl_vector.h ****       private:
1463:/usr/include/c++/7/bits/stl_vector.h **** 	pointer
1464:/usr/include/c++/7/bits/stl_vector.h **** 	_M_ptr() { return pointer_traits<pointer>::pointer_to(_M_val()); }
1465:/usr/include/c++/7/bits/stl_vector.h **** 
1466:/usr/include/c++/7/bits/stl_vector.h **** 	vector* _M_this;
1467:/usr/include/c++/7/bits/stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1468:/usr/include/c++/7/bits/stl_vector.h ****       };
1469:/usr/include/c++/7/bits/stl_vector.h **** 
1470:/usr/include/c++/7/bits/stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1471:/usr/include/c++/7/bits/stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1472:/usr/include/c++/7/bits/stl_vector.h ****       template<typename _Arg>
1473:/usr/include/c++/7/bits/stl_vector.h **** 	void
1474:/usr/include/c++/7/bits/stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1475:/usr/include/c++/7/bits/stl_vector.h **** 
1476:/usr/include/c++/7/bits/stl_vector.h ****       template<typename... _Args>
1477:/usr/include/c++/7/bits/stl_vector.h **** 	void
1478:/usr/include/c++/7/bits/stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1479:/usr/include/c++/7/bits/stl_vector.h **** 
1480:/usr/include/c++/7/bits/stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1481:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1482:/usr/include/c++/7/bits/stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1483:/usr/include/c++/7/bits/stl_vector.h **** 
1484:/usr/include/c++/7/bits/stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1485:/usr/include/c++/7/bits/stl_vector.h ****       template<typename... _Args>
1486:/usr/include/c++/7/bits/stl_vector.h **** 	iterator
1487:/usr/include/c++/7/bits/stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1488:/usr/include/c++/7/bits/stl_vector.h **** 
1489:/usr/include/c++/7/bits/stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1490:/usr/include/c++/7/bits/stl_vector.h ****       iterator
1491:/usr/include/c++/7/bits/stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1492:/usr/include/c++/7/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1493:/usr/include/c++/7/bits/stl_vector.h **** #endif
1494:/usr/include/c++/7/bits/stl_vector.h **** 
1495:/usr/include/c++/7/bits/stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1496:/usr/include/c++/7/bits/stl_vector.h ****       size_type
1497:/usr/include/c++/7/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 2096              		.loc 5 1497 0 is_stmt 1
 2097              		.cfi_startproc
 2098 0000 55       		pushq	%rbp
 2099              		.cfi_def_cfa_offset 16
 2100              		.cfi_offset 6, -16
 2101 0001 4889E5   		movq	%rsp, %rbp
 2102              		.cfi_def_cfa_register 6
 2103 0004 53       		pushq	%rbx
 2104 0005 4883EC48 		subq	$72, %rsp
 2105              		.cfi_offset 3, -24
 2106 0009 48897DC8 		movq	%rdi, -56(%rbp)
 2107 000d 488975C0 		movq	%rsi, -64(%rbp)
 2108 0011 488955B8 		movq	%rdx, -72(%rbp)
 2109              		.loc 5 1497 0
 2110 0015 64488B04 		movq	%fs:40, %rax
 2110      25280000 
 2110      00
 2111 001e 488945E8 		movq	%rax, -24(%rbp)
 2112 0022 31C0     		xorl	%eax, %eax
1498:/usr/include/c++/7/bits/stl_vector.h ****       {
1499:/usr/include/c++/7/bits/stl_vector.h **** 	if (max_size() - size() < __n)
 2113              		.loc 5 1499 0
 2114 0024 488B45C8 		movq	-56(%rbp), %rax
 2115 0028 4889C7   		movq	%rax, %rdi
 2116 002b E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2116      00
 2117 0030 4889C3   		movq	%rax, %rbx
 2118 0033 488B45C8 		movq	-56(%rbp), %rax
 2119 0037 4889C7   		movq	%rax, %rdi
 2120 003a E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2120      00
 2121 003f 4829C3   		subq	%rax, %rbx
 2122 0042 4889DA   		movq	%rbx, %rdx
 2123 0045 488B45C0 		movq	-64(%rbp), %rax
 2124 0049 4839C2   		cmpq	%rax, %rdx
 2125 004c 0F92C0   		setb	%al
 2126 004f 84C0     		testb	%al, %al
 2127 0051 740C     		je	.L105
1500:/usr/include/c++/7/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2128              		.loc 5 1500 0
 2129 0053 488B45B8 		movq	-72(%rbp), %rax
 2130 0057 4889C7   		movq	%rax, %rdi
 2131 005a E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 2131      00
 2132              	.L105:
1501:/usr/include/c++/7/bits/stl_vector.h **** 
1502:/usr/include/c++/7/bits/stl_vector.h **** 	const size_type __len = size() + std::max(size(), __n);
 2133              		.loc 5 1502 0
 2134 005f 488B45C8 		movq	-56(%rbp), %rax
 2135 0063 4889C7   		movq	%rax, %rdi
 2136 0066 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2136      00
 2137 006b 4889C3   		movq	%rax, %rbx
 2138 006e 488B45C8 		movq	-56(%rbp), %rax
 2139 0072 4889C7   		movq	%rax, %rdi
 2140 0075 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2140      00
 2141 007a 488945D8 		movq	%rax, -40(%rbp)
 2142 007e 488D55C0 		leaq	-64(%rbp), %rdx
 2143 0082 488D45D8 		leaq	-40(%rbp), %rax
 2144 0086 4889D6   		movq	%rdx, %rsi
 2145 0089 4889C7   		movq	%rax, %rdi
 2146 008c E8000000 		call	_ZSt3maxImERKT_S2_S2_@PLT
 2146      00
 2147 0091 488B00   		movq	(%rax), %rax
 2148 0094 4801D8   		addq	%rbx, %rax
 2149 0097 488945E0 		movq	%rax, -32(%rbp)
1503:/usr/include/c++/7/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2150              		.loc 5 1503 0
 2151 009b 488B45C8 		movq	-56(%rbp), %rax
 2152 009f 4889C7   		movq	%rax, %rdi
 2153 00a2 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2153      00
 2154 00a7 483945E0 		cmpq	%rax, -32(%rbp)
 2155 00ab 7212     		jb	.L106
 2156              		.loc 5 1503 0 is_stmt 0 discriminator 2
 2157 00ad 488B45C8 		movq	-56(%rbp), %rax
 2158 00b1 4889C7   		movq	%rax, %rdi
 2159 00b4 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2159      00
 2160 00b9 483945E0 		cmpq	%rax, -32(%rbp)
 2161 00bd 760E     		jbe	.L107
 2162              	.L106:
 2163              		.loc 5 1503 0 discriminator 3
 2164 00bf 488B45C8 		movq	-56(%rbp), %rax
 2165 00c3 4889C7   		movq	%rax, %rdi
 2166 00c6 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2166      00
 2167 00cb EB04     		jmp	.L108
 2168              	.L107:
 2169              		.loc 5 1503 0 discriminator 4
 2170 00cd 488B45E0 		movq	-32(%rbp), %rax
 2171              	.L108:
1504:/usr/include/c++/7/bits/stl_vector.h ****       }
 2172              		.loc 5 1504 0 is_stmt 1 discriminator 6
 2173 00d1 488B4DE8 		movq	-24(%rbp), %rcx
 2174 00d5 6448330C 		xorq	%fs:40, %rcx
 2174      25280000 
 2174      00
 2175 00de 7405     		je	.L110
 2176              		.loc 5 1504 0 is_stmt 0
 2177 00e0 E8000000 		call	__stack_chk_fail@PLT
 2177      00
 2178              	.L110:
 2179 00e5 4883C448 		addq	$72, %rsp
 2180 00e9 5B       		popq	%rbx
 2181 00ea 5D       		popq	%rbp
 2182              		.cfi_def_cfa 7, 8
 2183 00eb C3       		ret
 2184              		.cfi_endproc
 2185              	.LFE971:
 2187              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNSt6
 2188              		.align 2
 2189              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 2191              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 2192              	.LFB972:
 563:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2193              		.loc 5 563 0 is_stmt 1
 2194              		.cfi_startproc
 2195 0000 55       		pushq	%rbp
 2196              		.cfi_def_cfa_offset 16
 2197              		.cfi_offset 6, -16
 2198 0001 4889E5   		movq	%rsp, %rbp
 2199              		.cfi_def_cfa_register 6
 2200 0004 4883EC20 		subq	$32, %rsp
 2201 0008 48897DE8 		movq	%rdi, -24(%rbp)
 563:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2202              		.loc 5 563 0
 2203 000c 64488B04 		movq	%fs:40, %rax
 2203      25280000 
 2203      00
 2204 0015 488945F8 		movq	%rax, -8(%rbp)
 2205 0019 31C0     		xorl	%eax, %eax
 564:/usr/include/c++/7/bits/stl_vector.h **** 
 2206              		.loc 5 564 0
 2207 001b 488B55E8 		movq	-24(%rbp), %rdx
 2208 001f 488D45F0 		leaq	-16(%rbp), %rax
 2209 0023 4889D6   		movq	%rdx, %rsi
 2210 0026 4889C7   		movq	%rax, %rdi
 2211 0029 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 2211      00
 2212 002e 488B45F0 		movq	-16(%rbp), %rax
 2213 0032 488B4DF8 		movq	-8(%rbp), %rcx
 2214 0036 6448330C 		xorq	%fs:40, %rcx
 2214      25280000 
 2214      00
 2215 003f 7405     		je	.L113
 2216 0041 E8000000 		call	__stack_chk_fail@PLT
 2216      00
 2217              	.L113:
 2218 0046 C9       		leave
 2219              		.cfi_def_cfa 7, 8
 2220 0047 C3       		ret
 2221              		.cfi_endproc
 2222              	.LFE972:
 2224              		.section	.text._ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__norma
 2225              		.weak	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iterato
 2227              	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_
 2228              	.LFB973:
 842:/usr/include/c++/7/bits/stl_iterator.h **** 
 843:/usr/include/c++/7/bits/stl_iterator.h ****       const _Iterator&
 844:/usr/include/c++/7/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 845:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 846:/usr/include/c++/7/bits/stl_iterator.h ****     };
 847:/usr/include/c++/7/bits/stl_iterator.h **** 
 848:/usr/include/c++/7/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 849:/usr/include/c++/7/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 850:/usr/include/c++/7/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 851:/usr/include/c++/7/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 852:/usr/include/c++/7/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 853:/usr/include/c++/7/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 854:/usr/include/c++/7/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 855:/usr/include/c++/7/bits/stl_iterator.h **** 
 856:/usr/include/c++/7/bits/stl_iterator.h ****   // Forward iterator requirements
 857:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 858:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 859:/usr/include/c++/7/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 860:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 861:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 862:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 863:/usr/include/c++/7/bits/stl_iterator.h **** 
 864:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 865:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 866:/usr/include/c++/7/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 867:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 868:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 869:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 870:/usr/include/c++/7/bits/stl_iterator.h **** 
 871:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 872:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 873:/usr/include/c++/7/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 874:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 875:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 876:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 877:/usr/include/c++/7/bits/stl_iterator.h **** 
 878:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 879:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 880:/usr/include/c++/7/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 881:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 882:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 883:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 884:/usr/include/c++/7/bits/stl_iterator.h **** 
 885:/usr/include/c++/7/bits/stl_iterator.h ****   // Random access iterator requirements
 886:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 887:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 888:/usr/include/c++/7/bits/stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 889:/usr/include/c++/7/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 890:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 891:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 892:/usr/include/c++/7/bits/stl_iterator.h **** 
 893:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 894:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 895:/usr/include/c++/7/bits/stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 896:/usr/include/c++/7/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 897:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 898:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 899:/usr/include/c++/7/bits/stl_iterator.h **** 
 900:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 901:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 902:/usr/include/c++/7/bits/stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 903:/usr/include/c++/7/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 904:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 905:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 906:/usr/include/c++/7/bits/stl_iterator.h **** 
 907:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 908:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 909:/usr/include/c++/7/bits/stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
 910:/usr/include/c++/7/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 911:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 912:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 913:/usr/include/c++/7/bits/stl_iterator.h **** 
 914:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 915:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 916:/usr/include/c++/7/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 917:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 918:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 919:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 920:/usr/include/c++/7/bits/stl_iterator.h **** 
 921:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 922:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 923:/usr/include/c++/7/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 924:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 925:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 926:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 927:/usr/include/c++/7/bits/stl_iterator.h **** 
 928:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 929:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 930:/usr/include/c++/7/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 931:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 932:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 933:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 934:/usr/include/c++/7/bits/stl_iterator.h **** 
 935:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 936:/usr/include/c++/7/bits/stl_iterator.h ****     inline bool
 937:/usr/include/c++/7/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
 938:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 939:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 940:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 941:/usr/include/c++/7/bits/stl_iterator.h **** 
 942:/usr/include/c++/7/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 943:/usr/include/c++/7/bits/stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
 944:/usr/include/c++/7/bits/stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 945:/usr/include/c++/7/bits/stl_iterator.h ****   // parameters.
 946:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 947:/usr/include/c++/7/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 948:/usr/include/c++/7/bits/stl_iterator.h ****     // DR 685.
 949:/usr/include/c++/7/bits/stl_iterator.h ****     inline auto
 950:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 951:/usr/include/c++/7/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
 952:/usr/include/c++/7/bits/stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
 953:/usr/include/c++/7/bits/stl_iterator.h **** #else
 954:/usr/include/c++/7/bits/stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
 955:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 956:/usr/include/c++/7/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 957:/usr/include/c++/7/bits/stl_iterator.h **** #endif
 958:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 959:/usr/include/c++/7/bits/stl_iterator.h **** 
 960:/usr/include/c++/7/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 961:/usr/include/c++/7/bits/stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
 962:/usr/include/c++/7/bits/stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 2229              		.loc 9 962 0
 2230              		.cfi_startproc
 2231 0000 55       		pushq	%rbp
 2232              		.cfi_def_cfa_offset 16
 2233              		.cfi_offset 6, -16
 2234 0001 4889E5   		movq	%rsp, %rbp
 2235              		.cfi_def_cfa_register 6
 2236 0004 53       		pushq	%rbx
 2237 0005 4883EC18 		subq	$24, %rsp
 2238              		.cfi_offset 3, -24
 2239 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2240 000d 488975E0 		movq	%rsi, -32(%rbp)
 963:/usr/include/c++/7/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 964:/usr/include/c++/7/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 965:/usr/include/c++/7/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 2241              		.loc 9 965 0
 2242 0011 488B45E8 		movq	-24(%rbp), %rax
 2243 0015 4889C7   		movq	%rax, %rdi
 2244 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 2244      00
 2245 001d 488B00   		movq	(%rax), %rax
 2246 0020 4889C3   		movq	%rax, %rbx
 2247 0023 488B45E0 		movq	-32(%rbp), %rax
 2248 0027 4889C7   		movq	%rax, %rdi
 2249 002a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 2249      00
 2250 002f 488B00   		movq	(%rax), %rax
 2251 0032 4829C3   		subq	%rax, %rbx
 2252 0035 4889D8   		movq	%rbx, %rax
 2253 0038 48C1F807 		sarq	$7, %rax
 2254 003c 4883C418 		addq	$24, %rsp
 2255 0040 5B       		popq	%rbx
 2256 0041 5D       		popq	%rbp
 2257              		.cfi_def_cfa 7, 8
 2258 0042 C3       		ret
 2259              		.cfi_endproc
 2260              	.LFE973:
 2262              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm,"axG",@p
 2263              		.align 2
 2264              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm
 2266              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm:
 2267              	.LFB974:
 169:/usr/include/c++/7/bits/stl_vector.h ****       {
 2268              		.loc 5 169 0
 2269              		.cfi_startproc
 2270 0000 55       		pushq	%rbp
 2271              		.cfi_def_cfa_offset 16
 2272              		.cfi_offset 6, -16
 2273 0001 4889E5   		movq	%rsp, %rbp
 2274              		.cfi_def_cfa_register 6
 2275 0004 4883EC10 		subq	$16, %rsp
 2276 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2277 000c 488975F0 		movq	%rsi, -16(%rbp)
 172:/usr/include/c++/7/bits/stl_vector.h ****       }
 2278              		.loc 5 172 0
 2279 0010 48837DF0 		cmpq	$0, -16(%rbp)
 2279      00
 2280 0015 7415     		je	.L117
 172:/usr/include/c++/7/bits/stl_vector.h ****       }
 2281              		.loc 5 172 0 is_stmt 0 discriminator 1
 2282 0017 488B45F8 		movq	-8(%rbp), %rax
 2283 001b 488B55F0 		movq	-16(%rbp), %rdx
 2284 001f 4889D6   		movq	%rdx, %rsi
 2285 0022 4889C7   		movq	%rax, %rdi
 2286 0025 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m@PLT
 2286      00
 2287 002a EB05     		jmp	.L119
 2288              	.L117:
 172:/usr/include/c++/7/bits/stl_vector.h ****       }
 2289              		.loc 5 172 0 discriminator 2
 2290 002c B8000000 		movl	$0, %eax
 2290      00
 2291              	.L119:
 173:/usr/include/c++/7/bits/stl_vector.h **** 
 2292              		.loc 5 173 0 is_stmt 1 discriminator 5
 2293 0031 C9       		leave
 2294              		.cfi_def_cfa 7, 8
 2295 0032 C3       		ret
 2296              		.cfi_endproc
 2297              	.LFE974:
 2299              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2300              		.align 2
 2301              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 2303              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2304              	.LFB975:
 844:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 2305              		.loc 9 844 0
 2306              		.cfi_startproc
 2307 0000 55       		pushq	%rbp
 2308              		.cfi_def_cfa_offset 16
 2309              		.cfi_offset 6, -16
 2310 0001 4889E5   		movq	%rsp, %rbp
 2311              		.cfi_def_cfa_register 6
 2312 0004 48897DF8 		movq	%rdi, -8(%rbp)
 845:/usr/include/c++/7/bits/stl_iterator.h ****     };
 2313              		.loc 9 845 0
 2314 0008 488B45F8 		movq	-8(%rbp), %rax
 2315 000c 5D       		popq	%rbp
 2316              		.cfi_def_cfa 7, 8
 2317 000d C3       		ret
 2318              		.cfi_endproc
 2319              	.LFE975:
 2321              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 2322              		.align 2
 2323              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 2325              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 2326              	.LFB976:
 115:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2327              		.loc 5 115 0
 2328              		.cfi_startproc
 2329 0000 55       		pushq	%rbp
 2330              		.cfi_def_cfa_offset 16
 2331              		.cfi_offset 6, -16
 2332 0001 4889E5   		movq	%rsp, %rbp
 2333              		.cfi_def_cfa_register 6
 2334 0004 48897DF8 		movq	%rdi, -8(%rbp)
 116:/usr/include/c++/7/bits/stl_vector.h **** 
 2335              		.loc 5 116 0
 2336 0008 488B45F8 		movq	-8(%rbp), %rax
 2337 000c 5D       		popq	%rbp
 2338              		.cfi_def_cfa 7, 8
 2339 000d C3       		ret
 2340              		.cfi_endproc
 2341              	.LFE976:
 2343              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_E
 2344              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_
 2346              	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_
 2347              	.LFB977:
 2348              		.file 12 "/usr/include/c++/7/bits/stl_uninitialized.h"
   1:/usr/include/c++/7/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/7/bits/stl_uninitialized.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/7/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/7/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  16:/usr/include/c++/7/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/7/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/7/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/7/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/7/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/7/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/7/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/7/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/7/bits/stl_uninitialized.h **** #if __cplusplus > 201402L
  60:/usr/include/c++/7/bits/stl_uninitialized.h **** #include <utility>
  61:/usr/include/c++/7/bits/stl_uninitialized.h **** #endif
  62:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/7/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:/usr/include/c++/7/bits/stl_uninitialized.h **** #include <type_traits>
  65:/usr/include/c++/7/bits/stl_uninitialized.h **** #endif
  66:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  67:/usr/include/c++/7/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/c++/7/bits/stl_uninitialized.h **** {
  69:/usr/include/c++/7/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  71:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  72:/usr/include/c++/7/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  73:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
  74:/usr/include/c++/7/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  75:/usr/include/c++/7/bits/stl_uninitialized.h ****         static _ForwardIterator
  76:/usr/include/c++/7/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  77:/usr/include/c++/7/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  78:/usr/include/c++/7/bits/stl_uninitialized.h ****         {
  79:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  80:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __try
  81:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
  82:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  83:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  84:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      return __cur;
  85:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __catch(...)
  87:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
  88:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  89:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  90:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
  91:/usr/include/c++/7/bits/stl_uninitialized.h **** 	}
  92:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
  93:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  94:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<>
  95:/usr/include/c++/7/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
  96:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
  97:/usr/include/c++/7/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  98:/usr/include/c++/7/bits/stl_uninitialized.h ****         static _ForwardIterator
  99:/usr/include/c++/7/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 100:/usr/include/c++/7/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 101:/usr/include/c++/7/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 102:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
 103:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 104:/usr/include/c++/7/bits/stl_uninitialized.h ****   /**
 105:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 106:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 107:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 108:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 109:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 110:/usr/include/c++/7/bits/stl_uninitialized.h ****    *
 111:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 112:/usr/include/c++/7/bits/stl_uninitialized.h ****   */
 113:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 114:/usr/include/c++/7/bits/stl_uninitialized.h ****     inline _ForwardIterator
 115:/usr/include/c++/7/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 116:/usr/include/c++/7/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 117:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 118:/usr/include/c++/7/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 119:/usr/include/c++/7/bits/stl_uninitialized.h **** 	_ValueType1;
 120:/usr/include/c++/7/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 121:/usr/include/c++/7/bits/stl_uninitialized.h **** 	_ValueType2;
 122:/usr/include/c++/7/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 123:/usr/include/c++/7/bits/stl_uninitialized.h ****       const bool __assignable = true;
 124:/usr/include/c++/7/bits/stl_uninitialized.h **** #else
 125:/usr/include/c++/7/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 126:/usr/include/c++/7/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 127:/usr/include/c++/7/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 128:/usr/include/c++/7/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 129:/usr/include/c++/7/bits/stl_uninitialized.h **** #endif
 130:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 131:/usr/include/c++/7/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 132:/usr/include/c++/7/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 133:/usr/include/c++/7/bits/stl_uninitialized.h **** 				       && __assignable>::
 134:/usr/include/c++/7/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 135:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 136:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 137:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 138:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 139:/usr/include/c++/7/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 140:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 141:/usr/include/c++/7/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 142:/usr/include/c++/7/bits/stl_uninitialized.h ****         static void
 143:/usr/include/c++/7/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 144:/usr/include/c++/7/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 145:/usr/include/c++/7/bits/stl_uninitialized.h ****         {
 146:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 147:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __try
 148:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 149:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 150:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 151:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 152:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __catch(...)
 153:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 154:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 155:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 156:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 157:/usr/include/c++/7/bits/stl_uninitialized.h **** 	}
 158:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
 159:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 160:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<>
 161:/usr/include/c++/7/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 162:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 163:/usr/include/c++/7/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 164:/usr/include/c++/7/bits/stl_uninitialized.h ****         static void
 165:/usr/include/c++/7/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 166:/usr/include/c++/7/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 167:/usr/include/c++/7/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 168:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
 169:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 170:/usr/include/c++/7/bits/stl_uninitialized.h ****   /**
 171:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 172:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 173:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 174:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 175:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @return   Nothing.
 176:/usr/include/c++/7/bits/stl_uninitialized.h ****    *
 177:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 178:/usr/include/c++/7/bits/stl_uninitialized.h ****   */
 179:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 180:/usr/include/c++/7/bits/stl_uninitialized.h ****     inline void
 181:/usr/include/c++/7/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 182:/usr/include/c++/7/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 183:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 184:/usr/include/c++/7/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 185:/usr/include/c++/7/bits/stl_uninitialized.h **** 	_ValueType;
 186:/usr/include/c++/7/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 187:/usr/include/c++/7/bits/stl_uninitialized.h ****       const bool __assignable = true;
 188:/usr/include/c++/7/bits/stl_uninitialized.h **** #else
 189:/usr/include/c++/7/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 190:/usr/include/c++/7/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 191:/usr/include/c++/7/bits/stl_uninitialized.h **** #endif
 192:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 193:/usr/include/c++/7/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 194:/usr/include/c++/7/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 195:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 196:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 197:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 198:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 199:/usr/include/c++/7/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 200:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 201:/usr/include/c++/7/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 202:/usr/include/c++/7/bits/stl_uninitialized.h ****         static _ForwardIterator
 203:/usr/include/c++/7/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 204:/usr/include/c++/7/bits/stl_uninitialized.h **** 			const _Tp& __x)
 205:/usr/include/c++/7/bits/stl_uninitialized.h ****         {
 206:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 207:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __try
 208:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 209:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, ++__cur)
 210:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 211:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      return __cur;
 212:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 213:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __catch(...)
 214:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 215:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 216:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 217:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 218:/usr/include/c++/7/bits/stl_uninitialized.h **** 	}
 219:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
 220:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 221:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<>
 222:/usr/include/c++/7/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 223:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 224:/usr/include/c++/7/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 225:/usr/include/c++/7/bits/stl_uninitialized.h ****         static _ForwardIterator
 226:/usr/include/c++/7/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 227:/usr/include/c++/7/bits/stl_uninitialized.h **** 			const _Tp& __x)
 228:/usr/include/c++/7/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 229:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
 230:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 231:/usr/include/c++/7/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 232:/usr/include/c++/7/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 233:/usr/include/c++/7/bits/stl_uninitialized.h ****   /**
 234:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 235:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 236:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 237:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 238:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  @return   Nothing.
 239:/usr/include/c++/7/bits/stl_uninitialized.h ****    *
 240:/usr/include/c++/7/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 241:/usr/include/c++/7/bits/stl_uninitialized.h ****   */
 242:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 243:/usr/include/c++/7/bits/stl_uninitialized.h ****     inline _ForwardIterator
 244:/usr/include/c++/7/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 245:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 246:/usr/include/c++/7/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 247:/usr/include/c++/7/bits/stl_uninitialized.h **** 	_ValueType;
 248:/usr/include/c++/7/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 249:/usr/include/c++/7/bits/stl_uninitialized.h ****       const bool __assignable = true;
 250:/usr/include/c++/7/bits/stl_uninitialized.h **** #else
 251:/usr/include/c++/7/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 252:/usr/include/c++/7/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 253:/usr/include/c++/7/bits/stl_uninitialized.h **** #endif
 254:/usr/include/c++/7/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 255:/usr/include/c++/7/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 256:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 257:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 258:/usr/include/c++/7/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 259:/usr/include/c++/7/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 260:/usr/include/c++/7/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 261:/usr/include/c++/7/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 262:/usr/include/c++/7/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 263:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 264:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 265:/usr/include/c++/7/bits/stl_uninitialized.h **** 	   typename _Allocator>
 266:/usr/include/c++/7/bits/stl_uninitialized.h ****     _ForwardIterator
 267:/usr/include/c++/7/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 268:/usr/include/c++/7/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 269:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 270:/usr/include/c++/7/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 271:/usr/include/c++/7/bits/stl_uninitialized.h ****       __try
 272:/usr/include/c++/7/bits/stl_uninitialized.h **** 	{
 273:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 274:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 275:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 276:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  return __cur;
 277:/usr/include/c++/7/bits/stl_uninitialized.h **** 	}
 278:/usr/include/c++/7/bits/stl_uninitialized.h ****       __catch(...)
 279:/usr/include/c++/7/bits/stl_uninitialized.h **** 	{
 280:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 281:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 282:/usr/include/c++/7/bits/stl_uninitialized.h **** 	}
 283:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 284:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 285:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 286:/usr/include/c++/7/bits/stl_uninitialized.h ****     inline _ForwardIterator
 287:/usr/include/c++/7/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 288:/usr/include/c++/7/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 289:/usr/include/c++/7/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 290:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 291:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 292:/usr/include/c++/7/bits/stl_uninitialized.h **** 	   typename _Allocator>
 293:/usr/include/c++/7/bits/stl_uninitialized.h ****     inline _ForwardIterator
 294:/usr/include/c++/7/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 295:/usr/include/c++/7/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 296:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 297:/usr/include/c++/7/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 298:/usr/include/c++/7/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 299:/usr/include/c++/7/bits/stl_uninitialized.h **** 					 __result, __alloc);
 300:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 301:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 302:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 303:/usr/include/c++/7/bits/stl_uninitialized.h **** 	   typename _Allocator>
 304:/usr/include/c++/7/bits/stl_uninitialized.h ****     inline _ForwardIterator
 305:/usr/include/c++/7/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 2349              		.loc 12 305 0
 2350              		.cfi_startproc
 2351 0000 55       		pushq	%rbp
 2352              		.cfi_def_cfa_offset 16
 2353              		.cfi_offset 6, -16
 2354 0001 4889E5   		movq	%rsp, %rbp
 2355              		.cfi_def_cfa_register 6
 2356 0004 4883EC20 		subq	$32, %rsp
 2357 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2358 000c 488975F0 		movq	%rsi, -16(%rbp)
 2359 0010 488955E8 		movq	%rdx, -24(%rbp)
 2360 0014 48894DE0 		movq	%rcx, -32(%rbp)
 306:/usr/include/c++/7/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 307:/usr/include/c++/7/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 308:/usr/include/c++/7/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 309:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
 310:/usr/include/c++/7/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 311:/usr/include/c++/7/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 312:/usr/include/c++/7/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 2361              		.loc 12 312 0
 2362 0018 488B4DE0 		movq	-32(%rbp), %rcx
 2363 001c 488B55E8 		movq	-24(%rbp), %rdx
 2364 0020 488B75F0 		movq	-16(%rbp), %rsi
 2365 0024 488B45F8 		movq	-8(%rbp), %rax
 2366 0028 4889C7   		movq	%rax, %rdi
 2367 002b E8000000 		call	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E@PLT
 2367      00
 313:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 2368              		.loc 12 313 0
 2369 0030 C9       		leave
 2370              		.cfi_def_cfa 7, 8
 2371 0031 C3       		ret
 2372              		.cfi_endproc
 2373              	.LFE977:
 2375              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
 2376              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
 2378              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_:
 2379              	.LFB978:
 138:/usr/include/c++/7/ext/alloc_traits.h **** 
 139:/usr/include/c++/7/ext/alloc_traits.h ****     static void destroy(_Alloc& __a, pointer __p)
 2380              		.loc 7 139 0
 2381              		.cfi_startproc
 2382 0000 55       		pushq	%rbp
 2383              		.cfi_def_cfa_offset 16
 2384              		.cfi_offset 6, -16
 2385 0001 4889E5   		movq	%rsp, %rbp
 2386              		.cfi_def_cfa_register 6
 2387 0004 4883EC10 		subq	$16, %rsp
 2388 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2389 000c 488975F0 		movq	%rsi, -16(%rbp)
 140:/usr/include/c++/7/ext/alloc_traits.h ****     { __a.destroy(__p); }
 2390              		.loc 7 140 0
 2391 0010 488B55F0 		movq	-16(%rbp), %rdx
 2392 0014 488B45F8 		movq	-8(%rbp), %rax
 2393 0018 4889D6   		movq	%rdx, %rsi
 2394 001b 4889C7   		movq	%rax, %rdi
 2395 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_@PLT
 2395      00
 2396 0023 90       		nop
 2397 0024 C9       		leave
 2398              		.cfi_def_cfa 7, 8
 2399 0025 C3       		ret
 2400              		.cfi_endproc
 2401              	.LFE978:
 2403              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 2404              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 2406              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 2407              	.LFB979:
 203:/usr/include/c++/7/bits/stl_construct.h **** 	     allocator<_Tp>&)
 2408              		.loc 6 203 0
 2409              		.cfi_startproc
 2410 0000 55       		pushq	%rbp
 2411              		.cfi_def_cfa_offset 16
 2412              		.cfi_offset 6, -16
 2413 0001 4889E5   		movq	%rsp, %rbp
 2414              		.cfi_def_cfa_register 6
 2415 0004 4883EC20 		subq	$32, %rsp
 2416 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2417 000c 488975F0 		movq	%rsi, -16(%rbp)
 2418 0010 488955E8 		movq	%rdx, -24(%rbp)
 206:/usr/include/c++/7/bits/stl_construct.h ****     }
 2419              		.loc 6 206 0
 2420 0014 488B55F0 		movq	-16(%rbp), %rdx
 2421 0018 488B45F8 		movq	-8(%rbp), %rax
 2422 001c 4889D6   		movq	%rdx, %rsi
 2423 001f 4889C7   		movq	%rax, %rdi
 2424 0022 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 2424      00
 2425              		.loc 6 207 0
 2426 0027 90       		nop
 2427 0028 C9       		leave
 2428              		.cfi_def_cfa 7, 8
 2429 0029 C3       		ret
 2430              		.cfi_endproc
 2431              	.LFE979:
 2433              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 2434              		.align 2
 2435              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 2437              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 2438              	.LFB980:
 176:/usr/include/c++/7/bits/stl_vector.h ****       {
 2439              		.loc 5 176 0
 2440              		.cfi_startproc
 2441 0000 55       		pushq	%rbp
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 6, -16
 2444 0001 4889E5   		movq	%rsp, %rbp
 2445              		.cfi_def_cfa_register 6
 2446 0004 4883EC20 		subq	$32, %rsp
 2447 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2448 000c 488975F0 		movq	%rsi, -16(%rbp)
 2449 0010 488955E8 		movq	%rdx, -24(%rbp)
 179:/usr/include/c++/7/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2450              		.loc 5 179 0
 2451 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2451      00
 2452 0019 7417     		je	.L130
 180:/usr/include/c++/7/bits/stl_vector.h ****       }
 2453              		.loc 5 180 0
 2454 001b 488B45F8 		movq	-8(%rbp), %rax
 2455 001f 488B55E8 		movq	-24(%rbp), %rdx
 2456 0023 488B4DF0 		movq	-16(%rbp), %rcx
 2457 0027 4889CE   		movq	%rcx, %rsi
 2458 002a 4889C7   		movq	%rax, %rdi
 2459 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m@PLT
 2459      00
 2460              	.L130:
 181:/usr/include/c++/7/bits/stl_vector.h **** 
 2461              		.loc 5 181 0
 2462 0032 90       		nop
 2463 0033 C9       		leave
 2464              		.cfi_def_cfa 7, 8
 2465 0034 C3       		ret
 2466              		.cfi_endproc
 2467              	.LFE980:
 2469              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2
 2470              		.align 2
 2471              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERK
 2473              	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:
 2474              	.LFB982:
 779:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(__i) { }
 2475              		.loc 9 779 0
 2476              		.cfi_startproc
 2477 0000 55       		pushq	%rbp
 2478              		.cfi_def_cfa_offset 16
 2479              		.cfi_offset 6, -16
 2480 0001 4889E5   		movq	%rsp, %rbp
 2481              		.cfi_def_cfa_register 6
 2482 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2483 0008 488975F0 		movq	%rsi, -16(%rbp)
 2484              	.LBB14:
 780:/usr/include/c++/7/bits/stl_iterator.h **** 
 2485              		.loc 9 780 0
 2486 000c 488B45F0 		movq	-16(%rbp), %rax
 2487 0010 488B10   		movq	(%rax), %rdx
 2488 0013 488B45F8 		movq	-8(%rbp), %rax
 2489 0017 488910   		movq	%rdx, (%rax)
 2490              	.LBE14:
 2491 001a 90       		nop
 2492 001b 5D       		popq	%rbp
 2493              		.cfi_def_cfa 7, 8
 2494 001c C3       		ret
 2495              		.cfi_endproc
 2496              	.LFE982:
 2498              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 2499              		.set	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 2500              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_,"axG",@pr
 2501              		.align 2
 2502              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_
 2504              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_:
 2505              	.LFB995:
 198:/usr/include/c++/7/bits/stl_pair.h ****     {
 2506              		.loc 4 198 0
 2507              		.cfi_startproc
 2508 0000 55       		pushq	%rbp
 2509              		.cfi_def_cfa_offset 16
 2510              		.cfi_offset 6, -16
 2511 0001 4889E5   		movq	%rsp, %rbp
 2512              		.cfi_def_cfa_register 6
 2513 0004 4883EC10 		subq	$16, %rsp
 2514 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2515 000c 488975F0 		movq	%rsi, -16(%rbp)
 2516              	.LBB15:
 198:/usr/include/c++/7/bits/stl_pair.h ****     {
 2517              		.loc 4 198 0
 2518 0010 488B45F0 		movq	-16(%rbp), %rax
 2519 0014 8B10     		movl	(%rax), %edx
 2520 0016 488B45F8 		movq	-8(%rbp), %rax
 2521 001a 8910     		movl	%edx, (%rax)
 2522 001c 488B45F8 		movq	-8(%rbp), %rax
 2523 0020 4883C008 		addq	$8, %rax
 2524 0024 488B55F0 		movq	-16(%rbp), %rdx
 2525 0028 4883C208 		addq	$8, %rdx
 2526 002c 4889D6   		movq	%rdx, %rsi
 2527 002f 4889C7   		movq	%rax, %rdi
 2528 0032 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 2528      00
 2529              	.LBE15:
 2530 0037 90       		nop
 2531 0038 C9       		leave
 2532              		.cfi_def_cfa 7, 8
 2533 0039 C3       		ret
 2534              		.cfi_endproc
 2535              	.LFE995:
 2537              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_
 2538              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_,_ZNSt4pairIiNSt7__c
 2539              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 2540              		.align 2
 2541              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 2543              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constr
 2544              	.LFB993:
 145:/usr/include/c++/7/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 2545              		.loc 11 145 0
 2546              		.cfi_startproc
 2547              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2548              		.cfi_lsda 0x1b,.LLSDA993
 2549 0000 55       		pushq	%rbp
 2550              		.cfi_def_cfa_offset 16
 2551              		.cfi_offset 6, -16
 2552 0001 4889E5   		movq	%rsp, %rbp
 2553              		.cfi_def_cfa_register 6
 2554 0004 4155     		pushq	%r13
 2555 0006 4154     		pushq	%r12
 2556 0008 53       		pushq	%rbx
 2557 0009 4883EC28 		subq	$40, %rsp
 2558              		.cfi_offset 13, -24
 2559              		.cfi_offset 12, -32
 2560              		.cfi_offset 3, -40
 2561 000d 48897DD8 		movq	%rdi, -40(%rbp)
 2562 0011 488975D0 		movq	%rsi, -48(%rbp)
 2563 0015 488955C8 		movq	%rdx, -56(%rbp)
 2564              		.loc 11 146 0
 2565 0019 4C8B65D0 		movq	-48(%rbp), %r12
 2566 001d 4C89E6   		movq	%r12, %rsi
 2567 0020 BF280000 		movl	$40, %edi
 2567      00
 2568 0025 E8000000 		call	_ZnwmPv@PLT
 2568      00
 2569 002a 4889C3   		movq	%rax, %rbx
 2570 002d 4885DB   		testq	%rbx, %rbx
 2571 0030 742A     		je	.L138
 2572              		.loc 11 146 0 is_stmt 0 discriminator 1
 2573 0032 488B45C8 		movq	-56(%rbp), %rax
 2574 0036 4889C6   		movq	%rax, %rsi
 2575 0039 4889DF   		movq	%rbx, %rdi
 2576              	.LEHB39:
 2577 003c E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_@PLT
 2577      00
 2578              	.LEHE39:
 2579              		.loc 11 146 0
 2580 0041 EB19     		jmp	.L138
 2581              	.L137:
 2582 0043 4989C5   		movq	%rax, %r13
 2583 0046 4C89E6   		movq	%r12, %rsi
 2584 0049 4889DF   		movq	%rbx, %rdi
 2585 004c E8000000 		call	_ZdlPvS_@PLT
 2585      00
 2586 0051 4C89E8   		movq	%r13, %rax
 2587 0054 4889C7   		movq	%rax, %rdi
 2588              	.LEHB40:
 2589 0057 E8000000 		call	_Unwind_Resume@PLT
 2589      00
 2590              	.LEHE40:
 2591              	.L138:
 2592 005c 90       		nop
 2593 005d 4883C428 		addq	$40, %rsp
 2594 0061 5B       		popq	%rbx
 2595 0062 415C     		popq	%r12
 2596 0064 415D     		popq	%r13
 2597 0066 5D       		popq	%rbp
 2598              		.cfi_def_cfa 7, 8
 2599 0067 C3       		ret
 2600              		.cfi_endproc
 2601              	.LFE993:
 2602              		.section	.gcc_except_table
 2603              	.LLSDA993:
 2604 00dc FF       		.byte	0xff
 2605 00dd FF       		.byte	0xff
 2606 00de 01       		.byte	0x1
 2607 00df 08       		.uleb128 .LLSDACSE993-.LLSDACSB993
 2608              	.LLSDACSB993:
 2609 00e0 3C       		.uleb128 .LEHB39-.LFB993
 2610 00e1 05       		.uleb128 .LEHE39-.LEHB39
 2611 00e2 43       		.uleb128 .L137-.LFB993
 2612 00e3 00       		.uleb128 0
 2613 00e4 57       		.uleb128 .LEHB40-.LFB993
 2614 00e5 05       		.uleb128 .LEHE40-.LEHB40
 2615 00e6 00       		.uleb128 0
 2616 00e7 00       		.uleb128 0
 2617              	.LLSDACSE993:
 2618              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 2620              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 2621              		.align 2
 2622              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_che
 2624              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_check_lenE
 2625              	.LFB997:
1497:/usr/include/c++/7/bits/stl_vector.h ****       {
 2626              		.loc 5 1497 0 is_stmt 1
 2627              		.cfi_startproc
 2628 0000 55       		pushq	%rbp
 2629              		.cfi_def_cfa_offset 16
 2630              		.cfi_offset 6, -16
 2631 0001 4889E5   		movq	%rsp, %rbp
 2632              		.cfi_def_cfa_register 6
 2633 0004 53       		pushq	%rbx
 2634 0005 4883EC48 		subq	$72, %rsp
 2635              		.cfi_offset 3, -24
 2636 0009 48897DC8 		movq	%rdi, -56(%rbp)
 2637 000d 488975C0 		movq	%rsi, -64(%rbp)
 2638 0011 488955B8 		movq	%rdx, -72(%rbp)
1497:/usr/include/c++/7/bits/stl_vector.h ****       {
 2639              		.loc 5 1497 0
 2640 0015 64488B04 		movq	%fs:40, %rax
 2640      25280000 
 2640      00
 2641 001e 488945E8 		movq	%rax, -24(%rbp)
 2642 0022 31C0     		xorl	%eax, %eax
1499:/usr/include/c++/7/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2643              		.loc 5 1499 0
 2644 0024 488B45C8 		movq	-56(%rbp), %rax
 2645 0028 4889C7   		movq	%rax, %rdi
 2646 002b E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_size
 2646      00
 2647 0030 4889C3   		movq	%rax, %rbx
 2648 0033 488B45C8 		movq	-56(%rbp), %rax
 2649 0037 4889C7   		movq	%rax, %rdi
 2650 003a E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 2650      00
 2651 003f 4829C3   		subq	%rax, %rbx
 2652 0042 4889DA   		movq	%rbx, %rdx
 2653 0045 488B45C0 		movq	-64(%rbp), %rax
 2654 0049 4839C2   		cmpq	%rax, %rdx
 2655 004c 0F92C0   		setb	%al
 2656 004f 84C0     		testb	%al, %al
 2657 0051 740C     		je	.L140
1500:/usr/include/c++/7/bits/stl_vector.h **** 
 2658              		.loc 5 1500 0
 2659 0053 488B45B8 		movq	-72(%rbp), %rax
 2660 0057 4889C7   		movq	%rax, %rdi
 2661 005a E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 2661      00
 2662              	.L140:
1502:/usr/include/c++/7/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2663              		.loc 5 1502 0
 2664 005f 488B45C8 		movq	-56(%rbp), %rax
 2665 0063 4889C7   		movq	%rax, %rdi
 2666 0066 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 2666      00
 2667 006b 4889C3   		movq	%rax, %rbx
 2668 006e 488B45C8 		movq	-56(%rbp), %rax
 2669 0072 4889C7   		movq	%rax, %rdi
 2670 0075 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 2670      00
 2671 007a 488945D8 		movq	%rax, -40(%rbp)
 2672 007e 488D55C0 		leaq	-64(%rbp), %rdx
 2673 0082 488D45D8 		leaq	-40(%rbp), %rax
 2674 0086 4889D6   		movq	%rdx, %rsi
 2675 0089 4889C7   		movq	%rax, %rdi
 2676 008c E8000000 		call	_ZSt3maxImERKT_S2_S2_@PLT
 2676      00
 2677 0091 488B00   		movq	(%rax), %rax
 2678 0094 4801D8   		addq	%rbx, %rax
 2679 0097 488945E0 		movq	%rax, -32(%rbp)
1503:/usr/include/c++/7/bits/stl_vector.h ****       }
 2680              		.loc 5 1503 0
 2681 009b 488B45C8 		movq	-56(%rbp), %rax
 2682 009f 4889C7   		movq	%rax, %rdi
 2683 00a2 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 2683      00
 2684 00a7 483945E0 		cmpq	%rax, -32(%rbp)
 2685 00ab 7212     		jb	.L141
1503:/usr/include/c++/7/bits/stl_vector.h ****       }
 2686              		.loc 5 1503 0 is_stmt 0 discriminator 2
 2687 00ad 488B45C8 		movq	-56(%rbp), %rax
 2688 00b1 4889C7   		movq	%rax, %rdi
 2689 00b4 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_size
 2689      00
 2690 00b9 483945E0 		cmpq	%rax, -32(%rbp)
 2691 00bd 760E     		jbe	.L142
 2692              	.L141:
1503:/usr/include/c++/7/bits/stl_vector.h ****       }
 2693              		.loc 5 1503 0 discriminator 3
 2694 00bf 488B45C8 		movq	-56(%rbp), %rax
 2695 00c3 4889C7   		movq	%rax, %rdi
 2696 00c6 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_size
 2696      00
 2697 00cb EB04     		jmp	.L143
 2698              	.L142:
1503:/usr/include/c++/7/bits/stl_vector.h ****       }
 2699              		.loc 5 1503 0 discriminator 4
 2700 00cd 488B45E0 		movq	-32(%rbp), %rax
 2701              	.L143:
 2702              		.loc 5 1504 0 is_stmt 1 discriminator 6
 2703 00d1 488B4DE8 		movq	-24(%rbp), %rcx
 2704 00d5 6448330C 		xorq	%fs:40, %rcx
 2704      25280000 
 2704      00
 2705 00de 7405     		je	.L145
 2706              		.loc 5 1504 0 is_stmt 0
 2707 00e0 E8000000 		call	__stack_chk_fail@PLT
 2707      00
 2708              	.L145:
 2709 00e5 4883C448 		addq	$72, %rsp
 2710 00e9 5B       		popq	%rbx
 2711 00ea 5D       		popq	%rbp
 2712              		.cfi_def_cfa 7, 8
 2713 00eb C3       		ret
 2714              		.cfi_endproc
 2715              	.LFE997:
 2717              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 2718              		.align 2
 2719              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
 2721              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:
 2722              	.LFB998:
 563:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2723              		.loc 5 563 0 is_stmt 1
 2724              		.cfi_startproc
 2725 0000 55       		pushq	%rbp
 2726              		.cfi_def_cfa_offset 16
 2727              		.cfi_offset 6, -16
 2728 0001 4889E5   		movq	%rsp, %rbp
 2729              		.cfi_def_cfa_register 6
 2730 0004 4883EC20 		subq	$32, %rsp
 2731 0008 48897DE8 		movq	%rdi, -24(%rbp)
 563:/usr/include/c++/7/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2732              		.loc 5 563 0
 2733 000c 64488B04 		movq	%fs:40, %rax
 2733      25280000 
 2733      00
 2734 0015 488945F8 		movq	%rax, -8(%rbp)
 2735 0019 31C0     		xorl	%eax, %eax
 564:/usr/include/c++/7/bits/stl_vector.h **** 
 2736              		.loc 5 564 0
 2737 001b 488B55E8 		movq	-24(%rbp), %rdx
 2738 001f 488D45F0 		leaq	-16(%rbp), %rax
 2739 0023 4889D6   		movq	%rdx, %rsi
 2740 0026 4889C7   		movq	%rax, %rdi
 2741 0029 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 2741      00
 2742 002e 488B45F0 		movq	-16(%rbp), %rax
 2743 0032 488B4DF8 		movq	-8(%rbp), %rcx
 2744 0036 6448330C 		xorq	%fs:40, %rcx
 2744      25280000 
 2744      00
 2745 003f 7405     		je	.L148
 2746 0041 E8000000 		call	__stack_chk_fail@PLT
 2746      00
 2747              	.L148:
 2748 0046 C9       		leave
 2749              		.cfi_def_cfa 7, 8
 2750 0047 C3       		ret
 2751              		.cfi_endproc
 2752              	.LFE998:
 2754              		.section	.text._ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6v
 2755              		.weak	_ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_
 2757              	_ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_E
 2758              	.LFB999:
 962:/usr/include/c++/7/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 2759              		.loc 9 962 0
 2760              		.cfi_startproc
 2761 0000 55       		pushq	%rbp
 2762              		.cfi_def_cfa_offset 16
 2763              		.cfi_offset 6, -16
 2764 0001 4889E5   		movq	%rsp, %rbp
 2765              		.cfi_def_cfa_register 6
 2766 0004 53       		pushq	%rbx
 2767 0005 4883EC18 		subq	$24, %rsp
 2768              		.cfi_offset 3, -24
 2769 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2770 000d 488975E0 		movq	%rsi, -32(%rbp)
 2771              		.loc 9 965 0
 2772 0011 488B45E8 		movq	-24(%rbp), %rax
 2773 0015 4889C7   		movq	%rax, %rdi
 2774 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2774      00
 2775 001d 488B00   		movq	(%rax), %rax
 2776 0020 4889C3   		movq	%rax, %rbx
 2777 0023 488B45E0 		movq	-32(%rbp), %rax
 2778 0027 4889C7   		movq	%rax, %rdi
 2779 002a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2779      00
 2780 002f 488B00   		movq	(%rax), %rax
 2781 0032 4829C3   		subq	%rax, %rbx
 2782 0035 4889D8   		movq	%rbx, %rax
 2783 0038 48C1F803 		sarq	$3, %rax
 2784 003c 4889C2   		movq	%rax, %rdx
 2785 003f 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 2785      CCCCCCCC 
 2785      CCCC
 2786 0049 480FAFC2 		imulq	%rdx, %rax
 2787 004d 4883C418 		addq	$24, %rsp
 2788 0051 5B       		popq	%rbx
 2789 0052 5D       		popq	%rbp
 2790              		.cfi_def_cfa 7, 8
 2791 0053 C3       		ret
 2792              		.cfi_endproc
 2793              	.LFE999:
 2795              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2796              		.align 2
 2797              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11
 2799              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_M_allo
 2800              	.LFB1000:
 169:/usr/include/c++/7/bits/stl_vector.h ****       {
 2801              		.loc 5 169 0
 2802              		.cfi_startproc
 2803 0000 55       		pushq	%rbp
 2804              		.cfi_def_cfa_offset 16
 2805              		.cfi_offset 6, -16
 2806 0001 4889E5   		movq	%rsp, %rbp
 2807              		.cfi_def_cfa_register 6
 2808 0004 4883EC10 		subq	$16, %rsp
 2809 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2810 000c 488975F0 		movq	%rsi, -16(%rbp)
 172:/usr/include/c++/7/bits/stl_vector.h ****       }
 2811              		.loc 5 172 0
 2812 0010 48837DF0 		cmpq	$0, -16(%rbp)
 2812      00
 2813 0015 7415     		je	.L152
 172:/usr/include/c++/7/bits/stl_vector.h ****       }
 2814              		.loc 5 172 0 is_stmt 0 discriminator 1
 2815 0017 488B45F8 		movq	-8(%rbp), %rax
 2816 001b 488B55F0 		movq	-16(%rbp), %rdx
 2817 001f 4889D6   		movq	%rdx, %rsi
 2818 0022 4889C7   		movq	%rax, %rdi
 2819 0025 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 2819      00
 2820 002a EB05     		jmp	.L154
 2821              	.L152:
 172:/usr/include/c++/7/bits/stl_vector.h ****       }
 2822              		.loc 5 172 0 discriminator 2
 2823 002c B8000000 		movl	$0, %eax
 2823      00
 2824              	.L154:
 173:/usr/include/c++/7/bits/stl_vector.h **** 
 2825              		.loc 5 173 0 is_stmt 1 discriminator 5
 2826 0031 C9       		leave
 2827              		.cfi_def_cfa 7, 8
 2828 0032 C3       		ret
 2829              		.cfi_endproc
 2830              	.LFE1000:
 2832              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 2833              		.align 2
 2834              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2836              	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 2837              	.LFB1001:
 844:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 2838              		.loc 9 844 0
 2839              		.cfi_startproc
 2840 0000 55       		pushq	%rbp
 2841              		.cfi_def_cfa_offset 16
 2842              		.cfi_offset 6, -16
 2843 0001 4889E5   		movq	%rsp, %rbp
 2844              		.cfi_def_cfa_register 6
 2845 0004 48897DF8 		movq	%rdi, -8(%rbp)
 845:/usr/include/c++/7/bits/stl_iterator.h ****     };
 2846              		.loc 9 845 0
 2847 0008 488B45F8 		movq	-8(%rbp), %rax
 2848 000c 5D       		popq	%rbp
 2849              		.cfi_def_cfa 7, 8
 2850 000d C3       		ret
 2851              		.cfi_endproc
 2852              	.LFE1001:
 2854              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11c
 2855              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 2857              	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2858              	.LFB1002:
 305:/usr/include/c++/7/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 2859              		.loc 12 305 0
 2860              		.cfi_startproc
 2861 0000 55       		pushq	%rbp
 2862              		.cfi_def_cfa_offset 16
 2863              		.cfi_offset 6, -16
 2864 0001 4889E5   		movq	%rsp, %rbp
 2865              		.cfi_def_cfa_register 6
 2866 0004 4883EC20 		subq	$32, %rsp
 2867 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2868 000c 488975F0 		movq	%rsi, -16(%rbp)
 2869 0010 488955E8 		movq	%rdx, -24(%rbp)
 2870 0014 48894DE0 		movq	%rcx, -32(%rbp)
 312:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 2871              		.loc 12 312 0
 2872 0018 488B4DE0 		movq	-32(%rbp), %rcx
 2873 001c 488B55E8 		movq	-24(%rbp), %rdx
 2874 0020 488B75F0 		movq	-16(%rbp), %rsi
 2875 0024 488B45F8 		movq	-8(%rbp), %rax
 2876 0028 4889C7   		movq	%rax, %rdi
 2877 002b E8000000 		call	_ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2877      00
 2878              		.loc 12 313 0
 2879 0030 C9       		leave
 2880              		.cfi_def_cfa 7, 8
 2881 0031 C3       		ret
 2882              		.cfi_endproc
 2883              	.LFE1002:
 2885              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 2886              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 2888              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7d
 2889              	.LFB1003:
 139:/usr/include/c++/7/ext/alloc_traits.h ****     { __a.destroy(__p); }
 2890              		.loc 7 139 0
 2891              		.cfi_startproc
 2892 0000 55       		pushq	%rbp
 2893              		.cfi_def_cfa_offset 16
 2894              		.cfi_offset 6, -16
 2895 0001 4889E5   		movq	%rsp, %rbp
 2896              		.cfi_def_cfa_register 6
 2897 0004 4883EC10 		subq	$16, %rsp
 2898 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2899 000c 488975F0 		movq	%rsi, -16(%rbp)
 2900              		.loc 7 140 0
 2901 0010 488B55F0 		movq	-16(%rbp), %rdx
 2902 0014 488B45F8 		movq	-8(%rbp), %rax
 2903 0018 4889D6   		movq	%rdx, %rsi
 2904 001b 4889C7   		movq	%rax, %rdi
 2905 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7
 2905      00
 2906 0023 90       		nop
 2907 0024 C9       		leave
 2908              		.cfi_def_cfa 7, 8
 2909 0025 C3       		ret
 2910              		.cfi_endproc
 2911              	.LFE1003:
 2913              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_trai
 2914              		.align 2
 2915              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2917              	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6
 2918              	.LFB1005:
 779:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(__i) { }
 2919              		.loc 9 779 0
 2920              		.cfi_startproc
 2921 0000 55       		pushq	%rbp
 2922              		.cfi_def_cfa_offset 16
 2923              		.cfi_offset 6, -16
 2924 0001 4889E5   		movq	%rsp, %rbp
 2925              		.cfi_def_cfa_register 6
 2926 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2927 0008 488975F0 		movq	%rsi, -16(%rbp)
 2928              	.LBB16:
 780:/usr/include/c++/7/bits/stl_iterator.h **** 
 2929              		.loc 9 780 0
 2930 000c 488B45F0 		movq	-16(%rbp), %rax
 2931 0010 488B10   		movq	(%rax), %rdx
 2932 0013 488B45F8 		movq	-8(%rbp), %rax
 2933 0017 488910   		movq	%rdx, (%rax)
 2934              	.LBE16:
 2935 001a 90       		nop
 2936 001b 5D       		popq	%rbp
 2937              		.cfi_def_cfa 7, 8
 2938 001c C3       		ret
 2939              		.cfi_endproc
 2940              	.LFE1005:
 2942              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2943              		.set	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 2944              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 2945              		.align 2
 2946              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 2948              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 2949              	.LFB1012:
  86:/usr/include/c++/7/ext/new_allocator.h **** 
 2950              		.loc 11 86 0
 2951              		.cfi_startproc
 2952 0000 55       		pushq	%rbp
 2953              		.cfi_def_cfa_offset 16
 2954              		.cfi_offset 6, -16
 2955 0001 4889E5   		movq	%rsp, %rbp
 2956              		.cfi_def_cfa_register 6
 2957 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/7/ext/new_allocator.h **** 
 2958              		.loc 11 86 0
 2959 0008 90       		nop
 2960 0009 5D       		popq	%rbp
 2961              		.cfi_def_cfa 7, 8
 2962 000a C3       		ret
 2963              		.cfi_endproc
 2964              	.LFE1012:
 2966              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 2967              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 2968              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 2969              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 2971              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10
 2972              	.LFB1014:
 132:/usr/include/c++/7/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 2973              		.loc 7 132 0
 2974              		.cfi_startproc
 2975 0000 55       		pushq	%rbp
 2976              		.cfi_def_cfa_offset 16
 2977              		.cfi_offset 6, -16
 2978 0001 4889E5   		movq	%rsp, %rbp
 2979              		.cfi_def_cfa_register 6
 2980 0004 4883EC20 		subq	$32, %rsp
 2981 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2982 000c 488975F0 		movq	%rsi, -16(%rbp)
 2983 0010 488955E8 		movq	%rdx, -24(%rbp)
 133:/usr/include/c++/7/ext/alloc_traits.h **** 
 2984              		.loc 7 133 0
 2985 0014 488B55E8 		movq	-24(%rbp), %rdx
 2986 0018 488B4DF0 		movq	-16(%rbp), %rcx
 2987 001c 488B45F8 		movq	-8(%rbp), %rax
 2988 0020 4889CE   		movq	%rcx, %rsi
 2989 0023 4889C7   		movq	%rax, %rdi
 2990 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE1
 2990      00
 2991 002b 90       		nop
 2992 002c C9       		leave
 2993              		.cfi_def_cfa 7, 8
 2994 002d C3       		ret
 2995              		.cfi_endproc
 2996              	.LFE1014:
 2998              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_t
 2999              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcES
 3001              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3002              	.LFB1015:
 105:/usr/include/c++/7/bits/stl_construct.h **** 	{
 3003              		.loc 6 105 0
 3004              		.cfi_startproc
 3005 0000 55       		pushq	%rbp
 3006              		.cfi_def_cfa_offset 16
 3007              		.cfi_offset 6, -16
 3008 0001 4889E5   		movq	%rsp, %rbp
 3009              		.cfi_def_cfa_register 6
 3010 0004 4883EC10 		subq	$16, %rsp
 3011 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3012 000c 488975F0 		movq	%rsi, -16(%rbp)
 3013              	.L165:
 107:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3014              		.loc 6 107 0 discriminator 2
 3015 0010 488B45F8 		movq	-8(%rbp), %rax
 3016 0014 483B45F0 		cmpq	-16(%rbp), %rax
 3017 0018 741B     		je	.L166
 108:/usr/include/c++/7/bits/stl_construct.h **** 	}
 3018              		.loc 6 108 0 discriminator 1
 3019 001a 488B45F8 		movq	-8(%rbp), %rax
 3020 001e 4889C7   		movq	%rax, %rdi
 3021 0021 E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 3021      00
 3022 0026 4889C7   		movq	%rax, %rdi
 3023 0029 E8000000 		call	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_@PLT
 3023      00
 107:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3024              		.loc 6 107 0 discriminator 1
 3025 002e 488345F8 		addq	$40, -8(%rbp)
 3025      28
 3026 0033 EBDB     		jmp	.L165
 3027              	.L166:
 109:/usr/include/c++/7/bits/stl_construct.h ****     };
 3028              		.loc 6 109 0
 3029 0035 90       		nop
 3030 0036 C9       		leave
 3031              		.cfi_def_cfa 7, 8
 3032 0037 C3       		ret
 3033              		.cfi_endproc
 3034              	.LFE1015:
 3036              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 3037              		.align 2
 3038              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_
 3040              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_:
 3041              	.LFB1017:
 326:/usr/include/c++/7/bits/stl_vector.h ****       : _Base(__x.size(),
 3042              		.loc 5 326 0
 3043              		.cfi_startproc
 3044              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3045              		.cfi_lsda 0x1b,.LLSDA1017
 3046 0000 55       		pushq	%rbp
 3047              		.cfi_def_cfa_offset 16
 3048              		.cfi_offset 6, -16
 3049 0001 4889E5   		movq	%rsp, %rbp
 3050              		.cfi_def_cfa_register 6
 3051 0004 4155     		pushq	%r13
 3052 0006 4154     		pushq	%r12
 3053 0008 53       		pushq	%rbx
 3054 0009 4883EC18 		subq	$24, %rsp
 3055              		.cfi_offset 13, -24
 3056              		.cfi_offset 12, -32
 3057              		.cfi_offset 3, -40
 3058 000d 48897DD8 		movq	%rdi, -40(%rbp)
 3059 0011 488975D0 		movq	%rsi, -48(%rbp)
 3060              	.LBB17:
 328:/usr/include/c++/7/bits/stl_vector.h ****       {
 3061              		.loc 5 328 0
 3062 0015 488B5DD8 		movq	-40(%rbp), %rbx
 3063 0019 488B45D0 		movq	-48(%rbp), %rax
 3064 001d 4889C7   		movq	%rax, %rdi
 3065 0020 E8000000 		call	_ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 3065      00
 3066 0025 4889C7   		movq	%rax, %rdi
 3067 0028 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 3067      00
 3068 002d 4989C4   		movq	%rax, %r12
 3069 0030 488B45D0 		movq	-48(%rbp), %rax
 3070 0034 4889C7   		movq	%rax, %rdi
 3071 0037 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 3071      00
 3072 003c 4C89E2   		movq	%r12, %rdx
 3073 003f 4889C6   		movq	%rax, %rsi
 3074 0042 4889DF   		movq	%rbx, %rdi
 3075              	.LEHB41:
 3076 0045 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2E
 3076      00
 3077              	.LEHE41:
 333:/usr/include/c++/7/bits/stl_vector.h ****       }
 3078              		.loc 5 333 0
 3079 004a 488B45D8 		movq	-40(%rbp), %rax
 3080 004e 4889C7   		movq	%rax, %rdi
 3081 0051 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 3081      00
 3082 0056 4989C5   		movq	%rax, %r13
 331:/usr/include/c++/7/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 3083              		.loc 5 331 0
 3084 0059 488B45D8 		movq	-40(%rbp), %rax
 3085 005d 488B18   		movq	(%rax), %rbx
 3086 0060 488B45D0 		movq	-48(%rbp), %rax
 3087 0064 4889C7   		movq	%rax, %rdi
 3088              	.LEHB42:
 3089 0067 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv@PL
 3089      00
 3090 006c 4989C4   		movq	%rax, %r12
 3091 006f 488B45D0 		movq	-48(%rbp), %rax
 3092 0073 4889C7   		movq	%rax, %rdi
 3093 0076 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv@
 3093      00
 331:/usr/include/c++/7/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 3094              		.loc 5 331 0 is_stmt 0 discriminator 1
 3095 007b 4C89E9   		movq	%r13, %rcx
 3096 007e 4889DA   		movq	%rbx, %rdx
 3097 0081 4C89E6   		movq	%r12, %rsi
 3098 0084 4889C7   		movq	%rax, %rdi
 3099 0087 E8000000 		call	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_str
 3099      00
 3100              	.LEHE42:
 331:/usr/include/c++/7/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 3101              		.loc 5 331 0 discriminator 2
 3102 008c 4889C2   		movq	%rax, %rdx
 330:/usr/include/c++/7/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 3103              		.loc 5 330 0 is_stmt 1 discriminator 2
 3104 008f 488B45D8 		movq	-40(%rbp), %rax
 3105 0093 48895008 		movq	%rdx, 8(%rax)
 3106              	.LBE17:
 334:/usr/include/c++/7/bits/stl_vector.h **** 
 3107              		.loc 5 334 0 discriminator 2
 3108 0097 EB1A     		jmp	.L170
 3109              	.L169:
 3110 0099 4889C3   		movq	%rax, %rbx
 3111              	.LBB18:
 328:/usr/include/c++/7/bits/stl_vector.h ****       {
 3112              		.loc 5 328 0
 3113 009c 488B45D8 		movq	-40(%rbp), %rax
 3114 00a0 4889C7   		movq	%rax, %rdi
 3115 00a3 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 3115      00
 3116 00a8 4889D8   		movq	%rbx, %rax
 3117 00ab 4889C7   		movq	%rax, %rdi
 3118              	.LEHB43:
 3119 00ae E8000000 		call	_Unwind_Resume@PLT
 3119      00
 3120              	.LEHE43:
 3121              	.L170:
 3122              	.LBE18:
 334:/usr/include/c++/7/bits/stl_vector.h **** 
 3123              		.loc 5 334 0
 3124 00b3 4883C418 		addq	$24, %rsp
 3125 00b7 5B       		popq	%rbx
 3126 00b8 415C     		popq	%r12
 3127 00ba 415D     		popq	%r13
 3128 00bc 5D       		popq	%rbp
 3129              		.cfi_def_cfa 7, 8
 3130 00bd C3       		ret
 3131              		.cfi_endproc
 3132              	.LFE1017:
 3133              		.section	.gcc_except_table
 3134              	.LLSDA1017:
 3135 00e8 FF       		.byte	0xff
 3136 00e9 FF       		.byte	0xff
 3137 00ea 01       		.byte	0x1
 3138 00eb 0E       		.uleb128 .LLSDACSE1017-.LLSDACSB1017
 3139              	.LLSDACSB1017:
 3140 00ec 45       		.uleb128 .LEHB41-.LFB1017
 3141 00ed 05       		.uleb128 .LEHE41-.LEHB41
 3142 00ee 00       		.uleb128 0
 3143 00ef 00       		.uleb128 0
 3144 00f0 67       		.uleb128 .LEHB42-.LFB1017
 3145 00f1 25       		.uleb128 .LEHE42-.LEHB42
 3146 00f2 9901     		.uleb128 .L169-.LFB1017
 3147 00f4 00       		.uleb128 0
 3148 00f5 AE01     		.uleb128 .LEHB43-.LFB1017
 3149 00f7 05       		.uleb128 .LEHE43-.LEHB43
 3150 00f8 00       		.uleb128 0
 3151 00f9 00       		.uleb128 0
 3152              	.LLSDACSE1017:
 3153              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 3155              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1ERKS9_
 3156              		.set	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1ERKS9_,_
 3157              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv,"axG",@progbits,_Z
 3158              		.align 2
 3159              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv
 3161              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv:
 3162              	.LFB1019:
 675:/usr/include/c++/7/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 3163              		.loc 5 675 0
 3164              		.cfi_startproc
 3165 0000 55       		pushq	%rbp
 3166              		.cfi_def_cfa_offset 16
 3167              		.cfi_offset 6, -16
 3168 0001 4889E5   		movq	%rsp, %rbp
 3169              		.cfi_def_cfa_register 6
 3170 0004 4883EC10 		subq	$16, %rsp
 3171 0008 48897DF8 		movq	%rdi, -8(%rbp)
 676:/usr/include/c++/7/bits/stl_vector.h **** 
 3172              		.loc 5 676 0
 3173 000c 488B45F8 		movq	-8(%rbp), %rax
 3174 0010 4889C7   		movq	%rax, %rdi
 3175 0013 E8000000 		call	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 3175      00
 3176 0018 4889C7   		movq	%rax, %rdi
 3177 001b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_@PLT
 3177      00
 3178 0020 C9       		leave
 3179              		.cfi_def_cfa 7, 8
 3180 0021 C3       		ret
 3181              		.cfi_endproc
 3182              	.LFE1019:
 3184              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv,"axG",@progbits,_ZNKSt
 3185              		.align 2
 3186              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv
 3188              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv:
 3189              	.LFB1020:
 670:/usr/include/c++/7/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 3190              		.loc 5 670 0
 3191              		.cfi_startproc
 3192 0000 55       		pushq	%rbp
 3193              		.cfi_def_cfa_offset 16
 3194              		.cfi_offset 6, -16
 3195 0001 4889E5   		movq	%rsp, %rbp
 3196              		.cfi_def_cfa_register 6
 3197 0004 48897DF8 		movq	%rdi, -8(%rbp)
 671:/usr/include/c++/7/bits/stl_vector.h **** 
 3198              		.loc 5 671 0
 3199 0008 488B45F8 		movq	-8(%rbp), %rax
 3200 000c 488B4008 		movq	8(%rax), %rax
 3201 0010 4889C2   		movq	%rax, %rdx
 3202 0013 488B45F8 		movq	-8(%rbp), %rax
 3203 0017 488B00   		movq	(%rax), %rax
 3204 001a 4829C2   		subq	%rax, %rdx
 3205 001d 4889D0   		movq	%rdx, %rax
 3206 0020 48C1F807 		sarq	$7, %rax
 3207 0024 5D       		popq	%rbp
 3208              		.cfi_def_cfa 7, 8
 3209 0025 C3       		ret
 3210              		.cfi_endproc
 3211              	.LFE1020:
 3213              		.section	.text._ZSt3maxImERKT_S2_S2_,"axG",@progbits,_ZSt3maxImERKT_S2_S2_,comdat
 3214              		.weak	_ZSt3maxImERKT_S2_S2_
 3216              	_ZSt3maxImERKT_S2_S2_:
 3217              	.LFB1021:
 3218              		.file 13 "/usr/include/c++/7/bits/stl_algobase.h"
   1:/usr/include/c++/7/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_algobase.h **** 
   3:/usr/include/c++/7/bits/stl_algobase.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_algobase.h **** //
   5:/usr/include/c++/7/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_algobase.h **** 
  11:/usr/include/c++/7/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_algobase.h **** 
  16:/usr/include/c++/7/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_algobase.h **** 
  20:/usr/include/c++/7/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_algobase.h **** 
  25:/usr/include/c++/7/bits/stl_algobase.h **** /*
  26:/usr/include/c++/7/bits/stl_algobase.h ****  *
  27:/usr/include/c++/7/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_algobase.h ****  *
  30:/usr/include/c++/7/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_algobase.h ****  *
  38:/usr/include/c++/7/bits/stl_algobase.h ****  *
  39:/usr/include/c++/7/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/7/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_algobase.h ****  *
  42:/usr/include/c++/7/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_algobase.h ****  */
  50:/usr/include/c++/7/bits/stl_algobase.h **** 
  51:/usr/include/c++/7/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/7/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/7/bits/stl_algobase.h ****  */
  55:/usr/include/c++/7/bits/stl_algobase.h **** 
  56:/usr/include/c++/7/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/7/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/7/bits/stl_algobase.h **** 
  59:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/7/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/7/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/7/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/7/bits/stl_algobase.h **** 
  73:/usr/include/c++/7/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/7/bits/stl_algobase.h **** {
  75:/usr/include/c++/7/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/7/bits/stl_algobase.h **** 
  77:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus < 201103L
  78:/usr/include/c++/7/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:/usr/include/c++/7/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:/usr/include/c++/7/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _BoolType>
  82:/usr/include/c++/7/bits/stl_algobase.h ****     struct __iter_swap
  83:/usr/include/c++/7/bits/stl_algobase.h ****     {
  84:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:/usr/include/c++/7/bits/stl_algobase.h ****         static void
  86:/usr/include/c++/7/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:/usr/include/c++/7/bits/stl_algobase.h ****         {
  88:/usr/include/c++/7/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:/usr/include/c++/7/bits/stl_algobase.h ****             _ValueType1;
  90:/usr/include/c++/7/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  91:/usr/include/c++/7/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  92:/usr/include/c++/7/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  93:/usr/include/c++/7/bits/stl_algobase.h **** 	}
  94:/usr/include/c++/7/bits/stl_algobase.h ****     };
  95:/usr/include/c++/7/bits/stl_algobase.h **** 
  96:/usr/include/c++/7/bits/stl_algobase.h ****   template<>
  97:/usr/include/c++/7/bits/stl_algobase.h ****     struct __iter_swap<true>
  98:/usr/include/c++/7/bits/stl_algobase.h ****     {
  99:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:/usr/include/c++/7/bits/stl_algobase.h ****         static void 
 101:/usr/include/c++/7/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:/usr/include/c++/7/bits/stl_algobase.h ****         {
 103:/usr/include/c++/7/bits/stl_algobase.h ****           swap(*__a, *__b);
 104:/usr/include/c++/7/bits/stl_algobase.h ****         }
 105:/usr/include/c++/7/bits/stl_algobase.h ****     };
 106:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 107:/usr/include/c++/7/bits/stl_algobase.h **** 
 108:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 109:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 112:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 113:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   Nothing.
 114:/usr/include/c++/7/bits/stl_algobase.h ****    *
 115:/usr/include/c++/7/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:/usr/include/c++/7/bits/stl_algobase.h ****    *  iterators themselves.
 117:/usr/include/c++/7/bits/stl_algobase.h ****   */
 118:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:/usr/include/c++/7/bits/stl_algobase.h ****     inline void
 120:/usr/include/c++/7/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:/usr/include/c++/7/bits/stl_algobase.h ****     {
 122:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 123:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 125:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 127:/usr/include/c++/7/bits/stl_algobase.h **** 
 128:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus < 201103L
 129:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:/usr/include/c++/7/bits/stl_algobase.h **** 	_ValueType1;
 131:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:/usr/include/c++/7/bits/stl_algobase.h **** 	_ValueType2;
 133:/usr/include/c++/7/bits/stl_algobase.h **** 
 134:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ValueType2>)
 136:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ValueType1>)
 138:/usr/include/c++/7/bits/stl_algobase.h **** 
 139:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:/usr/include/c++/7/bits/stl_algobase.h **** 	_ReferenceType1;
 141:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:/usr/include/c++/7/bits/stl_algobase.h **** 	_ReferenceType2;
 143:/usr/include/c++/7/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:/usr/include/c++/7/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:/usr/include/c++/7/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:/usr/include/c++/7/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 147:/usr/include/c++/7/bits/stl_algobase.h **** #else
 148:/usr/include/c++/7/bits/stl_algobase.h ****       swap(*__a, *__b);
 149:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 150:/usr/include/c++/7/bits/stl_algobase.h ****     }
 151:/usr/include/c++/7/bits/stl_algobase.h **** 
 152:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 153:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:/usr/include/c++/7/bits/stl_algobase.h ****    *
 160:/usr/include/c++/7/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 161:/usr/include/c++/7/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:/usr/include/c++/7/bits/stl_algobase.h ****    *  The ranges must not overlap.
 163:/usr/include/c++/7/bits/stl_algobase.h ****   */
 164:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:/usr/include/c++/7/bits/stl_algobase.h ****     _ForwardIterator2
 166:/usr/include/c++/7/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:/usr/include/c++/7/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:/usr/include/c++/7/bits/stl_algobase.h ****     {
 169:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 170:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 172:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 174:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:/usr/include/c++/7/bits/stl_algobase.h **** 
 176:/usr/include/c++/7/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 177:/usr/include/c++/7/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:/usr/include/c++/7/bits/stl_algobase.h ****       return __first2;
 179:/usr/include/c++/7/bits/stl_algobase.h ****     }
 180:/usr/include/c++/7/bits/stl_algobase.h **** 
 181:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 182:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 183:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:/usr/include/c++/7/bits/stl_algobase.h ****    *
 188:/usr/include/c++/7/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:/usr/include/c++/7/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:/usr/include/c++/7/bits/stl_algobase.h ****    *  preprocessor macro.
 191:/usr/include/c++/7/bits/stl_algobase.h ****   */
 192:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Tp>
 193:/usr/include/c++/7/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 194:/usr/include/c++/7/bits/stl_algobase.h ****     inline const _Tp&
 195:/usr/include/c++/7/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 196:/usr/include/c++/7/bits/stl_algobase.h ****     {
 197:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 198:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 199:/usr/include/c++/7/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 200:/usr/include/c++/7/bits/stl_algobase.h ****       if (__b < __a)
 201:/usr/include/c++/7/bits/stl_algobase.h **** 	return __b;
 202:/usr/include/c++/7/bits/stl_algobase.h ****       return __a;
 203:/usr/include/c++/7/bits/stl_algobase.h ****     }
 204:/usr/include/c++/7/bits/stl_algobase.h **** 
 205:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 206:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 207:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 208:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 209:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 210:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 211:/usr/include/c++/7/bits/stl_algobase.h ****    *
 212:/usr/include/c++/7/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 213:/usr/include/c++/7/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 214:/usr/include/c++/7/bits/stl_algobase.h ****    *  preprocessor macro.
 215:/usr/include/c++/7/bits/stl_algobase.h ****   */
 216:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Tp>
 217:/usr/include/c++/7/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 218:/usr/include/c++/7/bits/stl_algobase.h ****     inline const _Tp&
 219:/usr/include/c++/7/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 3219              		.loc 13 219 0
 3220              		.cfi_startproc
 3221 0000 55       		pushq	%rbp
 3222              		.cfi_def_cfa_offset 16
 3223              		.cfi_offset 6, -16
 3224 0001 4889E5   		movq	%rsp, %rbp
 3225              		.cfi_def_cfa_register 6
 3226 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3227 0008 488975F0 		movq	%rsi, -16(%rbp)
 220:/usr/include/c++/7/bits/stl_algobase.h ****     {
 221:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 222:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 223:/usr/include/c++/7/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 224:/usr/include/c++/7/bits/stl_algobase.h ****       if (__a < __b)
 3228              		.loc 13 224 0
 3229 000c 488B45F8 		movq	-8(%rbp), %rax
 3230 0010 488B10   		movq	(%rax), %rdx
 3231 0013 488B45F0 		movq	-16(%rbp), %rax
 3232 0017 488B00   		movq	(%rax), %rax
 3233 001a 4839C2   		cmpq	%rax, %rdx
 3234 001d 7306     		jnb	.L176
 225:/usr/include/c++/7/bits/stl_algobase.h **** 	return __b;
 3235              		.loc 13 225 0
 3236 001f 488B45F0 		movq	-16(%rbp), %rax
 3237 0023 EB04     		jmp	.L177
 3238              	.L176:
 226:/usr/include/c++/7/bits/stl_algobase.h ****       return __a;
 3239              		.loc 13 226 0
 3240 0025 488B45F8 		movq	-8(%rbp), %rax
 3241              	.L177:
 227:/usr/include/c++/7/bits/stl_algobase.h ****     }
 3242              		.loc 13 227 0
 3243 0029 5D       		popq	%rbp
 3244              		.cfi_def_cfa 7, 8
 3245 002a C3       		ret
 3246              		.cfi_endproc
 3247              	.LFE1021:
 3249              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m,"
 3250              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m
 3252              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m:
 3253              	.LFB1022:
 129:/usr/include/c++/7/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 3254              		.loc 7 129 0
 3255              		.cfi_startproc
 3256 0000 55       		pushq	%rbp
 3257              		.cfi_def_cfa_offset 16
 3258              		.cfi_offset 6, -16
 3259 0001 4889E5   		movq	%rsp, %rbp
 3260              		.cfi_def_cfa_register 6
 3261 0004 4883EC10 		subq	$16, %rsp
 3262 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3263 000c 488975F0 		movq	%rsi, -16(%rbp)
 130:/usr/include/c++/7/ext/alloc_traits.h **** 
 3264              		.loc 7 130 0
 3265 0010 488B4DF0 		movq	-16(%rbp), %rcx
 3266 0014 488B45F8 		movq	-8(%rbp), %rax
 3267 0018 BA000000 		movl	$0, %edx
 3267      00
 3268 001d 4889CE   		movq	%rcx, %rsi
 3269 0020 4889C7   		movq	%rax, %rdi
 3270 0023 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv@PLT
 3270      00
 3271 0028 C9       		leave
 3272              		.cfi_def_cfa 7, 8
 3273 0029 C3       		ret
 3274              		.cfi_endproc
 3275              	.LFE1022:
 3277              		.section	.text._ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaI
 3278              		.weak	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E
 3280              	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E:
 3281              	.LFB1023:
 287:/usr/include/c++/7/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 3282              		.loc 12 287 0
 3283              		.cfi_startproc
 3284 0000 55       		pushq	%rbp
 3285              		.cfi_def_cfa_offset 16
 3286              		.cfi_offset 6, -16
 3287 0001 4889E5   		movq	%rsp, %rbp
 3288              		.cfi_def_cfa_register 6
 3289 0004 4883EC20 		subq	$32, %rsp
 3290 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3291 000c 488975F0 		movq	%rsi, -16(%rbp)
 3292 0010 488955E8 		movq	%rdx, -24(%rbp)
 3293 0014 48894DE0 		movq	%rcx, -32(%rbp)
 289:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 3294              		.loc 12 289 0
 3295 0018 488B55E8 		movq	-24(%rbp), %rdx
 3296 001c 488B4DF0 		movq	-16(%rbp), %rcx
 3297 0020 488B45F8 		movq	-8(%rbp), %rax
 3298 0024 4889CE   		movq	%rcx, %rsi
 3299 0027 4889C7   		movq	%rax, %rdi
 3300 002a E8000000 		call	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_@PLT
 3300      00
 3301 002f C9       		leave
 3302              		.cfi_def_cfa 7, 8
 3303 0030 C3       		ret
 3304              		.cfi_endproc
 3305              	.LFE1023:
 3307              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_,"axG",@p
 3308              		.align 2
 3309              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_
 3311              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_:
 3312              	.LFB1024:
 147:/usr/include/c++/7/ext/new_allocator.h **** 
 148:/usr/include/c++/7/ext/new_allocator.h ****       void
 149:/usr/include/c++/7/ext/new_allocator.h ****       destroy(pointer __p) { __p->~_Tp(); }
 3313              		.loc 11 149 0
 3314              		.cfi_startproc
 3315 0000 55       		pushq	%rbp
 3316              		.cfi_def_cfa_offset 16
 3317              		.cfi_offset 6, -16
 3318 0001 4889E5   		movq	%rsp, %rbp
 3319              		.cfi_def_cfa_register 6
 3320 0004 4883EC10 		subq	$16, %rsp
 3321 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3322 000c 488975F0 		movq	%rsi, -16(%rbp)
 3323              		.loc 11 149 0
 3324 0010 488B45F0 		movq	-16(%rbp), %rax
 3325 0014 4889C7   		movq	%rax, %rdi
 3326 0017 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 3326      00
 3327 001c 90       		nop
 3328 001d C9       		leave
 3329              		.cfi_def_cfa 7, 8
 3330 001e C3       		ret
 3331              		.cfi_endproc
 3332              	.LFE1024:
 3334              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 3335              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 3337              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 3338              	.LFB1025:
 127:/usr/include/c++/7/bits/stl_construct.h ****     {
 3339              		.loc 6 127 0
 3340              		.cfi_startproc
 3341 0000 55       		pushq	%rbp
 3342              		.cfi_def_cfa_offset 16
 3343              		.cfi_offset 6, -16
 3344 0001 4889E5   		movq	%rsp, %rbp
 3345              		.cfi_def_cfa_register 6
 3346 0004 4883EC10 		subq	$16, %rsp
 3347 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3348 000c 488975F0 		movq	%rsi, -16(%rbp)
 137:/usr/include/c++/7/bits/stl_construct.h ****     }
 3349              		.loc 6 137 0
 3350 0010 488B55F0 		movq	-16(%rbp), %rdx
 3351 0014 488B45F8 		movq	-8(%rbp), %rax
 3352 0018 4889D6   		movq	%rdx, %rsi
 3353 001b 4889C7   		movq	%rax, %rdi
 3354 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 3354      00
 138:/usr/include/c++/7/bits/stl_construct.h **** 
 3355              		.loc 6 138 0
 3356 0023 90       		nop
 3357 0024 C9       		leave
 3358              		.cfi_def_cfa 7, 8
 3359 0025 C3       		ret
 3360              		.cfi_endproc
 3361              	.LFE1025:
 3363              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_
 3364              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
 3366              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:
 3367              	.LFB1026:
 132:/usr/include/c++/7/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 3368              		.loc 7 132 0
 3369              		.cfi_startproc
 3370 0000 55       		pushq	%rbp
 3371              		.cfi_def_cfa_offset 16
 3372              		.cfi_offset 6, -16
 3373 0001 4889E5   		movq	%rsp, %rbp
 3374              		.cfi_def_cfa_register 6
 3375 0004 4883EC20 		subq	$32, %rsp
 3376 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3377 000c 488975F0 		movq	%rsi, -16(%rbp)
 3378 0010 488955E8 		movq	%rdx, -24(%rbp)
 133:/usr/include/c++/7/ext/alloc_traits.h **** 
 3379              		.loc 7 133 0
 3380 0014 488B55E8 		movq	-24(%rbp), %rdx
 3381 0018 488B4DF0 		movq	-16(%rbp), %rcx
 3382 001c 488B45F8 		movq	-8(%rbp), %rax
 3383 0020 4889CE   		movq	%rcx, %rsi
 3384 0023 4889C7   		movq	%rax, %rdi
 3385 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 3385      00
 3386 002b 90       		nop
 3387 002c C9       		leave
 3388              		.cfi_def_cfa 7, 8
 3389 002d C3       		ret
 3390              		.cfi_endproc
 3391              	.LFE1026:
 3393              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 3394              		.align 2
 3395              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_siz
 3397              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_sizeEv:
 3398              	.LFB1032:
 675:/usr/include/c++/7/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 3399              		.loc 5 675 0
 3400              		.cfi_startproc
 3401 0000 55       		pushq	%rbp
 3402              		.cfi_def_cfa_offset 16
 3403              		.cfi_offset 6, -16
 3404 0001 4889E5   		movq	%rsp, %rbp
 3405              		.cfi_def_cfa_register 6
 3406 0004 4883EC10 		subq	$16, %rsp
 3407 0008 48897DF8 		movq	%rdi, -8(%rbp)
 676:/usr/include/c++/7/bits/stl_vector.h **** 
 3408              		.loc 5 676 0
 3409 000c 488B45F8 		movq	-8(%rbp), %rax
 3410 0010 4889C7   		movq	%rax, %rdi
 3411 0013 E8000000 		call	_ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 3411      00
 3412 0018 4889C7   		movq	%rax, %rdi
 3413 001b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 3413      00
 3414 0020 C9       		leave
 3415              		.cfi_def_cfa 7, 8
 3416 0021 C3       		ret
 3417              		.cfi_endproc
 3418              	.LFE1032:
 3420              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 3421              		.align 2
 3422              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv
 3424              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv:
 3425              	.LFB1033:
 670:/usr/include/c++/7/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 3426              		.loc 5 670 0
 3427              		.cfi_startproc
 3428 0000 55       		pushq	%rbp
 3429              		.cfi_def_cfa_offset 16
 3430              		.cfi_offset 6, -16
 3431 0001 4889E5   		movq	%rsp, %rbp
 3432              		.cfi_def_cfa_register 6
 3433 0004 48897DF8 		movq	%rdi, -8(%rbp)
 671:/usr/include/c++/7/bits/stl_vector.h **** 
 3434              		.loc 5 671 0
 3435 0008 488B45F8 		movq	-8(%rbp), %rax
 3436 000c 488B4008 		movq	8(%rax), %rax
 3437 0010 4889C2   		movq	%rax, %rdx
 3438 0013 488B45F8 		movq	-8(%rbp), %rax
 3439 0017 488B00   		movq	(%rax), %rax
 3440 001a 4829C2   		subq	%rax, %rdx
 3441 001d 4889D0   		movq	%rdx, %rax
 3442 0020 48C1F803 		sarq	$3, %rax
 3443 0024 4889C2   		movq	%rax, %rdx
 3444 0027 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 3444      CCCCCCCC 
 3444      CCCC
 3445 0031 480FAFC2 		imulq	%rdx, %rax
 3446 0035 5D       		popq	%rbp
 3447              		.cfi_def_cfa 7, 8
 3448 0036 C3       		ret
 3449              		.cfi_endproc
 3450              	.LFE1033:
 3452              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3453              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3455              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8a
 3456              	.LFB1034:
 129:/usr/include/c++/7/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 3457              		.loc 7 129 0
 3458              		.cfi_startproc
 3459 0000 55       		pushq	%rbp
 3460              		.cfi_def_cfa_offset 16
 3461              		.cfi_offset 6, -16
 3462 0001 4889E5   		movq	%rsp, %rbp
 3463              		.cfi_def_cfa_register 6
 3464 0004 4883EC10 		subq	$16, %rsp
 3465 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3466 000c 488975F0 		movq	%rsi, -16(%rbp)
 130:/usr/include/c++/7/ext/alloc_traits.h **** 
 3467              		.loc 7 130 0
 3468 0010 488B4DF0 		movq	-16(%rbp), %rcx
 3469 0014 488B45F8 		movq	-8(%rbp), %rax
 3470 0018 BA000000 		movl	$0, %edx
 3470      00
 3471 001d 4889CE   		movq	%rcx, %rsi
 3472 0020 4889C7   		movq	%rax, %rdi
 3473 0023 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8
 3473      00
 3474 0028 C9       		leave
 3475              		.cfi_def_cfa 7, 8
 3476 0029 C3       		ret
 3477              		.cfi_endproc
 3478              	.LFE1034:
 3480              		.section	.text._ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIc
 3481              		.weak	_ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3483              	_ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_S7_E
 3484              	.LFB1035:
 287:/usr/include/c++/7/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 3485              		.loc 12 287 0
 3486              		.cfi_startproc
 3487 0000 55       		pushq	%rbp
 3488              		.cfi_def_cfa_offset 16
 3489              		.cfi_offset 6, -16
 3490 0001 4889E5   		movq	%rsp, %rbp
 3491              		.cfi_def_cfa_register 6
 3492 0004 4883EC20 		subq	$32, %rsp
 3493 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3494 000c 488975F0 		movq	%rsi, -16(%rbp)
 3495 0010 488955E8 		movq	%rdx, -24(%rbp)
 3496 0014 48894DE0 		movq	%rcx, -32(%rbp)
 289:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 3497              		.loc 12 289 0
 3498 0018 488B55E8 		movq	-24(%rbp), %rdx
 3499 001c 488B4DF0 		movq	-16(%rbp), %rcx
 3500 0020 488B45F8 		movq	-8(%rbp), %rax
 3501 0024 4889CE   		movq	%rcx, %rsi
 3502 0027 4889C7   		movq	%rax, %rdi
 3503 002a E8000000 		call	_ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_ET
 3503      00
 3504 002f C9       		leave
 3505              		.cfi_def_cfa 7, 8
 3506 0030 C3       		ret
 3507              		.cfi_endproc
 3508              	.LFE1035:
 3510              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3511              		.align 2
 3512              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3514              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destro
 3515              	.LFB1036:
 3516              		.loc 11 149 0
 3517              		.cfi_startproc
 3518 0000 55       		pushq	%rbp
 3519              		.cfi_def_cfa_offset 16
 3520              		.cfi_offset 6, -16
 3521 0001 4889E5   		movq	%rsp, %rbp
 3522              		.cfi_def_cfa_register 6
 3523 0004 4883EC10 		subq	$16, %rsp
 3524 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3525 000c 488975F0 		movq	%rsi, -16(%rbp)
 3526              		.loc 11 149 0
 3527 0010 488B45F0 		movq	-16(%rbp), %rax
 3528 0014 4889C7   		movq	%rax, %rdi
 3529 0017 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 3529      00
 3530 001c 90       		nop
 3531 001d C9       		leave
 3532              		.cfi_def_cfa 7, 8
 3533 001e C3       		ret
 3534              		.cfi_endproc
 3535              	.LFE1036:
 3537              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3538              		.align 2
 3539              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3541              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deall
 3542              	.LFB1038:
 116:/usr/include/c++/7/ext/new_allocator.h ****       {
 3543              		.loc 11 116 0
 3544              		.cfi_startproc
 3545 0000 55       		pushq	%rbp
 3546              		.cfi_def_cfa_offset 16
 3547              		.cfi_offset 6, -16
 3548 0001 4889E5   		movq	%rsp, %rbp
 3549              		.cfi_def_cfa_register 6
 3550 0004 4883EC20 		subq	$32, %rsp
 3551 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3552 000c 488975F0 		movq	%rsi, -16(%rbp)
 3553 0010 488955E8 		movq	%rdx, -24(%rbp)
 125:/usr/include/c++/7/ext/new_allocator.h ****       }
 3554              		.loc 11 125 0
 3555 0014 488B45F0 		movq	-16(%rbp), %rax
 3556 0018 4889C7   		movq	%rax, %rdi
 3557 001b E8000000 		call	_ZdlPv@PLT
 3557      00
 126:/usr/include/c++/7/ext/new_allocator.h **** 
 3558              		.loc 11 126 0
 3559 0020 90       		nop
 3560 0021 C9       		leave
 3561              		.cfi_def_cfa 7, 8
 3562 0022 C3       		ret
 3563              		.cfi_endproc
 3564              	.LFE1038:
 3566              		.section	.text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT
 3567              		.weak	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
 3569              	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:
 3570              	.LFB1039:
 3571              		.file 14 "/usr/include/c++/7/bits/move.h"
   1:/usr/include/c++/7/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/c++/7/bits/move.h **** 
   3:/usr/include/c++/7/bits/move.h **** // Copyright (C) 2007-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/move.h **** //
   5:/usr/include/c++/7/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/move.h **** // any later version.
  10:/usr/include/c++/7/bits/move.h **** 
  11:/usr/include/c++/7/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/move.h **** 
  16:/usr/include/c++/7/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/move.h **** 
  20:/usr/include/c++/7/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/move.h **** 
  25:/usr/include/c++/7/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/7/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/7/bits/move.h ****  */
  29:/usr/include/c++/7/bits/move.h **** 
  30:/usr/include/c++/7/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/7/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/7/bits/move.h **** 
  33:/usr/include/c++/7/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/7/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/7/bits/move.h **** 
  36:/usr/include/c++/7/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/7/bits/move.h **** {
  38:/usr/include/c++/7/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/7/bits/move.h **** 
  40:/usr/include/c++/7/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/7/bits/move.h ****   /**
  42:/usr/include/c++/7/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/7/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/7/bits/move.h ****    */
  45:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/7/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/usr/include/c++/7/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 3572              		.loc 14 47 0
 3573              		.cfi_startproc
 3574 0000 55       		pushq	%rbp
 3575              		.cfi_def_cfa_offset 16
 3576              		.cfi_offset 6, -16
 3577 0001 4889E5   		movq	%rsp, %rbp
 3578              		.cfi_def_cfa_register 6
 3579 0004 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/7/bits/move.h ****     { return __builtin_addressof(__r); }
 3580              		.loc 14 48 0
 3581 0008 488B45F8 		movq	-8(%rbp), %rax
 3582 000c 5D       		popq	%rbp
 3583              		.cfi_def_cfa 7, 8
 3584 000d C3       		ret
 3585              		.cfi_endproc
 3586              	.LFE1039:
 3588              		.section	.text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_,"
 3589              		.weak	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
 3591              	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:
 3592              	.LFB1040:
  97:/usr/include/c++/7/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 3593              		.loc 6 97 0
 3594              		.cfi_startproc
 3595 0000 55       		pushq	%rbp
 3596              		.cfi_def_cfa_offset 16
 3597              		.cfi_offset 6, -16
 3598 0001 4889E5   		movq	%rsp, %rbp
 3599              		.cfi_def_cfa_register 6
 3600 0004 4883EC10 		subq	$16, %rsp
 3601 0008 48897DF8 		movq	%rdi, -8(%rbp)
  98:/usr/include/c++/7/bits/stl_construct.h **** 
 3602              		.loc 6 98 0
 3603 000c 488B45F8 		movq	-8(%rbp), %rax
 3604 0010 4889C7   		movq	%rax, %rdi
 3605 0013 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 3605      00
 3606 0018 90       		nop
 3607 0019 C9       		leave
 3608              		.cfi_def_cfa 7, 8
 3609 001a C3       		ret
 3610              		.cfi_endproc
 3611              	.LFE1040:
 3613              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3614              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3616              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE17
 3617              	.LFB1041:
 141:/usr/include/c++/7/ext/alloc_traits.h **** 
 142:/usr/include/c++/7/ext/alloc_traits.h ****     static size_type max_size(const _Alloc& __a)
 143:/usr/include/c++/7/ext/alloc_traits.h ****     { return __a.max_size(); }
 144:/usr/include/c++/7/ext/alloc_traits.h **** 
 145:/usr/include/c++/7/ext/alloc_traits.h ****     static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 3618              		.loc 7 145 0
 3619              		.cfi_startproc
 3620 0000 55       		pushq	%rbp
 3621              		.cfi_def_cfa_offset 16
 3622              		.cfi_offset 6, -16
 3623 0001 4889E5   		movq	%rsp, %rbp
 3624              		.cfi_def_cfa_register 6
 3625 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3626              		.loc 7 145 0
 3627 0008 488B45F8 		movq	-8(%rbp), %rax
 3628 000c 5D       		popq	%rbp
 3629              		.cfi_def_cfa 7, 8
 3630 000d C3       		ret
 3631              		.cfi_endproc
 3632              	.LFE1041:
 3634              		.section	.text._ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3635              		.align 2
 3636              		.weak	_ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE1
 3638              	_ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get
 3639              	.LFB1042:
 119:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 3640              		.loc 5 119 0
 3641              		.cfi_startproc
 3642 0000 55       		pushq	%rbp
 3643              		.cfi_def_cfa_offset 16
 3644              		.cfi_offset 6, -16
 3645 0001 4889E5   		movq	%rsp, %rbp
 3646              		.cfi_def_cfa_register 6
 3647 0004 48897DF8 		movq	%rdi, -8(%rbp)
 120:/usr/include/c++/7/bits/stl_vector.h **** 
 3648              		.loc 5 120 0
 3649 0008 488B45F8 		movq	-8(%rbp), %rax
 3650 000c 5D       		popq	%rbp
 3651              		.cfi_def_cfa 7, 8
 3652 000d C3       		ret
 3653              		.cfi_endproc
 3654              	.LFE1042:
 3656              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3657              		.align 2
 3658              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2
 3660              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2EmRKS8_
 3661              	.LFB1044:
 136:/usr/include/c++/7/bits/stl_vector.h ****       : _M_impl(__a)
 3662              		.loc 5 136 0
 3663              		.cfi_startproc
 3664              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3665              		.cfi_lsda 0x1b,.LLSDA1044
 3666 0000 55       		pushq	%rbp
 3667              		.cfi_def_cfa_offset 16
 3668              		.cfi_offset 6, -16
 3669 0001 4889E5   		movq	%rsp, %rbp
 3670              		.cfi_def_cfa_register 6
 3671 0004 53       		pushq	%rbx
 3672 0005 4883EC28 		subq	$40, %rsp
 3673              		.cfi_offset 3, -24
 3674 0009 48897DE8 		movq	%rdi, -24(%rbp)
 3675 000d 488975E0 		movq	%rsi, -32(%rbp)
 3676 0011 488955D8 		movq	%rdx, -40(%rbp)
 3677              	.LBB19:
 137:/usr/include/c++/7/bits/stl_vector.h ****       { _M_create_storage(__n); }
 3678              		.loc 5 137 0
 3679 0015 488B45E8 		movq	-24(%rbp), %rax
 3680 0019 488B55D8 		movq	-40(%rbp), %rdx
 3681 001d 4889D6   		movq	%rdx, %rsi
 3682 0020 4889C7   		movq	%rax, %rdi
 3683 0023 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 3683      00
 138:/usr/include/c++/7/bits/stl_vector.h **** 
 3684              		.loc 5 138 0
 3685 0028 488B55E0 		movq	-32(%rbp), %rdx
 3686 002c 488B45E8 		movq	-24(%rbp), %rax
 3687 0030 4889D6   		movq	%rdx, %rsi
 3688 0033 4889C7   		movq	%rax, %rdi
 3689              	.LEHB44:
 3690 0036 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_
 3690      00
 3691              	.LEHE44:
 3692              	.LBE19:
 3693 003b EB1A     		jmp	.L205
 3694              	.L204:
 3695 003d 4889C3   		movq	%rax, %rbx
 3696              	.LBB20:
 137:/usr/include/c++/7/bits/stl_vector.h ****       { _M_create_storage(__n); }
 3697              		.loc 5 137 0
 3698 0040 488B45E8 		movq	-24(%rbp), %rax
 3699 0044 4889C7   		movq	%rax, %rdi
 3700 0047 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 3700      00
 3701 004c 4889D8   		movq	%rbx, %rax
 3702 004f 4889C7   		movq	%rax, %rdi
 3703              	.LEHB45:
 3704 0052 E8000000 		call	_Unwind_Resume@PLT
 3704      00
 3705              	.LEHE45:
 3706              	.L205:
 3707              	.LBE20:
 138:/usr/include/c++/7/bits/stl_vector.h **** 
 3708              		.loc 5 138 0
 3709 0057 4883C428 		addq	$40, %rsp
 3710 005b 5B       		popq	%rbx
 3711 005c 5D       		popq	%rbp
 3712              		.cfi_def_cfa 7, 8
 3713 005d C3       		ret
 3714              		.cfi_endproc
 3715              	.LFE1044:
 3716              		.section	.gcc_except_table
 3717              	.LLSDA1044:
 3718 00fa FF       		.byte	0xff
 3719 00fb FF       		.byte	0xff
 3720 00fc 01       		.byte	0x1
 3721 00fd 08       		.uleb128 .LLSDACSE1044-.LLSDACSB1044
 3722              	.LLSDACSB1044:
 3723 00fe 36       		.uleb128 .LEHB44-.LFB1044
 3724 00ff 05       		.uleb128 .LEHE44-.LEHB44
 3725 0100 3D       		.uleb128 .L204-.LFB1044
 3726 0101 00       		.uleb128 0
 3727 0102 52       		.uleb128 .LEHB45-.LFB1044
 3728 0103 05       		.uleb128 .LEHE45-.LEHB45
 3729 0104 00       		.uleb128 0
 3730 0105 00       		.uleb128 0
 3731              	.LLSDACSE1044:
 3732              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3734              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1
 3735              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1E
 3736              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 3737              		.align 2
 3738              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
 3740              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:
 3741              	.LFB1046:
 572:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 3742              		.loc 5 572 0
 3743              		.cfi_startproc
 3744 0000 55       		pushq	%rbp
 3745              		.cfi_def_cfa_offset 16
 3746              		.cfi_offset 6, -16
 3747 0001 4889E5   		movq	%rsp, %rbp
 3748              		.cfi_def_cfa_register 6
 3749 0004 4883EC30 		subq	$48, %rsp
 3750 0008 48897DD8 		movq	%rdi, -40(%rbp)
 572:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 3751              		.loc 5 572 0
 3752 000c 64488B04 		movq	%fs:40, %rax
 3752      25280000 
 3752      00
 3753 0015 488945F8 		movq	%rax, -8(%rbp)
 3754 0019 31C0     		xorl	%eax, %eax
 573:/usr/include/c++/7/bits/stl_vector.h **** 
 3755              		.loc 5 573 0
 3756 001b 488B45D8 		movq	-40(%rbp), %rax
 3757 001f 488B00   		movq	(%rax), %rax
 3758 0022 488945E8 		movq	%rax, -24(%rbp)
 3759 0026 488D55E8 		leaq	-24(%rbp), %rdx
 3760 002a 488D45F0 		leaq	-16(%rbp), %rax
 3761 002e 4889D6   		movq	%rdx, %rsi
 3762 0031 4889C7   		movq	%rax, %rdi
 3763 0034 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 3763      00
 3764 0039 488B45F0 		movq	-16(%rbp), %rax
 3765 003d 488B4DF8 		movq	-8(%rbp), %rcx
 3766 0041 6448330C 		xorq	%fs:40, %rcx
 3766      25280000 
 3766      00
 3767 004a 7405     		je	.L208
 3768 004c E8000000 		call	__stack_chk_fail@PLT
 3768      00
 3769              	.L208:
 3770 0051 C9       		leave
 3771              		.cfi_def_cfa 7, 8
 3772 0052 C3       		ret
 3773              		.cfi_endproc
 3774              	.LFE1046:
 3776              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 3777              		.align 2
 3778              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
 3780              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:
 3781              	.LFB1047:
 590:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 3782              		.loc 5 590 0
 3783              		.cfi_startproc
 3784 0000 55       		pushq	%rbp
 3785              		.cfi_def_cfa_offset 16
 3786              		.cfi_offset 6, -16
 3787 0001 4889E5   		movq	%rsp, %rbp
 3788              		.cfi_def_cfa_register 6
 3789 0004 4883EC30 		subq	$48, %rsp
 3790 0008 48897DD8 		movq	%rdi, -40(%rbp)
 590:/usr/include/c++/7/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 3791              		.loc 5 590 0
 3792 000c 64488B04 		movq	%fs:40, %rax
 3792      25280000 
 3792      00
 3793 0015 488945F8 		movq	%rax, -8(%rbp)
 3794 0019 31C0     		xorl	%eax, %eax
 591:/usr/include/c++/7/bits/stl_vector.h **** 
 3795              		.loc 5 591 0
 3796 001b 488B45D8 		movq	-40(%rbp), %rax
 3797 001f 488B4008 		movq	8(%rax), %rax
 3798 0023 488945E8 		movq	%rax, -24(%rbp)
 3799 0027 488D55E8 		leaq	-24(%rbp), %rdx
 3800 002b 488D45F0 		leaq	-16(%rbp), %rax
 3801 002f 4889D6   		movq	%rdx, %rsi
 3802 0032 4889C7   		movq	%rax, %rdi
 3803 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 3803      00
 3804 003a 488B45F0 		movq	-16(%rbp), %rax
 3805 003e 488B4DF8 		movq	-8(%rbp), %rcx
 3806 0042 6448330C 		xorq	%fs:40, %rcx
 3806      25280000 
 3806      00
 3807 004b 7405     		je	.L211
 3808 004d E8000000 		call	__stack_chk_fail@PLT
 3808      00
 3809              	.L211:
 3810 0052 C9       		leave
 3811              		.cfi_def_cfa 7, 8
 3812 0053 C3       		ret
 3813              		.cfi_endproc
 3814              	.LFE1047:
 3816              		.section	.text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx111
 3817              		.weak	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_st
 3819              	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcS
 3820              	.LFB1048:
 287:/usr/include/c++/7/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 3821              		.loc 12 287 0
 3822              		.cfi_startproc
 3823 0000 55       		pushq	%rbp
 3824              		.cfi_def_cfa_offset 16
 3825              		.cfi_offset 6, -16
 3826 0001 4889E5   		movq	%rsp, %rbp
 3827              		.cfi_def_cfa_register 6
 3828 0004 4883EC20 		subq	$32, %rsp
 3829 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3830 000c 488975F0 		movq	%rsi, -16(%rbp)
 3831 0010 488955E8 		movq	%rdx, -24(%rbp)
 3832 0014 48894DE0 		movq	%rcx, -32(%rbp)
 289:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 3833              		.loc 12 289 0
 3834 0018 488B55E8 		movq	-24(%rbp), %rdx
 3835 001c 488B4DF0 		movq	-16(%rbp), %rcx
 3836 0020 488B45F8 		movq	-8(%rbp), %rax
 3837 0024 4889CE   		movq	%rcx, %rsi
 3838 0027 4889C7   		movq	%rax, %rdi
 3839 002a E8000000 		call	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringI
 3839      00
 3840 002f C9       		leave
 3841              		.cfi_def_cfa 7, 8
 3842 0030 C3       		ret
 3843              		.cfi_endproc
 3844              	.LFE1048:
 3846              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_,"
 3847              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_
 3849              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_:
 3850              	.LFB1049:
 142:/usr/include/c++/7/ext/alloc_traits.h ****     { return __a.max_size(); }
 3851              		.loc 7 142 0
 3852              		.cfi_startproc
 3853 0000 55       		pushq	%rbp
 3854              		.cfi_def_cfa_offset 16
 3855              		.cfi_offset 6, -16
 3856 0001 4889E5   		movq	%rsp, %rbp
 3857              		.cfi_def_cfa_register 6
 3858 0004 4883EC10 		subq	$16, %rsp
 3859 0008 48897DF8 		movq	%rdi, -8(%rbp)
 143:/usr/include/c++/7/ext/alloc_traits.h **** 
 3860              		.loc 7 143 0
 3861 000c 488B45F8 		movq	-8(%rbp), %rax
 3862 0010 4889C7   		movq	%rax, %rdi
 3863 0013 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv@PLT
 3863      00
 3864 0018 C9       		leave
 3865              		.cfi_def_cfa 7, 8
 3866 0019 C3       		ret
 3867              		.cfi_endproc
 3868              	.LFE1049:
 3870              		.section	.text._ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 3871              		.align 2
 3872              		.weak	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 3874              	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 3875              	.LFB1050:
 119:/usr/include/c++/7/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 3876              		.loc 5 119 0
 3877              		.cfi_startproc
 3878 0000 55       		pushq	%rbp
 3879              		.cfi_def_cfa_offset 16
 3880              		.cfi_offset 6, -16
 3881 0001 4889E5   		movq	%rsp, %rbp
 3882              		.cfi_def_cfa_register 6
 3883 0004 48897DF8 		movq	%rdi, -8(%rbp)
 120:/usr/include/c++/7/bits/stl_vector.h **** 
 3884              		.loc 5 120 0
 3885 0008 488B45F8 		movq	-8(%rbp), %rax
 3886 000c 5D       		popq	%rbp
 3887              		.cfi_def_cfa 7, 8
 3888 000d C3       		ret
 3889              		.cfi_endproc
 3890              	.LFE1050:
 3892              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv,"axG",@
 3893              		.align 2
 3894              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv
 3896              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv:
 3897              	.LFB1051:
  99:/usr/include/c++/7/ext/new_allocator.h ****       {
 3898              		.loc 11 99 0
 3899              		.cfi_startproc
 3900 0000 55       		pushq	%rbp
 3901              		.cfi_def_cfa_offset 16
 3902              		.cfi_offset 6, -16
 3903 0001 4889E5   		movq	%rsp, %rbp
 3904              		.cfi_def_cfa_register 6
 3905 0004 4883EC20 		subq	$32, %rsp
 3906 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3907 000c 488975F0 		movq	%rsi, -16(%rbp)
 3908 0010 488955E8 		movq	%rdx, -24(%rbp)
 101:/usr/include/c++/7/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 3909              		.loc 11 101 0
 3910 0014 488B45F8 		movq	-8(%rbp), %rax
 3911 0018 4889C7   		movq	%rax, %rdi
 3912 001b E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv@PLT
 3912      00
 3913 0020 483945F0 		cmpq	%rax, -16(%rbp)
 3914 0024 0F97C0   		seta	%al
 3915 0027 84C0     		testb	%al, %al
 3916 0029 7405     		je	.L219
 102:/usr/include/c++/7/ext/new_allocator.h **** 
 3917              		.loc 11 102 0
 3918 002b E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 3918      00
 3919              	.L219:
 111:/usr/include/c++/7/ext/new_allocator.h ****       }
 3920              		.loc 11 111 0
 3921 0030 488B45F0 		movq	-16(%rbp), %rax
 3922 0034 48C1E007 		salq	$7, %rax
 3923 0038 4889C7   		movq	%rax, %rdi
 3924 003b E8000000 		call	_Znwm@PLT
 3924      00
 112:/usr/include/c++/7/ext/new_allocator.h **** 
 3925              		.loc 11 112 0
 3926 0040 C9       		leave
 3927              		.cfi_def_cfa 7, 8
 3928 0041 C3       		ret
 3929              		.cfi_endproc
 3930              	.LFE1051:
 3932              		.section	.text._ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_,"axG",@pro
 3933              		.weak	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
 3935              	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:
 3936              	.LFB1052:
 115:/usr/include/c++/7/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 3937              		.loc 12 115 0
 3938              		.cfi_startproc
 3939 0000 55       		pushq	%rbp
 3940              		.cfi_def_cfa_offset 16
 3941              		.cfi_offset 6, -16
 3942 0001 4889E5   		movq	%rsp, %rbp
 3943              		.cfi_def_cfa_register 6
 3944 0004 4883EC30 		subq	$48, %rsp
 3945 0008 48897DE8 		movq	%rdi, -24(%rbp)
 3946 000c 488975E0 		movq	%rsi, -32(%rbp)
 3947 0010 488955D8 		movq	%rdx, -40(%rbp)
 123:/usr/include/c++/7/bits/stl_uninitialized.h **** #else
 3948              		.loc 12 123 0
 3949 0014 C645FF01 		movb	$1, -1(%rbp)
 134:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 3950              		.loc 12 134 0
 3951 0018 488B55D8 		movq	-40(%rbp), %rdx
 3952 001c 488B4DE0 		movq	-32(%rbp), %rcx
 3953 0020 488B45E8 		movq	-24(%rbp), %rax
 3954 0024 4889CE   		movq	%rcx, %rsi
 3955 0027 4889C7   		movq	%rax, %rdi
 3956 002a E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6
 3956      00
 135:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 3957              		.loc 12 135 0
 3958 002f C9       		leave
 3959              		.cfi_def_cfa 7, 8
 3960 0030 C3       		ret
 3961              		.cfi_endproc
 3962              	.LFE1052:
 3964              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 3965              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 3967              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 3968              	.LFB1053:
 105:/usr/include/c++/7/bits/stl_construct.h **** 	{
 3969              		.loc 6 105 0
 3970              		.cfi_startproc
 3971 0000 55       		pushq	%rbp
 3972              		.cfi_def_cfa_offset 16
 3973              		.cfi_offset 6, -16
 3974 0001 4889E5   		movq	%rsp, %rbp
 3975              		.cfi_def_cfa_register 6
 3976 0004 4883EC10 		subq	$16, %rsp
 3977 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3978 000c 488975F0 		movq	%rsi, -16(%rbp)
 3979              	.L225:
 107:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3980              		.loc 6 107 0 discriminator 2
 3981 0010 488B45F8 		movq	-8(%rbp), %rax
 3982 0014 483B45F0 		cmpq	-16(%rbp), %rax
 3983 0018 741B     		je	.L226
 108:/usr/include/c++/7/bits/stl_construct.h **** 	}
 3984              		.loc 6 108 0 discriminator 1
 3985 001a 488B45F8 		movq	-8(%rbp), %rax
 3986 001e 4889C7   		movq	%rax, %rdi
 3987 0021 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 3987      00
 3988 0026 4889C7   		movq	%rax, %rdi
 3989 0029 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 3989      00
 107:/usr/include/c++/7/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3990              		.loc 6 107 0 discriminator 1
 3991 002e 48836DF8 		subq	$-128, -8(%rbp)
 3991      80
 3992 0033 EBDB     		jmp	.L225
 3993              	.L226:
 109:/usr/include/c++/7/bits/stl_construct.h ****     };
 3994              		.loc 6 109 0
 3995 0035 90       		nop
 3996 0036 C9       		leave
 3997              		.cfi_def_cfa 7, 8
 3998 0037 C3       		ret
 3999              		.cfi_endproc
 4000              	.LFE1053:
 4002              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 4003              		.align 2
 4004              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 4006              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 4007              	.LFB1054:
 116:/usr/include/c++/7/ext/new_allocator.h ****       {
 4008              		.loc 11 116 0
 4009              		.cfi_startproc
 4010 0000 55       		pushq	%rbp
 4011              		.cfi_def_cfa_offset 16
 4012              		.cfi_offset 6, -16
 4013 0001 4889E5   		movq	%rsp, %rbp
 4014              		.cfi_def_cfa_register 6
 4015 0004 4883EC20 		subq	$32, %rsp
 4016 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4017 000c 488975F0 		movq	%rsi, -16(%rbp)
 4018 0010 488955E8 		movq	%rdx, -24(%rbp)
 125:/usr/include/c++/7/ext/new_allocator.h ****       }
 4019              		.loc 11 125 0
 4020 0014 488B45F0 		movq	-16(%rbp), %rax
 4021 0018 4889C7   		movq	%rax, %rdi
 4022 001b E8000000 		call	_ZdlPv@PLT
 4022      00
 126:/usr/include/c++/7/ext/new_allocator.h **** 
 4023              		.loc 11 126 0
 4024 0020 90       		nop
 4025 0021 C9       		leave
 4026              		.cfi_def_cfa 7, 8
 4027 0022 C3       		ret
 4028              		.cfi_endproc
 4029              	.LFE1054:
 4031              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 4032              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 4034              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8m
 4035              	.LFB1062:
 142:/usr/include/c++/7/ext/alloc_traits.h ****     { return __a.max_size(); }
 4036              		.loc 7 142 0
 4037              		.cfi_startproc
 4038 0000 55       		pushq	%rbp
 4039              		.cfi_def_cfa_offset 16
 4040              		.cfi_offset 6, -16
 4041 0001 4889E5   		movq	%rsp, %rbp
 4042              		.cfi_def_cfa_register 6
 4043 0004 4883EC10 		subq	$16, %rsp
 4044 0008 48897DF8 		movq	%rdi, -8(%rbp)
 143:/usr/include/c++/7/ext/alloc_traits.h **** 
 4045              		.loc 7 143 0
 4046 000c 488B45F8 		movq	-8(%rbp), %rax
 4047 0010 4889C7   		movq	%rax, %rdi
 4048 0013 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 4048      00
 4049 0018 C9       		leave
 4050              		.cfi_def_cfa 7, 8
 4051 0019 C3       		ret
 4052              		.cfi_endproc
 4053              	.LFE1062:
 4055              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 4056              		.align 2
 4057              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 4059              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8alloca
 4060              	.LFB1063:
  99:/usr/include/c++/7/ext/new_allocator.h ****       {
 4061              		.loc 11 99 0
 4062              		.cfi_startproc
 4063 0000 55       		pushq	%rbp
 4064              		.cfi_def_cfa_offset 16
 4065              		.cfi_offset 6, -16
 4066 0001 4889E5   		movq	%rsp, %rbp
 4067              		.cfi_def_cfa_register 6
 4068 0004 4883EC20 		subq	$32, %rsp
 4069 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4070 000c 488975F0 		movq	%rsi, -16(%rbp)
 4071 0010 488955E8 		movq	%rdx, -24(%rbp)
 101:/usr/include/c++/7/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 4072              		.loc 11 101 0
 4073 0014 488B45F8 		movq	-8(%rbp), %rax
 4074 0018 4889C7   		movq	%rax, %rdi
 4075 001b E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 4075      00
 4076 0020 483945F0 		cmpq	%rax, -16(%rbp)
 4077 0024 0F97C0   		seta	%al
 4078 0027 84C0     		testb	%al, %al
 4079 0029 7405     		je	.L231
 102:/usr/include/c++/7/ext/new_allocator.h **** 
 4080              		.loc 11 102 0
 4081 002b E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 4081      00
 4082              	.L231:
 111:/usr/include/c++/7/ext/new_allocator.h ****       }
 4083              		.loc 11 111 0
 4084 0030 488B55F0 		movq	-16(%rbp), %rdx
 4085 0034 4889D0   		movq	%rdx, %rax
 4086 0037 48C1E002 		salq	$2, %rax
 4087 003b 4801D0   		addq	%rdx, %rax
 4088 003e 48C1E003 		salq	$3, %rax
 4089 0042 4889C7   		movq	%rax, %rdi
 4090 0045 E8000000 		call	_Znwm@PLT
 4090      00
 112:/usr/include/c++/7/ext/new_allocator.h **** 
 4091              		.loc 11 112 0
 4092 004a C9       		leave
 4093              		.cfi_def_cfa 7, 8
 4094 004b C3       		ret
 4095              		.cfi_endproc
 4096              	.LFE1063:
 4098              		.section	.text._ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4099              		.weak	_ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_E
 4101              	_ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_ET0_T_SA
 4102              	.LFB1064:
 115:/usr/include/c++/7/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 4103              		.loc 12 115 0
 4104              		.cfi_startproc
 4105 0000 55       		pushq	%rbp
 4106              		.cfi_def_cfa_offset 16
 4107              		.cfi_offset 6, -16
 4108 0001 4889E5   		movq	%rsp, %rbp
 4109              		.cfi_def_cfa_register 6
 4110 0004 4883EC30 		subq	$48, %rsp
 4111 0008 48897DE8 		movq	%rdi, -24(%rbp)
 4112 000c 488975E0 		movq	%rsi, -32(%rbp)
 4113 0010 488955D8 		movq	%rdx, -40(%rbp)
 123:/usr/include/c++/7/bits/stl_uninitialized.h **** #else
 4114              		.loc 12 123 0
 4115 0014 C645FF01 		movb	$1, -1(%rbp)
 134:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 4116              		.loc 12 134 0
 4117 0018 488B55D8 		movq	-40(%rbp), %rdx
 4118 001c 488B4DE0 		movq	-32(%rbp), %rcx
 4119 0020 488B45E8 		movq	-24(%rbp), %rax
 4120 0024 4889CE   		movq	%rcx, %rsi
 4121 0027 4889C7   		movq	%rax, %rdi
 4122 002a E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11cha
 4122      00
 135:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 4123              		.loc 12 135 0
 4124 002f C9       		leave
 4125              		.cfi_def_cfa 7, 8
 4126 0030 C3       		ret
 4127              		.cfi_endproc
 4128              	.LFE1064:
 4130              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 4131              		.align 2
 4132              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 4134              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector
 4135              	.LFB1066:
  92:/usr/include/c++/7/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 4136              		.loc 5 92 0
 4137              		.cfi_startproc
 4138 0000 55       		pushq	%rbp
 4139              		.cfi_def_cfa_offset 16
 4140              		.cfi_offset 6, -16
 4141 0001 4889E5   		movq	%rsp, %rbp
 4142              		.cfi_def_cfa_register 6
 4143 0004 4883EC10 		subq	$16, %rsp
 4144 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4145 000c 488975F0 		movq	%rsi, -16(%rbp)
 4146              	.LBB21:
  93:/usr/include/c++/7/bits/stl_vector.h **** 	{ }
 4147              		.loc 5 93 0
 4148 0010 488B55F0 		movq	-16(%rbp), %rdx
 4149 0014 488B45F8 		movq	-8(%rbp), %rax
 4150 0018 4889D6   		movq	%rdx, %rsi
 4151 001b 4889C7   		movq	%rax, %rdi
 4152 001e E8000000 		call	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_@PLT
 4152      00
 4153 0023 488B45F8 		movq	-8(%rbp), %rax
 4154 0027 48C70000 		movq	$0, (%rax)
 4154      000000
 4155 002e 488B45F8 		movq	-8(%rbp), %rax
 4156 0032 48C74008 		movq	$0, 8(%rax)
 4156      00000000 
 4157 003a 488B45F8 		movq	-8(%rbp), %rax
 4158 003e 48C74010 		movq	$0, 16(%rax)
 4158      00000000 
 4159              	.LBE21:
  94:/usr/include/c++/7/bits/stl_vector.h **** 
 4160              		.loc 5 94 0
 4161 0046 90       		nop
 4162 0047 C9       		leave
 4163              		.cfi_def_cfa 7, 8
 4164 0048 C3       		ret
 4165              		.cfi_endproc
 4166              	.LFE1066:
 4168              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 4169              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 4170              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 4171              		.align 2
 4172              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17
 4174              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_crea
 4175              	.LFB1068:
 185:/usr/include/c++/7/bits/stl_vector.h ****       {
 4176              		.loc 5 185 0
 4177              		.cfi_startproc
 4178 0000 55       		pushq	%rbp
 4179              		.cfi_def_cfa_offset 16
 4180              		.cfi_offset 6, -16
 4181 0001 4889E5   		movq	%rsp, %rbp
 4182              		.cfi_def_cfa_register 6
 4183 0004 4883EC10 		subq	$16, %rsp
 4184 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4185 000c 488975F0 		movq	%rsi, -16(%rbp)
 187:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 4186              		.loc 5 187 0
 4187 0010 488B55F0 		movq	-16(%rbp), %rdx
 4188 0014 488B45F8 		movq	-8(%rbp), %rax
 4189 0018 4889D6   		movq	%rdx, %rsi
 4190 001b 4889C7   		movq	%rax, %rdi
 4191 001e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_
 4191      00
 4192 0023 4889C2   		movq	%rax, %rdx
 4193 0026 488B45F8 		movq	-8(%rbp), %rax
 4194 002a 488910   		movq	%rdx, (%rax)
 188:/usr/include/c++/7/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 4195              		.loc 5 188 0
 4196 002d 488B45F8 		movq	-8(%rbp), %rax
 4197 0031 488B10   		movq	(%rax), %rdx
 4198 0034 488B45F8 		movq	-8(%rbp), %rax
 4199 0038 48895008 		movq	%rdx, 8(%rax)
 189:/usr/include/c++/7/bits/stl_vector.h ****       }
 4200              		.loc 5 189 0
 4201 003c 488B45F8 		movq	-8(%rbp), %rax
 4202 0040 488B08   		movq	(%rax), %rcx
 4203 0043 488B55F0 		movq	-16(%rbp), %rdx
 4204 0047 4889D0   		movq	%rdx, %rax
 4205 004a 48C1E002 		salq	$2, %rax
 4206 004e 4801D0   		addq	%rdx, %rax
 4207 0051 48C1E003 		salq	$3, %rax
 4208 0055 488D1401 		leaq	(%rcx,%rax), %rdx
 4209 0059 488B45F8 		movq	-8(%rbp), %rax
 4210 005d 48895010 		movq	%rdx, 16(%rax)
 190:/usr/include/c++/7/bits/stl_vector.h ****     };
 4211              		.loc 5 190 0
 4212 0061 90       		nop
 4213 0062 C9       		leave
 4214              		.cfi_def_cfa 7, 8
 4215 0063 C3       		ret
 4216              		.cfi_endproc
 4217              	.LFE1068:
 4219              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 4220              		.align 2
 4221              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4223              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 4224              	.LFB1070:
 779:/usr/include/c++/7/bits/stl_iterator.h ****       : _M_current(__i) { }
 4225              		.loc 9 779 0
 4226              		.cfi_startproc
 4227 0000 55       		pushq	%rbp
 4228              		.cfi_def_cfa_offset 16
 4229              		.cfi_offset 6, -16
 4230 0001 4889E5   		movq	%rsp, %rbp
 4231              		.cfi_def_cfa_register 6
 4232 0004 48897DF8 		movq	%rdi, -8(%rbp)
 4233 0008 488975F0 		movq	%rsi, -16(%rbp)
 4234              	.LBB22:
 780:/usr/include/c++/7/bits/stl_iterator.h **** 
 4235              		.loc 9 780 0
 4236 000c 488B45F0 		movq	-16(%rbp), %rax
 4237 0010 488B10   		movq	(%rax), %rdx
 4238 0013 488B45F8 		movq	-8(%rbp), %rax
 4239 0017 488910   		movq	%rdx, (%rax)
 4240              	.LBE22:
 4241 001a 90       		nop
 4242 001b 5D       		popq	%rbp
 4243              		.cfi_def_cfa 7, 8
 4244 001c C3       		ret
 4245              		.cfi_endproc
 4246              	.LFE1070:
 4248              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4249              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 4250              		.section	.text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112bas
 4251              		.weak	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_string
 4253              	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11c
 4254              	.LFB1072:
 115:/usr/include/c++/7/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 4255              		.loc 12 115 0
 4256              		.cfi_startproc
 4257 0000 55       		pushq	%rbp
 4258              		.cfi_def_cfa_offset 16
 4259              		.cfi_offset 6, -16
 4260 0001 4889E5   		movq	%rsp, %rbp
 4261              		.cfi_def_cfa_register 6
 4262 0004 4883EC30 		subq	$48, %rsp
 4263 0008 48897DE8 		movq	%rdi, -24(%rbp)
 4264 000c 488975E0 		movq	%rsi, -32(%rbp)
 4265 0010 488955D8 		movq	%rdx, -40(%rbp)
 123:/usr/include/c++/7/bits/stl_uninitialized.h **** #else
 4266              		.loc 12 123 0
 4267 0014 C645FF01 		movb	$1, -1(%rbp)
 134:/usr/include/c++/7/bits/stl_uninitialized.h ****     }
 4268              		.loc 12 134 0
 4269 0018 488B55D8 		movq	-40(%rbp), %rdx
 4270 001c 488B4DE0 		movq	-32(%rbp), %rcx
 4271 0020 488B45E8 		movq	-24(%rbp), %rax
 4272 0024 4889CE   		movq	%rcx, %rsi
 4273 0027 4889C7   		movq	%rax, %rdi
 4274 002a E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNS
 4274      00
 135:/usr/include/c++/7/bits/stl_uninitialized.h **** 
 4275              		.loc 12 135 0
 4276 002f C9       		leave
 4277              		.cfi_def_cfa 7, 8
 4278 0030 C3       		ret
 4279              		.cfi_endproc
 4280              	.LFE1072:
 4282              		.section	.text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv,"axG",@pr
 4283              		.align 2
 4284              		.weak	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv
 4286              	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv:
 4287              	.LFB1073:
 129:/usr/include/c++/7/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 4288              		.loc 11 129 0
 4289              		.cfi_startproc
 4290 0000 55       		pushq	%rbp
 4291              		.cfi_def_cfa_offset 16
 4292              		.cfi_offset 6, -16
 4293 0001 4889E5   		movq	%rsp, %rbp
 4294              		.cfi_def_cfa_register 6
 4295 0004 48897DF8 		movq	%rdi, -8(%rbp)
 130:/usr/include/c++/7/ext/new_allocator.h **** 
 4296              		.loc 11 130 0
 4297 0008 48B8FFFF 		movabsq	$144115188075855871, %rax
 4297      FFFFFFFF 
 4297      FF01
 4298 0012 5D       		popq	%rbp
 4299              		.cfi_def_cfa 7, 8
 4300 0013 C3       		ret
 4301              		.cfi_endproc
 4302              	.LFE1073:
 4304              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4
 4305              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S
 4307              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_:
 4308              	.LFB1074:
  76:/usr/include/c++/7/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 4309              		.loc 12 76 0
 4310              		.cfi_startproc
 4311              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4312              		.cfi_lsda 0x1b,.LLSDA1074
 4313 0000 55       		pushq	%rbp
 4314              		.cfi_def_cfa_offset 16
 4315              		.cfi_offset 6, -16
 4316 0001 4889E5   		movq	%rsp, %rbp
 4317              		.cfi_def_cfa_register 6
 4318 0004 53       		pushq	%rbx
 4319 0005 4883EC38 		subq	$56, %rsp
 4320              		.cfi_offset 3, -24
 4321 0009 48897DD8 		movq	%rdi, -40(%rbp)
 4322 000d 488975D0 		movq	%rsi, -48(%rbp)
 4323 0011 488955C8 		movq	%rdx, -56(%rbp)
  79:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __try
 4324              		.loc 12 79 0
 4325 0015 488B45C8 		movq	-56(%rbp), %rax
 4326 0019 488945E8 		movq	%rax, -24(%rbp)
 4327              	.L244:
  82:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4328              		.loc 12 82 0 discriminator 1
 4329 001d 488B45D8 		movq	-40(%rbp), %rax
 4330 0021 483B45D0 		cmpq	-48(%rbp), %rax
 4331 0025 742A     		je	.L243
  83:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      return __cur;
 4332              		.loc 12 83 0
 4333 0027 488B45E8 		movq	-24(%rbp), %rax
 4334 002b 4889C7   		movq	%rax, %rdi
 4335 002e E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 4335      00
 4336 0033 4889C2   		movq	%rax, %rdx
 4337 0036 488B45D8 		movq	-40(%rbp), %rax
 4338 003a 4889C6   		movq	%rax, %rsi
 4339 003d 4889D7   		movq	%rdx, %rdi
 4340              	.LEHB46:
 4341 0040 E8000000 		call	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_@PLT
 4341      00
 4342              	.LEHE46:
  82:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4343              		.loc 12 82 0
 4344 0045 48836DD8 		subq	$-128, -40(%rbp)
 4344      80
 4345 004a 48836DE8 		subq	$-128, -24(%rbp)
 4345      80
 4346 004f EBCC     		jmp	.L244
 4347              	.L243:
  84:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 4348              		.loc 12 84 0
 4349 0051 488B45E8 		movq	-24(%rbp), %rax
 4350 0055 EB33     		jmp	.L250
 4351              	.L248:
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 4352              		.loc 12 86 0
 4353 0057 4889C7   		movq	%rax, %rdi
 4354 005a E8000000 		call	__cxa_begin_catch@PLT
 4354      00
  88:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 4355              		.loc 12 88 0
 4356 005f 488B55E8 		movq	-24(%rbp), %rdx
 4357 0063 488B45C8 		movq	-56(%rbp), %rax
 4358 0067 4889D6   		movq	%rdx, %rsi
 4359 006a 4889C7   		movq	%rax, %rdi
 4360              	.LEHB47:
 4361 006d E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 4361      00
  89:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 4362              		.loc 12 89 0
 4363 0072 E8000000 		call	__cxa_rethrow@PLT
 4363      00
 4364              	.LEHE47:
 4365              	.L249:
 4366 0077 4889C3   		movq	%rax, %rbx
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 4367              		.loc 12 86 0
 4368 007a E8000000 		call	__cxa_end_catch@PLT
 4368      00
 4369 007f 4889D8   		movq	%rbx, %rax
 4370 0082 4889C7   		movq	%rax, %rdi
 4371              	.LEHB48:
 4372 0085 E8000000 		call	_Unwind_Resume@PLT
 4372      00
 4373              	.LEHE48:
 4374              	.L250:
  91:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
 4375              		.loc 12 91 0
 4376 008a 4883C438 		addq	$56, %rsp
 4377 008e 5B       		popq	%rbx
 4378 008f 5D       		popq	%rbp
 4379              		.cfi_def_cfa 7, 8
 4380 0090 C3       		ret
 4381              		.cfi_endproc
 4382              	.LFE1074:
 4383              		.section	.gcc_except_table
 4384 0106 0000     		.align 4
 4385              	.LLSDA1074:
 4386 0108 FF       		.byte	0xff
 4387 0109 9B       		.byte	0x9b
 4388 010a 15       		.uleb128 .LLSDATT1074-.LLSDATTD1074
 4389              	.LLSDATTD1074:
 4390 010b 01       		.byte	0x1
 4391 010c 0D       		.uleb128 .LLSDACSE1074-.LLSDACSB1074
 4392              	.LLSDACSB1074:
 4393 010d 40       		.uleb128 .LEHB46-.LFB1074
 4394 010e 05       		.uleb128 .LEHE46-.LEHB46
 4395 010f 57       		.uleb128 .L248-.LFB1074
 4396 0110 01       		.uleb128 0x1
 4397 0111 6D       		.uleb128 .LEHB47-.LFB1074
 4398 0112 0A       		.uleb128 .LEHE47-.LEHB47
 4399 0113 77       		.uleb128 .L249-.LFB1074
 4400 0114 00       		.uleb128 0
 4401 0115 8501     		.uleb128 .LEHB48-.LFB1074
 4402 0117 05       		.uleb128 .LEHE48-.LEHB48
 4403 0118 00       		.uleb128 0
 4404 0119 00       		.uleb128 0
 4405              	.LLSDACSE1074:
 4406 011a 01       		.byte	0x1
 4407 011b 00       		.byte	0
 4408              		.align 4
 4409 011c 00000000 		.long	0
 4410              	
 4411              	.LLSDATT1074:
 4412              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4
 4414              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 4415              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 4417              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 4418              	.LFB1075:
  47:/usr/include/c++/7/bits/move.h ****     { return __builtin_addressof(__r); }
 4419              		.loc 14 47 0
 4420              		.cfi_startproc
 4421 0000 55       		pushq	%rbp
 4422              		.cfi_def_cfa_offset 16
 4423              		.cfi_offset 6, -16
 4424 0001 4889E5   		movq	%rsp, %rbp
 4425              		.cfi_def_cfa_register 6
 4426 0004 48897DF8 		movq	%rdi, -8(%rbp)
 4427              		.loc 14 48 0
 4428 0008 488B45F8 		movq	-8(%rbp), %rax
 4429 000c 5D       		popq	%rbp
 4430              		.cfi_def_cfa 7, 8
 4431 000d C3       		ret
 4432              		.cfi_endproc
 4433              	.LFE1075:
 4435              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 4436              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 4438              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 4439              	.LFB1076:
  97:/usr/include/c++/7/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 4440              		.loc 6 97 0
 4441              		.cfi_startproc
 4442 0000 55       		pushq	%rbp
 4443              		.cfi_def_cfa_offset 16
 4444              		.cfi_offset 6, -16
 4445 0001 4889E5   		movq	%rsp, %rbp
 4446              		.cfi_def_cfa_register 6
 4447 0004 4883EC10 		subq	$16, %rsp
 4448 0008 48897DF8 		movq	%rdi, -8(%rbp)
  98:/usr/include/c++/7/bits/stl_construct.h **** 
 4449              		.loc 6 98 0
 4450 000c 488B45F8 		movq	-8(%rbp), %rax
 4451 0010 4889C7   		movq	%rax, %rdi
 4452 0013 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 4452      00
 4453 0018 90       		nop
 4454 0019 C9       		leave
 4455              		.cfi_def_cfa 7, 8
 4456 001a C3       		ret
 4457              		.cfi_endproc
 4458              	.LFE1076:
 4460              		.section	.text._ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIc
 4461              		.align 2
 4462              		.weak	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 4464              	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_s
 4465              	.LFB1084:
 129:/usr/include/c++/7/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 4466              		.loc 11 129 0
 4467              		.cfi_startproc
 4468 0000 55       		pushq	%rbp
 4469              		.cfi_def_cfa_offset 16
 4470              		.cfi_offset 6, -16
 4471 0001 4889E5   		movq	%rsp, %rbp
 4472              		.cfi_def_cfa_register 6
 4473 0004 48897DF8 		movq	%rdi, -8(%rbp)
 130:/usr/include/c++/7/ext/new_allocator.h **** 
 4474              		.loc 11 130 0
 4475 0008 48B86666 		movabsq	$461168601842738790, %rax
 4475      66666666 
 4475      6606
 4476 0012 5D       		popq	%rbp
 4477              		.cfi_def_cfa 7, 8
 4478 0013 C3       		ret
 4479              		.cfi_endproc
 4480              	.LFE1084:
 4482              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_strin
 4483              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11ch
 4485              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_trai
 4486              	.LFB1085:
  76:/usr/include/c++/7/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 4487              		.loc 12 76 0
 4488              		.cfi_startproc
 4489              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4490              		.cfi_lsda 0x1b,.LLSDA1085
 4491 0000 55       		pushq	%rbp
 4492              		.cfi_def_cfa_offset 16
 4493              		.cfi_offset 6, -16
 4494 0001 4889E5   		movq	%rsp, %rbp
 4495              		.cfi_def_cfa_register 6
 4496 0004 53       		pushq	%rbx
 4497 0005 4883EC38 		subq	$56, %rsp
 4498              		.cfi_offset 3, -24
 4499 0009 48897DD8 		movq	%rdi, -40(%rbp)
 4500 000d 488975D0 		movq	%rsi, -48(%rbp)
 4501 0011 488955C8 		movq	%rdx, -56(%rbp)
  79:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __try
 4502              		.loc 12 79 0
 4503 0015 488B45C8 		movq	-56(%rbp), %rax
 4504 0019 488945E8 		movq	%rax, -24(%rbp)
 4505              	.L258:
  82:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4506              		.loc 12 82 0 discriminator 1
 4507 001d 488B45D8 		movq	-40(%rbp), %rax
 4508 0021 483B45D0 		cmpq	-48(%rbp), %rax
 4509 0025 742A     		je	.L257
  83:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      return __cur;
 4510              		.loc 12 83 0
 4511 0027 488B45E8 		movq	-24(%rbp), %rax
 4512 002b 4889C7   		movq	%rax, %rdi
 4513 002e E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 4513      00
 4514 0033 4889C2   		movq	%rax, %rdx
 4515 0036 488B45D8 		movq	-40(%rbp), %rax
 4516 003a 4889C6   		movq	%rax, %rsi
 4517 003d 4889D7   		movq	%rdx, %rdi
 4518              	.LEHB49:
 4519 0040 E8000000 		call	_ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_@
 4519      00
 4520              	.LEHE49:
  82:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4521              		.loc 12 82 0
 4522 0045 488345D8 		addq	$40, -40(%rbp)
 4522      28
 4523 004a 488345E8 		addq	$40, -24(%rbp)
 4523      28
 4524 004f EBCC     		jmp	.L258
 4525              	.L257:
  84:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 4526              		.loc 12 84 0
 4527 0051 488B45E8 		movq	-24(%rbp), %rax
 4528 0055 EB33     		jmp	.L264
 4529              	.L262:
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 4530              		.loc 12 86 0
 4531 0057 4889C7   		movq	%rax, %rdi
 4532 005a E8000000 		call	__cxa_begin_catch@PLT
 4532      00
  88:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 4533              		.loc 12 88 0
 4534 005f 488B55E8 		movq	-24(%rbp), %rdx
 4535 0063 488B45C8 		movq	-56(%rbp), %rax
 4536 0067 4889D6   		movq	%rdx, %rsi
 4537 006a 4889C7   		movq	%rax, %rdi
 4538              	.LEHB50:
 4539 006d E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 4539      00
  89:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 4540              		.loc 12 89 0
 4541 0072 E8000000 		call	__cxa_rethrow@PLT
 4541      00
 4542              	.LEHE50:
 4543              	.L263:
 4544 0077 4889C3   		movq	%rax, %rbx
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 4545              		.loc 12 86 0
 4546 007a E8000000 		call	__cxa_end_catch@PLT
 4546      00
 4547 007f 4889D8   		movq	%rbx, %rax
 4548 0082 4889C7   		movq	%rax, %rdi
 4549              	.LEHB51:
 4550 0085 E8000000 		call	_Unwind_Resume@PLT
 4550      00
 4551              	.LEHE51:
 4552              	.L264:
  91:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
 4553              		.loc 12 91 0
 4554 008a 4883C438 		addq	$56, %rsp
 4555 008e 5B       		popq	%rbx
 4556 008f 5D       		popq	%rbp
 4557              		.cfi_def_cfa 7, 8
 4558 0090 C3       		ret
 4559              		.cfi_endproc
 4560              	.LFE1085:
 4561              		.section	.gcc_except_table
 4562              		.align 4
 4563              	.LLSDA1085:
 4564 0120 FF       		.byte	0xff
 4565 0121 9B       		.byte	0x9b
 4566 0122 15       		.uleb128 .LLSDATT1085-.LLSDATTD1085
 4567              	.LLSDATTD1085:
 4568 0123 01       		.byte	0x1
 4569 0124 0D       		.uleb128 .LLSDACSE1085-.LLSDACSB1085
 4570              	.LLSDACSB1085:
 4571 0125 40       		.uleb128 .LEHB49-.LFB1085
 4572 0126 05       		.uleb128 .LEHE49-.LEHB49
 4573 0127 57       		.uleb128 .L262-.LFB1085
 4574 0128 01       		.uleb128 0x1
 4575 0129 6D       		.uleb128 .LEHB50-.LFB1085
 4576 012a 0A       		.uleb128 .LEHE50-.LEHB50
 4577 012b 77       		.uleb128 .L263-.LFB1085
 4578 012c 00       		.uleb128 0
 4579 012d 8501     		.uleb128 .LEHB51-.LFB1085
 4580 012f 05       		.uleb128 .LEHE51-.LEHB51
 4581 0130 00       		.uleb128 0
 4582 0131 00       		.uleb128 0
 4583              	.LLSDACSE1085:
 4584 0132 01       		.byte	0x1
 4585 0133 00       		.byte	0
 4586              		.align 4
 4587 0134 00000000 		.long	0
 4588              	
 4589              	.LLSDATT1085:
 4590              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_strin
 4592              		.section	.text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_,"axG"
 4593              		.align 2
 4594              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_
 4596              	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:
 4597              	.LFB1087:
 133:/usr/include/c++/7/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 4598              		.loc 10 133 0
 4599              		.cfi_startproc
 4600 0000 55       		pushq	%rbp
 4601              		.cfi_def_cfa_offset 16
 4602              		.cfi_offset 6, -16
 4603 0001 4889E5   		movq	%rsp, %rbp
 4604              		.cfi_def_cfa_register 6
 4605 0004 4883EC10 		subq	$16, %rsp
 4606 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4607 000c 488975F0 		movq	%rsi, -16(%rbp)
 4608              	.LBB23:
 134:/usr/include/c++/7/bits/allocator.h **** 
 4609              		.loc 10 134 0
 4610 0010 488B55F0 		movq	-16(%rbp), %rdx
 4611 0014 488B45F8 		movq	-8(%rbp), %rax
 4612 0018 4889D6   		movq	%rdx, %rsi
 4613 001b 4889C7   		movq	%rax, %rdi
 4614 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC
 4614      00
 4615              	.LBE23:
 4616 0023 90       		nop
 4617 0024 C9       		leave
 4618              		.cfi_def_cfa 7, 8
 4619 0025 C3       		ret
 4620              		.cfi_endproc
 4621              	.LFE1087:
 4623              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_
 4624              		.set	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_,_ZNSaISt4pairIi
 4625              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKS
 4626              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiN
 4628              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cx
 4629              	.LFB1089:
  76:/usr/include/c++/7/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 4630              		.loc 12 76 0
 4631              		.cfi_startproc
 4632              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4633              		.cfi_lsda 0x1b,.LLSDA1089
 4634 0000 55       		pushq	%rbp
 4635              		.cfi_def_cfa_offset 16
 4636              		.cfi_offset 6, -16
 4637 0001 4889E5   		movq	%rsp, %rbp
 4638              		.cfi_def_cfa_register 6
 4639 0004 53       		pushq	%rbx
 4640 0005 4883EC38 		subq	$56, %rsp
 4641              		.cfi_offset 3, -24
 4642 0009 48897DD8 		movq	%rdi, -40(%rbp)
 4643 000d 488975D0 		movq	%rsi, -48(%rbp)
 4644 0011 488955C8 		movq	%rdx, -56(%rbp)
  79:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __try
 4645              		.loc 12 79 0
 4646 0015 488B45C8 		movq	-56(%rbp), %rax
 4647 0019 488945E8 		movq	%rax, -24(%rbp)
 4648              	.L268:
  82:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4649              		.loc 12 82 0 discriminator 2
 4650 001d 488D55D0 		leaq	-48(%rbp), %rdx
 4651 0021 488D45D8 		leaq	-40(%rbp), %rax
 4652 0025 4889D6   		movq	%rdx, %rsi
 4653 0028 4889C7   		movq	%rax, %rdi
 4654              	.LEHB52:
 4655 002b E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_
 4655      00
 4656 0030 84C0     		testb	%al, %al
 4657 0032 7439     		je	.L267
  83:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      return __cur;
 4658              		.loc 12 83 0
 4659 0034 488D45D8 		leaq	-40(%rbp), %rax
 4660 0038 4889C7   		movq	%rax, %rdi
 4661 003b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4661      00
 4662 0040 4889C3   		movq	%rax, %rbx
 4663 0043 488B45E8 		movq	-24(%rbp), %rax
 4664 0047 4889C7   		movq	%rax, %rdi
 4665 004a E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 4665      00
 4666 004f 4889DE   		movq	%rbx, %rsi
 4667 0052 4889C7   		movq	%rax, %rdi
 4668 0055 E8000000 		call	_ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_@
 4668      00
 4669              	.LEHE52:
  82:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4670              		.loc 12 82 0
 4671 005a 488D45D8 		leaq	-40(%rbp), %rax
 4672 005e 4889C7   		movq	%rax, %rdi
 4673 0061 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 4673      00
 4674 0066 488345E8 		addq	$40, -24(%rbp)
 4674      28
 4675 006b EBB0     		jmp	.L268
 4676              	.L267:
  84:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 4677              		.loc 12 84 0
 4678 006d 488B45E8 		movq	-24(%rbp), %rax
 4679 0071 EB33     		jmp	.L274
 4680              	.L272:
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 4681              		.loc 12 86 0
 4682 0073 4889C7   		movq	%rax, %rdi
 4683 0076 E8000000 		call	__cxa_begin_catch@PLT
 4683      00
  88:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 4684              		.loc 12 88 0
 4685 007b 488B55E8 		movq	-24(%rbp), %rdx
 4686 007f 488B45C8 		movq	-56(%rbp), %rax
 4687 0083 4889D6   		movq	%rdx, %rsi
 4688 0086 4889C7   		movq	%rax, %rdi
 4689              	.LEHB53:
 4690 0089 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 4690      00
  89:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
 4691              		.loc 12 89 0
 4692 008e E8000000 		call	__cxa_rethrow@PLT
 4692      00
 4693              	.LEHE53:
 4694              	.L273:
 4695 0093 4889C3   		movq	%rax, %rbx
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 4696              		.loc 12 86 0
 4697 0096 E8000000 		call	__cxa_end_catch@PLT
 4697      00
 4698 009b 4889D8   		movq	%rbx, %rax
 4699 009e 4889C7   		movq	%rax, %rdi
 4700              	.LEHB54:
 4701 00a1 E8000000 		call	_Unwind_Resume@PLT
 4701      00
 4702              	.LEHE54:
 4703              	.L274:
  91:/usr/include/c++/7/bits/stl_uninitialized.h ****     };
 4704              		.loc 12 91 0
 4705 00a6 4883C438 		addq	$56, %rsp
 4706 00aa 5B       		popq	%rbx
 4707 00ab 5D       		popq	%rbp
 4708              		.cfi_def_cfa 7, 8
 4709 00ac C3       		ret
 4710              		.cfi_endproc
 4711              	.LFE1089:
 4712              		.section	.gcc_except_table
 4713              		.align 4
 4714              	.LLSDA1089:
 4715 0138 FF       		.byte	0xff
 4716 0139 9B       		.byte	0x9b
 4717 013a 19       		.uleb128 .LLSDATT1089-.LLSDATTD1089
 4718              	.LLSDATTD1089:
 4719 013b 01       		.byte	0x1
 4720 013c 0F       		.uleb128 .LLSDACSE1089-.LLSDACSB1089
 4721              	.LLSDACSB1089:
 4722 013d 2B       		.uleb128 .LEHB52-.LFB1089
 4723 013e 2F       		.uleb128 .LEHE52-.LEHB52
 4724 013f 73       		.uleb128 .L272-.LFB1089
 4725 0140 01       		.uleb128 0x1
 4726 0141 8901     		.uleb128 .LEHB53-.LFB1089
 4727 0143 0A       		.uleb128 .LEHE53-.LEHB53
 4728 0144 9301     		.uleb128 .L273-.LFB1089
 4729 0146 00       		.uleb128 0
 4730 0147 A101     		.uleb128 .LEHB54-.LFB1089
 4731 0149 05       		.uleb128 .LEHE54-.LEHB54
 4732 014a 00       		.uleb128 0
 4733 014b 00       		.uleb128 0
 4734              	.LLSDACSE1089:
 4735 014c 01       		.byte	0x1
 4736 014d 00       		.byte	0
 4737 014e 0000     		.align 4
 4738 0150 00000000 		.long	0
 4739              	
 4740              	.LLSDATT1089:
 4741              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKS
 4743              		.section	.text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_,"axG",@progbits,_ZSt1
 4744              		.weak	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_
 4746              	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_:
 4747              	.LFB1090:
  79:/usr/include/c++/7/bits/stl_construct.h ****     {
 4748              		.loc 6 79 0
 4749              		.cfi_startproc
 4750              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4751              		.cfi_lsda 0x1b,.LLSDA1090
 4752 0000 55       		pushq	%rbp
 4753              		.cfi_def_cfa_offset 16
 4754              		.cfi_offset 6, -16
 4755 0001 4889E5   		movq	%rsp, %rbp
 4756              		.cfi_def_cfa_register 6
 4757 0004 4155     		pushq	%r13
 4758 0006 4154     		pushq	%r12
 4759 0008 53       		pushq	%rbx
 4760 0009 4883EC18 		subq	$24, %rsp
 4761              		.cfi_offset 13, -24
 4762              		.cfi_offset 12, -32
 4763              		.cfi_offset 3, -40
 4764 000d 48897DD8 		movq	%rdi, -40(%rbp)
 4765 0011 488975D0 		movq	%rsi, -48(%rbp)
  83:/usr/include/c++/7/bits/stl_construct.h ****     }
 4766              		.loc 6 83 0
 4767 0015 4C8B65D8 		movq	-40(%rbp), %r12
 4768 0019 4C89E6   		movq	%r12, %rsi
 4769 001c BF800000 		movl	$128, %edi
 4769      00
 4770 0021 E8000000 		call	_ZnwmPv@PLT
 4770      00
 4771 0026 4889C3   		movq	%rax, %rbx
 4772 0029 4885DB   		testq	%rbx, %rbx
 4773 002c 742A     		je	.L280
  83:/usr/include/c++/7/bits/stl_construct.h ****     }
 4774              		.loc 6 83 0 is_stmt 0 discriminator 1
 4775 002e 488B45D0 		movq	-48(%rbp), %rax
 4776 0032 4889C6   		movq	%rax, %rsi
 4777 0035 4889DF   		movq	%rbx, %rdi
 4778              	.LEHB55:
 4779 0038 E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 4779      00
 4780              	.LEHE55:
  84:/usr/include/c++/7/bits/stl_construct.h **** #endif
 4781              		.loc 6 84 0 is_stmt 1
 4782 003d EB19     		jmp	.L280
 4783              	.L279:
 4784 003f 4989C5   		movq	%rax, %r13
  83:/usr/include/c++/7/bits/stl_construct.h ****     }
 4785              		.loc 6 83 0
 4786 0042 4C89E6   		movq	%r12, %rsi
 4787 0045 4889DF   		movq	%rbx, %rdi
 4788 0048 E8000000 		call	_ZdlPvS_@PLT
 4788      00
 4789 004d 4C89E8   		movq	%r13, %rax
 4790 0050 4889C7   		movq	%rax, %rdi
 4791              	.LEHB56:
 4792 0053 E8000000 		call	_Unwind_Resume@PLT
 4792      00
 4793              	.LEHE56:
 4794              	.L280:
  84:/usr/include/c++/7/bits/stl_construct.h **** #endif
 4795              		.loc 6 84 0
 4796 0058 90       		nop
 4797 0059 4883C418 		addq	$24, %rsp
 4798 005d 5B       		popq	%rbx
 4799 005e 415C     		popq	%r12
 4800 0060 415D     		popq	%r13
 4801 0062 5D       		popq	%rbp
 4802              		.cfi_def_cfa 7, 8
 4803 0063 C3       		ret
 4804              		.cfi_endproc
 4805              	.LFE1090:
 4806              		.section	.gcc_except_table
 4807              	.LLSDA1090:
 4808 0154 FF       		.byte	0xff
 4809 0155 FF       		.byte	0xff
 4810 0156 01       		.byte	0x1
 4811 0157 08       		.uleb128 .LLSDACSE1090-.LLSDACSB1090
 4812              	.LLSDACSB1090:
 4813 0158 38       		.uleb128 .LEHB55-.LFB1090
 4814 0159 05       		.uleb128 .LEHE55-.LEHB55
 4815 015a 3F       		.uleb128 .L279-.LFB1090
 4816 015b 00       		.uleb128 0
 4817 015c 53       		.uleb128 .LEHB56-.LFB1090
 4818 015d 05       		.uleb128 .LEHE56-.LEHB56
 4819 015e 00       		.uleb128 0
 4820 015f 00       		.uleb128 0
 4821              	.LLSDACSE1090:
 4822              		.section	.text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_,"axG",@progbits,_ZSt1
 4824              		.section	.text._ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_E
 4825              		.weak	_ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_
 4827              	_ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_:
 4828              	.LFB1093:
  79:/usr/include/c++/7/bits/stl_construct.h ****     {
 4829              		.loc 6 79 0
 4830              		.cfi_startproc
 4831              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4832              		.cfi_lsda 0x1b,.LLSDA1093
 4833 0000 55       		pushq	%rbp
 4834              		.cfi_def_cfa_offset 16
 4835              		.cfi_offset 6, -16
 4836 0001 4889E5   		movq	%rsp, %rbp
 4837              		.cfi_def_cfa_register 6
 4838 0004 4155     		pushq	%r13
 4839 0006 4154     		pushq	%r12
 4840 0008 53       		pushq	%rbx
 4841 0009 4883EC18 		subq	$24, %rsp
 4842              		.cfi_offset 13, -24
 4843              		.cfi_offset 12, -32
 4844              		.cfi_offset 3, -40
 4845 000d 48897DD8 		movq	%rdi, -40(%rbp)
 4846 0011 488975D0 		movq	%rsi, -48(%rbp)
  83:/usr/include/c++/7/bits/stl_construct.h ****     }
 4847              		.loc 6 83 0
 4848 0015 4C8B65D8 		movq	-40(%rbp), %r12
 4849 0019 4C89E6   		movq	%r12, %rsi
 4850 001c BF280000 		movl	$40, %edi
 4850      00
 4851 0021 E8000000 		call	_ZnwmPv@PLT
 4851      00
 4852 0026 4889C3   		movq	%rax, %rbx
 4853 0029 4885DB   		testq	%rbx, %rbx
 4854 002c 742A     		je	.L286
  83:/usr/include/c++/7/bits/stl_construct.h ****     }
 4855              		.loc 6 83 0 is_stmt 0 discriminator 1
 4856 002e 488B45D0 		movq	-48(%rbp), %rax
 4857 0032 4889C6   		movq	%rax, %rsi
 4858 0035 4889DF   		movq	%rbx, %rdi
 4859              	.LEHB57:
 4860 0038 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_@PLT
 4860      00
 4861              	.LEHE57:
  84:/usr/include/c++/7/bits/stl_construct.h **** #endif
 4862              		.loc 6 84 0 is_stmt 1
 4863 003d EB19     		jmp	.L286
 4864              	.L285:
 4865 003f 4989C5   		movq	%rax, %r13
  83:/usr/include/c++/7/bits/stl_construct.h ****     }
 4866              		.loc 6 83 0
 4867 0042 4C89E6   		movq	%r12, %rsi
 4868 0045 4889DF   		movq	%rbx, %rdi
 4869 0048 E8000000 		call	_ZdlPvS_@PLT
 4869      00
 4870 004d 4C89E8   		movq	%r13, %rax
 4871 0050 4889C7   		movq	%rax, %rdi
 4872              	.LEHB58:
 4873 0053 E8000000 		call	_Unwind_Resume@PLT
 4873      00
 4874              	.LEHE58:
 4875              	.L286:
  84:/usr/include/c++/7/bits/stl_construct.h **** #endif
 4876              		.loc 6 84 0
 4877 0058 90       		nop
 4878 0059 4883C418 		addq	$24, %rsp
 4879 005d 5B       		popq	%rbx
 4880 005e 415C     		popq	%r12
 4881 0060 415D     		popq	%r13
 4882 0062 5D       		popq	%rbp
 4883              		.cfi_def_cfa 7, 8
 4884 0063 C3       		ret
 4885              		.cfi_endproc
 4886              	.LFE1093:
 4887              		.section	.gcc_except_table
 4888              	.LLSDA1093:
 4889 0160 FF       		.byte	0xff
 4890 0161 FF       		.byte	0xff
 4891 0162 01       		.byte	0x1
 4892 0163 08       		.uleb128 .LLSDACSE1093-.LLSDACSB1093
 4893              	.LLSDACSB1093:
 4894 0164 38       		.uleb128 .LEHB57-.LFB1093
 4895 0165 05       		.uleb128 .LEHE57-.LEHB57
 4896 0166 3F       		.uleb128 .L285-.LFB1093
 4897 0167 00       		.uleb128 0
 4898 0168 53       		.uleb128 .LEHB58-.LFB1093
 4899 0169 05       		.uleb128 .LEHE58-.LEHB58
 4900 016a 00       		.uleb128 0
 4901 016b 00       		.uleb128 0
 4902              	.LLSDACSE1093:
 4903              		.section	.text._ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_E
 4905              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 4906              		.align 2
 4907              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 4909              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9
 4910              	.LFB1095:
  81:/usr/include/c++/7/ext/new_allocator.h **** 
 4911              		.loc 11 81 0
 4912              		.cfi_startproc
 4913 0000 55       		pushq	%rbp
 4914              		.cfi_def_cfa_offset 16
 4915              		.cfi_offset 6, -16
 4916 0001 4889E5   		movq	%rsp, %rbp
 4917              		.cfi_def_cfa_register 6
 4918 0004 48897DF8 		movq	%rdi, -8(%rbp)
 4919 0008 488975F0 		movq	%rsi, -16(%rbp)
  81:/usr/include/c++/7/ext/new_allocator.h **** 
 4920              		.loc 11 81 0
 4921 000c 90       		nop
 4922 000d 5D       		popq	%rbp
 4923              		.cfi_def_cfa 7, 8
 4924 000e C3       		ret
 4925              		.cfi_endproc
 4926              	.LFE1095:
 4928              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 4929              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC
 4930              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6
 4931              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8
 4933              	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_
 4934              	.LFB1097:
 880:/usr/include/c++/7/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 4935              		.loc 9 880 0
 4936              		.cfi_startproc
 4937 0000 55       		pushq	%rbp
 4938              		.cfi_def_cfa_offset 16
 4939              		.cfi_offset 6, -16
 4940 0001 4889E5   		movq	%rsp, %rbp
 4941              		.cfi_def_cfa_register 6
 4942 0004 53       		pushq	%rbx
 4943 0005 4883EC18 		subq	$24, %rsp
 4944              		.cfi_offset 3, -24
 4945 0009 48897DE8 		movq	%rdi, -24(%rbp)
 4946 000d 488975E0 		movq	%rsi, -32(%rbp)
 883:/usr/include/c++/7/bits/stl_iterator.h **** 
 4947              		.loc 9 883 0
 4948 0011 488B45E8 		movq	-24(%rbp), %rax
 4949 0015 4889C7   		movq	%rax, %rdi
 4950 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4950      00
 4951 001d 488B18   		movq	(%rax), %rbx
 4952 0020 488B45E0 		movq	-32(%rbp), %rax
 4953 0024 4889C7   		movq	%rax, %rdi
 4954 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4954      00
 4955 002c 488B00   		movq	(%rax), %rax
 4956 002f 4839C3   		cmpq	%rax, %rbx
 4957 0032 0F95C0   		setne	%al
 4958 0035 4883C418 		addq	$24, %rsp
 4959 0039 5B       		popq	%rbx
 4960 003a 5D       		popq	%rbp
 4961              		.cfi_def_cfa 7, 8
 4962 003b C3       		ret
 4963              		.cfi_endproc
 4964              	.LFE1097:
 4966              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 4967              		.align 2
 4968              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4970              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 4971              	.LFB1098:
 800:/usr/include/c++/7/bits/stl_iterator.h ****       {
 4972              		.loc 9 800 0
 4973              		.cfi_startproc
 4974 0000 55       		pushq	%rbp
 4975              		.cfi_def_cfa_offset 16
 4976              		.cfi_offset 6, -16
 4977 0001 4889E5   		movq	%rsp, %rbp
 4978              		.cfi_def_cfa_register 6
 4979 0004 48897DF8 		movq	%rdi, -8(%rbp)
 802:/usr/include/c++/7/bits/stl_iterator.h **** 	return *this;
 4980              		.loc 9 802 0
 4981 0008 488B45F8 		movq	-8(%rbp), %rax
 4982 000c 488B00   		movq	(%rax), %rax
 4983 000f 488D5028 		leaq	40(%rax), %rdx
 4984 0013 488B45F8 		movq	-8(%rbp), %rax
 4985 0017 488910   		movq	%rdx, (%rax)
 803:/usr/include/c++/7/bits/stl_iterator.h ****       }
 4986              		.loc 9 803 0
 4987 001a 488B45F8 		movq	-8(%rbp), %rax
 804:/usr/include/c++/7/bits/stl_iterator.h **** 
 4988              		.loc 9 804 0
 4989 001e 5D       		popq	%rbp
 4990              		.cfi_def_cfa 7, 8
 4991 001f C3       		ret
 4992              		.cfi_endproc
 4993              	.LFE1098:
 4995              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 4996              		.align 2
 4997              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 4999              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 5000              	.LFB1099:
 792:/usr/include/c++/7/bits/stl_iterator.h ****       { return *_M_current; }
 5001              		.loc 9 792 0
 5002              		.cfi_startproc
 5003 0000 55       		pushq	%rbp
 5004              		.cfi_def_cfa_offset 16
 5005              		.cfi_offset 6, -16
 5006 0001 4889E5   		movq	%rsp, %rbp
 5007              		.cfi_def_cfa_register 6
 5008 0004 48897DF8 		movq	%rdi, -8(%rbp)
 793:/usr/include/c++/7/bits/stl_iterator.h **** 
 5009              		.loc 9 793 0
 5010 0008 488B45F8 		movq	-8(%rbp), %rax
 5011 000c 488B00   		movq	(%rax), %rax
 5012 000f 5D       		popq	%rbp
 5013              		.cfi_def_cfa 7, 8
 5014 0010 C3       		ret
 5015              		.cfi_endproc
 5016              	.LFE1099:
 5018              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 5019              		.align 2
 5020              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 5022              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 5023              	.LFB1100:
 844:/usr/include/c++/7/bits/stl_iterator.h ****       { return _M_current; }
 5024              		.loc 9 844 0
 5025              		.cfi_startproc
 5026 0000 55       		pushq	%rbp
 5027              		.cfi_def_cfa_offset 16
 5028              		.cfi_offset 6, -16
 5029 0001 4889E5   		movq	%rsp, %rbp
 5030              		.cfi_def_cfa_register 6
 5031 0004 48897DF8 		movq	%rdi, -8(%rbp)
 845:/usr/include/c++/7/bits/stl_iterator.h ****     };
 5032              		.loc 9 845 0
 5033 0008 488B45F8 		movq	-8(%rbp), %rax
 5034 000c 5D       		popq	%rbp
 5035              		.cfi_def_cfa 7, 8
 5036 000d C3       		ret
 5037              		.cfi_endproc
 5038              	.LFE1100:
 5040              		.weak	_ZTVN8UnitTest20DeferredTestReporterE
 5041              		.section	.data.rel.ro._ZTVN8UnitTest20DeferredTestReporterE,"awG",@progbits,_ZTVN8UnitTest20Deferr
 5042              		.align 8
 5045              	_ZTVN8UnitTest20DeferredTestReporterE:
 5046 0000 00000000 		.quad	0
 5046      00000000 
 5047 0008 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 5047      00000000 
 5048 0010 00000000 		.quad	0
 5048      00000000 
 5049 0018 00000000 		.quad	0
 5049      00000000 
 5050 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 5050      00000000 
 5051 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 5051      00000000 
 5052 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 5052      00000000 
 5053 0038 00000000 		.quad	__cxa_pure_virtual
 5053      00000000 
 5054              		.weak	_ZTIN8UnitTest20DeferredTestReporterE
 5055              		.section	.data.rel.ro._ZTIN8UnitTest20DeferredTestReporterE,"awG",@progbits,_ZTIN8UnitTest20Deferr
 5056              		.align 8
 5059              	_ZTIN8UnitTest20DeferredTestReporterE:
 5060 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 5060      00000000 
 5061 0008 00000000 		.quad	_ZTSN8UnitTest20DeferredTestReporterE
 5061      00000000 
 5062 0010 00000000 		.quad	_ZTIN8UnitTest12TestReporterE
 5062      00000000 
 5063              		.weak	_ZTSN8UnitTest20DeferredTestReporterE
 5064              		.section	.rodata._ZTSN8UnitTest20DeferredTestReporterE,"aG",@progbits,_ZTSN8UnitTest20DeferredTest
 5065              		.align 32
 5068              	_ZTSN8UnitTest20DeferredTestReporterE:
 5069 0000 4E38556E 		.string	"N8UnitTest20DeferredTestReporterE"
 5069      69745465 
 5069      73743230 
 5069      44656665 
 5069      72726564 
 5070              		.text
 5071              	.Letext0:
 5072              		.file 15 "/usr/include/c++/7/bits/basic_string.h"
 5073              		.file 16 "/usr/include/c++/7/bits/basic_string.tcc"
 5074              		.file 17 "/usr/include/c++/7/bits/stringfwd.h"
 5075              		.file 18 "/usr/include/c++/7/bits/cpp_type_traits.h"
 5076              		.file 19 "/usr/include/c++/7/bits/stl_iterator_base_types.h"
 5077              		.file 20 "/usr/include/c++/7/cwchar"
 5078              		.file 21 "/usr/include/c++/7/bits/char_traits.h"
 5079              		.file 22 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h"
 5080              		.file 23 "/usr/include/c++/7/clocale"
 5081              		.file 24 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h"
 5082              		.file 25 "/usr/include/c++/7/debug/debug.h"
 5083              		.file 26 "/usr/include/c++/7/bits/predefined_ops.h"
 5084              		.file 27 "/usr/include/c++/7/ext/numeric_traits.h"
 5085              		.file 28 "/usr/include/c++/7/ext/type_traits.h"
 5086              		.file 29 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 5087              		.file 30 "<built-in>"
 5088              		.file 31 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 5089              		.file 32 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 5090              		.file 33 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 5091              		.file 34 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 5092              		.file 35 "/usr/include/wchar.h"
 5093              		.file 36 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 5094              		.file 37 "/usr/include/locale.h"
 5095              		.file 38 "/usr/include/time.h"
 5096              		.file 39 "TestReporter.h"
 5097              		.file 40 "TestDetails.h"
 5098              		.file 41 "DeferredTestReporter.h"
 22820              		.align 8
 22823              	DW.ref.__gxx_personality_v0:
 22824 0000 00000000 		.quad	__gxx_personality_v0
 22824      00000000 
 22825              		.ident	"GCC: (Ubuntu 7.2.0-8ubuntu3.2) 7.2.0"
 22826              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 DeferredTestReporter.cpp
     /tmp/ccI7J6N2.s:7      .text._ZnwmPv:0000000000000000 _ZnwmPv
     /tmp/ccI7J6N2.s:30     .text._ZdlPvS_:0000000000000000 _ZdlPvS_
     /tmp/ccI7J6N2.s:53     .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccI7J6N2.s:22823  .data.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccI7J6N2.s:548    .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccI7J6N2.s:53     .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccI7J6N2.s:176    .text:0000000000000000 _ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
     /tmp/ccI7J6N2.s:636    .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_
     /tmp/ccI7J6N2.s:280    .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
     /tmp/ccI7J6N2.s:280    .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
     /tmp/ccI7J6N2.s:312    .text:00000000000000ba _ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
     /tmp/ccI7J6N2.s:695    .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv
     /tmp/ccI7J6N2.s:739    .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKiRKS5_
     /tmp/ccI7J6N2.s:778    .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_backERKS7_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_backERKS7_
     /tmp/ccI7J6N2.s:490    .text:00000000000001f4 _ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
     /tmp/ccI7J6N2.s:524    .text:000000000000022e _ZN8UnitTest20DeferredTestReporter10GetResultsEv
     /tmp/ccI7J6N2.s:548    .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccI7J6N2.s:956    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv
     /tmp/ccI7J6N2.s:977    .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E
     /tmp/ccI7J6N2.s:867    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccI7J6N2.s:1008   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_
     /tmp/ccI7J6N2.s:1316   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccI7J6N2.s:1043   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
     /tmp/ccI7J6N2.s:1354   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl
     /tmp/ccI7J6N2.s:1400   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccI7J6N2.s:739    .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_
     /tmp/ccI7J6N2.s:1422   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructIS8_EEvRS9_PS8_RKT_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructIS8_EEvRS9_PS8_RKT_
     /tmp/ccI7J6N2.s:1737   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
     /tmp/ccI7J6N2.s:1453   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS7_S9_EERKS7_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS7_S9_EERKS7_
     /tmp/ccI7J6N2.s:837    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev
     /tmp/ccI7J6N2.s:1775   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccI7J6N2.s:837    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD1Ev
     /tmp/ccI7J6N2.s:1806   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m
     /tmp/ccI7J6N2.s:867    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccI7J6N2.s:1841   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
     /tmp/ccI7J6N2.s:2012   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_
     /tmp/ccI7J6N2.s:2094   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc
     /tmp/ccI7J6N2.s:2191   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccI7J6N2.s:2227   .text._ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:0000000000000000 _ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
     /tmp/ccI7J6N2.s:2266   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm
     /tmp/ccI7J6N2.s:2325   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccI7J6N2.s:2303   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccI7J6N2.s:2346   .text._ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_
     /tmp/ccI7J6N2.s:2406   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccI7J6N2.s:2437   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccI7J6N2.s:2378   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
     /tmp/ccI7J6N2.s:2473   .text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS3_
     /tmp/ccI7J6N2.s:2543   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructEPS8_RKS8_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructEPS8_RKS8_
     /tmp/ccI7J6N2.s:2624   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_check_lenEmPKc
     /tmp/ccI7J6N2.s:2721   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
     /tmp/ccI7J6N2.s:2757   .text._ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSG_SJ_:0000000000000000 _ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSG_SJ_
     /tmp/ccI7J6N2.s:2799   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_M_allocateEm
     /tmp/ccI7J6N2.s:2836   .text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv
     /tmp/ccI7J6N2.s:2857   .text._ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_SaIS7_EET0_T_SB_SA_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_SaIS7_EET0_T_SB_SA_RT1_
     /tmp/ccI7J6N2.s:2888   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyERS9_PS8_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyERS9_PS8_
     /tmp/ccI7J6N2.s:2917   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKS9_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC1ERKS9_
     /tmp/ccI7J6N2.s:2948   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccI7J6N2.s:1775   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccI7J6N2.s:2971   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateERS9_PS8_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateERS9_PS8_m
     /tmp/ccI7J6N2.s:3001   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_
     /tmp/ccI7J6N2.s:1871   .text._ZN8UnitTest18DeferredTestResultC2ERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultC2ERKS0_
     /tmp/ccI7J6N2.s:3040   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1ERKS9_
     /tmp/ccI7J6N2.s:1871   .text._ZN8UnitTest18DeferredTestResultC2ERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultC1ERKS0_
     /tmp/ccI7J6N2.s:3161   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv
     /tmp/ccI7J6N2.s:3188   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv
     /tmp/ccI7J6N2.s:3216   .text._ZSt3maxImERKT_S2_S2_:0000000000000000 _ZSt3maxImERKT_S2_S2_
     /tmp/ccI7J6N2.s:3252   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m
     /tmp/ccI7J6N2.s:3280   .text._ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E
     /tmp/ccI7J6N2.s:3311   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_
     /tmp/ccI7J6N2.s:3337   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccI7J6N2.s:3366   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
     /tmp/ccI7J6N2.s:2473   .text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_
     /tmp/ccI7J6N2.s:2504   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_
     /tmp/ccI7J6N2.s:2504   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_
     /tmp/ccI7J6N2.s:3397   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_sizeEv
     /tmp/ccI7J6N2.s:3424   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv
     /tmp/ccI7J6N2.s:3455   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateERS9_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateERS9_m
     /tmp/ccI7J6N2.s:3483   .text._ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_S7_ET0_T_SA_S9_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_S7_ET0_T_SA_S9_RSaIT1_E
     /tmp/ccI7J6N2.s:3514   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyEPS8_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyEPS8_
     /tmp/ccI7J6N2.s:2917   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKS9_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKS9_
     /tmp/ccI7J6N2.s:2948   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccI7J6N2.s:3541   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m
     /tmp/ccI7J6N2.s:3569   .text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:0000000000000000 _ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
     /tmp/ccI7J6N2.s:3591   .text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
     /tmp/ccI7J6N2.s:3040   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_
     /tmp/ccI7J6N2.s:3638   .text._ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv
     /tmp/ccI7J6N2.s:3616   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE17_S_select_on_copyERKS9_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE17_S_select_on_copyERKS9_
     /tmp/ccI7J6N2.s:3660   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2EmRKS8_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2EmRKS8_
     /tmp/ccI7J6N2.s:3780   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
     /tmp/ccI7J6N2.s:3740   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
     /tmp/ccI7J6N2.s:3819   .text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS9_SaIS9_EEEEPS9_S9_ET0_T_SI_SH_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS9_SaIS9_EEEEPS9_S9_ET0_T_SI_SH_RSaIT1_E
     /tmp/ccI7J6N2.s:3874   .text._ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccI7J6N2.s:3849   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_
     /tmp/ccI7J6N2.s:3896   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv
     /tmp/ccI7J6N2.s:3935   .text._ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:0000000000000000 _ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
     /tmp/ccI7J6N2.s:3967   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccI7J6N2.s:4006   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccI7J6N2.s:4034   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8max_sizeERKS9_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8max_sizeERKS9_
     /tmp/ccI7J6N2.s:4059   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv
     /tmp/ccI7J6N2.s:4101   .text._ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_ET0_T_SA_S9_:0000000000000000 _ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_ET0_T_SA_S9_
     /tmp/ccI7J6N2.s:4134   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2ERKS8_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC1ERKS8_
     /tmp/ccI7J6N2.s:4174   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_create_storageEm:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_create_storageEm
     /tmp/ccI7J6N2.s:3660   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2EmRKS8_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1EmRKS8_
     /tmp/ccI7J6N2.s:4223   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC1ERKSA_
     /tmp/ccI7J6N2.s:4253   .text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS9_SaIS9_EEEEPS9_ET0_T_SI_SH_:0000000000000000 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS9_SaIS9_EEEEPS9_ET0_T_SI_SH_
     /tmp/ccI7J6N2.s:4286   .text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv
     /tmp/ccI7J6N2.s:4307   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_
     /tmp/ccI7J6N2.s:4417   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccI7J6N2.s:4438   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccI7J6N2.s:4464   .text._ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeEv
     /tmp/ccI7J6N2.s:4485   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESA_EET0_T_SC_SB_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESA_EET0_T_SC_SB_
     /tmp/ccI7J6N2.s:4134   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2ERKS8_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2ERKS8_
     /tmp/ccI7J6N2.s:4596   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_
     /tmp/ccI7J6N2.s:4223   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_
     /tmp/ccI7J6N2.s:4628   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_
     /tmp/ccI7J6N2.s:4746   .text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_:0000000000000000 _ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_
     /tmp/ccI7J6N2.s:4827   .text._ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_:0000000000000000 _ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_
     /tmp/ccI7J6N2.s:4909   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9_
     /tmp/ccI7J6N2.s:4596   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_
     /tmp/ccI7J6N2.s:4933   .text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_
     /tmp/ccI7J6N2.s:4999   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEdeEv
     /tmp/ccI7J6N2.s:4970   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv
     /tmp/ccI7J6N2.s:4909   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_
     /tmp/ccI7J6N2.s:5022   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv
     /tmp/ccI7J6N2.s:5045   .data.rel.ro._ZTVN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTVN8UnitTest20DeferredTestReporterE
     /tmp/ccI7J6N2.s:5059   .data.rel.ro._ZTIN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTIN8UnitTest20DeferredTestReporterE
     /tmp/ccI7J6N2.s:5068   .rodata._ZTSN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTSN8UnitTest20DeferredTestReporterE
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC5ERKiRKS5_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultC5ERKS0_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS3_
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC5ERKS6_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC5ERKS9_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC5ERKS9_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC5EmRKS8_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC5ERKS8_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC5ERKSA_
                           .group:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC5ERKS7_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC5ERKS9_

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
_Unwind_Resume
__gxx_personality_v0
_ZN8UnitTest18DeferredTestResultC1EPKcS2_
__stack_chk_fail
_ZNSaIcEC1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
_ZNSaIcED1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
__cxa_begin_catch
__cxa_rethrow
__cxa_end_catch
_ZSt20__throw_length_errorPKc
_ZdlPv
_ZSt17__throw_bad_allocv
_Znwm
__cxa_pure_virtual
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest12TestReporterE
