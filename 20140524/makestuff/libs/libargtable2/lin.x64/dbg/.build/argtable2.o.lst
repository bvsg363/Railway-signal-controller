   1              		.file	"argtable2.c"
   2              		.text
   3              	.Ltext0:
   5              	arg_register_error:
   6              	.LFB0:
   7              		.file 1 "argtable2.c"
   1:argtable2.c   **** /*********************************************************************
   2:argtable2.c   **** This file is part of the argtable2 library.
   3:argtable2.c   **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:argtable2.c   **** sheitmann@users.sourceforge.net
   5:argtable2.c   **** 
   6:argtable2.c   **** The argtable2 library is free software; you can redistribute it and/or
   7:argtable2.c   **** modify it under the terms of the GNU Library General Public License as
   8:argtable2.c   **** published by the Free Software Foundation; either version 2 of the
   9:argtable2.c   **** License, or (at your option) any later version.
  10:argtable2.c   **** 
  11:argtable2.c   **** This software is distributed in the hope that it will be useful,
  12:argtable2.c   **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:argtable2.c   **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:argtable2.c   **** Library General Public License for more details.
  15:argtable2.c   **** 
  16:argtable2.c   **** You should have received a copy of the GNU Library General Public
  17:argtable2.c   **** License along with this library; if not, write to the Free Software
  18:argtable2.c   **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:argtable2.c   **** USA.
  20:argtable2.c   **** **********************************************************************/
  21:argtable2.c   **** 
  22:argtable2.c   **** /* config.h must be included before anything else */
  23:argtable2.c   **** #ifdef HAVE_CONFIG_H
  24:argtable2.c   **** #include "config.h"
  25:argtable2.c   **** #endif
  26:argtable2.c   **** 
  27:argtable2.c   **** #ifdef STDC_HEADERS
  28:argtable2.c   **** #include <stdlib.h>
  29:argtable2.c   **** #include <string.h>
  30:argtable2.c   **** #include <stdlib.h>
  31:argtable2.c   **** #include <ctype.h>
  32:argtable2.c   **** #endif
  33:argtable2.c   **** 
  34:argtable2.c   **** #ifdef HAVE_STRINGS_H
  35:argtable2.c   **** #include <strings.h>
  36:argtable2.c   **** #endif
  37:argtable2.c   **** 
  38:argtable2.c   **** #ifdef HAVE_GETOPT_H
  39:argtable2.c   **** #include <getopt.h>
  40:argtable2.c   **** #else
  41:argtable2.c   **** #include "./getopt.h"
  42:argtable2.c   **** #endif
  43:argtable2.c   **** 
  44:argtable2.c   **** #ifdef HAVE_UNISTD_H
  45:argtable2.c   **** #include <unistd.h>
  46:argtable2.c   **** #endif
  47:argtable2.c   **** 
  48:argtable2.c   **** #include "argtable2.h"
  49:argtable2.c   **** #include "./getopt.h"
  50:argtable2.c   **** 
  51:argtable2.c   **** static
  52:argtable2.c   **** void arg_register_error(struct arg_end *end, void *parent, int error, const char *argval)
  53:argtable2.c   ****     {
   8              		.loc 1 53 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 48897DF8 		movq	%rdi, -8(%rbp)
  16 0008 488975F0 		movq	%rsi, -16(%rbp)
  17 000c 8955EC   		movl	%edx, -20(%rbp)
  18 000f 48894DE0 		movq	%rcx, -32(%rbp)
  54:argtable2.c   ****     /* printf("arg_register_error(%p,%p,%d,%s)\n",end,parent,error,argval); */
  55:argtable2.c   ****     if (end->count < end->hdr.maxcount)
  19              		.loc 1 55 0
  20 0013 488B45F8 		movq	-8(%rbp), %rax
  21 0017 8B5060   		movl	96(%rax), %edx
  22 001a 488B45F8 		movq	-8(%rbp), %rax
  23 001e 8B402C   		movl	44(%rax), %eax
  24 0021 39C2     		cmpl	%eax, %edx
  25 0023 7D6E     		jge	.L2
  56:argtable2.c   ****         {
  57:argtable2.c   ****         end->error[end->count] = error;
  26              		.loc 1 57 0
  27 0025 488B45F8 		movq	-8(%rbp), %rax
  28 0029 488B5068 		movq	104(%rax), %rdx
  29 002d 488B45F8 		movq	-8(%rbp), %rax
  30 0031 8B4060   		movl	96(%rax), %eax
  31 0034 4898     		cltq
  32 0036 48C1E002 		salq	$2, %rax
  33 003a 4801C2   		addq	%rax, %rdx
  34 003d 8B45EC   		movl	-20(%rbp), %eax
  35 0040 8902     		movl	%eax, (%rdx)
  58:argtable2.c   ****         end->parent[end->count] = parent;
  36              		.loc 1 58 0
  37 0042 488B45F8 		movq	-8(%rbp), %rax
  38 0046 488B5070 		movq	112(%rax), %rdx
  39 004a 488B45F8 		movq	-8(%rbp), %rax
  40 004e 8B4060   		movl	96(%rax), %eax
  41 0051 4898     		cltq
  42 0053 48C1E003 		salq	$3, %rax
  43 0057 4801C2   		addq	%rax, %rdx
  44 005a 488B45F0 		movq	-16(%rbp), %rax
  45 005e 488902   		movq	%rax, (%rdx)
  59:argtable2.c   ****         end->argval[end->count] = argval;
  46              		.loc 1 59 0
  47 0061 488B45F8 		movq	-8(%rbp), %rax
  48 0065 488B5078 		movq	120(%rax), %rdx
  49 0069 488B45F8 		movq	-8(%rbp), %rax
  50 006d 8B4060   		movl	96(%rax), %eax
  51 0070 4898     		cltq
  52 0072 48C1E003 		salq	$3, %rax
  53 0076 4801C2   		addq	%rax, %rdx
  54 0079 488B45E0 		movq	-32(%rbp), %rax
  55 007d 488902   		movq	%rax, (%rdx)
  60:argtable2.c   ****         end->count++;
  56              		.loc 1 60 0
  57 0080 488B45F8 		movq	-8(%rbp), %rax
  58 0084 8B4060   		movl	96(%rax), %eax
  59 0087 8D5001   		leal	1(%rax), %edx
  60 008a 488B45F8 		movq	-8(%rbp), %rax
  61 008e 895060   		movl	%edx, 96(%rax)
  61:argtable2.c   ****         }
  62:argtable2.c   ****     else
  63:argtable2.c   ****         {
  64:argtable2.c   ****         end->error[end->hdr.maxcount-1]  = ARG_ELIMIT;
  65:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  66:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  67:argtable2.c   ****         }
  68:argtable2.c   ****     }
  62              		.loc 1 68 0
  63 0091 EB68     		jmp	.L4
  64              	.L2:
  64:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  65              		.loc 1 64 0
  66 0093 488B45F8 		movq	-8(%rbp), %rax
  67 0097 488B5068 		movq	104(%rax), %rdx
  68 009b 488B45F8 		movq	-8(%rbp), %rax
  69 009f 8B402C   		movl	44(%rax), %eax
  70 00a2 4898     		cltq
  71 00a4 48C1E002 		salq	$2, %rax
  72 00a8 4883E804 		subq	$4, %rax
  73 00ac 4801D0   		addq	%rdx, %rax
  74 00af C7000100 		movl	$1, (%rax)
  74      0000
  65:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  75              		.loc 1 65 0
  76 00b5 488B45F8 		movq	-8(%rbp), %rax
  77 00b9 488B5070 		movq	112(%rax), %rdx
  78 00bd 488B45F8 		movq	-8(%rbp), %rax
  79 00c1 8B402C   		movl	44(%rax), %eax
  80 00c4 4898     		cltq
  81 00c6 48C1E003 		salq	$3, %rax
  82 00ca 4883E808 		subq	$8, %rax
  83 00ce 4801C2   		addq	%rax, %rdx
  84 00d1 488B45F8 		movq	-8(%rbp), %rax
  85 00d5 488902   		movq	%rax, (%rdx)
  66:argtable2.c   ****         }
  86              		.loc 1 66 0
  87 00d8 488B45F8 		movq	-8(%rbp), %rax
  88 00dc 488B5078 		movq	120(%rax), %rdx
  89 00e0 488B45F8 		movq	-8(%rbp), %rax
  90 00e4 8B402C   		movl	44(%rax), %eax
  91 00e7 4898     		cltq
  92 00e9 48C1E003 		salq	$3, %rax
  93 00ed 4883E808 		subq	$8, %rax
  94 00f1 4801D0   		addq	%rdx, %rax
  95 00f4 48C70000 		movq	$0, (%rax)
  95      000000
  96              	.L4:
  97              		.loc 1 68 0
  98 00fb 90       		nop
  99 00fc 5D       		popq	%rbp
 100              		.cfi_def_cfa 7, 8
 101 00fd C3       		ret
 102              		.cfi_endproc
 103              	.LFE0:
 106              	find_shortoption:
 107              	.LFB1:
  69:argtable2.c   **** 
  70:argtable2.c   **** 
  71:argtable2.c   **** /*
  72:argtable2.c   ****  * Return index of first table entry with a matching short option
  73:argtable2.c   ****  * or -1 if no match was found.
  74:argtable2.c   ****  */
  75:argtable2.c   **** static
  76:argtable2.c   **** int find_shortoption(struct arg_hdr **table, char shortopt)
  77:argtable2.c   ****     {
 108              		.loc 1 77 0
 109              		.cfi_startproc
 110 00fe 55       		pushq	%rbp
 111              		.cfi_def_cfa_offset 16
 112              		.cfi_offset 6, -16
 113 00ff 4889E5   		movq	%rsp, %rbp
 114              		.cfi_def_cfa_register 6
 115 0102 4883EC20 		subq	$32, %rsp
 116 0106 48897DE8 		movq	%rdi, -24(%rbp)
 117 010a 89F0     		movl	%esi, %eax
 118 010c 8845E4   		movb	%al, -28(%rbp)
  78:argtable2.c   ****     int tabindex;
  79:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 119              		.loc 1 79 0
 120 010f C745FC00 		movl	$0, -4(%rbp)
 120      000000
 121 0116 EB57     		jmp	.L6
 122              	.L9:
  80:argtable2.c   ****         {
  81:argtable2.c   ****         if (table[tabindex]->shortopts && strchr(table[tabindex]->shortopts,shortopt))
 123              		.loc 1 81 0
 124 0118 8B45FC   		movl	-4(%rbp), %eax
 125 011b 4898     		cltq
 126 011d 488D14C5 		leaq	0(,%rax,8), %rdx
 126      00000000 
 127 0125 488B45E8 		movq	-24(%rbp), %rax
 128 0129 4801D0   		addq	%rdx, %rax
 129 012c 488B00   		movq	(%rax), %rax
 130 012f 488B4008 		movq	8(%rax), %rax
 131 0133 4885C0   		testq	%rax, %rax
 132 0136 7433     		je	.L7
 133              		.loc 1 81 0 is_stmt 0 discriminator 1
 134 0138 0FBE55E4 		movsbl	-28(%rbp), %edx
 135 013c 8B45FC   		movl	-4(%rbp), %eax
 136 013f 4898     		cltq
 137 0141 488D0CC5 		leaq	0(,%rax,8), %rcx
 137      00000000 
 138 0149 488B45E8 		movq	-24(%rbp), %rax
 139 014d 4801C8   		addq	%rcx, %rax
 140 0150 488B00   		movq	(%rax), %rax
 141 0153 488B4008 		movq	8(%rax), %rax
 142 0157 89D6     		movl	%edx, %esi
 143 0159 4889C7   		movq	%rax, %rdi
 144 015c E8000000 		call	strchr@PLT
 144      00
 145 0161 4885C0   		testq	%rax, %rax
 146 0164 7405     		je	.L7
  82:argtable2.c   ****             return tabindex;
 147              		.loc 1 82 0 is_stmt 1
 148 0166 8B45FC   		movl	-4(%rbp), %eax
 149 0169 EB2D     		jmp	.L8
 150              	.L7:
  79:argtable2.c   ****         {
 151              		.loc 1 79 0 discriminator 2
 152 016b 8345FC01 		addl	$1, -4(%rbp)
 153              	.L6:
  79:argtable2.c   ****         {
 154              		.loc 1 79 0 is_stmt 0 discriminator 1
 155 016f 8B45FC   		movl	-4(%rbp), %eax
 156 0172 4898     		cltq
 157 0174 488D14C5 		leaq	0(,%rax,8), %rdx
 157      00000000 
 158 017c 488B45E8 		movq	-24(%rbp), %rax
 159 0180 4801D0   		addq	%rdx, %rax
 160 0183 488B00   		movq	(%rax), %rax
 161 0186 0FB600   		movzbl	(%rax), %eax
 162 0189 0FBEC0   		movsbl	%al, %eax
 163 018c 83E001   		andl	$1, %eax
 164 018f 85C0     		testl	%eax, %eax
 165 0191 7485     		je	.L9
  83:argtable2.c   ****         }
  84:argtable2.c   ****     return -1;
 166              		.loc 1 84 0 is_stmt 1
 167 0193 B8FFFFFF 		movl	$-1, %eax
 167      FF
 168              	.L8:
  85:argtable2.c   ****     }
 169              		.loc 1 85 0
 170 0198 C9       		leave
 171              		.cfi_def_cfa 7, 8
 172 0199 C3       		ret
 173              		.cfi_endproc
 174              	.LFE1:
 176              		.section	.rodata
 177              	.LC0:
 178 0000 6765746F 		.string	"getoptval = %d\n"
 178      70747661 
 178      6C203D20 
 178      25640A00 
 179              	.LC1:
 180 0010 6E6F7074 		.string	"noptions  = %d\n"
 180      696F6E73 
 180      20203D20 
 180      25640A00 
 181              	.LC2:
 182 0020 6F707469 		.string	"options[%d].name    = \"%s\"\n"
 182      6F6E735B 
 182      25645D2E 
 182      6E616D65 
 182      20202020 
 183              	.LC3:
 184 003c 6F707469 		.string	"options[%d].has_arg = %d\n"
 184      6F6E735B 
 184      25645D2E 
 184      6861735F 
 184      61726720 
 185              	.LC4:
 186 0056 6F707469 		.string	"options[%d].flag    = %p\n"
 186      6F6E735B 
 186      25645D2E 
 186      666C6167 
 186      20202020 
 187              	.LC5:
 188 0070 6F707469 		.string	"options[%d].val     = %d\n"
 188      6F6E735B 
 188      25645D2E 
 188      76616C20 
 188      20202020 
 189              		.text
 191              	dump_longoptions:
 192              	.LFB2:
  86:argtable2.c   **** 
  87:argtable2.c   **** 
  88:argtable2.c   **** struct longoptions
  89:argtable2.c   ****     {
  90:argtable2.c   ****     int getoptval;
  91:argtable2.c   ****     int noptions;
  92:argtable2.c   ****     struct option *options;
  93:argtable2.c   ****     };
  94:argtable2.c   **** 
  95:argtable2.c   **** #ifndef NDEBUG
  96:argtable2.c   **** static
  97:argtable2.c   **** void dump_longoptions(struct longoptions* longoptions)
  98:argtable2.c   ****     {
 193              		.loc 1 98 0
 194              		.cfi_startproc
 195 019a 55       		pushq	%rbp
 196              		.cfi_def_cfa_offset 16
 197              		.cfi_offset 6, -16
 198 019b 4889E5   		movq	%rsp, %rbp
 199              		.cfi_def_cfa_register 6
 200 019e 4883EC20 		subq	$32, %rsp
 201 01a2 48897DE8 		movq	%rdi, -24(%rbp)
  99:argtable2.c   ****     int i;
 100:argtable2.c   ****     printf("getoptval = %d\n", longoptions->getoptval);
 202              		.loc 1 100 0
 203 01a6 488B45E8 		movq	-24(%rbp), %rax
 204 01aa 8B00     		movl	(%rax), %eax
 205 01ac 89C6     		movl	%eax, %esi
 206 01ae 488D3D00 		leaq	.LC0(%rip), %rdi
 206      000000
 207 01b5 B8000000 		movl	$0, %eax
 207      00
 208 01ba E8000000 		call	printf@PLT
 208      00
 101:argtable2.c   ****     printf("noptions  = %d\n", longoptions->noptions);
 209              		.loc 1 101 0
 210 01bf 488B45E8 		movq	-24(%rbp), %rax
 211 01c3 8B4004   		movl	4(%rax), %eax
 212 01c6 89C6     		movl	%eax, %esi
 213 01c8 488D3D00 		leaq	.LC1(%rip), %rdi
 213      000000
 214 01cf B8000000 		movl	$0, %eax
 214      00
 215 01d4 E8000000 		call	printf@PLT
 215      00
 102:argtable2.c   ****     for (i=0; i<longoptions->noptions; i++)
 216              		.loc 1 102 0
 217 01d9 C745FC00 		movl	$0, -4(%rbp)
 217      000000
 218 01e0 E9BD0000 		jmp	.L11
 218      00
 219              	.L12:
 103:argtable2.c   ****         {
 104:argtable2.c   ****         printf("options[%d].name    = \"%s\"\n", i, longoptions->options[i].name);
 220              		.loc 1 104 0 discriminator 3
 221 01e5 488B45E8 		movq	-24(%rbp), %rax
 222 01e9 488B4008 		movq	8(%rax), %rax
 223 01ed 8B55FC   		movl	-4(%rbp), %edx
 224 01f0 4863D2   		movslq	%edx, %rdx
 225 01f3 48C1E205 		salq	$5, %rdx
 226 01f7 4801D0   		addq	%rdx, %rax
 227 01fa 488B10   		movq	(%rax), %rdx
 228 01fd 8B45FC   		movl	-4(%rbp), %eax
 229 0200 89C6     		movl	%eax, %esi
 230 0202 488D3D00 		leaq	.LC2(%rip), %rdi
 230      000000
 231 0209 B8000000 		movl	$0, %eax
 231      00
 232 020e E8000000 		call	printf@PLT
 232      00
 105:argtable2.c   ****         printf("options[%d].has_arg = %d\n", i, longoptions->options[i].has_arg);
 233              		.loc 1 105 0 discriminator 3
 234 0213 488B45E8 		movq	-24(%rbp), %rax
 235 0217 488B4008 		movq	8(%rax), %rax
 236 021b 8B55FC   		movl	-4(%rbp), %edx
 237 021e 4863D2   		movslq	%edx, %rdx
 238 0221 48C1E205 		salq	$5, %rdx
 239 0225 4801D0   		addq	%rdx, %rax
 240 0228 8B5008   		movl	8(%rax), %edx
 241 022b 8B45FC   		movl	-4(%rbp), %eax
 242 022e 89C6     		movl	%eax, %esi
 243 0230 488D3D00 		leaq	.LC3(%rip), %rdi
 243      000000
 244 0237 B8000000 		movl	$0, %eax
 244      00
 245 023c E8000000 		call	printf@PLT
 245      00
 106:argtable2.c   ****         printf("options[%d].flag    = %p\n", i, longoptions->options[i].flag);
 246              		.loc 1 106 0 discriminator 3
 247 0241 488B45E8 		movq	-24(%rbp), %rax
 248 0245 488B4008 		movq	8(%rax), %rax
 249 0249 8B55FC   		movl	-4(%rbp), %edx
 250 024c 4863D2   		movslq	%edx, %rdx
 251 024f 48C1E205 		salq	$5, %rdx
 252 0253 4801D0   		addq	%rdx, %rax
 253 0256 488B5010 		movq	16(%rax), %rdx
 254 025a 8B45FC   		movl	-4(%rbp), %eax
 255 025d 89C6     		movl	%eax, %esi
 256 025f 488D3D00 		leaq	.LC4(%rip), %rdi
 256      000000
 257 0266 B8000000 		movl	$0, %eax
 257      00
 258 026b E8000000 		call	printf@PLT
 258      00
 107:argtable2.c   ****         printf("options[%d].val     = %d\n", i, longoptions->options[i].val);
 259              		.loc 1 107 0 discriminator 3
 260 0270 488B45E8 		movq	-24(%rbp), %rax
 261 0274 488B4008 		movq	8(%rax), %rax
 262 0278 8B55FC   		movl	-4(%rbp), %edx
 263 027b 4863D2   		movslq	%edx, %rdx
 264 027e 48C1E205 		salq	$5, %rdx
 265 0282 4801D0   		addq	%rdx, %rax
 266 0285 8B5018   		movl	24(%rax), %edx
 267 0288 8B45FC   		movl	-4(%rbp), %eax
 268 028b 89C6     		movl	%eax, %esi
 269 028d 488D3D00 		leaq	.LC5(%rip), %rdi
 269      000000
 270 0294 B8000000 		movl	$0, %eax
 270      00
 271 0299 E8000000 		call	printf@PLT
 271      00
 102:argtable2.c   ****         {
 272              		.loc 1 102 0 discriminator 3
 273 029e 8345FC01 		addl	$1, -4(%rbp)
 274              	.L11:
 102:argtable2.c   ****         {
 275              		.loc 1 102 0 is_stmt 0 discriminator 1
 276 02a2 488B45E8 		movq	-24(%rbp), %rax
 277 02a6 8B4004   		movl	4(%rax), %eax
 278 02a9 3945FC   		cmpl	%eax, -4(%rbp)
 279 02ac 0F8C33FF 		jl	.L12
 279      FFFF
 108:argtable2.c   ****         }
 109:argtable2.c   ****     }
 280              		.loc 1 109 0 is_stmt 1
 281 02b2 90       		nop
 282 02b3 C9       		leave
 283              		.cfi_def_cfa 7, 8
 284 02b4 C3       		ret
 285              		.cfi_endproc
 286              	.LFE2:
 289              	alloc_longoptions:
 290              	.LFB3:
 110:argtable2.c   **** #endif
 111:argtable2.c   **** 
 112:argtable2.c   **** static
 113:argtable2.c   **** struct longoptions* alloc_longoptions(struct arg_hdr **table)
 114:argtable2.c   ****     {
 291              		.loc 1 114 0
 292              		.cfi_startproc
 293 02b5 55       		pushq	%rbp
 294              		.cfi_def_cfa_offset 16
 295              		.cfi_offset 6, -16
 296 02b6 4889E5   		movq	%rsp, %rbp
 297              		.cfi_def_cfa_register 6
 298 02b9 4883EC60 		subq	$96, %rsp
 299 02bd 48897DA8 		movq	%rdi, -88(%rbp)
 115:argtable2.c   ****     struct longoptions *result;
 116:argtable2.c   ****     size_t nbytes;
 117:argtable2.c   ****     int noptions = 1;
 300              		.loc 1 117 0
 301 02c1 C745BC01 		movl	$1, -68(%rbp)
 301      000000
 118:argtable2.c   ****     size_t longoptlen = 0;
 302              		.loc 1 118 0
 303 02c8 48C745C8 		movq	$0, -56(%rbp)
 303      00000000 
 119:argtable2.c   ****     int tabindex;
 120:argtable2.c   **** 
 121:argtable2.c   ****     /*
 122:argtable2.c   ****      * Determine the total number of option structs required
 123:argtable2.c   ****      * by counting the number of comma separated long options
 124:argtable2.c   ****      * in all table entries and return the count in noptions.
 125:argtable2.c   ****      * note: noptions starts at 1 not 0 because we getoptlong
 126:argtable2.c   ****      * requires a NULL option entry to terminate the option array.
 127:argtable2.c   ****      * While we are at it, count the number of chars required
 128:argtable2.c   ****      * to store private copies of all the longoption strings
 129:argtable2.c   ****      * and return that count in logoptlen.
 130:argtable2.c   ****      */
 131:argtable2.c   ****      tabindex=0;
 304              		.loc 1 131 0
 305 02d0 C745C000 		movl	$0, -64(%rbp)
 305      000000
 306              	.L18:
 307              	.LBB2:
 132:argtable2.c   ****      do
 133:argtable2.c   ****         {
 134:argtable2.c   ****         const char *longopts = table[tabindex]->longopts;
 308              		.loc 1 134 0
 309 02d7 8B45C0   		movl	-64(%rbp), %eax
 310 02da 4898     		cltq
 311 02dc 488D14C5 		leaq	0(,%rax,8), %rdx
 311      00000000 
 312 02e4 488B45A8 		movq	-88(%rbp), %rax
 313 02e8 4801D0   		addq	%rdx, %rax
 314 02eb 488B00   		movq	(%rax), %rax
 315 02ee 488B4010 		movq	16(%rax), %rax
 316 02f2 488945D0 		movq	%rax, -48(%rbp)
 135:argtable2.c   ****         longoptlen += (longopts?strlen(longopts):0) + 1;
 317              		.loc 1 135 0
 318 02f6 48837DD0 		cmpq	$0, -48(%rbp)
 318      00
 319 02fb 7412     		je	.L14
 320              		.loc 1 135 0 is_stmt 0 discriminator 1
 321 02fd 488B45D0 		movq	-48(%rbp), %rax
 322 0301 4889C7   		movq	%rax, %rdi
 323 0304 E8000000 		call	strlen@PLT
 323      00
 324 0309 4883C001 		addq	$1, %rax
 325 030d EB05     		jmp	.L15
 326              	.L14:
 327              		.loc 1 135 0 discriminator 2
 328 030f B8010000 		movl	$1, %eax
 328      00
 329              	.L15:
 330              		.loc 1 135 0 discriminator 4
 331 0314 480145C8 		addq	%rax, -56(%rbp)
 136:argtable2.c   ****         while (longopts)
 332              		.loc 1 136 0 is_stmt 1 discriminator 4
 333 0318 EB1D     		jmp	.L16
 334              	.L17:
 137:argtable2.c   ****             {
 138:argtable2.c   ****             noptions++;
 335              		.loc 1 138 0
 336 031a 8345BC01 		addl	$1, -68(%rbp)
 139:argtable2.c   ****             longopts = strchr(longopts+1,',');
 337              		.loc 1 139 0
 338 031e 488B45D0 		movq	-48(%rbp), %rax
 339 0322 4883C001 		addq	$1, %rax
 340 0326 BE2C0000 		movl	$44, %esi
 340      00
 341 032b 4889C7   		movq	%rax, %rdi
 342 032e E8000000 		call	strchr@PLT
 342      00
 343 0333 488945D0 		movq	%rax, -48(%rbp)
 344              	.L16:
 136:argtable2.c   ****         while (longopts)
 345              		.loc 1 136 0
 346 0337 48837DD0 		cmpq	$0, -48(%rbp)
 346      00
 347 033c 75DC     		jne	.L17
 348              	.LBE2:
 140:argtable2.c   ****             }
 141:argtable2.c   ****         }while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 349              		.loc 1 141 0
 350 033e 8B45C0   		movl	-64(%rbp), %eax
 351 0341 8D5001   		leal	1(%rax), %edx
 352 0344 8955C0   		movl	%edx, -64(%rbp)
 353 0347 4898     		cltq
 354 0349 488D14C5 		leaq	0(,%rax,8), %rdx
 354      00000000 
 355 0351 488B45A8 		movq	-88(%rbp), %rax
 356 0355 4801D0   		addq	%rdx, %rax
 357 0358 488B00   		movq	(%rax), %rax
 358 035b 0FB600   		movzbl	(%rax), %eax
 359 035e 0FBEC0   		movsbl	%al, %eax
 360 0361 83E001   		andl	$1, %eax
 361 0364 85C0     		testl	%eax, %eax
 362 0366 0F846BFF 		je	.L18
 362      FFFF
 142:argtable2.c   ****     /*printf("%d long options consuming %d chars in total\n",noptions,longoptlen);*/
 143:argtable2.c   **** 
 144:argtable2.c   **** 
 145:argtable2.c   ****     /* allocate storage for return data structure as: */
 146:argtable2.c   ****     /* (struct longoptions) + (struct options)[noptions] + char[longoptlen] */
 147:argtable2.c   ****     nbytes = sizeof(struct longoptions)
 148:argtable2.c   ****            + sizeof(struct option)*noptions
 363              		.loc 1 148 0
 364 036c 8B45BC   		movl	-68(%rbp), %eax
 365 036f 4898     		cltq
 366 0371 48C1E005 		salq	$5, %rax
 367 0375 4889C2   		movq	%rax, %rdx
 149:argtable2.c   ****            + longoptlen;
 368              		.loc 1 149 0
 369 0378 488B45C8 		movq	-56(%rbp), %rax
 370 037c 4801D0   		addq	%rdx, %rax
 147:argtable2.c   ****            + sizeof(struct option)*noptions
 371              		.loc 1 147 0
 372 037f 4883C010 		addq	$16, %rax
 373 0383 488945E8 		movq	%rax, -24(%rbp)
 150:argtable2.c   ****     result = (struct longoptions*)malloc(nbytes);
 374              		.loc 1 150 0
 375 0387 488B45E8 		movq	-24(%rbp), %rax
 376 038b 4889C7   		movq	%rax, %rdi
 377 038e E8000000 		call	malloc@PLT
 377      00
 378 0393 488945F0 		movq	%rax, -16(%rbp)
 151:argtable2.c   ****     if (result)
 379              		.loc 1 151 0
 380 0397 48837DF0 		cmpq	$0, -16(%rbp)
 380      00
 381 039c 0F847B02 		je	.L19
 381      0000
 382              	.LBB3:
 152:argtable2.c   ****         {
 153:argtable2.c   ****         int option_index=0;
 383              		.loc 1 153 0
 384 03a2 C745C400 		movl	$0, -60(%rbp)
 384      000000
 154:argtable2.c   ****         char *store;
 155:argtable2.c   **** 
 156:argtable2.c   ****         result->getoptval=0;
 385              		.loc 1 156 0
 386 03a9 488B45F0 		movq	-16(%rbp), %rax
 387 03ad C7000000 		movl	$0, (%rax)
 387      0000
 157:argtable2.c   ****         result->noptions = noptions;
 388              		.loc 1 157 0
 389 03b3 488B45F0 		movq	-16(%rbp), %rax
 390 03b7 8B55BC   		movl	-68(%rbp), %edx
 391 03ba 895004   		movl	%edx, 4(%rax)
 158:argtable2.c   ****         result->options = (struct option*)(result + 1);
 392              		.loc 1 158 0
 393 03bd 488B45F0 		movq	-16(%rbp), %rax
 394 03c1 488D5010 		leaq	16(%rax), %rdx
 395 03c5 488B45F0 		movq	-16(%rbp), %rax
 396 03c9 48895008 		movq	%rdx, 8(%rax)
 159:argtable2.c   ****         store = (char*)(result->options + noptions);
 397              		.loc 1 159 0
 398 03cd 488B45F0 		movq	-16(%rbp), %rax
 399 03d1 488B4008 		movq	8(%rax), %rax
 400 03d5 8B55BC   		movl	-68(%rbp), %edx
 401 03d8 4863D2   		movslq	%edx, %rdx
 402 03db 48C1E205 		salq	$5, %rdx
 403 03df 4801D0   		addq	%rdx, %rax
 404 03e2 488945D8 		movq	%rax, -40(%rbp)
 160:argtable2.c   **** 
 161:argtable2.c   ****         for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 405              		.loc 1 161 0
 406 03e6 C745C000 		movl	$0, -64(%rbp)
 406      000000
 407 03ed E9920100 		jmp	.L20
 407      00
 408              	.L31:
 409              	.LBB4:
 162:argtable2.c   ****             {
 163:argtable2.c   ****             const char *longopts = table[tabindex]->longopts;
 410              		.loc 1 163 0
 411 03f2 8B45C0   		movl	-64(%rbp), %eax
 412 03f5 4898     		cltq
 413 03f7 488D14C5 		leaq	0(,%rax,8), %rdx
 413      00000000 
 414 03ff 488B45A8 		movq	-88(%rbp), %rax
 415 0403 4801D0   		addq	%rdx, %rax
 416 0406 488B00   		movq	(%rax), %rax
 417 0409 488B4010 		movq	16(%rax), %rax
 418 040d 488945E0 		movq	%rax, -32(%rbp)
 164:argtable2.c   **** 
 165:argtable2.c   ****             while(longopts && *longopts)
 419              		.loc 1 165 0
 420 0411 E9540100 		jmp	.L21
 420      00
 421              	.L30:
 422              	.LBB5:
 166:argtable2.c   ****                 {
 167:argtable2.c   ****                 char *storestart = store;
 423              		.loc 1 167 0
 424 0416 488B45D8 		movq	-40(%rbp), %rax
 425 041a 488945F8 		movq	%rax, -8(%rbp)
 168:argtable2.c   **** 
 169:argtable2.c   ****                 /* copy progressive longopt strings into the store */
 170:argtable2.c   ****                 while (*longopts!=0 && *longopts!=',')
 426              		.loc 1 170 0
 427 041e EB1D     		jmp	.L22
 428              	.L24:
 171:argtable2.c   ****                     *store++ = *longopts++;
 429              		.loc 1 171 0
 430 0420 488B55E0 		movq	-32(%rbp), %rdx
 431 0424 488D4201 		leaq	1(%rdx), %rax
 432 0428 488945E0 		movq	%rax, -32(%rbp)
 433 042c 488B45D8 		movq	-40(%rbp), %rax
 434 0430 488D4801 		leaq	1(%rax), %rcx
 435 0434 48894DD8 		movq	%rcx, -40(%rbp)
 436 0438 0FB612   		movzbl	(%rdx), %edx
 437 043b 8810     		movb	%dl, (%rax)
 438              	.L22:
 170:argtable2.c   ****                     *store++ = *longopts++;
 439              		.loc 1 170 0
 440 043d 488B45E0 		movq	-32(%rbp), %rax
 441 0441 0FB600   		movzbl	(%rax), %eax
 442 0444 84C0     		testb	%al, %al
 443 0446 740B     		je	.L23
 170:argtable2.c   ****                     *store++ = *longopts++;
 444              		.loc 1 170 0 is_stmt 0 discriminator 1
 445 0448 488B45E0 		movq	-32(%rbp), %rax
 446 044c 0FB600   		movzbl	(%rax), %eax
 447 044f 3C2C     		cmpb	$44, %al
 448 0451 75CD     		jne	.L24
 449              	.L23:
 172:argtable2.c   ****                 *store++ = 0;
 450              		.loc 1 172 0 is_stmt 1
 451 0453 488B45D8 		movq	-40(%rbp), %rax
 452 0457 488D5001 		leaq	1(%rax), %rdx
 453 045b 488955D8 		movq	%rdx, -40(%rbp)
 454 045f C60000   		movb	$0, (%rax)
 173:argtable2.c   ****                 if (*longopts==',')
 455              		.loc 1 173 0
 456 0462 488B45E0 		movq	-32(%rbp), %rax
 457 0466 0FB600   		movzbl	(%rax), %eax
 458 0469 3C2C     		cmpb	$44, %al
 459 046b 7505     		jne	.L25
 174:argtable2.c   ****                     longopts++;
 460              		.loc 1 174 0
 461 046d 488345E0 		addq	$1, -32(%rbp)
 461      01
 462              	.L25:
 175:argtable2.c   ****                 /*fprintf(stderr,"storestart=\"%s\"\n",storestart);*/
 176:argtable2.c   **** 
 177:argtable2.c   ****                 result->options[option_index].name    = storestart;
 463              		.loc 1 177 0
 464 0472 488B45F0 		movq	-16(%rbp), %rax
 465 0476 488B4008 		movq	8(%rax), %rax
 466 047a 8B55C4   		movl	-60(%rbp), %edx
 467 047d 4863D2   		movslq	%edx, %rdx
 468 0480 48C1E205 		salq	$5, %rdx
 469 0484 4801C2   		addq	%rax, %rdx
 470 0487 488B45F8 		movq	-8(%rbp), %rax
 471 048b 488902   		movq	%rax, (%rdx)
 178:argtable2.c   ****                 result->options[option_index].flag    = &(result->getoptval);
 472              		.loc 1 178 0
 473 048e 488B45F0 		movq	-16(%rbp), %rax
 474 0492 488B4008 		movq	8(%rax), %rax
 475 0496 8B55C4   		movl	-60(%rbp), %edx
 476 0499 4863D2   		movslq	%edx, %rdx
 477 049c 48C1E205 		salq	$5, %rdx
 478 04a0 4801C2   		addq	%rax, %rdx
 479 04a3 488B45F0 		movq	-16(%rbp), %rax
 480 04a7 48894210 		movq	%rax, 16(%rdx)
 179:argtable2.c   ****                 result->options[option_index].val     = tabindex;
 481              		.loc 1 179 0
 482 04ab 488B45F0 		movq	-16(%rbp), %rax
 483 04af 488B4008 		movq	8(%rax), %rax
 484 04b3 8B55C4   		movl	-60(%rbp), %edx
 485 04b6 4863D2   		movslq	%edx, %rdx
 486 04b9 48C1E205 		salq	$5, %rdx
 487 04bd 4801C2   		addq	%rax, %rdx
 488 04c0 8B45C0   		movl	-64(%rbp), %eax
 489 04c3 894218   		movl	%eax, 24(%rdx)
 180:argtable2.c   ****                 if (table[tabindex]->flag & ARG_HASOPTVALUE)
 490              		.loc 1 180 0
 491 04c6 8B45C0   		movl	-64(%rbp), %eax
 492 04c9 4898     		cltq
 493 04cb 488D14C5 		leaq	0(,%rax,8), %rdx
 493      00000000 
 494 04d3 488B45A8 		movq	-88(%rbp), %rax
 495 04d7 4801D0   		addq	%rdx, %rax
 496 04da 488B00   		movq	(%rax), %rax
 497 04dd 0FB600   		movzbl	(%rax), %eax
 498 04e0 0FBEC0   		movsbl	%al, %eax
 499 04e3 83E004   		andl	$4, %eax
 500 04e6 85C0     		testl	%eax, %eax
 501 04e8 741E     		je	.L26
 181:argtable2.c   ****                     result->options[option_index].has_arg = 2;
 502              		.loc 1 181 0
 503 04ea 488B45F0 		movq	-16(%rbp), %rax
 504 04ee 488B4008 		movq	8(%rax), %rax
 505 04f2 8B55C4   		movl	-60(%rbp), %edx
 506 04f5 4863D2   		movslq	%edx, %rdx
 507 04f8 48C1E205 		salq	$5, %rdx
 508 04fc 4801D0   		addq	%rdx, %rax
 509 04ff C7400802 		movl	$2, 8(%rax)
 509      000000
 510 0506 EB5E     		jmp	.L27
 511              	.L26:
 182:argtable2.c   ****                 else if (table[tabindex]->flag & ARG_HASVALUE)
 512              		.loc 1 182 0
 513 0508 8B45C0   		movl	-64(%rbp), %eax
 514 050b 4898     		cltq
 515 050d 488D14C5 		leaq	0(,%rax,8), %rdx
 515      00000000 
 516 0515 488B45A8 		movq	-88(%rbp), %rax
 517 0519 4801D0   		addq	%rdx, %rax
 518 051c 488B00   		movq	(%rax), %rax
 519 051f 0FB600   		movzbl	(%rax), %eax
 520 0522 0FBEC0   		movsbl	%al, %eax
 521 0525 83E002   		andl	$2, %eax
 522 0528 85C0     		testl	%eax, %eax
 523 052a 741E     		je	.L28
 183:argtable2.c   ****                     result->options[option_index].has_arg = 1;
 524              		.loc 1 183 0
 525 052c 488B45F0 		movq	-16(%rbp), %rax
 526 0530 488B4008 		movq	8(%rax), %rax
 527 0534 8B55C4   		movl	-60(%rbp), %edx
 528 0537 4863D2   		movslq	%edx, %rdx
 529 053a 48C1E205 		salq	$5, %rdx
 530 053e 4801D0   		addq	%rdx, %rax
 531 0541 C7400801 		movl	$1, 8(%rax)
 531      000000
 532 0548 EB1C     		jmp	.L27
 533              	.L28:
 184:argtable2.c   ****                 else
 185:argtable2.c   ****                     result->options[option_index].has_arg = 0;
 534              		.loc 1 185 0
 535 054a 488B45F0 		movq	-16(%rbp), %rax
 536 054e 488B4008 		movq	8(%rax), %rax
 537 0552 8B55C4   		movl	-60(%rbp), %edx
 538 0555 4863D2   		movslq	%edx, %rdx
 539 0558 48C1E205 		salq	$5, %rdx
 540 055c 4801D0   		addq	%rdx, %rax
 541 055f C7400800 		movl	$0, 8(%rax)
 541      000000
 542              	.L27:
 186:argtable2.c   **** 
 187:argtable2.c   ****                 option_index++;
 543              		.loc 1 187 0
 544 0566 8345C401 		addl	$1, -60(%rbp)
 545              	.L21:
 546              	.LBE5:
 165:argtable2.c   ****                 {
 547              		.loc 1 165 0
 548 056a 48837DE0 		cmpq	$0, -32(%rbp)
 548      00
 549 056f 740F     		je	.L29
 165:argtable2.c   ****                 {
 550              		.loc 1 165 0 is_stmt 0 discriminator 1
 551 0571 488B45E0 		movq	-32(%rbp), %rax
 552 0575 0FB600   		movzbl	(%rax), %eax
 553 0578 84C0     		testb	%al, %al
 554 057a 0F8596FE 		jne	.L30
 554      FFFF
 555              	.L29:
 556              	.LBE4:
 161:argtable2.c   ****             {
 557              		.loc 1 161 0 is_stmt 1 discriminator 2
 558 0580 8345C001 		addl	$1, -64(%rbp)
 559              	.L20:
 161:argtable2.c   ****             {
 560              		.loc 1 161 0 is_stmt 0 discriminator 1
 561 0584 8B45C0   		movl	-64(%rbp), %eax
 562 0587 4898     		cltq
 563 0589 488D14C5 		leaq	0(,%rax,8), %rdx
 563      00000000 
 564 0591 488B45A8 		movq	-88(%rbp), %rax
 565 0595 4801D0   		addq	%rdx, %rax
 566 0598 488B00   		movq	(%rax), %rax
 567 059b 0FB600   		movzbl	(%rax), %eax
 568 059e 0FBEC0   		movsbl	%al, %eax
 569 05a1 83E001   		andl	$1, %eax
 570 05a4 85C0     		testl	%eax, %eax
 571 05a6 0F8446FE 		je	.L31
 571      FFFF
 188:argtable2.c   ****                 }
 189:argtable2.c   ****             }
 190:argtable2.c   ****         /* terminate the options array with a zero-filled entry */
 191:argtable2.c   ****         result->options[option_index].name    = 0;
 572              		.loc 1 191 0 is_stmt 1
 573 05ac 488B45F0 		movq	-16(%rbp), %rax
 574 05b0 488B4008 		movq	8(%rax), %rax
 575 05b4 8B55C4   		movl	-60(%rbp), %edx
 576 05b7 4863D2   		movslq	%edx, %rdx
 577 05ba 48C1E205 		salq	$5, %rdx
 578 05be 4801D0   		addq	%rdx, %rax
 579 05c1 48C70000 		movq	$0, (%rax)
 579      000000
 192:argtable2.c   ****         result->options[option_index].has_arg = 0;
 580              		.loc 1 192 0
 581 05c8 488B45F0 		movq	-16(%rbp), %rax
 582 05cc 488B4008 		movq	8(%rax), %rax
 583 05d0 8B55C4   		movl	-60(%rbp), %edx
 584 05d3 4863D2   		movslq	%edx, %rdx
 585 05d6 48C1E205 		salq	$5, %rdx
 586 05da 4801D0   		addq	%rdx, %rax
 587 05dd C7400800 		movl	$0, 8(%rax)
 587      000000
 193:argtable2.c   ****         result->options[option_index].flag    = 0;
 588              		.loc 1 193 0
 589 05e4 488B45F0 		movq	-16(%rbp), %rax
 590 05e8 488B4008 		movq	8(%rax), %rax
 591 05ec 8B55C4   		movl	-60(%rbp), %edx
 592 05ef 4863D2   		movslq	%edx, %rdx
 593 05f2 48C1E205 		salq	$5, %rdx
 594 05f6 4801D0   		addq	%rdx, %rax
 595 05f9 48C74010 		movq	$0, 16(%rax)
 595      00000000 
 194:argtable2.c   ****         result->options[option_index].val     = 0;
 596              		.loc 1 194 0
 597 0601 488B45F0 		movq	-16(%rbp), %rax
 598 0605 488B4008 		movq	8(%rax), %rax
 599 0609 8B55C4   		movl	-60(%rbp), %edx
 600 060c 4863D2   		movslq	%edx, %rdx
 601 060f 48C1E205 		salq	$5, %rdx
 602 0613 4801D0   		addq	%rdx, %rax
 603 0616 C7401800 		movl	$0, 24(%rax)
 603      000000
 604              	.L19:
 605              	.LBE3:
 195:argtable2.c   ****         }
 196:argtable2.c   **** 
 197:argtable2.c   ****     /*dump_longoptions(result);*/
 198:argtable2.c   ****     return result;
 606              		.loc 1 198 0
 607 061d 488B45F0 		movq	-16(%rbp), %rax
 199:argtable2.c   ****     }
 608              		.loc 1 199 0
 609 0621 C9       		leave
 610              		.cfi_def_cfa 7, 8
 611 0622 C3       		ret
 612              		.cfi_endproc
 613              	.LFE3:
 616              	alloc_shortoptions:
 617              	.LFB4:
 200:argtable2.c   **** 
 201:argtable2.c   **** static
 202:argtable2.c   **** char* alloc_shortoptions(struct arg_hdr **table)
 203:argtable2.c   ****    {
 618              		.loc 1 203 0
 619              		.cfi_startproc
 620 0623 55       		pushq	%rbp
 621              		.cfi_def_cfa_offset 16
 622              		.cfi_offset 6, -16
 623 0624 4889E5   		movq	%rsp, %rbp
 624              		.cfi_def_cfa_register 6
 625 0627 4883EC50 		subq	$80, %rsp
 626 062b 48897DB8 		movq	%rdi, -72(%rbp)
 204:argtable2.c   ****    char *result;
 205:argtable2.c   ****    size_t len = 2;
 627              		.loc 1 205 0
 628 062f 48C745D0 		movq	$2, -48(%rbp)
 628      02000000 
 206:argtable2.c   ****    int tabindex;
 207:argtable2.c   **** 
 208:argtable2.c   ****    /* determine the total number of option chars required */
 209:argtable2.c   ****    for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 629              		.loc 1 209 0
 630 0637 C745CC00 		movl	$0, -52(%rbp)
 630      000000
 631 063e EB53     		jmp	.L34
 632              	.L37:
 633              	.LBB6:
 210:argtable2.c   ****        {
 211:argtable2.c   ****        struct arg_hdr *hdr = table[tabindex];
 634              		.loc 1 211 0
 635 0640 8B45CC   		movl	-52(%rbp), %eax
 636 0643 4898     		cltq
 637 0645 488D14C5 		leaq	0(,%rax,8), %rdx
 637      00000000 
 638 064d 488B45B8 		movq	-72(%rbp), %rax
 639 0651 4801D0   		addq	%rdx, %rax
 640 0654 488B00   		movq	(%rax), %rax
 641 0657 488945F8 		movq	%rax, -8(%rbp)
 212:argtable2.c   ****        len += 3 * (hdr->shortopts?strlen(hdr->shortopts):0);
 642              		.loc 1 212 0
 643 065b 488B45F8 		movq	-8(%rbp), %rax
 644 065f 488B4008 		movq	8(%rax), %rax
 645 0663 4885C0   		testq	%rax, %rax
 646 0666 741E     		je	.L35
 647              		.loc 1 212 0 is_stmt 0 discriminator 1
 648 0668 488B45F8 		movq	-8(%rbp), %rax
 649 066c 488B4008 		movq	8(%rax), %rax
 650 0670 4889C7   		movq	%rax, %rdi
 651 0673 E8000000 		call	strlen@PLT
 651      00
 652 0678 4889C2   		movq	%rax, %rdx
 653 067b 4889D0   		movq	%rdx, %rax
 654 067e 4801C0   		addq	%rax, %rax
 655 0681 4801D0   		addq	%rdx, %rax
 656 0684 EB05     		jmp	.L36
 657              	.L35:
 658              		.loc 1 212 0 discriminator 2
 659 0686 B8000000 		movl	$0, %eax
 659      00
 660              	.L36:
 661              		.loc 1 212 0 discriminator 4
 662 068b 480145D0 		addq	%rax, -48(%rbp)
 663              	.LBE6:
 209:argtable2.c   ****        {
 664              		.loc 1 209 0 is_stmt 1 discriminator 4
 665 068f 8345CC01 		addl	$1, -52(%rbp)
 666              	.L34:
 209:argtable2.c   ****        {
 667              		.loc 1 209 0 is_stmt 0 discriminator 2
 668 0693 8B45CC   		movl	-52(%rbp), %eax
 669 0696 4898     		cltq
 670 0698 488D14C5 		leaq	0(,%rax,8), %rdx
 670      00000000 
 671 06a0 488B45B8 		movq	-72(%rbp), %rax
 672 06a4 4801D0   		addq	%rdx, %rax
 673 06a7 488B00   		movq	(%rax), %rax
 674 06aa 0FB600   		movzbl	(%rax), %eax
 675 06ad 0FBEC0   		movsbl	%al, %eax
 676 06b0 83E001   		andl	$1, %eax
 677 06b3 85C0     		testl	%eax, %eax
 678 06b5 7489     		je	.L37
 213:argtable2.c   ****        }
 214:argtable2.c   **** 
 215:argtable2.c   ****    result = malloc(len);
 679              		.loc 1 215 0 is_stmt 1
 680 06b7 488B45D0 		movq	-48(%rbp), %rax
 681 06bb 4889C7   		movq	%rax, %rdi
 682 06be E8000000 		call	malloc@PLT
 682      00
 683 06c3 488945E8 		movq	%rax, -24(%rbp)
 216:argtable2.c   ****    if (result)
 684              		.loc 1 216 0
 685 06c7 48837DE8 		cmpq	$0, -24(%rbp)
 685      00
 686 06cc 0F84EE00 		je	.L38
 686      0000
 687              	.LBB7:
 217:argtable2.c   ****         {
 218:argtable2.c   ****         char *res = result;
 688              		.loc 1 218 0
 689 06d2 488B45E8 		movq	-24(%rbp), %rax
 690 06d6 488945D8 		movq	%rax, -40(%rbp)
 219:argtable2.c   **** 
 220:argtable2.c   ****         /* add a leading ':' so getopt return codes distinguish    */
 221:argtable2.c   ****         /* unrecognised option and options missing argument values */
 222:argtable2.c   ****         *res++=':';
 691              		.loc 1 222 0
 692 06da 488B45D8 		movq	-40(%rbp), %rax
 693 06de 488D5001 		leaq	1(%rax), %rdx
 694 06e2 488955D8 		movq	%rdx, -40(%rbp)
 695 06e6 C6003A   		movb	$58, (%rax)
 223:argtable2.c   **** 
 224:argtable2.c   ****         for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 696              		.loc 1 224 0
 697 06e9 C745CC00 		movl	$0, -52(%rbp)
 697      000000
 698 06f0 E99C0000 		jmp	.L39
 698      00
 699              	.L44:
 700              	.LBB8:
 225:argtable2.c   ****             {
 226:argtable2.c   ****             struct arg_hdr *hdr = table[tabindex];
 701              		.loc 1 226 0
 702 06f5 8B45CC   		movl	-52(%rbp), %eax
 703 06f8 4898     		cltq
 704 06fa 488D14C5 		leaq	0(,%rax,8), %rdx
 704      00000000 
 705 0702 488B45B8 		movq	-72(%rbp), %rax
 706 0706 4801D0   		addq	%rdx, %rax
 707 0709 488B00   		movq	(%rax), %rax
 708 070c 488945F0 		movq	%rax, -16(%rbp)
 227:argtable2.c   ****             const char *shortopts = hdr->shortopts;
 709              		.loc 1 227 0
 710 0710 488B45F0 		movq	-16(%rbp), %rax
 711 0714 488B4008 		movq	8(%rax), %rax
 712 0718 488945E0 		movq	%rax, -32(%rbp)
 228:argtable2.c   ****             while(shortopts && *shortopts)
 713              		.loc 1 228 0
 714 071c EB5D     		jmp	.L40
 715              	.L43:
 229:argtable2.c   ****                 {
 230:argtable2.c   ****                 *res++ = *shortopts++;
 716              		.loc 1 230 0
 717 071e 488B55E0 		movq	-32(%rbp), %rdx
 718 0722 488D4201 		leaq	1(%rdx), %rax
 719 0726 488945E0 		movq	%rax, -32(%rbp)
 720 072a 488B45D8 		movq	-40(%rbp), %rax
 721 072e 488D4801 		leaq	1(%rax), %rcx
 722 0732 48894DD8 		movq	%rcx, -40(%rbp)
 723 0736 0FB612   		movzbl	(%rdx), %edx
 724 0739 8810     		movb	%dl, (%rax)
 231:argtable2.c   ****                 if (hdr->flag & ARG_HASVALUE)
 725              		.loc 1 231 0
 726 073b 488B45F0 		movq	-16(%rbp), %rax
 727 073f 0FB600   		movzbl	(%rax), %eax
 728 0742 0FBEC0   		movsbl	%al, %eax
 729 0745 83E002   		andl	$2, %eax
 730 0748 85C0     		testl	%eax, %eax
 731 074a 740F     		je	.L41
 232:argtable2.c   ****                     *res++=':';
 732              		.loc 1 232 0
 733 074c 488B45D8 		movq	-40(%rbp), %rax
 734 0750 488D5001 		leaq	1(%rax), %rdx
 735 0754 488955D8 		movq	%rdx, -40(%rbp)
 736 0758 C6003A   		movb	$58, (%rax)
 737              	.L41:
 233:argtable2.c   ****                 if (hdr->flag & ARG_HASOPTVALUE)
 738              		.loc 1 233 0
 739 075b 488B45F0 		movq	-16(%rbp), %rax
 740 075f 0FB600   		movzbl	(%rax), %eax
 741 0762 0FBEC0   		movsbl	%al, %eax
 742 0765 83E004   		andl	$4, %eax
 743 0768 85C0     		testl	%eax, %eax
 744 076a 740F     		je	.L40
 234:argtable2.c   ****                     *res++=':';
 745              		.loc 1 234 0
 746 076c 488B45D8 		movq	-40(%rbp), %rax
 747 0770 488D5001 		leaq	1(%rax), %rdx
 748 0774 488955D8 		movq	%rdx, -40(%rbp)
 749 0778 C6003A   		movb	$58, (%rax)
 750              	.L40:
 228:argtable2.c   ****                 {
 751              		.loc 1 228 0
 752 077b 48837DE0 		cmpq	$0, -32(%rbp)
 752      00
 753 0780 740B     		je	.L42
 228:argtable2.c   ****                 {
 754              		.loc 1 228 0 is_stmt 0 discriminator 1
 755 0782 488B45E0 		movq	-32(%rbp), %rax
 756 0786 0FB600   		movzbl	(%rax), %eax
 757 0789 84C0     		testb	%al, %al
 758 078b 7591     		jne	.L43
 759              	.L42:
 760              	.LBE8:
 224:argtable2.c   ****             {
 761              		.loc 1 224 0 is_stmt 1 discriminator 2
 762 078d 8345CC01 		addl	$1, -52(%rbp)
 763              	.L39:
 224:argtable2.c   ****             {
 764              		.loc 1 224 0 is_stmt 0 discriminator 1
 765 0791 8B45CC   		movl	-52(%rbp), %eax
 766 0794 4898     		cltq
 767 0796 488D14C5 		leaq	0(,%rax,8), %rdx
 767      00000000 
 768 079e 488B45B8 		movq	-72(%rbp), %rax
 769 07a2 4801D0   		addq	%rdx, %rax
 770 07a5 488B00   		movq	(%rax), %rax
 771 07a8 0FB600   		movzbl	(%rax), %eax
 772 07ab 0FBEC0   		movsbl	%al, %eax
 773 07ae 83E001   		andl	$1, %eax
 774 07b1 85C0     		testl	%eax, %eax
 775 07b3 0F843CFF 		je	.L44
 775      FFFF
 235:argtable2.c   ****                 }
 236:argtable2.c   ****             }
 237:argtable2.c   ****         /* null terminate the string */
 238:argtable2.c   ****         *res=0;
 776              		.loc 1 238 0 is_stmt 1
 777 07b9 488B45D8 		movq	-40(%rbp), %rax
 778 07bd C60000   		movb	$0, (%rax)
 779              	.L38:
 780              	.LBE7:
 239:argtable2.c   ****         }
 240:argtable2.c   **** 
 241:argtable2.c   ****    /*printf("alloc_shortoptions() returns \"%s\"\n",(result?result:"NULL"));*/
 242:argtable2.c   ****    return result;
 781              		.loc 1 242 0
 782 07c0 488B45E8 		movq	-24(%rbp), %rax
 243:argtable2.c   ****    }
 783              		.loc 1 243 0
 784 07c4 C9       		leave
 785              		.cfi_def_cfa 7, 8
 786 07c5 C3       		ret
 787              		.cfi_endproc
 788              	.LFE4:
 791              	arg_endindex:
 792              	.LFB5:
 244:argtable2.c   **** 
 245:argtable2.c   **** 
 246:argtable2.c   **** /* return index of the table terminator entry */
 247:argtable2.c   **** static
 248:argtable2.c   **** int arg_endindex(struct arg_hdr **table)
 249:argtable2.c   ****     {
 793              		.loc 1 249 0
 794              		.cfi_startproc
 795 07c6 55       		pushq	%rbp
 796              		.cfi_def_cfa_offset 16
 797              		.cfi_offset 6, -16
 798 07c7 4889E5   		movq	%rsp, %rbp
 799              		.cfi_def_cfa_register 6
 800 07ca 48897DE8 		movq	%rdi, -24(%rbp)
 250:argtable2.c   ****     int tabindex=0;
 801              		.loc 1 250 0
 802 07ce C745FC00 		movl	$0, -4(%rbp)
 802      000000
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 803              		.loc 1 251 0
 804 07d5 EB04     		jmp	.L47
 805              	.L48:
 252:argtable2.c   ****         tabindex++;
 806              		.loc 1 252 0
 807 07d7 8345FC01 		addl	$1, -4(%rbp)
 808              	.L47:
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 809              		.loc 1 251 0
 810 07db 8B45FC   		movl	-4(%rbp), %eax
 811 07de 4898     		cltq
 812 07e0 488D14C5 		leaq	0(,%rax,8), %rdx
 812      00000000 
 813 07e8 488B45E8 		movq	-24(%rbp), %rax
 814 07ec 4801D0   		addq	%rdx, %rax
 815 07ef 488B00   		movq	(%rax), %rax
 816 07f2 0FB600   		movzbl	(%rax), %eax
 817 07f5 0FBEC0   		movsbl	%al, %eax
 818 07f8 83E001   		andl	$1, %eax
 819 07fb 85C0     		testl	%eax, %eax
 820 07fd 74D8     		je	.L48
 253:argtable2.c   ****     return tabindex;
 821              		.loc 1 253 0
 822 07ff 8B45FC   		movl	-4(%rbp), %eax
 254:argtable2.c   ****     }
 823              		.loc 1 254 0
 824 0802 5D       		popq	%rbp
 825              		.cfi_def_cfa 7, 8
 826 0803 C3       		ret
 827              		.cfi_endproc
 828              	.LFE5:
 831              	arg_parse_tagged:
 832              	.LFB6:
 255:argtable2.c   **** 
 256:argtable2.c   **** 
 257:argtable2.c   **** static
 258:argtable2.c   **** void arg_parse_tagged(int argc, char **argv, struct arg_hdr **table, struct arg_end *endtable)
 259:argtable2.c   ****     {
 833              		.loc 1 259 0
 834              		.cfi_startproc
 835 0804 55       		pushq	%rbp
 836              		.cfi_def_cfa_offset 16
 837              		.cfi_offset 6, -16
 838 0805 4889E5   		movq	%rsp, %rbp
 839              		.cfi_def_cfa_register 6
 840 0808 4883EC60 		subq	$96, %rsp
 841 080c 897DBC   		movl	%edi, -68(%rbp)
 842 080f 488975B0 		movq	%rsi, -80(%rbp)
 843 0813 488955A8 		movq	%rdx, -88(%rbp)
 844 0817 48894DA0 		movq	%rcx, -96(%rbp)
 260:argtable2.c   ****     struct longoptions *longoptions;
 261:argtable2.c   ****     char *shortoptions;
 262:argtable2.c   ****     int copt;
 263:argtable2.c   **** 
 264:argtable2.c   ****     /*printf("arg_parse_tagged(%d,%p,%p,%p)\n",argc,argv,table,endtable);*/
 265:argtable2.c   **** 
 266:argtable2.c   ****     /* allocate short and long option arrays for the given opttable[].   */
 267:argtable2.c   ****     /* if the allocs fail then put an error msg in the last table entry. */
 268:argtable2.c   ****     longoptions  = alloc_longoptions(table);
 845              		.loc 1 268 0
 846 081b 488B45A8 		movq	-88(%rbp), %rax
 847 081f 4889C7   		movq	%rax, %rdi
 848 0822 E88EFAFF 		call	alloc_longoptions
 848      FF
 849 0827 488945E0 		movq	%rax, -32(%rbp)
 269:argtable2.c   ****     shortoptions = alloc_shortoptions(table);
 850              		.loc 1 269 0
 851 082b 488B45A8 		movq	-88(%rbp), %rax
 852 082f 4889C7   		movq	%rax, %rdi
 853 0832 E8ECFDFF 		call	alloc_shortoptions
 853      FF
 854 0837 488945E8 		movq	%rax, -24(%rbp)
 270:argtable2.c   ****     if (!longoptions || !shortoptions)
 855              		.loc 1 270 0
 856 083b 48837DE0 		cmpq	$0, -32(%rbp)
 856      00
 857 0840 7407     		je	.L51
 858              		.loc 1 270 0 is_stmt 0 discriminator 1
 859 0842 48837DE8 		cmpq	$0, -24(%rbp)
 859      00
 860 0847 7537     		jne	.L52
 861              	.L51:
 271:argtable2.c   ****         {
 272:argtable2.c   ****         /* one or both memory allocs failed */
 273:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_EMALLOC,NULL);
 862              		.loc 1 273 0 is_stmt 1
 863 0849 488B75A0 		movq	-96(%rbp), %rsi
 864 084d 488B45A0 		movq	-96(%rbp), %rax
 865 0851 B9000000 		movl	$0, %ecx
 865      00
 866 0856 BA020000 		movl	$2, %edx
 866      00
 867 085b 4889C7   		movq	%rax, %rdi
 868 085e E89DF7FF 		call	arg_register_error
 868      FF
 274:argtable2.c   ****         /* free anything that was allocated (this is null safe) */
 275:argtable2.c   ****         free(shortoptions);
 869              		.loc 1 275 0
 870 0863 488B45E8 		movq	-24(%rbp), %rax
 871 0867 4889C7   		movq	%rax, %rdi
 872 086a E8000000 		call	free@PLT
 872      00
 276:argtable2.c   ****         free(longoptions);
 873              		.loc 1 276 0
 874 086f 488B45E0 		movq	-32(%rbp), %rax
 875 0873 4889C7   		movq	%rax, %rdi
 876 0876 E8000000 		call	free@PLT
 876      00
 277:argtable2.c   ****         return;
 877              		.loc 1 277 0
 878 087b E9190300 		jmp	.L50
 878      00
 879              	.L52:
 278:argtable2.c   ****         }
 279:argtable2.c   **** 
 280:argtable2.c   ****     /*dump_longoptions(longoptions);*/
 281:argtable2.c   **** 
 282:argtable2.c   ****     /* reset getopts internal option-index to zero, and disable error reporting */
 283:argtable2.c   ****     optind = 0;
 880              		.loc 1 283 0
 881 0880 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 881      000000
 882 0887 C7000000 		movl	$0, (%rax)
 882      0000
 284:argtable2.c   ****     opterr = 0;
 883              		.loc 1 284 0
 884 088d 488B0500 		movq	opterr@GOTPCREL(%rip), %rax
 884      000000
 885 0894 C7000000 		movl	$0, (%rax)
 885      0000
 285:argtable2.c   **** 
 286:argtable2.c   ****     /* fetch and process args using getopt_long */
 287:argtable2.c   ****     while( (copt=getopt_long(argc,argv,shortoptions,longoptions->options,NULL)) != -1)
 886              		.loc 1 287 0
 887 089a E9B50200 		jmp	.L54
 887      00
 888              	.L66:
 288:argtable2.c   ****         {
 289:argtable2.c   ****         /*
 290:argtable2.c   ****         printf("optarg='%s'\n",optarg);
 291:argtable2.c   ****         printf("optind=%d\n",optind);
 292:argtable2.c   ****         printf("copt=%c\n",(char)copt);
 293:argtable2.c   ****         printf("optopt=%c (%d)\n",optopt, (int)(optopt));
 294:argtable2.c   ****         */
 295:argtable2.c   ****         switch(copt)
 889              		.loc 1 295 0
 890 089f 8B45CC   		movl	-52(%rbp), %eax
 891 08a2 83F83A   		cmpl	$58, %eax
 892 08a5 0F849E01 		je	.L56
 892      0000
 893 08ab 83F83F   		cmpl	$63, %eax
 894 08ae 0F842D01 		je	.L57
 894      0000
 895 08b4 85C0     		testl	%eax, %eax
 896 08b6 0F85C701 		jne	.L67
 896      0000
 897              	.LBB9:
 296:argtable2.c   ****             {
 297:argtable2.c   ****             case 0:
 298:argtable2.c   ****                 {
 299:argtable2.c   ****                 int tabindex = longoptions->getoptval;
 898              		.loc 1 299 0
 899 08bc 488B45E0 		movq	-32(%rbp), %rax
 900 08c0 8B00     		movl	(%rax), %eax
 901 08c2 8945D0   		movl	%eax, -48(%rbp)
 300:argtable2.c   ****                 void *parent  = table[tabindex]->parent;
 902              		.loc 1 300 0
 903 08c5 8B45D0   		movl	-48(%rbp), %eax
 904 08c8 4898     		cltq
 905 08ca 488D14C5 		leaq	0(,%rax,8), %rdx
 905      00000000 
 906 08d2 488B45A8 		movq	-88(%rbp), %rax
 907 08d6 4801D0   		addq	%rdx, %rax
 908 08d9 488B00   		movq	(%rax), %rax
 909 08dc 488B4030 		movq	48(%rax), %rax
 910 08e0 488945F0 		movq	%rax, -16(%rbp)
 301:argtable2.c   ****                 /*printf("long option detected from argtable[%d]\n", tabindex);*/
 302:argtable2.c   ****                 if (optarg && optarg[0]==0 && (table[tabindex]->flag & ARG_HASVALUE))
 911              		.loc 1 302 0
 912 08e4 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 912      000000
 913 08eb 488B00   		movq	(%rax), %rax
 914 08ee 4885C0   		testq	%rax, %rax
 915 08f1 746A     		je	.L59
 916              		.loc 1 302 0 is_stmt 0 discriminator 1
 917 08f3 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 917      000000
 918 08fa 488B00   		movq	(%rax), %rax
 919 08fd 0FB600   		movzbl	(%rax), %eax
 920 0900 84C0     		testb	%al, %al
 921 0902 7559     		jne	.L59
 922              		.loc 1 302 0 discriminator 2
 923 0904 8B45D0   		movl	-48(%rbp), %eax
 924 0907 4898     		cltq
 925 0909 488D14C5 		leaq	0(,%rax,8), %rdx
 925      00000000 
 926 0911 488B45A8 		movq	-88(%rbp), %rax
 927 0915 4801D0   		addq	%rdx, %rax
 928 0918 488B00   		movq	(%rax), %rax
 929 091b 0FB600   		movzbl	(%rax), %eax
 930 091e 0FBEC0   		movsbl	%al, %eax
 931 0921 83E002   		andl	$2, %eax
 932 0924 85C0     		testl	%eax, %eax
 933 0926 7435     		je	.L59
 303:argtable2.c   ****                     {
 304:argtable2.c   ****                     /* printf(": long option %s requires an argument\n",argv[optind-1]); */
 305:argtable2.c   ****                     arg_register_error(endtable,endtable,ARG_EMISSARG,argv[optind-1]);
 934              		.loc 1 305 0 is_stmt 1
 935 0928 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 935      000000
 936 092f 8B00     		movl	(%rax), %eax
 937 0931 4898     		cltq
 938 0933 48C1E003 		salq	$3, %rax
 939 0937 488D50F8 		leaq	-8(%rax), %rdx
 940 093b 488B45B0 		movq	-80(%rbp), %rax
 941 093f 4801D0   		addq	%rdx, %rax
 942 0942 488B10   		movq	(%rax), %rdx
 943 0945 488B75A0 		movq	-96(%rbp), %rsi
 944 0949 488B45A0 		movq	-96(%rbp), %rax
 945 094d 4889D1   		movq	%rdx, %rcx
 946 0950 BA050000 		movl	$5, %edx
 946      00
 947 0955 4889C7   		movq	%rax, %rdi
 948 0958 E8A3F6FF 		call	arg_register_error
 948      FF
 949              	.L59:
 306:argtable2.c   ****                     /* continue to scan the (empty) argument value to enforce argument count checki
 307:argtable2.c   ****                     }
 308:argtable2.c   ****                 if (table[tabindex]->scanfn)
 950              		.loc 1 308 0
 951 095d 8B45D0   		movl	-48(%rbp), %eax
 952 0960 4898     		cltq
 953 0962 488D14C5 		leaq	0(,%rax,8), %rdx
 953      00000000 
 954 096a 488B45A8 		movq	-88(%rbp), %rax
 955 096e 4801D0   		addq	%rdx, %rax
 956 0971 488B00   		movq	(%rax), %rax
 957 0974 488B4040 		movq	64(%rax), %rax
 958 0978 4885C0   		testq	%rax, %rax
 959 097b 0F84D301 		je	.L54
 959      0000
 960              	.LBB10:
 309:argtable2.c   ****                     {
 310:argtable2.c   ****                     int errorcode = table[tabindex]->scanfn(parent,optarg);
 961              		.loc 1 310 0
 962 0981 8B45D0   		movl	-48(%rbp), %eax
 963 0984 4898     		cltq
 964 0986 488D14C5 		leaq	0(,%rax,8), %rdx
 964      00000000 
 965 098e 488B45A8 		movq	-88(%rbp), %rax
 966 0992 4801D0   		addq	%rdx, %rax
 967 0995 488B00   		movq	(%rax), %rax
 968 0998 488B4040 		movq	64(%rax), %rax
 969 099c 488B1500 		movq	optarg@GOTPCREL(%rip), %rdx
 969      000000
 970 09a3 488B0A   		movq	(%rdx), %rcx
 971 09a6 488B55F0 		movq	-16(%rbp), %rdx
 972 09aa 4889CE   		movq	%rcx, %rsi
 973 09ad 4889D7   		movq	%rdx, %rdi
 974 09b0 FFD0     		call	*%rax
 975              	.LVL0:
 976 09b2 8945D4   		movl	%eax, -44(%rbp)
 311:argtable2.c   ****                     if (errorcode!=0)
 977              		.loc 1 311 0
 978 09b5 837DD400 		cmpl	$0, -44(%rbp)
 979 09b9 0F849501 		je	.L54
 979      0000
 312:argtable2.c   ****                         arg_register_error(endtable,parent,errorcode,optarg);
 980              		.loc 1 312 0
 981 09bf 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 981      000000
 982 09c6 488B08   		movq	(%rax), %rcx
 983 09c9 8B55D4   		movl	-44(%rbp), %edx
 984 09cc 488B75F0 		movq	-16(%rbp), %rsi
 985 09d0 488B45A0 		movq	-96(%rbp), %rax
 986 09d4 4889C7   		movq	%rax, %rdi
 987 09d7 E824F6FF 		call	arg_register_error
 987      FF
 988              	.LBE10:
 989              	.LBE9:
 313:argtable2.c   ****                     }
 314:argtable2.c   ****                 }
 315:argtable2.c   ****                 break;
 990              		.loc 1 315 0
 991 09dc E9730100 		jmp	.L54
 991      00
 992              	.L57:
 316:argtable2.c   **** 
 317:argtable2.c   ****             case '?':
 318:argtable2.c   ****                 /*
 319:argtable2.c   ****                 * getopt_long() found an unrecognised short option.
 320:argtable2.c   ****                 * if it was a short option its value is in optopt
 321:argtable2.c   ****                 * if it was a long option then optopt=0
 322:argtable2.c   ****                 */
 323:argtable2.c   ****                 switch (optopt)
 993              		.loc 1 323 0
 994 09e1 488B0500 		movq	optopt@GOTPCREL(%rip), %rax
 994      000000
 995 09e8 8B00     		movl	(%rax), %eax
 996 09ea 85C0     		testl	%eax, %eax
 997 09ec 7537     		jne	.L68
 324:argtable2.c   ****                     {
 325:argtable2.c   ****                     case 0:
 326:argtable2.c   ****                         /*printf("?0 unrecognised long option %s\n",argv[optind-1]);*/
 327:argtable2.c   ****                         arg_register_error(endtable,endtable,ARG_ELONGOPT,argv[optind-1]);
 998              		.loc 1 327 0
 999 09ee 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 999      000000
 1000 09f5 8B00     		movl	(%rax), %eax
 1001 09f7 4898     		cltq
 1002 09f9 48C1E003 		salq	$3, %rax
 1003 09fd 488D50F8 		leaq	-8(%rax), %rdx
 1004 0a01 488B45B0 		movq	-80(%rbp), %rax
 1005 0a05 4801D0   		addq	%rdx, %rax
 1006 0a08 488B10   		movq	(%rax), %rdx
 1007 0a0b 488B75A0 		movq	-96(%rbp), %rsi
 1008 0a0f 488B45A0 		movq	-96(%rbp), %rax
 1009 0a13 4889D1   		movq	%rdx, %rcx
 1010 0a16 BA040000 		movl	$4, %edx
 1010      00
 1011 0a1b 4889C7   		movq	%rax, %rdi
 1012 0a1e E8DDF5FF 		call	arg_register_error
 1012      FF
 328:argtable2.c   ****                         break;
 1013              		.loc 1 328 0
 1014 0a23 EB1F     		jmp	.L63
 1015              	.L68:
 329:argtable2.c   ****                     default:
 330:argtable2.c   ****                         /*printf("?* unrecognised short option '%c'\n",optopt);*/
 331:argtable2.c   ****                         arg_register_error(endtable,endtable,optopt,NULL);
 1016              		.loc 1 331 0
 1017 0a25 488B0500 		movq	optopt@GOTPCREL(%rip), %rax
 1017      000000
 1018 0a2c 8B10     		movl	(%rax), %edx
 1019 0a2e 488B75A0 		movq	-96(%rbp), %rsi
 1020 0a32 488B45A0 		movq	-96(%rbp), %rax
 1021 0a36 B9000000 		movl	$0, %ecx
 1021      00
 1022 0a3b 4889C7   		movq	%rax, %rdi
 1023 0a3e E8BDF5FF 		call	arg_register_error
 1023      FF
 332:argtable2.c   ****                         break;
 1024              		.loc 1 332 0
 1025 0a43 90       		nop
 1026              	.L63:
 333:argtable2.c   ****                     }
 334:argtable2.c   ****                 break;
 1027              		.loc 1 334 0
 1028 0a44 E90B0100 		jmp	.L54
 1028      00
 1029              	.L56:
 335:argtable2.c   **** 
 336:argtable2.c   ****             case':':
 337:argtable2.c   ****                 /*
 338:argtable2.c   ****                 * getopt_long() found an option with its argument missing.
 339:argtable2.c   ****                 */
 340:argtable2.c   ****                 /*printf(": option %s requires an argument\n",argv[optind-1]); */
 341:argtable2.c   ****                 arg_register_error(endtable,endtable,ARG_EMISSARG,argv[optind-1]); 
 1030              		.loc 1 341 0
 1031 0a49 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1031      000000
 1032 0a50 8B00     		movl	(%rax), %eax
 1033 0a52 4898     		cltq
 1034 0a54 48C1E003 		salq	$3, %rax
 1035 0a58 488D50F8 		leaq	-8(%rax), %rdx
 1036 0a5c 488B45B0 		movq	-80(%rbp), %rax
 1037 0a60 4801D0   		addq	%rdx, %rax
 1038 0a63 488B10   		movq	(%rax), %rdx
 1039 0a66 488B75A0 		movq	-96(%rbp), %rsi
 1040 0a6a 488B45A0 		movq	-96(%rbp), %rax
 1041 0a6e 4889D1   		movq	%rdx, %rcx
 1042 0a71 BA050000 		movl	$5, %edx
 1042      00
 1043 0a76 4889C7   		movq	%rax, %rdi
 1044 0a79 E882F5FF 		call	arg_register_error
 1044      FF
 342:argtable2.c   ****                 break;
 1045              		.loc 1 342 0
 1046 0a7e E9D10000 		jmp	.L54
 1046      00
 1047              	.L67:
 1048              	.LBB11:
 343:argtable2.c   **** 
 344:argtable2.c   ****             default:
 345:argtable2.c   ****                 {
 346:argtable2.c   ****                 /* getopt_long() found a valid short option */
 347:argtable2.c   ****                 int tabindex = find_shortoption(table,(char)copt);
 1049              		.loc 1 347 0
 1050 0a83 8B45CC   		movl	-52(%rbp), %eax
 1051 0a86 0FBED0   		movsbl	%al, %edx
 1052 0a89 488B45A8 		movq	-88(%rbp), %rax
 1053 0a8d 89D6     		movl	%edx, %esi
 1054 0a8f 4889C7   		movq	%rax, %rdi
 1055 0a92 E867F6FF 		call	find_shortoption
 1055      FF
 1056 0a97 8945D8   		movl	%eax, -40(%rbp)
 348:argtable2.c   ****                 /*printf("short option detected from argtable[%d]\n", tabindex);*/
 349:argtable2.c   ****                 if (tabindex==-1)
 1057              		.loc 1 349 0
 1058 0a9a 837DD8FF 		cmpl	$-1, -40(%rbp)
 1059 0a9e 751D     		jne	.L64
 350:argtable2.c   ****                     {
 351:argtable2.c   ****                     /* should never get here - but handle it just in case */
 352:argtable2.c   ****                     /*printf("unrecognised short option %d\n",copt);*/
 353:argtable2.c   ****                     arg_register_error(endtable,endtable,copt,NULL);
 1060              		.loc 1 353 0
 1061 0aa0 8B55CC   		movl	-52(%rbp), %edx
 1062 0aa3 488B75A0 		movq	-96(%rbp), %rsi
 1063 0aa7 488B45A0 		movq	-96(%rbp), %rax
 1064 0aab B9000000 		movl	$0, %ecx
 1064      00
 1065 0ab0 4889C7   		movq	%rax, %rdi
 1066 0ab3 E848F5FF 		call	arg_register_error
 1066      FF
 1067 0ab8 E9960000 		jmp	.L69
 1067      00
 1068              	.L64:
 354:argtable2.c   ****                     }
 355:argtable2.c   ****                 else
 356:argtable2.c   ****                     {
 357:argtable2.c   ****                     if (table[tabindex]->scanfn)
 1069              		.loc 1 357 0
 1070 0abd 8B45D8   		movl	-40(%rbp), %eax
 1071 0ac0 4898     		cltq
 1072 0ac2 488D14C5 		leaq	0(,%rax,8), %rdx
 1072      00000000 
 1073 0aca 488B45A8 		movq	-88(%rbp), %rax
 1074 0ace 4801D0   		addq	%rdx, %rax
 1075 0ad1 488B00   		movq	(%rax), %rax
 1076 0ad4 488B4040 		movq	64(%rax), %rax
 1077 0ad8 4885C0   		testq	%rax, %rax
 1078 0adb 7476     		je	.L69
 1079              	.LBB12:
 358:argtable2.c   ****                         {
 359:argtable2.c   ****                         void *parent  = table[tabindex]->parent;
 1080              		.loc 1 359 0
 1081 0add 8B45D8   		movl	-40(%rbp), %eax
 1082 0ae0 4898     		cltq
 1083 0ae2 488D14C5 		leaq	0(,%rax,8), %rdx
 1083      00000000 
 1084 0aea 488B45A8 		movq	-88(%rbp), %rax
 1085 0aee 4801D0   		addq	%rdx, %rax
 1086 0af1 488B00   		movq	(%rax), %rax
 1087 0af4 488B4030 		movq	48(%rax), %rax
 1088 0af8 488945F8 		movq	%rax, -8(%rbp)
 360:argtable2.c   ****                         int errorcode = table[tabindex]->scanfn(parent,optarg);
 1089              		.loc 1 360 0
 1090 0afc 8B45D8   		movl	-40(%rbp), %eax
 1091 0aff 4898     		cltq
 1092 0b01 488D14C5 		leaq	0(,%rax,8), %rdx
 1092      00000000 
 1093 0b09 488B45A8 		movq	-88(%rbp), %rax
 1094 0b0d 4801D0   		addq	%rdx, %rax
 1095 0b10 488B00   		movq	(%rax), %rax
 1096 0b13 488B4040 		movq	64(%rax), %rax
 1097 0b17 488B1500 		movq	optarg@GOTPCREL(%rip), %rdx
 1097      000000
 1098 0b1e 488B0A   		movq	(%rdx), %rcx
 1099 0b21 488B55F8 		movq	-8(%rbp), %rdx
 1100 0b25 4889CE   		movq	%rcx, %rsi
 1101 0b28 4889D7   		movq	%rdx, %rdi
 1102 0b2b FFD0     		call	*%rax
 1103              	.LVL1:
 1104 0b2d 8945DC   		movl	%eax, -36(%rbp)
 361:argtable2.c   ****                         if (errorcode!=0)
 1105              		.loc 1 361 0
 1106 0b30 837DDC00 		cmpl	$0, -36(%rbp)
 1107 0b34 741D     		je	.L69
 362:argtable2.c   ****                             arg_register_error(endtable,parent,errorcode,optarg);
 1108              		.loc 1 362 0
 1109 0b36 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1109      000000
 1110 0b3d 488B08   		movq	(%rax), %rcx
 1111 0b40 8B55DC   		movl	-36(%rbp), %edx
 1112 0b43 488B75F8 		movq	-8(%rbp), %rsi
 1113 0b47 488B45A0 		movq	-96(%rbp), %rax
 1114 0b4b 4889C7   		movq	%rax, %rdi
 1115 0b4e E8ADF4FF 		call	arg_register_error
 1115      FF
 1116              	.L69:
 1117              	.LBE12:
 363:argtable2.c   ****                         }
 364:argtable2.c   ****                     }
 365:argtable2.c   ****                 break;
 1118              		.loc 1 365 0
 1119 0b53 90       		nop
 1120              	.L54:
 1121              	.LBE11:
 287:argtable2.c   ****         {
 1122              		.loc 1 287 0
 1123 0b54 488B45E0 		movq	-32(%rbp), %rax
 1124 0b58 488B4808 		movq	8(%rax), %rcx
 1125 0b5c 488B55E8 		movq	-24(%rbp), %rdx
 1126 0b60 488B75B0 		movq	-80(%rbp), %rsi
 1127 0b64 8B45BC   		movl	-68(%rbp), %eax
 1128 0b67 41B80000 		movl	$0, %r8d
 1128      0000
 1129 0b6d 89C7     		movl	%eax, %edi
 1130 0b6f E8000000 		call	getopt_long@PLT
 1130      00
 1131 0b74 8945CC   		movl	%eax, -52(%rbp)
 1132 0b77 837DCCFF 		cmpl	$-1, -52(%rbp)
 1133 0b7b 0F851EFD 		jne	.L66
 1133      FFFF
 366:argtable2.c   ****                 }
 367:argtable2.c   ****             }
 368:argtable2.c   ****         }
 369:argtable2.c   **** 
 370:argtable2.c   ****     free(shortoptions);
 1134              		.loc 1 370 0
 1135 0b81 488B45E8 		movq	-24(%rbp), %rax
 1136 0b85 4889C7   		movq	%rax, %rdi
 1137 0b88 E8000000 		call	free@PLT
 1137      00
 371:argtable2.c   ****     free(longoptions);
 1138              		.loc 1 371 0
 1139 0b8d 488B45E0 		movq	-32(%rbp), %rax
 1140 0b91 4889C7   		movq	%rax, %rdi
 1141 0b94 E8000000 		call	free@PLT
 1141      00
 1142              	.L50:
 372:argtable2.c   ****     }
 1143              		.loc 1 372 0
 1144 0b99 C9       		leave
 1145              		.cfi_def_cfa 7, 8
 1146 0b9a C3       		ret
 1147              		.cfi_endproc
 1148              	.LFE6:
 1151              	arg_parse_untagged:
 1152              	.LFB7:
 373:argtable2.c   **** 
 374:argtable2.c   **** 
 375:argtable2.c   **** static
 376:argtable2.c   **** void arg_parse_untagged(int argc, char **argv, struct arg_hdr **table, struct arg_end *endtable)
 377:argtable2.c   ****     {
 1153              		.loc 1 377 0
 1154              		.cfi_startproc
 1155 0b9b 55       		pushq	%rbp
 1156              		.cfi_def_cfa_offset 16
 1157              		.cfi_offset 6, -16
 1158 0b9c 4889E5   		movq	%rsp, %rbp
 1159              		.cfi_def_cfa_register 6
 1160 0b9f 4883EC50 		subq	$80, %rsp
 1161 0ba3 897DCC   		movl	%edi, -52(%rbp)
 1162 0ba6 488975C0 		movq	%rsi, -64(%rbp)
 1163 0baa 488955B8 		movq	%rdx, -72(%rbp)
 1164 0bae 48894DB0 		movq	%rcx, -80(%rbp)
 378:argtable2.c   ****     int tabindex=0;
 1165              		.loc 1 378 0
 1166 0bb2 C745DC00 		movl	$0, -36(%rbp)
 1166      000000
 379:argtable2.c   ****     int errorlast=0;
 1167              		.loc 1 379 0
 1168 0bb9 C745E000 		movl	$0, -32(%rbp)
 1168      000000
 380:argtable2.c   ****     const char *optarglast = NULL;
 1169              		.loc 1 380 0
 1170 0bc0 48C745E8 		movq	$0, -24(%rbp)
 1170      00000000 
 381:argtable2.c   ****     void *parentlast = NULL;
 1171              		.loc 1 381 0
 1172 0bc8 48C745F0 		movq	$0, -16(%rbp)
 1172      00000000 
 382:argtable2.c   **** 
 383:argtable2.c   ****     /*printf("arg_parse_untagged(%d,%p,%p,%p)\n",argc,argv,table,endtable);*/
 384:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 1173              		.loc 1 384 0
 1174 0bd0 E9420100 		jmp	.L71
 1174      00
 1175              	.L78:
 1176              	.LBB13:
 385:argtable2.c   ****         {
 386:argtable2.c   ****         void *parent;
 387:argtable2.c   ****         int errorcode;
 388:argtable2.c   **** 
 389:argtable2.c   ****         /* if we have exhausted our argv[optind] entries then we have finished */
 390:argtable2.c   ****         if (optind>=argc)
 1177              		.loc 1 390 0
 1178 0bd5 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1178      000000
 1179 0bdc 8B00     		movl	(%rax), %eax
 1180 0bde 3945CC   		cmpl	%eax, -52(%rbp)
 1181 0be1 0F8EDE01 		jle	.L82
 1181      0000
 391:argtable2.c   ****             {
 392:argtable2.c   ****             /*printf("arg_parse_untagged(): argv[] exhausted\n");*/
 393:argtable2.c   ****             return;
 394:argtable2.c   ****             }
 395:argtable2.c   **** 
 396:argtable2.c   ****         /* skip table entries with non-null long or short options (they are not untagged entries) *
 397:argtable2.c   ****         if (table[tabindex]->longopts || table[tabindex]->shortopts)
 1182              		.loc 1 397 0
 1183 0be7 8B45DC   		movl	-36(%rbp), %eax
 1184 0bea 4898     		cltq
 1185 0bec 488D14C5 		leaq	0(,%rax,8), %rdx
 1185      00000000 
 1186 0bf4 488B45B8 		movq	-72(%rbp), %rax
 1187 0bf8 4801D0   		addq	%rdx, %rax
 1188 0bfb 488B00   		movq	(%rax), %rax
 1189 0bfe 488B4010 		movq	16(%rax), %rax
 1190 0c02 4885C0   		testq	%rax, %rax
 1191 0c05 7520     		jne	.L74
 1192              		.loc 1 397 0 is_stmt 0 discriminator 1
 1193 0c07 8B45DC   		movl	-36(%rbp), %eax
 1194 0c0a 4898     		cltq
 1195 0c0c 488D14C5 		leaq	0(,%rax,8), %rdx
 1195      00000000 
 1196 0c14 488B45B8 		movq	-72(%rbp), %rax
 1197 0c18 4801D0   		addq	%rdx, %rax
 1198 0c1b 488B00   		movq	(%rax), %rax
 1199 0c1e 488B4008 		movq	8(%rax), %rax
 1200 0c22 4885C0   		testq	%rax, %rax
 1201 0c25 7409     		je	.L75
 1202              	.L74:
 398:argtable2.c   ****             {
 399:argtable2.c   ****             /*printf("arg_parse_untagged(): skipping argtable[%d] (tagged argument)\n",tabindex);*/
 400:argtable2.c   ****             tabindex++;
 1203              		.loc 1 400 0 is_stmt 1
 1204 0c27 8345DC01 		addl	$1, -36(%rbp)
 401:argtable2.c   ****             continue;
 1205              		.loc 1 401 0
 1206 0c2b E9E70000 		jmp	.L71
 1206      00
 1207              	.L75:
 402:argtable2.c   ****             }
 403:argtable2.c   **** 
 404:argtable2.c   ****         /* skip table entries with NULL scanfn */
 405:argtable2.c   ****         if (!(table[tabindex]->scanfn))
 1208              		.loc 1 405 0
 1209 0c30 8B45DC   		movl	-36(%rbp), %eax
 1210 0c33 4898     		cltq
 1211 0c35 488D14C5 		leaq	0(,%rax,8), %rdx
 1211      00000000 
 1212 0c3d 488B45B8 		movq	-72(%rbp), %rax
 1213 0c41 4801D0   		addq	%rdx, %rax
 1214 0c44 488B00   		movq	(%rax), %rax
 1215 0c47 488B4040 		movq	64(%rax), %rax
 1216 0c4b 4885C0   		testq	%rax, %rax
 1217 0c4e 7509     		jne	.L76
 406:argtable2.c   ****             {
 407:argtable2.c   ****             /*printf("arg_parse_untagged(): skipping argtable[%d] (NULL scanfn)\n",tabindex);*/
 408:argtable2.c   ****             tabindex++;
 1218              		.loc 1 408 0
 1219 0c50 8345DC01 		addl	$1, -36(%rbp)
 409:argtable2.c   ****             continue;
 1220              		.loc 1 409 0
 1221 0c54 E9BE0000 		jmp	.L71
 1221      00
 1222              	.L76:
 410:argtable2.c   ****             }
 411:argtable2.c   **** 
 412:argtable2.c   ****         /* attempt to scan the current argv[optind] with the current     */
 413:argtable2.c   ****         /* table[tabindex] entry. If it succeeds then keep it, otherwise */
 414:argtable2.c   ****         /* try again with the next table[] entry.                        */
 415:argtable2.c   ****         parent = table[tabindex]->parent;
 1223              		.loc 1 415 0
 1224 0c59 8B45DC   		movl	-36(%rbp), %eax
 1225 0c5c 4898     		cltq
 1226 0c5e 488D14C5 		leaq	0(,%rax,8), %rdx
 1226      00000000 
 1227 0c66 488B45B8 		movq	-72(%rbp), %rax
 1228 0c6a 4801D0   		addq	%rdx, %rax
 1229 0c6d 488B00   		movq	(%rax), %rax
 1230 0c70 488B4030 		movq	48(%rax), %rax
 1231 0c74 488945F8 		movq	%rax, -8(%rbp)
 416:argtable2.c   ****         errorcode = table[tabindex]->scanfn(parent,argv[optind]);
 1232              		.loc 1 416 0
 1233 0c78 8B45DC   		movl	-36(%rbp), %eax
 1234 0c7b 4898     		cltq
 1235 0c7d 488D14C5 		leaq	0(,%rax,8), %rdx
 1235      00000000 
 1236 0c85 488B45B8 		movq	-72(%rbp), %rax
 1237 0c89 4801D0   		addq	%rdx, %rax
 1238 0c8c 488B00   		movq	(%rax), %rax
 1239 0c8f 488B4040 		movq	64(%rax), %rax
 1240 0c93 488B1500 		movq	optind@GOTPCREL(%rip), %rdx
 1240      000000
 1241 0c9a 8B12     		movl	(%rdx), %edx
 1242 0c9c 4863D2   		movslq	%edx, %rdx
 1243 0c9f 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1243      00000000 
 1244 0ca7 488B55C0 		movq	-64(%rbp), %rdx
 1245 0cab 4801CA   		addq	%rcx, %rdx
 1246 0cae 488B0A   		movq	(%rdx), %rcx
 1247 0cb1 488B55F8 		movq	-8(%rbp), %rdx
 1248 0cb5 4889CE   		movq	%rcx, %rsi
 1249 0cb8 4889D7   		movq	%rdx, %rdi
 1250 0cbb FFD0     		call	*%rax
 1251              	.LVL2:
 1252 0cbd 8945E4   		movl	%eax, -28(%rbp)
 417:argtable2.c   ****         if (errorcode==0)
 1253              		.loc 1 417 0
 1254 0cc0 837DE400 		cmpl	$0, -28(%rbp)
 1255 0cc4 751E     		jne	.L77
 418:argtable2.c   ****             {
 419:argtable2.c   ****             /* success, move onto next argv[optind] but stay with same table[tabindex] */
 420:argtable2.c   ****             /*printf("arg_parse_untagged(): argtable[%d] successfully matched\n",tabindex);*/
 421:argtable2.c   ****             optind++;
 1256              		.loc 1 421 0
 1257 0cc6 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1257      000000
 1258 0ccd 8B00     		movl	(%rax), %eax
 1259 0ccf 8D5001   		leal	1(%rax), %edx
 1260 0cd2 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1260      000000
 1261 0cd9 8910     		movl	%edx, (%rax)
 422:argtable2.c   **** 
 423:argtable2.c   ****             /* clear the last tentative error */
 424:argtable2.c   ****             errorlast = 0;
 1262              		.loc 1 424 0
 1263 0cdb C745E000 		movl	$0, -32(%rbp)
 1263      000000
 1264 0ce2 EB33     		jmp	.L71
 1265              	.L77:
 425:argtable2.c   ****             }
 426:argtable2.c   ****         else
 427:argtable2.c   ****             {
 428:argtable2.c   ****             /* failure, try same argv[optind] with next table[tabindex] entry */
 429:argtable2.c   ****             /*printf("arg_parse_untagged(): argtable[%d] failed match\n",tabindex);*/
 430:argtable2.c   ****             tabindex++;
 1266              		.loc 1 430 0
 1267 0ce4 8345DC01 		addl	$1, -36(%rbp)
 431:argtable2.c   **** 
 432:argtable2.c   ****             /* remember this as a tentative error we may wish to reinstate later */
 433:argtable2.c   ****             errorlast = errorcode;
 1268              		.loc 1 433 0
 1269 0ce8 8B45E4   		movl	-28(%rbp), %eax
 1270 0ceb 8945E0   		movl	%eax, -32(%rbp)
 434:argtable2.c   ****             optarglast = argv[optind];
 1271              		.loc 1 434 0
 1272 0cee 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1272      000000
 1273 0cf5 8B00     		movl	(%rax), %eax
 1274 0cf7 4898     		cltq
 1275 0cf9 488D14C5 		leaq	0(,%rax,8), %rdx
 1275      00000000 
 1276 0d01 488B45C0 		movq	-64(%rbp), %rax
 1277 0d05 4801D0   		addq	%rdx, %rax
 1278 0d08 488B00   		movq	(%rax), %rax
 1279 0d0b 488945E8 		movq	%rax, -24(%rbp)
 435:argtable2.c   ****             parentlast = parent;
 1280              		.loc 1 435 0
 1281 0d0f 488B45F8 		movq	-8(%rbp), %rax
 1282 0d13 488945F0 		movq	%rax, -16(%rbp)
 1283              	.L71:
 1284              	.LBE13:
 384:argtable2.c   ****         {
 1285              		.loc 1 384 0
 1286 0d17 8B45DC   		movl	-36(%rbp), %eax
 1287 0d1a 4898     		cltq
 1288 0d1c 488D14C5 		leaq	0(,%rax,8), %rdx
 1288      00000000 
 1289 0d24 488B45B8 		movq	-72(%rbp), %rax
 1290 0d28 4801D0   		addq	%rdx, %rax
 1291 0d2b 488B00   		movq	(%rax), %rax
 1292 0d2e 0FB600   		movzbl	(%rax), %eax
 1293 0d31 0FBEC0   		movsbl	%al, %eax
 1294 0d34 83E001   		andl	$1, %eax
 1295 0d37 85C0     		testl	%eax, %eax
 1296 0d39 0F8496FE 		je	.L78
 1296      FFFF
 436:argtable2.c   ****             }
 437:argtable2.c   **** 
 438:argtable2.c   ****         }
 439:argtable2.c   **** 
 440:argtable2.c   ****     /* if a tenative error still remains at this point then register it as a proper error */
 441:argtable2.c   ****     if (errorlast)
 1297              		.loc 1 441 0
 1298 0d3f 837DE000 		cmpl	$0, -32(%rbp)
 1299 0d43 746F     		je	.L80
 442:argtable2.c   ****         {
 443:argtable2.c   ****         arg_register_error(endtable,parentlast,errorlast,optarglast);
 1300              		.loc 1 443 0
 1301 0d45 488B4DE8 		movq	-24(%rbp), %rcx
 1302 0d49 8B55E0   		movl	-32(%rbp), %edx
 1303 0d4c 488B75F0 		movq	-16(%rbp), %rsi
 1304 0d50 488B45B0 		movq	-80(%rbp), %rax
 1305 0d54 4889C7   		movq	%rax, %rdi
 1306 0d57 E8A4F2FF 		call	arg_register_error
 1306      FF
 444:argtable2.c   ****         optind++;
 1307              		.loc 1 444 0
 1308 0d5c 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1308      000000
 1309 0d63 8B00     		movl	(%rax), %eax
 1310 0d65 8D5001   		leal	1(%rax), %edx
 1311 0d68 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1311      000000
 1312 0d6f 8910     		movl	%edx, (%rax)
 445:argtable2.c   ****         }
 446:argtable2.c   **** 
 447:argtable2.c   ****     /* only get here when not all argv[] entries were consumed */
 448:argtable2.c   ****     /* register an error for each unused argv[] entry */
 449:argtable2.c   ****     while (optind<argc)
 1313              		.loc 1 449 0
 1314 0d71 EB41     		jmp	.L80
 1315              	.L81:
 450:argtable2.c   ****         {
 451:argtable2.c   ****         /*printf("arg_parse_untagged(): argv[%d]=\"%s\" not consumed\n",optind,argv[optind]);*/
 452:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_ENOMATCH,argv[optind++]);
 1316              		.loc 1 452 0
 1317 0d73 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1317      000000
 1318 0d7a 8B00     		movl	(%rax), %eax
 1319 0d7c 8D4801   		leal	1(%rax), %ecx
 1320 0d7f 488B1500 		movq	optind@GOTPCREL(%rip), %rdx
 1320      000000
 1321 0d86 890A     		movl	%ecx, (%rdx)
 1322 0d88 4898     		cltq
 1323 0d8a 488D14C5 		leaq	0(,%rax,8), %rdx
 1323      00000000 
 1324 0d92 488B45C0 		movq	-64(%rbp), %rax
 1325 0d96 4801D0   		addq	%rdx, %rax
 1326 0d99 488B10   		movq	(%rax), %rdx
 1327 0d9c 488B75B0 		movq	-80(%rbp), %rsi
 1328 0da0 488B45B0 		movq	-80(%rbp), %rax
 1329 0da4 4889D1   		movq	%rdx, %rcx
 1330 0da7 BA030000 		movl	$3, %edx
 1330      00
 1331 0dac 4889C7   		movq	%rax, %rdi
 1332 0daf E84CF2FF 		call	arg_register_error
 1332      FF
 1333              	.L80:
 449:argtable2.c   ****         {
 1334              		.loc 1 449 0
 1335 0db4 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1335      000000
 1336 0dbb 8B00     		movl	(%rax), %eax
 1337 0dbd 3945CC   		cmpl	%eax, -52(%rbp)
 1338 0dc0 7FB1     		jg	.L81
 453:argtable2.c   ****         }
 454:argtable2.c   **** 
 455:argtable2.c   ****     return;
 1339              		.loc 1 455 0 discriminator 2
 1340 0dc2 90       		nop
 1341 0dc3 EB01     		jmp	.L70
 1342              	.L82:
 1343              	.LBB14:
 393:argtable2.c   ****             }
 1344              		.loc 1 393 0
 1345 0dc5 90       		nop
 1346              	.L70:
 1347              	.LBE14:
 456:argtable2.c   ****     }
 1348              		.loc 1 456 0
 1349 0dc6 C9       		leave
 1350              		.cfi_def_cfa 7, 8
 1351 0dc7 C3       		ret
 1352              		.cfi_endproc
 1353              	.LFE7:
 1356              	arg_parse_check:
 1357              	.LFB8:
 457:argtable2.c   **** 
 458:argtable2.c   **** 
 459:argtable2.c   **** static
 460:argtable2.c   **** void arg_parse_check(struct arg_hdr **table, struct arg_end *endtable)
 461:argtable2.c   ****     {
 1358              		.loc 1 461 0
 1359              		.cfi_startproc
 1360 0dc8 55       		pushq	%rbp
 1361              		.cfi_def_cfa_offset 16
 1362              		.cfi_offset 6, -16
 1363 0dc9 4889E5   		movq	%rsp, %rbp
 1364              		.cfi_def_cfa_register 6
 1365 0dcc 4883EC20 		subq	$32, %rsp
 1366 0dd0 48897DE8 		movq	%rdi, -24(%rbp)
 1367 0dd4 488975E0 		movq	%rsi, -32(%rbp)
 462:argtable2.c   ****     int tabindex=0;
 1368              		.loc 1 462 0
 1369 0dd8 C745F000 		movl	$0, -16(%rbp)
 1369      000000
 1370              	.L85:
 463:argtable2.c   ****     /* printf("arg_parse_check()\n"); */
 464:argtable2.c   ****     do
 465:argtable2.c   ****         {
 466:argtable2.c   ****         if (table[tabindex]->checkfn)
 1371              		.loc 1 466 0
 1372 0ddf 8B45F0   		movl	-16(%rbp), %eax
 1373 0de2 4898     		cltq
 1374 0de4 488D14C5 		leaq	0(,%rax,8), %rdx
 1374      00000000 
 1375 0dec 488B45E8 		movq	-24(%rbp), %rax
 1376 0df0 4801D0   		addq	%rdx, %rax
 1377 0df3 488B00   		movq	(%rax), %rax
 1378 0df6 488B4048 		movq	72(%rax), %rax
 1379 0dfa 4885C0   		testq	%rax, %rax
 1380 0dfd 7464     		je	.L84
 1381              	.LBB15:
 467:argtable2.c   ****             {
 468:argtable2.c   ****             void *parent  = table[tabindex]->parent;
 1382              		.loc 1 468 0
 1383 0dff 8B45F0   		movl	-16(%rbp), %eax
 1384 0e02 4898     		cltq
 1385 0e04 488D14C5 		leaq	0(,%rax,8), %rdx
 1385      00000000 
 1386 0e0c 488B45E8 		movq	-24(%rbp), %rax
 1387 0e10 4801D0   		addq	%rdx, %rax
 1388 0e13 488B00   		movq	(%rax), %rax
 1389 0e16 488B4030 		movq	48(%rax), %rax
 1390 0e1a 488945F8 		movq	%rax, -8(%rbp)
 469:argtable2.c   ****             int errorcode = table[tabindex]->checkfn(parent);
 1391              		.loc 1 469 0
 1392 0e1e 8B45F0   		movl	-16(%rbp), %eax
 1393 0e21 4898     		cltq
 1394 0e23 488D14C5 		leaq	0(,%rax,8), %rdx
 1394      00000000 
 1395 0e2b 488B45E8 		movq	-24(%rbp), %rax
 1396 0e2f 4801D0   		addq	%rdx, %rax
 1397 0e32 488B00   		movq	(%rax), %rax
 1398 0e35 488B4048 		movq	72(%rax), %rax
 1399 0e39 488B55F8 		movq	-8(%rbp), %rdx
 1400 0e3d 4889D7   		movq	%rdx, %rdi
 1401 0e40 FFD0     		call	*%rax
 1402              	.LVL3:
 1403 0e42 8945F4   		movl	%eax, -12(%rbp)
 470:argtable2.c   ****             if (errorcode!=0)
 1404              		.loc 1 470 0
 1405 0e45 837DF400 		cmpl	$0, -12(%rbp)
 1406 0e49 7418     		je	.L84
 471:argtable2.c   ****                 arg_register_error(endtable,parent,errorcode,NULL);
 1407              		.loc 1 471 0
 1408 0e4b 8B55F4   		movl	-12(%rbp), %edx
 1409 0e4e 488B75F8 		movq	-8(%rbp), %rsi
 1410 0e52 488B45E0 		movq	-32(%rbp), %rax
 1411 0e56 B9000000 		movl	$0, %ecx
 1411      00
 1412 0e5b 4889C7   		movq	%rax, %rdi
 1413 0e5e E89DF1FF 		call	arg_register_error
 1413      FF
 1414              	.L84:
 1415              	.LBE15:
 472:argtable2.c   ****             }
 473:argtable2.c   ****         }while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 1416              		.loc 1 473 0
 1417 0e63 8B45F0   		movl	-16(%rbp), %eax
 1418 0e66 8D5001   		leal	1(%rax), %edx
 1419 0e69 8955F0   		movl	%edx, -16(%rbp)
 1420 0e6c 4898     		cltq
 1421 0e6e 488D14C5 		leaq	0(,%rax,8), %rdx
 1421      00000000 
 1422 0e76 488B45E8 		movq	-24(%rbp), %rax
 1423 0e7a 4801D0   		addq	%rdx, %rax
 1424 0e7d 488B00   		movq	(%rax), %rax
 1425 0e80 0FB600   		movzbl	(%rax), %eax
 1426 0e83 0FBEC0   		movsbl	%al, %eax
 1427 0e86 83E001   		andl	$1, %eax
 1428 0e89 85C0     		testl	%eax, %eax
 1429 0e8b 0F844EFF 		je	.L85
 1429      FFFF
 474:argtable2.c   ****     }
 1430              		.loc 1 474 0
 1431 0e91 90       		nop
 1432 0e92 C9       		leave
 1433              		.cfi_def_cfa 7, 8
 1434 0e93 C3       		ret
 1435              		.cfi_endproc
 1436              	.LFE8:
 1439              	arg_reset:
 1440              	.LFB9:
 475:argtable2.c   **** 
 476:argtable2.c   **** 
 477:argtable2.c   **** static
 478:argtable2.c   **** void arg_reset(void **argtable)
 479:argtable2.c   ****     {
 1441              		.loc 1 479 0
 1442              		.cfi_startproc
 1443 0e94 55       		pushq	%rbp
 1444              		.cfi_def_cfa_offset 16
 1445              		.cfi_offset 6, -16
 1446 0e95 4889E5   		movq	%rsp, %rbp
 1447              		.cfi_def_cfa_register 6
 1448 0e98 4883EC20 		subq	$32, %rsp
 1449 0e9c 48897DE8 		movq	%rdi, -24(%rbp)
 480:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 1450              		.loc 1 480 0
 1451 0ea0 488B45E8 		movq	-24(%rbp), %rax
 1452 0ea4 488945F8 		movq	%rax, -8(%rbp)
 481:argtable2.c   ****     int tabindex=0;
 1453              		.loc 1 481 0
 1454 0ea8 C745F400 		movl	$0, -12(%rbp)
 1454      000000
 1455              	.L88:
 482:argtable2.c   ****     /*printf("arg_reset(%p)\n",argtable);*/
 483:argtable2.c   ****     do
 484:argtable2.c   ****         {
 485:argtable2.c   ****         if (table[tabindex]->resetfn)
 1456              		.loc 1 485 0
 1457 0eaf 8B45F4   		movl	-12(%rbp), %eax
 1458 0eb2 4898     		cltq
 1459 0eb4 488D14C5 		leaq	0(,%rax,8), %rdx
 1459      00000000 
 1460 0ebc 488B45F8 		movq	-8(%rbp), %rax
 1461 0ec0 4801D0   		addq	%rdx, %rax
 1462 0ec3 488B00   		movq	(%rax), %rax
 1463 0ec6 488B4038 		movq	56(%rax), %rax
 1464 0eca 4885C0   		testq	%rax, %rax
 1465 0ecd 743C     		je	.L87
 486:argtable2.c   ****             table[tabindex]->resetfn(table[tabindex]->parent);
 1466              		.loc 1 486 0
 1467 0ecf 8B45F4   		movl	-12(%rbp), %eax
 1468 0ed2 4898     		cltq
 1469 0ed4 488D14C5 		leaq	0(,%rax,8), %rdx
 1469      00000000 
 1470 0edc 488B45F8 		movq	-8(%rbp), %rax
 1471 0ee0 4801D0   		addq	%rdx, %rax
 1472 0ee3 488B00   		movq	(%rax), %rax
 1473 0ee6 488B4038 		movq	56(%rax), %rax
 1474 0eea 8B55F4   		movl	-12(%rbp), %edx
 1475 0eed 4863D2   		movslq	%edx, %rdx
 1476 0ef0 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1476      00000000 
 1477 0ef8 488B55F8 		movq	-8(%rbp), %rdx
 1478 0efc 4801CA   		addq	%rcx, %rdx
 1479 0eff 488B12   		movq	(%rdx), %rdx
 1480 0f02 488B5230 		movq	48(%rdx), %rdx
 1481 0f06 4889D7   		movq	%rdx, %rdi
 1482 0f09 FFD0     		call	*%rax
 1483              	.LVL4:
 1484              	.L87:
 487:argtable2.c   ****         } while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 1485              		.loc 1 487 0
 1486 0f0b 8B45F4   		movl	-12(%rbp), %eax
 1487 0f0e 8D5001   		leal	1(%rax), %edx
 1488 0f11 8955F4   		movl	%edx, -12(%rbp)
 1489 0f14 4898     		cltq
 1490 0f16 488D14C5 		leaq	0(,%rax,8), %rdx
 1490      00000000 
 1491 0f1e 488B45F8 		movq	-8(%rbp), %rax
 1492 0f22 4801D0   		addq	%rdx, %rax
 1493 0f25 488B00   		movq	(%rax), %rax
 1494 0f28 0FB600   		movzbl	(%rax), %eax
 1495 0f2b 0FBEC0   		movsbl	%al, %eax
 1496 0f2e 83E001   		andl	$1, %eax
 1497 0f31 85C0     		testl	%eax, %eax
 1498 0f33 0F8476FF 		je	.L88
 1498      FFFF
 488:argtable2.c   ****     }
 1499              		.loc 1 488 0
 1500 0f39 90       		nop
 1501 0f3a C9       		leave
 1502              		.cfi_def_cfa 7, 8
 1503 0f3b C3       		ret
 1504              		.cfi_endproc
 1505              	.LFE9:
 1507              		.globl	arg_parse
 1509              	arg_parse:
 1510              	.LFB10:
 489:argtable2.c   **** 
 490:argtable2.c   ****     
 491:argtable2.c   **** int arg_parse(int argc, char **argv, void **argtable)
 492:argtable2.c   ****     {
 1511              		.loc 1 492 0
 1512              		.cfi_startproc
 1513 0f3c 55       		pushq	%rbp
 1514              		.cfi_def_cfa_offset 16
 1515              		.cfi_offset 6, -16
 1516 0f3d 4889E5   		movq	%rsp, %rbp
 1517              		.cfi_def_cfa_register 6
 1518 0f40 4883EC40 		subq	$64, %rsp
 1519 0f44 897DDC   		movl	%edi, -36(%rbp)
 1520 0f47 488975D0 		movq	%rsi, -48(%rbp)
 1521 0f4b 488955C8 		movq	%rdx, -56(%rbp)
 493:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr **)argtable;
 1522              		.loc 1 493 0
 1523 0f4f 488B45C8 		movq	-56(%rbp), %rax
 1524 0f53 488945E8 		movq	%rax, -24(%rbp)
 494:argtable2.c   ****     struct arg_end *endtable;
 495:argtable2.c   ****     int endindex;
 496:argtable2.c   ****     char **argvcopy = NULL;
 1525              		.loc 1 496 0
 1526 0f57 48C745F0 		movq	$0, -16(%rbp)
 1526      00000000 
 497:argtable2.c   **** 
 498:argtable2.c   ****     /*printf("arg_parse(%d,%p,%p)\n",argc,argv,argtable);*/
 499:argtable2.c   **** 
 500:argtable2.c   ****     /* reset any argtable data from previous invocations */
 501:argtable2.c   ****     arg_reset(argtable);
 1527              		.loc 1 501 0
 1528 0f5f 488B45C8 		movq	-56(%rbp), %rax
 1529 0f63 4889C7   		movq	%rax, %rdi
 1530 0f66 E829FFFF 		call	arg_reset
 1530      FF
 502:argtable2.c   **** 
 503:argtable2.c   ****     /* locate the first end-of-table marker within the array */
 504:argtable2.c   ****     endindex = arg_endindex(table);
 1531              		.loc 1 504 0
 1532 0f6b 488B45E8 		movq	-24(%rbp), %rax
 1533 0f6f 4889C7   		movq	%rax, %rdi
 1534 0f72 E84FF8FF 		call	arg_endindex
 1534      FF
 1535 0f77 8945E4   		movl	%eax, -28(%rbp)
 505:argtable2.c   ****     endtable = (struct arg_end*)table[endindex];
 1536              		.loc 1 505 0
 1537 0f7a 8B45E4   		movl	-28(%rbp), %eax
 1538 0f7d 4898     		cltq
 1539 0f7f 488D14C5 		leaq	0(,%rax,8), %rdx
 1539      00000000 
 1540 0f87 488B45E8 		movq	-24(%rbp), %rax
 1541 0f8b 4801D0   		addq	%rdx, %rax
 1542 0f8e 488B00   		movq	(%rax), %rax
 1543 0f91 488945F8 		movq	%rax, -8(%rbp)
 506:argtable2.c   **** 
 507:argtable2.c   ****     /* Special case of argc==0.  This can occur on Texas Instruments DSP. */
 508:argtable2.c   ****     /* Failure to trap this case results in an unwanted NULL result from  */
 509:argtable2.c   ****     /* the malloc for argvcopy (next code block).                         */
 510:argtable2.c   ****     if (argc==0)
 1544              		.loc 1 510 0
 1545 0f95 837DDC00 		cmpl	$0, -36(%rbp)
 1546 0f99 751F     		jne	.L90
 511:argtable2.c   ****         {
 512:argtable2.c   ****         /* We must still perform post-parse checks despite the absence of command line arguments */
 513:argtable2.c   ****         arg_parse_check(table,endtable);
 1547              		.loc 1 513 0
 1548 0f9b 488B55F8 		movq	-8(%rbp), %rdx
 1549 0f9f 488B45E8 		movq	-24(%rbp), %rax
 1550 0fa3 4889D6   		movq	%rdx, %rsi
 1551 0fa6 4889C7   		movq	%rax, %rdi
 1552 0fa9 E81AFEFF 		call	arg_parse_check
 1552      FF
 514:argtable2.c   **** 
 515:argtable2.c   ****         /* Now we are finished */
 516:argtable2.c   ****         return endtable->count;
 1553              		.loc 1 516 0
 1554 0fae 488B45F8 		movq	-8(%rbp), %rax
 1555 0fb2 8B4060   		movl	96(%rax), %eax
 1556 0fb5 E9DD0000 		jmp	.L91
 1556      00
 1557              	.L90:
 517:argtable2.c   ****         }
 518:argtable2.c   **** 
 519:argtable2.c   ****     argvcopy = malloc(sizeof(char *) * argc);
 1558              		.loc 1 519 0
 1559 0fba 8B45DC   		movl	-36(%rbp), %eax
 1560 0fbd 4898     		cltq
 1561 0fbf 48C1E003 		salq	$3, %rax
 1562 0fc3 4889C7   		movq	%rax, %rdi
 1563 0fc6 E8000000 		call	malloc@PLT
 1563      00
 1564 0fcb 488945F0 		movq	%rax, -16(%rbp)
 520:argtable2.c   ****     if (argvcopy)
 1565              		.loc 1 520 0
 1566 0fcf 48837DF0 		cmpq	$0, -16(%rbp)
 1566      00
 1567 0fd4 0F849C00 		je	.L92
 1567      0000
 1568              	.LBB16:
 521:argtable2.c   ****         {
 522:argtable2.c   ****         int i;
 523:argtable2.c   **** 
 524:argtable2.c   ****         /*
 525:argtable2.c   ****         Fill in the local copy of argv[]. We need a local copy
 526:argtable2.c   ****         because getopt rearranges argv[] which adversely affects
 527:argtable2.c   ****         susbsequent parsing attempts.
 528:argtable2.c   ****         */
 529:argtable2.c   ****         for (i=0; i<argc; i++)
 1569              		.loc 1 529 0
 1570 0fda C745E000 		movl	$0, -32(%rbp)
 1570      000000
 1571 0fe1 EB33     		jmp	.L93
 1572              	.L94:
 530:argtable2.c   ****             argvcopy[i] = argv[i];
 1573              		.loc 1 530 0 discriminator 3
 1574 0fe3 8B45E0   		movl	-32(%rbp), %eax
 1575 0fe6 4898     		cltq
 1576 0fe8 488D14C5 		leaq	0(,%rax,8), %rdx
 1576      00000000 
 1577 0ff0 488B45D0 		movq	-48(%rbp), %rax
 1578 0ff4 4801D0   		addq	%rdx, %rax
 1579 0ff7 8B55E0   		movl	-32(%rbp), %edx
 1580 0ffa 4863D2   		movslq	%edx, %rdx
 1581 0ffd 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1581      00000000 
 1582 1005 488B55F0 		movq	-16(%rbp), %rdx
 1583 1009 4801CA   		addq	%rcx, %rdx
 1584 100c 488B00   		movq	(%rax), %rax
 1585 100f 488902   		movq	%rax, (%rdx)
 529:argtable2.c   ****             argvcopy[i] = argv[i];
 1586              		.loc 1 529 0 discriminator 3
 1587 1012 8345E001 		addl	$1, -32(%rbp)
 1588              	.L93:
 529:argtable2.c   ****             argvcopy[i] = argv[i];
 1589              		.loc 1 529 0 is_stmt 0 discriminator 1
 1590 1016 8B45E0   		movl	-32(%rbp), %eax
 1591 1019 3B45DC   		cmpl	-36(%rbp), %eax
 1592 101c 7CC5     		jl	.L94
 531:argtable2.c   **** 
 532:argtable2.c   ****         /* parse the command line (local copy) for tagged options */
 533:argtable2.c   ****         arg_parse_tagged(argc,argvcopy,table,endtable);
 1593              		.loc 1 533 0 is_stmt 1
 1594 101e 488B4DF8 		movq	-8(%rbp), %rcx
 1595 1022 488B55E8 		movq	-24(%rbp), %rdx
 1596 1026 488B75F0 		movq	-16(%rbp), %rsi
 1597 102a 8B45DC   		movl	-36(%rbp), %eax
 1598 102d 89C7     		movl	%eax, %edi
 1599 102f E8D0F7FF 		call	arg_parse_tagged
 1599      FF
 534:argtable2.c   **** 
 535:argtable2.c   ****         /* parse the command line (local copy) for untagged options */
 536:argtable2.c   ****         arg_parse_untagged(argc,argvcopy,table,endtable);
 1600              		.loc 1 536 0
 1601 1034 488B4DF8 		movq	-8(%rbp), %rcx
 1602 1038 488B55E8 		movq	-24(%rbp), %rdx
 1603 103c 488B75F0 		movq	-16(%rbp), %rsi
 1604 1040 8B45DC   		movl	-36(%rbp), %eax
 1605 1043 89C7     		movl	%eax, %edi
 1606 1045 E851FBFF 		call	arg_parse_untagged
 1606      FF
 537:argtable2.c   **** 
 538:argtable2.c   ****         /* if no errors so far then perform post-parse checks otherwise dont bother */
 539:argtable2.c   ****         if (endtable->count==0)
 1607              		.loc 1 539 0
 1608 104a 488B45F8 		movq	-8(%rbp), %rax
 1609 104e 8B4060   		movl	96(%rax), %eax
 1610 1051 85C0     		testl	%eax, %eax
 1611 1053 7513     		jne	.L95
 540:argtable2.c   ****             arg_parse_check(table,endtable);
 1612              		.loc 1 540 0
 1613 1055 488B55F8 		movq	-8(%rbp), %rdx
 1614 1059 488B45E8 		movq	-24(%rbp), %rax
 1615 105d 4889D6   		movq	%rdx, %rsi
 1616 1060 4889C7   		movq	%rax, %rdi
 1617 1063 E860FDFF 		call	arg_parse_check
 1617      FF
 1618              	.L95:
 541:argtable2.c   **** 
 542:argtable2.c   ****         /* release the local copt of argv[] */
 543:argtable2.c   ****         free(argvcopy);
 1619              		.loc 1 543 0
 1620 1068 488B45F0 		movq	-16(%rbp), %rax
 1621 106c 4889C7   		movq	%rax, %rdi
 1622 106f E8000000 		call	free@PLT
 1622      00
 1623              	.LBE16:
 1624 1074 EB1A     		jmp	.L96
 1625              	.L92:
 544:argtable2.c   ****         }
 545:argtable2.c   ****     else
 546:argtable2.c   ****         {
 547:argtable2.c   ****         /* memory alloc failed */
 548:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_EMALLOC,NULL);
 1626              		.loc 1 548 0
 1627 1076 488B75F8 		movq	-8(%rbp), %rsi
 1628 107a 488B45F8 		movq	-8(%rbp), %rax
 1629 107e B9000000 		movl	$0, %ecx
 1629      00
 1630 1083 BA020000 		movl	$2, %edx
 1630      00
 1631 1088 4889C7   		movq	%rax, %rdi
 1632 108b E870EFFF 		call	arg_register_error
 1632      FF
 1633              	.L96:
 549:argtable2.c   ****         }        
 550:argtable2.c   **** 
 551:argtable2.c   ****     return endtable->count;
 1634              		.loc 1 551 0
 1635 1090 488B45F8 		movq	-8(%rbp), %rax
 1636 1094 8B4060   		movl	96(%rax), %eax
 1637              	.L91:
 552:argtable2.c   ****     }
 1638              		.loc 1 552 0
 1639 1097 C9       		leave
 1640              		.cfi_def_cfa 7, 8
 1641 1098 C3       		ret
 1642              		.cfi_endproc
 1643              	.LFE10:
 1646              	arg_cat:
 1647              	.LFB11:
 553:argtable2.c   **** 
 554:argtable2.c   **** 
 555:argtable2.c   **** /*
 556:argtable2.c   ****  * Concatenate contents of src[] string onto *pdest[] string.
 557:argtable2.c   ****  * The *pdest pointer is altered to point to the end of the
 558:argtable2.c   ****  * target string and *pndest is decremented by the same number
 559:argtable2.c   ****  * of chars.
 560:argtable2.c   ****  * Does not append more than *pndest chars into *pdest[]
 561:argtable2.c   ****  * so as to prevent buffer overruns.
 562:argtable2.c   ****  * Its something like strncat() but more efficient for repeated
 563:argtable2.c   ****  * calls on the same destination string.
 564:argtable2.c   ****  * Example of use:
 565:argtable2.c   ****  *   char dest[30] = "good"
 566:argtable2.c   ****  *   size_t ndest = sizeof(dest);
 567:argtable2.c   ****  *   char *pdest = dest;
 568:argtable2.c   ****  *   arg_char(&pdest,"bye ",&ndest);
 569:argtable2.c   ****  *   arg_char(&pdest,"cruel ",&ndest);
 570:argtable2.c   ****  *   arg_char(&pdest,"world!",&ndest);
 571:argtable2.c   ****  * Results in:
 572:argtable2.c   ****  *   dest[] == "goodbye cruel world!"
 573:argtable2.c   ****  *   ndest  == 10
 574:argtable2.c   ****  */
 575:argtable2.c   **** static
 576:argtable2.c   **** void arg_cat(char **pdest, const char *src, size_t *pndest)
 577:argtable2.c   ****     {
 1648              		.loc 1 577 0
 1649              		.cfi_startproc
 1650 1099 55       		pushq	%rbp
 1651              		.cfi_def_cfa_offset 16
 1652              		.cfi_offset 6, -16
 1653 109a 4889E5   		movq	%rsp, %rbp
 1654              		.cfi_def_cfa_register 6
 1655 109d 48897DE8 		movq	%rdi, -24(%rbp)
 1656 10a1 488975E0 		movq	%rsi, -32(%rbp)
 1657 10a5 488955D8 		movq	%rdx, -40(%rbp)
 578:argtable2.c   ****     char *dest = *pdest;
 1658              		.loc 1 578 0
 1659 10a9 488B45E8 		movq	-24(%rbp), %rax
 1660 10ad 488B00   		movq	(%rax), %rax
 1661 10b0 488945F0 		movq	%rax, -16(%rbp)
 579:argtable2.c   ****     char *end  = dest + *pndest;
 1662              		.loc 1 579 0
 1663 10b4 488B45D8 		movq	-40(%rbp), %rax
 1664 10b8 488B10   		movq	(%rax), %rdx
 1665 10bb 488B45F0 		movq	-16(%rbp), %rax
 1666 10bf 4801D0   		addq	%rdx, %rax
 1667 10c2 488945F8 		movq	%rax, -8(%rbp)
 580:argtable2.c   **** 
 581:argtable2.c   ****     /*locate null terminator of dest string */
 582:argtable2.c   ****     while(dest<end && *dest!=0)
 1668              		.loc 1 582 0
 1669 10c6 EB05     		jmp	.L98
 1670              	.L100:
 583:argtable2.c   ****         dest++;
 1671              		.loc 1 583 0
 1672 10c8 488345F0 		addq	$1, -16(%rbp)
 1672      01
 1673              	.L98:
 582:argtable2.c   ****         dest++;
 1674              		.loc 1 582 0
 1675 10cd 488B45F0 		movq	-16(%rbp), %rax
 1676 10d1 483B45F8 		cmpq	-8(%rbp), %rax
 1677 10d5 732A     		jnb	.L101
 582:argtable2.c   ****         dest++;
 1678              		.loc 1 582 0 is_stmt 0 discriminator 1
 1679 10d7 488B45F0 		movq	-16(%rbp), %rax
 1680 10db 0FB600   		movzbl	(%rax), %eax
 1681 10de 84C0     		testb	%al, %al
 1682 10e0 75E6     		jne	.L100
 584:argtable2.c   **** 
 585:argtable2.c   ****     /* concat src string to dest string */
 586:argtable2.c   ****     while(dest<end && *src!=0)
 1683              		.loc 1 586 0 is_stmt 1
 1684 10e2 EB1D     		jmp	.L101
 1685              	.L103:
 587:argtable2.c   ****         *dest++ = *src++;
 1686              		.loc 1 587 0
 1687 10e4 488B55E0 		movq	-32(%rbp), %rdx
 1688 10e8 488D4201 		leaq	1(%rdx), %rax
 1689 10ec 488945E0 		movq	%rax, -32(%rbp)
 1690 10f0 488B45F0 		movq	-16(%rbp), %rax
 1691 10f4 488D4801 		leaq	1(%rax), %rcx
 1692 10f8 48894DF0 		movq	%rcx, -16(%rbp)
 1693 10fc 0FB612   		movzbl	(%rdx), %edx
 1694 10ff 8810     		movb	%dl, (%rax)
 1695              	.L101:
 586:argtable2.c   ****         *dest++ = *src++;
 1696              		.loc 1 586 0
 1697 1101 488B45F0 		movq	-16(%rbp), %rax
 1698 1105 483B45F8 		cmpq	-8(%rbp), %rax
 1699 1109 730B     		jnb	.L102
 586:argtable2.c   ****         *dest++ = *src++;
 1700              		.loc 1 586 0 is_stmt 0 discriminator 1
 1701 110b 488B45E0 		movq	-32(%rbp), %rax
 1702 110f 0FB600   		movzbl	(%rax), %eax
 1703 1112 84C0     		testb	%al, %al
 1704 1114 75CE     		jne	.L103
 1705              	.L102:
 588:argtable2.c   **** 
 589:argtable2.c   ****     /* null terminate dest string */
 590:argtable2.c   ****     *dest=0;
 1706              		.loc 1 590 0 is_stmt 1
 1707 1116 488B45F0 		movq	-16(%rbp), %rax
 1708 111a C60000   		movb	$0, (%rax)
 591:argtable2.c   **** 
 592:argtable2.c   ****     /* update *pdest and *pndest */
 593:argtable2.c   ****     *pndest = end - dest;
 1709              		.loc 1 593 0
 1710 111d 488B55F8 		movq	-8(%rbp), %rdx
 1711 1121 488B45F0 		movq	-16(%rbp), %rax
 1712 1125 4829C2   		subq	%rax, %rdx
 1713 1128 4889D0   		movq	%rdx, %rax
 1714 112b 4889C2   		movq	%rax, %rdx
 1715 112e 488B45D8 		movq	-40(%rbp), %rax
 1716 1132 488910   		movq	%rdx, (%rax)
 594:argtable2.c   ****     *pdest  = dest;
 1717              		.loc 1 594 0
 1718 1135 488B45E8 		movq	-24(%rbp), %rax
 1719 1139 488B55F0 		movq	-16(%rbp), %rdx
 1720 113d 488910   		movq	%rdx, (%rax)
 595:argtable2.c   ****     }
 1721              		.loc 1 595 0
 1722 1140 90       		nop
 1723 1141 5D       		popq	%rbp
 1724              		.cfi_def_cfa 7, 8
 1725 1142 C3       		ret
 1726              		.cfi_endproc
 1727              	.LFE11:
 1729              		.section	.rodata
 1730              	.LC6:
 1731 008a 2000     		.string	" "
 1732              	.LC7:
 1733 008c 5B00     		.string	"["
 1734              	.LC8:
 1735 008e 5D00     		.string	"]"
 1736              	.LC9:
 1737 0090 2D2D00   		.string	"--"
 1738              	.LC10:
 1739 0093 2C00     		.string	","
 1740              	.LC11:
 1741 0095 3D00     		.string	"="
 1742              		.text
 1744              	arg_cat_option:
 1745              	.LFB12:
 596:argtable2.c   **** 
 597:argtable2.c   **** 
 598:argtable2.c   **** static
 599:argtable2.c   **** void arg_cat_option(char *dest, size_t ndest, const char *shortopts, const char *longopts, const ch
 600:argtable2.c   ****     {
 1746              		.loc 1 600 0
 1747              		.cfi_startproc
 1748 1143 55       		pushq	%rbp
 1749              		.cfi_def_cfa_offset 16
 1750              		.cfi_offset 6, -16
 1751 1144 4889E5   		movq	%rsp, %rbp
 1752              		.cfi_def_cfa_register 6
 1753 1147 4883EC50 		subq	$80, %rsp
 1754 114b 48897DD8 		movq	%rdi, -40(%rbp)
 1755 114f 488975D0 		movq	%rsi, -48(%rbp)
 1756 1153 488955C8 		movq	%rdx, -56(%rbp)
 1757 1157 48894DC0 		movq	%rcx, -64(%rbp)
 1758 115b 4C8945B8 		movq	%r8, -72(%rbp)
 1759 115f 44894DB4 		movl	%r9d, -76(%rbp)
 1760              		.loc 1 600 0
 1761 1163 64488B04 		movq	%fs:40, %rax
 1761      25280000 
 1761      00
 1762 116c 488945F8 		movq	%rax, -8(%rbp)
 1763 1170 31C0     		xorl	%eax, %eax
 601:argtable2.c   ****     if (shortopts)
 1764              		.loc 1 601 0
 1765 1172 48837DC8 		cmpq	$0, -56(%rbp)
 1765      00
 1766 1177 0F84B700 		je	.L105
 1766      0000
 1767              	.LBB17:
 602:argtable2.c   ****         {
 603:argtable2.c   ****         char option[3];
 604:argtable2.c   ****         
 605:argtable2.c   ****         /* note: option array[] is initialiazed dynamically here to satisfy   */
 606:argtable2.c   ****         /* a deficiency in the watcom compiler wrt static array initializers. */
 607:argtable2.c   ****         option[0] = '-';
 1768              		.loc 1 607 0
 1769 117d C645F52D 		movb	$45, -11(%rbp)
 608:argtable2.c   ****         option[1] = shortopts[0];
 1770              		.loc 1 608 0
 1771 1181 488B45C8 		movq	-56(%rbp), %rax
 1772 1185 0FB600   		movzbl	(%rax), %eax
 1773 1188 8845F6   		movb	%al, -10(%rbp)
 609:argtable2.c   ****         option[2] = 0;
 1774              		.loc 1 609 0
 1775 118b C645F700 		movb	$0, -9(%rbp)
 610:argtable2.c   ****         
 611:argtable2.c   ****         arg_cat(&dest,option,&ndest);
 1776              		.loc 1 611 0
 1777 118f 488D55D0 		leaq	-48(%rbp), %rdx
 1778 1193 488D4DF5 		leaq	-11(%rbp), %rcx
 1779 1197 488D45D8 		leaq	-40(%rbp), %rax
 1780 119b 4889CE   		movq	%rcx, %rsi
 1781 119e 4889C7   		movq	%rax, %rdi
 1782 11a1 E8F3FEFF 		call	arg_cat
 1782      FF
 612:argtable2.c   ****         if (datatype)
 1783              		.loc 1 612 0
 1784 11a6 48837DB8 		cmpq	$0, -72(%rbp)
 1784      00
 1785 11ab 0F84D501 		je	.L114
 1785      0000
 613:argtable2.c   ****             {
 614:argtable2.c   ****             arg_cat(&dest," ",&ndest);
 1786              		.loc 1 614 0
 1787 11b1 488D55D0 		leaq	-48(%rbp), %rdx
 1788 11b5 488D45D8 		leaq	-40(%rbp), %rax
 1789 11b9 488D3500 		leaq	.LC6(%rip), %rsi
 1789      000000
 1790 11c0 4889C7   		movq	%rax, %rdi
 1791 11c3 E8D1FEFF 		call	arg_cat
 1791      FF
 615:argtable2.c   ****             if (optvalue)
 1792              		.loc 1 615 0
 1793 11c8 837DB400 		cmpl	$0, -76(%rbp)
 1794 11cc 744A     		je	.L107
 616:argtable2.c   ****                 {
 617:argtable2.c   ****                 arg_cat(&dest,"[",&ndest);
 1795              		.loc 1 617 0
 1796 11ce 488D55D0 		leaq	-48(%rbp), %rdx
 1797 11d2 488D45D8 		leaq	-40(%rbp), %rax
 1798 11d6 488D3500 		leaq	.LC7(%rip), %rsi
 1798      000000
 1799 11dd 4889C7   		movq	%rax, %rdi
 1800 11e0 E8B4FEFF 		call	arg_cat
 1800      FF
 618:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 1801              		.loc 1 618 0
 1802 11e5 488D55D0 		leaq	-48(%rbp), %rdx
 1803 11e9 488B4DB8 		movq	-72(%rbp), %rcx
 1804 11ed 488D45D8 		leaq	-40(%rbp), %rax
 1805 11f1 4889CE   		movq	%rcx, %rsi
 1806 11f4 4889C7   		movq	%rax, %rdi
 1807 11f7 E89DFEFF 		call	arg_cat
 1807      FF
 619:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 1808              		.loc 1 619 0
 1809 11fc 488D55D0 		leaq	-48(%rbp), %rdx
 1810 1200 488D45D8 		leaq	-40(%rbp), %rax
 1811 1204 488D3500 		leaq	.LC8(%rip), %rsi
 1811      000000
 1812 120b 4889C7   		movq	%rax, %rdi
 1813 120e E886FEFF 		call	arg_cat
 1813      FF
 1814              	.LBE17:
 620:argtable2.c   ****                 }
 621:argtable2.c   ****             else
 622:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 623:argtable2.c   ****             }
 624:argtable2.c   ****         }
 625:argtable2.c   ****     else if (longopts)
 626:argtable2.c   ****         {
 627:argtable2.c   ****         size_t ncspn;
 628:argtable2.c   **** 
 629:argtable2.c   ****         /* add "--" tag prefix */
 630:argtable2.c   ****         arg_cat(&dest,"--",&ndest);
 631:argtable2.c   **** 
 632:argtable2.c   ****         /* add comma separated option tag */
 633:argtable2.c   ****         ncspn = strcspn(longopts,",");
 634:argtable2.c   ****         strncat(dest,longopts,(ncspn<ndest)?ncspn:ndest);
 635:argtable2.c   **** 
 636:argtable2.c   ****         if (datatype)
 637:argtable2.c   ****             {
 638:argtable2.c   ****             arg_cat(&dest,"=",&ndest);
 639:argtable2.c   ****             if (optvalue)
 640:argtable2.c   ****                 {
 641:argtable2.c   ****                 arg_cat(&dest,"[",&ndest);
 642:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 643:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 644:argtable2.c   ****                 }
 645:argtable2.c   ****             else
 646:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 647:argtable2.c   ****             }
 648:argtable2.c   ****         }
 649:argtable2.c   ****     else if (datatype)
 650:argtable2.c   ****         {
 651:argtable2.c   ****         if (optvalue)
 652:argtable2.c   ****             {
 653:argtable2.c   ****             arg_cat(&dest,"[",&ndest);
 654:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 655:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 656:argtable2.c   ****             }
 657:argtable2.c   ****         else
 658:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 659:argtable2.c   ****         }
 660:argtable2.c   ****     }
 1815              		.loc 1 660 0
 1816 1213 E96E0100 		jmp	.L114
 1816      00
 1817              	.L107:
 1818              	.LBB18:
 622:argtable2.c   ****             }
 1819              		.loc 1 622 0
 1820 1218 488D55D0 		leaq	-48(%rbp), %rdx
 1821 121c 488B4DB8 		movq	-72(%rbp), %rcx
 1822 1220 488D45D8 		leaq	-40(%rbp), %rax
 1823 1224 4889CE   		movq	%rcx, %rsi
 1824 1227 4889C7   		movq	%rax, %rdi
 1825 122a E86AFEFF 		call	arg_cat
 1825      FF
 1826              	.LBE18:
 1827              		.loc 1 660 0
 1828 122f E9520100 		jmp	.L114
 1828      00
 1829              	.L105:
 625:argtable2.c   ****         {
 1830              		.loc 1 625 0
 1831 1234 48837DC0 		cmpq	$0, -64(%rbp)
 1831      00
 1832 1239 0F84DC00 		je	.L109
 1832      0000
 1833              	.LBB19:
 630:argtable2.c   **** 
 1834              		.loc 1 630 0
 1835 123f 488D55D0 		leaq	-48(%rbp), %rdx
 1836 1243 488D45D8 		leaq	-40(%rbp), %rax
 1837 1247 488D3500 		leaq	.LC9(%rip), %rsi
 1837      000000
 1838 124e 4889C7   		movq	%rax, %rdi
 1839 1251 E843FEFF 		call	arg_cat
 1839      FF
 633:argtable2.c   ****         strncat(dest,longopts,(ncspn<ndest)?ncspn:ndest);
 1840              		.loc 1 633 0
 1841 1256 488B45C0 		movq	-64(%rbp), %rax
 1842 125a 488D3500 		leaq	.LC10(%rip), %rsi
 1842      000000
 1843 1261 4889C7   		movq	%rax, %rdi
 1844 1264 E8000000 		call	strcspn@PLT
 1844      00
 1845 1269 488945E8 		movq	%rax, -24(%rbp)
 634:argtable2.c   **** 
 1846              		.loc 1 634 0
 1847 126d 488B45D0 		movq	-48(%rbp), %rax
 1848 1271 483945E8 		cmpq	%rax, -24(%rbp)
 1849 1275 480F4645 		cmovbe	-24(%rbp), %rax
 1849      E8
 1850 127a 4889C2   		movq	%rax, %rdx
 1851 127d 488B45D8 		movq	-40(%rbp), %rax
 1852 1281 488B4DC0 		movq	-64(%rbp), %rcx
 1853 1285 4889CE   		movq	%rcx, %rsi
 1854 1288 4889C7   		movq	%rax, %rdi
 1855 128b E8000000 		call	strncat@PLT
 1855      00
 636:argtable2.c   ****             {
 1856              		.loc 1 636 0
 1857 1290 48837DB8 		cmpq	$0, -72(%rbp)
 1857      00
 1858 1295 0F84EB00 		je	.L114
 1858      0000
 638:argtable2.c   ****             if (optvalue)
 1859              		.loc 1 638 0
 1860 129b 488D55D0 		leaq	-48(%rbp), %rdx
 1861 129f 488D45D8 		leaq	-40(%rbp), %rax
 1862 12a3 488D3500 		leaq	.LC11(%rip), %rsi
 1862      000000
 1863 12aa 4889C7   		movq	%rax, %rdi
 1864 12ad E8E7FDFF 		call	arg_cat
 1864      FF
 639:argtable2.c   ****                 {
 1865              		.loc 1 639 0
 1866 12b2 837DB400 		cmpl	$0, -76(%rbp)
 1867 12b6 744A     		je	.L111
 641:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 1868              		.loc 1 641 0
 1869 12b8 488D55D0 		leaq	-48(%rbp), %rdx
 1870 12bc 488D45D8 		leaq	-40(%rbp), %rax
 1871 12c0 488D3500 		leaq	.LC7(%rip), %rsi
 1871      000000
 1872 12c7 4889C7   		movq	%rax, %rdi
 1873 12ca E8CAFDFF 		call	arg_cat
 1873      FF
 642:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 1874              		.loc 1 642 0
 1875 12cf 488D55D0 		leaq	-48(%rbp), %rdx
 1876 12d3 488B4DB8 		movq	-72(%rbp), %rcx
 1877 12d7 488D45D8 		leaq	-40(%rbp), %rax
 1878 12db 4889CE   		movq	%rcx, %rsi
 1879 12de 4889C7   		movq	%rax, %rdi
 1880 12e1 E8B3FDFF 		call	arg_cat
 1880      FF
 643:argtable2.c   ****                 }
 1881              		.loc 1 643 0
 1882 12e6 488D55D0 		leaq	-48(%rbp), %rdx
 1883 12ea 488D45D8 		leaq	-40(%rbp), %rax
 1884 12ee 488D3500 		leaq	.LC8(%rip), %rsi
 1884      000000
 1885 12f5 4889C7   		movq	%rax, %rdi
 1886 12f8 E89CFDFF 		call	arg_cat
 1886      FF
 1887              	.LBE19:
 1888              		.loc 1 660 0
 1889 12fd E9840000 		jmp	.L114
 1889      00
 1890              	.L111:
 1891              	.LBB20:
 646:argtable2.c   ****             }
 1892              		.loc 1 646 0
 1893 1302 488D55D0 		leaq	-48(%rbp), %rdx
 1894 1306 488B4DB8 		movq	-72(%rbp), %rcx
 1895 130a 488D45D8 		leaq	-40(%rbp), %rax
 1896 130e 4889CE   		movq	%rcx, %rsi
 1897 1311 4889C7   		movq	%rax, %rdi
 1898 1314 E880FDFF 		call	arg_cat
 1898      FF
 1899              	.LBE20:
 1900              		.loc 1 660 0
 1901 1319 EB6B     		jmp	.L114
 1902              	.L109:
 649:argtable2.c   ****         {
 1903              		.loc 1 649 0
 1904 131b 48837DB8 		cmpq	$0, -72(%rbp)
 1904      00
 1905 1320 7464     		je	.L114
 651:argtable2.c   ****             {
 1906              		.loc 1 651 0
 1907 1322 837DB400 		cmpl	$0, -76(%rbp)
 1908 1326 7447     		je	.L112
 653:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 1909              		.loc 1 653 0
 1910 1328 488D55D0 		leaq	-48(%rbp), %rdx
 1911 132c 488D45D8 		leaq	-40(%rbp), %rax
 1912 1330 488D3500 		leaq	.LC7(%rip), %rsi
 1912      000000
 1913 1337 4889C7   		movq	%rax, %rdi
 1914 133a E85AFDFF 		call	arg_cat
 1914      FF
 654:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 1915              		.loc 1 654 0
 1916 133f 488D55D0 		leaq	-48(%rbp), %rdx
 1917 1343 488B4DB8 		movq	-72(%rbp), %rcx
 1918 1347 488D45D8 		leaq	-40(%rbp), %rax
 1919 134b 4889CE   		movq	%rcx, %rsi
 1920 134e 4889C7   		movq	%rax, %rdi
 1921 1351 E843FDFF 		call	arg_cat
 1921      FF
 655:argtable2.c   ****             }
 1922              		.loc 1 655 0
 1923 1356 488D55D0 		leaq	-48(%rbp), %rdx
 1924 135a 488D45D8 		leaq	-40(%rbp), %rax
 1925 135e 488D3500 		leaq	.LC8(%rip), %rsi
 1925      000000
 1926 1365 4889C7   		movq	%rax, %rdi
 1927 1368 E82CFDFF 		call	arg_cat
 1927      FF
 1928              		.loc 1 660 0
 1929 136d EB17     		jmp	.L114
 1930              	.L112:
 658:argtable2.c   ****         }
 1931              		.loc 1 658 0
 1932 136f 488D55D0 		leaq	-48(%rbp), %rdx
 1933 1373 488B4DB8 		movq	-72(%rbp), %rcx
 1934 1377 488D45D8 		leaq	-40(%rbp), %rax
 1935 137b 4889CE   		movq	%rcx, %rsi
 1936 137e 4889C7   		movq	%rax, %rdi
 1937 1381 E813FDFF 		call	arg_cat
 1937      FF
 1938              	.L114:
 1939              		.loc 1 660 0
 1940 1386 90       		nop
 1941 1387 488B45F8 		movq	-8(%rbp), %rax
 1942 138b 64483304 		xorq	%fs:40, %rax
 1942      25280000 
 1942      00
 1943 1394 7405     		je	.L113
 1944 1396 E8000000 		call	__stack_chk_fail@PLT
 1944      00
 1945              	.L113:
 1946 139b C9       		leave
 1947              		.cfi_def_cfa 7, 8
 1948 139c C3       		ret
 1949              		.cfi_endproc
 1950              	.LFE12:
 1952              		.section	.rodata
 1953              	.LC12:
 1954 0097 00       		.string	""
 1955              		.text
 1957              	arg_cat_optionv:
 1958              	.LFB13:
 661:argtable2.c   **** 
 662:argtable2.c   **** static
 663:argtable2.c   **** void arg_cat_optionv(char *dest, size_t ndest, const char *shortopts, const char *longopts, const c
 664:argtable2.c   ****     {
 1959              		.loc 1 664 0
 1960              		.cfi_startproc
 1961 139d 55       		pushq	%rbp
 1962              		.cfi_def_cfa_offset 16
 1963              		.cfi_offset 6, -16
 1964 139e 4889E5   		movq	%rsp, %rbp
 1965              		.cfi_def_cfa_register 6
 1966 13a1 4883EC70 		subq	$112, %rsp
 1967 13a5 48897DC8 		movq	%rdi, -56(%rbp)
 1968 13a9 488975C0 		movq	%rsi, -64(%rbp)
 1969 13ad 488955B8 		movq	%rdx, -72(%rbp)
 1970 13b1 48894DB0 		movq	%rcx, -80(%rbp)
 1971 13b5 4C8945A8 		movq	%r8, -88(%rbp)
 1972 13b9 44894DA4 		movl	%r9d, -92(%rbp)
 1973 13bd 488B4510 		movq	16(%rbp), %rax
 1974 13c1 48894598 		movq	%rax, -104(%rbp)
 1975              		.loc 1 664 0
 1976 13c5 64488B04 		movq	%fs:40, %rax
 1976      25280000 
 1976      00
 1977 13ce 488945F8 		movq	%rax, -8(%rbp)
 1978 13d2 31C0     		xorl	%eax, %eax
 665:argtable2.c   ****     separator = separator ? separator : "";
 1979              		.loc 1 665 0
 1980 13d4 48837D98 		cmpq	$0, -104(%rbp)
 1980      00
 1981 13d9 7406     		je	.L116
 1982              		.loc 1 665 0 is_stmt 0 discriminator 1
 1983 13db 488B4598 		movq	-104(%rbp), %rax
 1984 13df EB07     		jmp	.L117
 1985              	.L116:
 1986              		.loc 1 665 0 discriminator 2
 1987 13e1 488D0500 		leaq	.LC12(%rip), %rax
 1987      000000
 1988              	.L117:
 1989              		.loc 1 665 0 discriminator 4
 1990 13e8 48894598 		movq	%rax, -104(%rbp)
 666:argtable2.c   **** 
 667:argtable2.c   ****     if (shortopts)
 1991              		.loc 1 667 0 is_stmt 1 discriminator 4
 1992 13ec 48837DB8 		cmpq	$0, -72(%rbp)
 1992      00
 1993 13f1 7465     		je	.L118
 1994              	.LBB21:
 668:argtable2.c   ****         {
 669:argtable2.c   ****         const char *c = shortopts;
 1995              		.loc 1 669 0
 1996 13f3 488B45B8 		movq	-72(%rbp), %rax
 1997 13f7 488945D8 		movq	%rax, -40(%rbp)
 670:argtable2.c   ****         while(*c)
 1998              		.loc 1 670 0
 1999 13fb EB50     		jmp	.L119
 2000              	.L121:
 2001              	.LBB22:
 671:argtable2.c   ****             {
 672:argtable2.c   ****             /* "-a|-b|-c" */
 673:argtable2.c   ****             char shortopt[3];
 674:argtable2.c   ****         
 675:argtable2.c   ****             /* note: shortopt array[] is initialiazed dynamically here to satisfy */
 676:argtable2.c   ****             /* a deficiency in the watcom compiler wrt static array initializers. */
 677:argtable2.c   ****             shortopt[0]='-';
 2002              		.loc 1 677 0
 2003 13fd C645F52D 		movb	$45, -11(%rbp)
 678:argtable2.c   ****             shortopt[1]=*c;
 2004              		.loc 1 678 0
 2005 1401 488B45D8 		movq	-40(%rbp), %rax
 2006 1405 0FB600   		movzbl	(%rax), %eax
 2007 1408 8845F6   		movb	%al, -10(%rbp)
 679:argtable2.c   ****             shortopt[2]=0;
 2008              		.loc 1 679 0
 2009 140b C645F700 		movb	$0, -9(%rbp)
 680:argtable2.c   ****             
 681:argtable2.c   ****             arg_cat(&dest,shortopt,&ndest);
 2010              		.loc 1 681 0
 2011 140f 488D55C0 		leaq	-64(%rbp), %rdx
 2012 1413 488D4DF5 		leaq	-11(%rbp), %rcx
 2013 1417 488D45C8 		leaq	-56(%rbp), %rax
 2014 141b 4889CE   		movq	%rcx, %rsi
 2015 141e 4889C7   		movq	%rax, %rdi
 2016 1421 E873FCFF 		call	arg_cat
 2016      FF
 682:argtable2.c   ****             if (*++c)
 2017              		.loc 1 682 0
 2018 1426 488345D8 		addq	$1, -40(%rbp)
 2018      01
 2019 142b 488B45D8 		movq	-40(%rbp), %rax
 2020 142f 0FB600   		movzbl	(%rax), %eax
 2021 1432 84C0     		testb	%al, %al
 2022 1434 7417     		je	.L119
 683:argtable2.c   ****                 arg_cat(&dest,separator,&ndest);
 2023              		.loc 1 683 0
 2024 1436 488D55C0 		leaq	-64(%rbp), %rdx
 2025 143a 488B4D98 		movq	-104(%rbp), %rcx
 2026 143e 488D45C8 		leaq	-56(%rbp), %rax
 2027 1442 4889CE   		movq	%rcx, %rsi
 2028 1445 4889C7   		movq	%rax, %rdi
 2029 1448 E84CFCFF 		call	arg_cat
 2029      FF
 2030              	.L119:
 2031              	.LBE22:
 670:argtable2.c   ****             {
 2032              		.loc 1 670 0
 2033 144d 488B45D8 		movq	-40(%rbp), %rax
 2034 1451 0FB600   		movzbl	(%rax), %eax
 2035 1454 84C0     		testb	%al, %al
 2036 1456 75A5     		jne	.L121
 2037              	.L118:
 2038              	.LBE21:
 684:argtable2.c   ****             }
 685:argtable2.c   ****         }
 686:argtable2.c   **** 
 687:argtable2.c   ****     /* put separator between long opts and short opts */
 688:argtable2.c   ****     if (shortopts && longopts)
 2039              		.loc 1 688 0
 2040 1458 48837DB8 		cmpq	$0, -72(%rbp)
 2040      00
 2041 145d 741E     		je	.L122
 2042              		.loc 1 688 0 is_stmt 0 discriminator 1
 2043 145f 48837DB0 		cmpq	$0, -80(%rbp)
 2043      00
 2044 1464 7417     		je	.L122
 689:argtable2.c   ****         arg_cat(&dest,separator,&ndest);
 2045              		.loc 1 689 0 is_stmt 1
 2046 1466 488D55C0 		leaq	-64(%rbp), %rdx
 2047 146a 488B4D98 		movq	-104(%rbp), %rcx
 2048 146e 488D45C8 		leaq	-56(%rbp), %rax
 2049 1472 4889CE   		movq	%rcx, %rsi
 2050 1475 4889C7   		movq	%rax, %rdi
 2051 1478 E81CFCFF 		call	arg_cat
 2051      FF
 2052              	.L122:
 690:argtable2.c   **** 
 691:argtable2.c   ****     if (longopts)
 2053              		.loc 1 691 0
 2054 147d 48837DB0 		cmpq	$0, -80(%rbp)
 2054      00
 2055 1482 0F849C00 		je	.L123
 2055      0000
 2056              	.LBB23:
 692:argtable2.c   ****         {
 693:argtable2.c   ****         const char *c = longopts;
 2057              		.loc 1 693 0
 2058 1488 488B45B0 		movq	-80(%rbp), %rax
 2059 148c 488945E0 		movq	%rax, -32(%rbp)
 694:argtable2.c   ****         while(*c)
 2060              		.loc 1 694 0
 2061 1490 E9800000 		jmp	.L124
 2061      00
 2062              	.L125:
 2063              	.LBB24:
 695:argtable2.c   ****             {
 696:argtable2.c   ****             size_t ncspn;
 697:argtable2.c   **** 
 698:argtable2.c   ****             /* add "--" tag prefix */
 699:argtable2.c   ****             arg_cat(&dest,"--",&ndest);
 2064              		.loc 1 699 0
 2065 1495 488D55C0 		leaq	-64(%rbp), %rdx
 2066 1499 488D45C8 		leaq	-56(%rbp), %rax
 2067 149d 488D3500 		leaq	.LC9(%rip), %rsi
 2067      000000
 2068 14a4 4889C7   		movq	%rax, %rdi
 2069 14a7 E8EDFBFF 		call	arg_cat
 2069      FF
 700:argtable2.c   **** 
 701:argtable2.c   ****             /* add comma separated option tag */
 702:argtable2.c   ****             ncspn = strcspn(c,",");
 2070              		.loc 1 702 0
 2071 14ac 488B45E0 		movq	-32(%rbp), %rax
 2072 14b0 488D3500 		leaq	.LC10(%rip), %rsi
 2072      000000
 2073 14b7 4889C7   		movq	%rax, %rdi
 2074 14ba E8000000 		call	strcspn@PLT
 2074      00
 2075 14bf 488945E8 		movq	%rax, -24(%rbp)
 703:argtable2.c   ****             strncat(dest,c,(ncspn<ndest)?ncspn:ndest);
 2076              		.loc 1 703 0
 2077 14c3 488B45C0 		movq	-64(%rbp), %rax
 2078 14c7 483945E8 		cmpq	%rax, -24(%rbp)
 2079 14cb 480F4645 		cmovbe	-24(%rbp), %rax
 2079      E8
 2080 14d0 4889C2   		movq	%rax, %rdx
 2081 14d3 488B45C8 		movq	-56(%rbp), %rax
 2082 14d7 488B4DE0 		movq	-32(%rbp), %rcx
 2083 14db 4889CE   		movq	%rcx, %rsi
 2084 14de 4889C7   		movq	%rax, %rdi
 2085 14e1 E8000000 		call	strncat@PLT
 2085      00
 704:argtable2.c   ****             c+=ncspn;
 2086              		.loc 1 704 0
 2087 14e6 488B45E8 		movq	-24(%rbp), %rax
 2088 14ea 480145E0 		addq	%rax, -32(%rbp)
 705:argtable2.c   **** 
 706:argtable2.c   ****             /* add given separator in place of comma */
 707:argtable2.c   ****             if (*c==',')
 2089              		.loc 1 707 0
 2090 14ee 488B45E0 		movq	-32(%rbp), %rax
 2091 14f2 0FB600   		movzbl	(%rax), %eax
 2092 14f5 3C2C     		cmpb	$44, %al
 2093 14f7 751C     		jne	.L124
 708:argtable2.c   ****                  {
 709:argtable2.c   ****                  arg_cat(&dest,separator,&ndest);
 2094              		.loc 1 709 0
 2095 14f9 488D55C0 		leaq	-64(%rbp), %rdx
 2096 14fd 488B4D98 		movq	-104(%rbp), %rcx
 2097 1501 488D45C8 		leaq	-56(%rbp), %rax
 2098 1505 4889CE   		movq	%rcx, %rsi
 2099 1508 4889C7   		movq	%rax, %rdi
 2100 150b E889FBFF 		call	arg_cat
 2100      FF
 710:argtable2.c   ****                  c++;
 2101              		.loc 1 710 0
 2102 1510 488345E0 		addq	$1, -32(%rbp)
 2102      01
 2103              	.L124:
 2104              	.LBE24:
 694:argtable2.c   ****             {
 2105              		.loc 1 694 0
 2106 1515 488B45E0 		movq	-32(%rbp), %rax
 2107 1519 0FB600   		movzbl	(%rax), %eax
 2108 151c 84C0     		testb	%al, %al
 2109 151e 0F8571FF 		jne	.L125
 2109      FFFF
 2110              	.L123:
 2111              	.LBE23:
 711:argtable2.c   ****                  }
 712:argtable2.c   ****             }
 713:argtable2.c   ****         }
 714:argtable2.c   **** 
 715:argtable2.c   ****     if (datatype)
 2112              		.loc 1 715 0
 2113 1524 48837DA8 		cmpq	$0, -88(%rbp)
 2113      00
 2114 1529 0F84A200 		je	.L131
 2114      0000
 716:argtable2.c   ****         {
 717:argtable2.c   ****         if (longopts)
 2115              		.loc 1 717 0
 2116 152f 48837DB0 		cmpq	$0, -80(%rbp)
 2116      00
 2117 1534 7419     		je	.L127
 718:argtable2.c   ****             arg_cat(&dest,"=",&ndest);
 2118              		.loc 1 718 0
 2119 1536 488D55C0 		leaq	-64(%rbp), %rdx
 2120 153a 488D45C8 		leaq	-56(%rbp), %rax
 2121 153e 488D3500 		leaq	.LC11(%rip), %rsi
 2121      000000
 2122 1545 4889C7   		movq	%rax, %rdi
 2123 1548 E84CFBFF 		call	arg_cat
 2123      FF
 2124 154d EB1E     		jmp	.L128
 2125              	.L127:
 719:argtable2.c   ****         else if (shortopts)
 2126              		.loc 1 719 0
 2127 154f 48837DB8 		cmpq	$0, -72(%rbp)
 2127      00
 2128 1554 7417     		je	.L128
 720:argtable2.c   ****             arg_cat(&dest," ",&ndest);
 2129              		.loc 1 720 0
 2130 1556 488D55C0 		leaq	-64(%rbp), %rdx
 2131 155a 488D45C8 		leaq	-56(%rbp), %rax
 2132 155e 488D3500 		leaq	.LC6(%rip), %rsi
 2132      000000
 2133 1565 4889C7   		movq	%rax, %rdi
 2134 1568 E82CFBFF 		call	arg_cat
 2134      FF
 2135              	.L128:
 721:argtable2.c   **** 
 722:argtable2.c   ****         if (optvalue)
 2136              		.loc 1 722 0
 2137 156d 837DA400 		cmpl	$0, -92(%rbp)
 2138 1571 7447     		je	.L129
 723:argtable2.c   ****             {
 724:argtable2.c   ****             arg_cat(&dest,"[",&ndest);
 2139              		.loc 1 724 0
 2140 1573 488D55C0 		leaq	-64(%rbp), %rdx
 2141 1577 488D45C8 		leaq	-56(%rbp), %rax
 2142 157b 488D3500 		leaq	.LC7(%rip), %rsi
 2142      000000
 2143 1582 4889C7   		movq	%rax, %rdi
 2144 1585 E80FFBFF 		call	arg_cat
 2144      FF
 725:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 2145              		.loc 1 725 0
 2146 158a 488D55C0 		leaq	-64(%rbp), %rdx
 2147 158e 488B4DA8 		movq	-88(%rbp), %rcx
 2148 1592 488D45C8 		leaq	-56(%rbp), %rax
 2149 1596 4889CE   		movq	%rcx, %rsi
 2150 1599 4889C7   		movq	%rax, %rdi
 2151 159c E8F8FAFF 		call	arg_cat
 2151      FF
 726:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 2152              		.loc 1 726 0
 2153 15a1 488D55C0 		leaq	-64(%rbp), %rdx
 2154 15a5 488D45C8 		leaq	-56(%rbp), %rax
 2155 15a9 488D3500 		leaq	.LC8(%rip), %rsi
 2155      000000
 2156 15b0 4889C7   		movq	%rax, %rdi
 2157 15b3 E8E1FAFF 		call	arg_cat
 2157      FF
 727:argtable2.c   ****             }
 728:argtable2.c   ****         else
 729:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 730:argtable2.c   ****         }
 731:argtable2.c   ****     }
 2158              		.loc 1 731 0
 2159 15b8 EB17     		jmp	.L131
 2160              	.L129:
 729:argtable2.c   ****         }
 2161              		.loc 1 729 0
 2162 15ba 488D55C0 		leaq	-64(%rbp), %rdx
 2163 15be 488B4DA8 		movq	-88(%rbp), %rcx
 2164 15c2 488D45C8 		leaq	-56(%rbp), %rax
 2165 15c6 4889CE   		movq	%rcx, %rsi
 2166 15c9 4889C7   		movq	%rax, %rdi
 2167 15cc E8C8FAFF 		call	arg_cat
 2167      FF
 2168              	.L131:
 2169              		.loc 1 731 0
 2170 15d1 90       		nop
 2171 15d2 488B45F8 		movq	-8(%rbp), %rax
 2172 15d6 64483304 		xorq	%fs:40, %rax
 2172      25280000 
 2172      00
 2173 15df 7405     		je	.L130
 2174 15e1 E8000000 		call	__stack_chk_fail@PLT
 2174      00
 2175              	.L130:
 2176 15e6 C9       		leave
 2177              		.cfi_def_cfa 7, 8
 2178 15e7 C3       		ret
 2179              		.cfi_endproc
 2180              	.LFE13:
 2182              		.section	.rodata
 2183              	.LC13:
 2184 0098 7C00     		.string	"|"
 2185              		.text
 2186              		.globl	arg_print_option
 2188              	arg_print_option:
 2189              	.LFB14:
 732:argtable2.c   **** 
 733:argtable2.c   **** 
 734:argtable2.c   **** /* this function should be deprecated because it doesnt consider optional argument values (ARG_HASO
 735:argtable2.c   **** void arg_print_option(FILE *fp, const char *shortopts, const char *longopts, const char *datatype, 
 736:argtable2.c   ****     {
 2190              		.loc 1 736 0
 2191              		.cfi_startproc
 2192 15e8 55       		pushq	%rbp
 2193              		.cfi_def_cfa_offset 16
 2194              		.cfi_offset 6, -16
 2195 15e9 4889E5   		movq	%rsp, %rbp
 2196              		.cfi_def_cfa_register 6
 2197 15ec 4881EC00 		subq	$256, %rsp
 2197      010000
 2198 15f3 4889BD28 		movq	%rdi, -216(%rbp)
 2198      FFFFFF
 2199 15fa 4889B520 		movq	%rsi, -224(%rbp)
 2199      FFFFFF
 2200 1601 48899518 		movq	%rdx, -232(%rbp)
 2200      FFFFFF
 2201 1608 48898D10 		movq	%rcx, -240(%rbp)
 2201      FFFFFF
 2202 160f 4C898508 		movq	%r8, -248(%rbp)
 2202      FFFFFF
 2203              		.loc 1 736 0
 2204 1616 64488B04 		movq	%fs:40, %rax
 2204      25280000 
 2204      00
 2205 161f 488945F8 		movq	%rax, -8(%rbp)
 2206 1623 31C0     		xorl	%eax, %eax
 737:argtable2.c   ****     char syntax[200]="";
 2207              		.loc 1 737 0
 2208 1625 48C78530 		movq	$0, -208(%rbp)
 2208      FFFFFF00 
 2208      000000
 2209 1630 48C78538 		movq	$0, -200(%rbp)
 2209      FFFFFF00 
 2209      000000
 2210 163b 488D9540 		leaq	-192(%rbp), %rdx
 2210      FFFFFF
 2211 1642 B8000000 		movl	$0, %eax
 2211      00
 2212 1647 B9170000 		movl	$23, %ecx
 2212      00
 2213 164c 4889D7   		movq	%rdx, %rdi
 2214 164f F348AB   		rep stosq
 738:argtable2.c   ****     suffix = suffix ? suffix : "";
 2215              		.loc 1 738 0
 2216 1652 4883BD08 		cmpq	$0, -248(%rbp)
 2216      FFFFFF00 
 2217 165a 7409     		je	.L133
 2218              		.loc 1 738 0 is_stmt 0 discriminator 1
 2219 165c 488B8508 		movq	-248(%rbp), %rax
 2219      FFFFFF
 2220 1663 EB07     		jmp	.L134
 2221              	.L133:
 2222              		.loc 1 738 0 discriminator 2
 2223 1665 488D0500 		leaq	.LC12(%rip), %rax
 2223      000000
 2224              	.L134:
 2225              		.loc 1 738 0 discriminator 4
 2226 166c 48898508 		movq	%rax, -248(%rbp)
 2226      FFFFFF
 739:argtable2.c   **** 
 740:argtable2.c   ****     /* there is no way of passing the proper optvalue for optional argument values here, so we must
 741:argtable2.c   ****     arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,0,"|");
 2227              		.loc 1 741 0 is_stmt 1 discriminator 4
 2228 1673 488BBD10 		movq	-240(%rbp), %rdi
 2228      FFFFFF
 2229 167a 488B8D18 		movq	-232(%rbp), %rcx
 2229      FFFFFF
 2230 1681 488B9520 		movq	-224(%rbp), %rdx
 2230      FFFFFF
 2231 1688 488D8530 		leaq	-208(%rbp), %rax
 2231      FFFFFF
 2232 168f 4883EC08 		subq	$8, %rsp
 2233 1693 488D3500 		leaq	.LC13(%rip), %rsi
 2233      000000
 2234 169a 56       		pushq	%rsi
 2235 169b 41B90000 		movl	$0, %r9d
 2235      0000
 2236 16a1 4989F8   		movq	%rdi, %r8
 2237 16a4 BEC80000 		movl	$200, %esi
 2237      00
 2238 16a9 4889C7   		movq	%rax, %rdi
 2239 16ac E8ECFCFF 		call	arg_cat_optionv
 2239      FF
 2240 16b1 4883C410 		addq	$16, %rsp
 742:argtable2.c   **** 
 743:argtable2.c   ****     fputs(syntax,fp);
 2241              		.loc 1 743 0 discriminator 4
 2242 16b5 488B9528 		movq	-216(%rbp), %rdx
 2242      FFFFFF
 2243 16bc 488D8530 		leaq	-208(%rbp), %rax
 2243      FFFFFF
 2244 16c3 4889D6   		movq	%rdx, %rsi
 2245 16c6 4889C7   		movq	%rax, %rdi
 2246 16c9 E8000000 		call	fputs@PLT
 2246      00
 744:argtable2.c   ****     fputs(suffix,fp);
 2247              		.loc 1 744 0 discriminator 4
 2248 16ce 488B9528 		movq	-216(%rbp), %rdx
 2248      FFFFFF
 2249 16d5 488B8508 		movq	-248(%rbp), %rax
 2249      FFFFFF
 2250 16dc 4889D6   		movq	%rdx, %rsi
 2251 16df 4889C7   		movq	%rax, %rdi
 2252 16e2 E8000000 		call	fputs@PLT
 2252      00
 745:argtable2.c   ****     }
 2253              		.loc 1 745 0 discriminator 4
 2254 16e7 90       		nop
 2255 16e8 488B45F8 		movq	-8(%rbp), %rax
 2256 16ec 64483304 		xorq	%fs:40, %rax
 2256      25280000 
 2256      00
 2257 16f5 7405     		je	.L135
 2258              		.loc 1 745 0 is_stmt 0
 2259 16f7 E8000000 		call	__stack_chk_fail@PLT
 2259      00
 2260              	.L135:
 2261 16fc C9       		leave
 2262              		.cfi_def_cfa 7, 8
 2263 16fd C3       		ret
 2264              		.cfi_endproc
 2265              	.LFE14:
 2267              		.section	.rodata
 2268              	.LC14:
 2269 009a 202D2563 		.string	" -%c"
 2269      00
 2270              	.LC15:
 2271 009f 205B2D25 		.string	" [-%c"
 2271      6300
 2272              	.LC16:
 2273 00a5 256300   		.string	"%c"
 2274              	.LC17:
 2275 00a8 5B256300 		.string	"[%c"
 2276              		.text
 2278              	arg_print_gnuswitch:
 2279              	.LFB15:
 746:argtable2.c   **** 
 747:argtable2.c   **** 
 748:argtable2.c   **** /*
 749:argtable2.c   ****  * Print a GNU style [OPTION] string in which all short options that
 750:argtable2.c   ****  * do not take argument values are presented in abbreviated form, as
 751:argtable2.c   ****  * in: -xvfsd, or -xvf[sd], or [-xvsfd]
 752:argtable2.c   ****  */
 753:argtable2.c   **** static
 754:argtable2.c   **** void arg_print_gnuswitch(FILE *fp, struct arg_hdr **table)
 755:argtable2.c   ****     {
 2280              		.loc 1 755 0 is_stmt 1
 2281              		.cfi_startproc
 2282 16fe 55       		pushq	%rbp
 2283              		.cfi_def_cfa_offset 16
 2284              		.cfi_offset 6, -16
 2285 16ff 4889E5   		movq	%rsp, %rbp
 2286              		.cfi_def_cfa_register 6
 2287 1702 4883EC30 		subq	$48, %rsp
 2288 1706 48897DD8 		movq	%rdi, -40(%rbp)
 2289 170a 488975D0 		movq	%rsi, -48(%rbp)
 756:argtable2.c   ****     int tabindex;
 757:argtable2.c   ****     char *format1=" -%c";
 2290              		.loc 1 757 0
 2291 170e 488D0500 		leaq	.LC14(%rip), %rax
 2291      000000
 2292 1715 488945E8 		movq	%rax, -24(%rbp)
 758:argtable2.c   ****     char *format2=" [-%c";
 2293              		.loc 1 758 0
 2294 1719 488D0500 		leaq	.LC15(%rip), %rax
 2294      000000
 2295 1720 488945F0 		movq	%rax, -16(%rbp)
 759:argtable2.c   ****     char *suffix="";
 2296              		.loc 1 759 0
 2297 1724 488D0500 		leaq	.LC12(%rip), %rax
 2297      000000
 2298 172b 488945F8 		movq	%rax, -8(%rbp)
 760:argtable2.c   **** 
 761:argtable2.c   ****     /* print all mandatory switches that are without argument values */
 762:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2299              		.loc 1 762 0
 2300 172f C745E400 		movl	$0, -28(%rbp)
 2300      000000
 2301 1736 E9C20000 		jmp	.L137
 2301      00
 2302              	.L143:
 763:argtable2.c   ****         {
 764:argtable2.c   ****         /* skip optional options */
 765:argtable2.c   ****         if (table[tabindex]->mincount<1)
 2303              		.loc 1 765 0
 2304 173b 8B45E4   		movl	-28(%rbp), %eax
 2305 173e 4898     		cltq
 2306 1740 488D14C5 		leaq	0(,%rax,8), %rdx
 2306      00000000 
 2307 1748 488B45D0 		movq	-48(%rbp), %rax
 2308 174c 4801D0   		addq	%rdx, %rax
 2309 174f 488B00   		movq	(%rax), %rax
 2310 1752 8B4028   		movl	40(%rax), %eax
 2311 1755 85C0     		testl	%eax, %eax
 2312 1757 0F8E9500 		jle	.L151
 2312      0000
 766:argtable2.c   ****             continue;
 767:argtable2.c   **** 
 768:argtable2.c   ****         /* skip non-short options */
 769:argtable2.c   ****         if (table[tabindex]->shortopts==NULL)
 2313              		.loc 1 769 0
 2314 175d 8B45E4   		movl	-28(%rbp), %eax
 2315 1760 4898     		cltq
 2316 1762 488D14C5 		leaq	0(,%rax,8), %rdx
 2316      00000000 
 2317 176a 488B45D0 		movq	-48(%rbp), %rax
 2318 176e 4801D0   		addq	%rdx, %rax
 2319 1771 488B00   		movq	(%rax), %rax
 2320 1774 488B4008 		movq	8(%rax), %rax
 2321 1778 4885C0   		testq	%rax, %rax
 2322 177b 7478     		je	.L152
 770:argtable2.c   ****             continue;
 771:argtable2.c   **** 
 772:argtable2.c   ****         /* skip options that take argument values */
 773:argtable2.c   ****         if (table[tabindex]->flag&ARG_HASVALUE)
 2323              		.loc 1 773 0
 2324 177d 8B45E4   		movl	-28(%rbp), %eax
 2325 1780 4898     		cltq
 2326 1782 488D14C5 		leaq	0(,%rax,8), %rdx
 2326      00000000 
 2327 178a 488B45D0 		movq	-48(%rbp), %rax
 2328 178e 4801D0   		addq	%rdx, %rax
 2329 1791 488B00   		movq	(%rax), %rax
 2330 1794 0FB600   		movzbl	(%rax), %eax
 2331 1797 0FBEC0   		movsbl	%al, %eax
 2332 179a 83E002   		andl	$2, %eax
 2333 179d 85C0     		testl	%eax, %eax
 2334 179f 7557     		jne	.L153
 774:argtable2.c   ****             continue;
 775:argtable2.c   **** 
 776:argtable2.c   ****         /* print the short option (only the first short option char, ignore multiple choices)*/
 777:argtable2.c   ****         fprintf(fp,format1,table[tabindex]->shortopts[0]);
 2335              		.loc 1 777 0
 2336 17a1 8B45E4   		movl	-28(%rbp), %eax
 2337 17a4 4898     		cltq
 2338 17a6 488D14C5 		leaq	0(,%rax,8), %rdx
 2338      00000000 
 2339 17ae 488B45D0 		movq	-48(%rbp), %rax
 2340 17b2 4801D0   		addq	%rdx, %rax
 2341 17b5 488B00   		movq	(%rax), %rax
 2342 17b8 488B4008 		movq	8(%rax), %rax
 2343 17bc 0FB600   		movzbl	(%rax), %eax
 2344 17bf 0FBED0   		movsbl	%al, %edx
 2345 17c2 488B4DE8 		movq	-24(%rbp), %rcx
 2346 17c6 488B45D8 		movq	-40(%rbp), %rax
 2347 17ca 4889CE   		movq	%rcx, %rsi
 2348 17cd 4889C7   		movq	%rax, %rdi
 2349 17d0 B8000000 		movl	$0, %eax
 2349      00
 2350 17d5 E8000000 		call	fprintf@PLT
 2350      00
 778:argtable2.c   ****         format1="%c";
 2351              		.loc 1 778 0
 2352 17da 488D0500 		leaq	.LC16(%rip), %rax
 2352      000000
 2353 17e1 488945E8 		movq	%rax, -24(%rbp)
 779:argtable2.c   ****         format2="[%c";
 2354              		.loc 1 779 0
 2355 17e5 488D0500 		leaq	.LC17(%rip), %rax
 2355      000000
 2356 17ec 488945F0 		movq	%rax, -16(%rbp)
 2357 17f0 EB07     		jmp	.L139
 2358              	.L151:
 766:argtable2.c   **** 
 2359              		.loc 1 766 0
 2360 17f2 90       		nop
 2361 17f3 EB04     		jmp	.L139
 2362              	.L152:
 770:argtable2.c   **** 
 2363              		.loc 1 770 0
 2364 17f5 90       		nop
 2365 17f6 EB01     		jmp	.L139
 2366              	.L153:
 774:argtable2.c   **** 
 2367              		.loc 1 774 0
 2368 17f8 90       		nop
 2369              	.L139:
 762:argtable2.c   ****         {
 2370              		.loc 1 762 0 discriminator 2
 2371 17f9 8345E401 		addl	$1, -28(%rbp)
 2372              	.L137:
 762:argtable2.c   ****         {
 2373              		.loc 1 762 0 is_stmt 0 discriminator 1
 2374 17fd 8B45E4   		movl	-28(%rbp), %eax
 2375 1800 4898     		cltq
 2376 1802 488D14C5 		leaq	0(,%rax,8), %rdx
 2376      00000000 
 2377 180a 488B45D0 		movq	-48(%rbp), %rax
 2378 180e 4801D0   		addq	%rdx, %rax
 2379 1811 488B00   		movq	(%rax), %rax
 2380 1814 4885C0   		testq	%rax, %rax
 2381 1817 7428     		je	.L142
 762:argtable2.c   ****         {
 2382              		.loc 1 762 0 discriminator 3
 2383 1819 8B45E4   		movl	-28(%rbp), %eax
 2384 181c 4898     		cltq
 2385 181e 488D14C5 		leaq	0(,%rax,8), %rdx
 2385      00000000 
 2386 1826 488B45D0 		movq	-48(%rbp), %rax
 2387 182a 4801D0   		addq	%rdx, %rax
 2388 182d 488B00   		movq	(%rax), %rax
 2389 1830 0FB600   		movzbl	(%rax), %eax
 2390 1833 0FBEC0   		movsbl	%al, %eax
 2391 1836 83E001   		andl	$1, %eax
 2392 1839 85C0     		testl	%eax, %eax
 2393 183b 0F84FAFE 		je	.L143
 2393      FFFF
 2394              	.L142:
 780:argtable2.c   ****         }
 781:argtable2.c   **** 
 782:argtable2.c   ****     /* print all optional switches that are without argument values */
 783:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2395              		.loc 1 783 0 is_stmt 1
 2396 1841 C745E400 		movl	$0, -28(%rbp)
 2396      000000
 2397 1848 E9C20000 		jmp	.L144
 2397      00
 2398              	.L150:
 784:argtable2.c   ****         {
 785:argtable2.c   ****         /* skip mandatory args */
 786:argtable2.c   ****         if (table[tabindex]->mincount>0)
 2399              		.loc 1 786 0
 2400 184d 8B45E4   		movl	-28(%rbp), %eax
 2401 1850 4898     		cltq
 2402 1852 488D14C5 		leaq	0(,%rax,8), %rdx
 2402      00000000 
 2403 185a 488B45D0 		movq	-48(%rbp), %rax
 2404 185e 4801D0   		addq	%rdx, %rax
 2405 1861 488B00   		movq	(%rax), %rax
 2406 1864 8B4028   		movl	40(%rax), %eax
 2407 1867 85C0     		testl	%eax, %eax
 2408 1869 0F8F9500 		jg	.L154
 2408      0000
 787:argtable2.c   ****             continue;
 788:argtable2.c   **** 
 789:argtable2.c   ****         /* skip args without short options */
 790:argtable2.c   ****         if (table[tabindex]->shortopts==NULL)
 2409              		.loc 1 790 0
 2410 186f 8B45E4   		movl	-28(%rbp), %eax
 2411 1872 4898     		cltq
 2412 1874 488D14C5 		leaq	0(,%rax,8), %rdx
 2412      00000000 
 2413 187c 488B45D0 		movq	-48(%rbp), %rax
 2414 1880 4801D0   		addq	%rdx, %rax
 2415 1883 488B00   		movq	(%rax), %rax
 2416 1886 488B4008 		movq	8(%rax), %rax
 2417 188a 4885C0   		testq	%rax, %rax
 2418 188d 7478     		je	.L155
 791:argtable2.c   ****             continue;
 792:argtable2.c   **** 
 793:argtable2.c   ****         /* skip args with values */
 794:argtable2.c   ****         if (table[tabindex]->flag&ARG_HASVALUE)
 2419              		.loc 1 794 0
 2420 188f 8B45E4   		movl	-28(%rbp), %eax
 2421 1892 4898     		cltq
 2422 1894 488D14C5 		leaq	0(,%rax,8), %rdx
 2422      00000000 
 2423 189c 488B45D0 		movq	-48(%rbp), %rax
 2424 18a0 4801D0   		addq	%rdx, %rax
 2425 18a3 488B00   		movq	(%rax), %rax
 2426 18a6 0FB600   		movzbl	(%rax), %eax
 2427 18a9 0FBEC0   		movsbl	%al, %eax
 2428 18ac 83E002   		andl	$2, %eax
 2429 18af 85C0     		testl	%eax, %eax
 2430 18b1 7557     		jne	.L156
 795:argtable2.c   ****             continue;
 796:argtable2.c   **** 
 797:argtable2.c   ****         /* print first short option */
 798:argtable2.c   ****         fprintf(fp,format2,table[tabindex]->shortopts[0]);
 2431              		.loc 1 798 0
 2432 18b3 8B45E4   		movl	-28(%rbp), %eax
 2433 18b6 4898     		cltq
 2434 18b8 488D14C5 		leaq	0(,%rax,8), %rdx
 2434      00000000 
 2435 18c0 488B45D0 		movq	-48(%rbp), %rax
 2436 18c4 4801D0   		addq	%rdx, %rax
 2437 18c7 488B00   		movq	(%rax), %rax
 2438 18ca 488B4008 		movq	8(%rax), %rax
 2439 18ce 0FB600   		movzbl	(%rax), %eax
 2440 18d1 0FBED0   		movsbl	%al, %edx
 2441 18d4 488B4DF0 		movq	-16(%rbp), %rcx
 2442 18d8 488B45D8 		movq	-40(%rbp), %rax
 2443 18dc 4889CE   		movq	%rcx, %rsi
 2444 18df 4889C7   		movq	%rax, %rdi
 2445 18e2 B8000000 		movl	$0, %eax
 2445      00
 2446 18e7 E8000000 		call	fprintf@PLT
 2446      00
 799:argtable2.c   ****         format2="%c";
 2447              		.loc 1 799 0
 2448 18ec 488D0500 		leaq	.LC16(%rip), %rax
 2448      000000
 2449 18f3 488945F0 		movq	%rax, -16(%rbp)
 800:argtable2.c   ****         suffix="]";
 2450              		.loc 1 800 0
 2451 18f7 488D0500 		leaq	.LC8(%rip), %rax
 2451      000000
 2452 18fe 488945F8 		movq	%rax, -8(%rbp)
 2453 1902 EB07     		jmp	.L146
 2454              	.L154:
 787:argtable2.c   **** 
 2455              		.loc 1 787 0
 2456 1904 90       		nop
 2457 1905 EB04     		jmp	.L146
 2458              	.L155:
 791:argtable2.c   **** 
 2459              		.loc 1 791 0
 2460 1907 90       		nop
 2461 1908 EB01     		jmp	.L146
 2462              	.L156:
 795:argtable2.c   **** 
 2463              		.loc 1 795 0
 2464 190a 90       		nop
 2465              	.L146:
 783:argtable2.c   ****         {
 2466              		.loc 1 783 0 discriminator 2
 2467 190b 8345E401 		addl	$1, -28(%rbp)
 2468              	.L144:
 783:argtable2.c   ****         {
 2469              		.loc 1 783 0 is_stmt 0 discriminator 1
 2470 190f 8B45E4   		movl	-28(%rbp), %eax
 2471 1912 4898     		cltq
 2472 1914 488D14C5 		leaq	0(,%rax,8), %rdx
 2472      00000000 
 2473 191c 488B45D0 		movq	-48(%rbp), %rax
 2474 1920 4801D0   		addq	%rdx, %rax
 2475 1923 488B00   		movq	(%rax), %rax
 2476 1926 4885C0   		testq	%rax, %rax
 2477 1929 7428     		je	.L149
 783:argtable2.c   ****         {
 2478              		.loc 1 783 0 discriminator 3
 2479 192b 8B45E4   		movl	-28(%rbp), %eax
 2480 192e 4898     		cltq
 2481 1930 488D14C5 		leaq	0(,%rax,8), %rdx
 2481      00000000 
 2482 1938 488B45D0 		movq	-48(%rbp), %rax
 2483 193c 4801D0   		addq	%rdx, %rax
 2484 193f 488B00   		movq	(%rax), %rax
 2485 1942 0FB600   		movzbl	(%rax), %eax
 2486 1945 0FBEC0   		movsbl	%al, %eax
 2487 1948 83E001   		andl	$1, %eax
 2488 194b 85C0     		testl	%eax, %eax
 2489 194d 0F84FAFE 		je	.L150
 2489      FFFF
 2490              	.L149:
 801:argtable2.c   ****         }
 802:argtable2.c   **** 
 803:argtable2.c   ****     fprintf(fp,"%s",suffix);
 2491              		.loc 1 803 0 is_stmt 1
 2492 1953 488B55D8 		movq	-40(%rbp), %rdx
 2493 1957 488B45F8 		movq	-8(%rbp), %rax
 2494 195b 4889D6   		movq	%rdx, %rsi
 2495 195e 4889C7   		movq	%rax, %rdi
 2496 1961 E8000000 		call	fputs@PLT
 2496      00
 804:argtable2.c   ****     }
 2497              		.loc 1 804 0
 2498 1966 90       		nop
 2499 1967 C9       		leave
 2500              		.cfi_def_cfa 7, 8
 2501 1968 C3       		ret
 2502              		.cfi_endproc
 2503              	.LFE15:
 2505              		.section	.rodata
 2506              	.LC18:
 2507 00ac 20257300 		.string	" %s"
 2508              	.LC19:
 2509 00b0 205B2573 		.string	" [%s]"
 2509      5D00
 2510              	.LC20:
 2511 00b6 205B2573 		.string	" [%s] [%s]"
 2511      5D205B25 
 2511      735D00
 2512              	.LC21:
 2513 00c1 205B2573 		.string	" [%s]..."
 2513      5D2E2E2E 
 2513      00
 2514              		.text
 2515              		.globl	arg_print_syntax
 2517              	arg_print_syntax:
 2518              	.LFB16:
 805:argtable2.c   **** 
 806:argtable2.c   **** 
 807:argtable2.c   **** void arg_print_syntax(FILE *fp, void **argtable, const char *suffix)
 808:argtable2.c   ****     {
 2519              		.loc 1 808 0
 2520              		.cfi_startproc
 2521 1969 55       		pushq	%rbp
 2522              		.cfi_def_cfa_offset 16
 2523              		.cfi_offset 6, -16
 2524 196a 4889E5   		movq	%rsp, %rbp
 2525              		.cfi_def_cfa_register 6
 2526 196d 4881EC20 		subq	$288, %rsp
 2526      010000
 2527 1974 4889BDF8 		movq	%rdi, -264(%rbp)
 2527      FEFFFF
 2528 197b 4889B5F0 		movq	%rsi, -272(%rbp)
 2528      FEFFFF
 2529 1982 488995E8 		movq	%rdx, -280(%rbp)
 2529      FEFFFF
 2530              		.loc 1 808 0
 2531 1989 64488B04 		movq	%fs:40, %rax
 2531      25280000 
 2531      00
 2532 1992 488945F8 		movq	%rax, -8(%rbp)
 2533 1996 31C0     		xorl	%eax, %eax
 809:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 2534              		.loc 1 809 0
 2535 1998 488B85F0 		movq	-272(%rbp), %rax
 2535      FEFFFF
 2536 199f 48898510 		movq	%rax, -240(%rbp)
 2536      FFFFFF
 810:argtable2.c   ****     int i,tabindex;
 811:argtable2.c   **** 
 812:argtable2.c   ****     /* print GNU style [OPTION] string */
 813:argtable2.c   ****     arg_print_gnuswitch(fp, table);
 2537              		.loc 1 813 0
 2538 19a6 488B9510 		movq	-240(%rbp), %rdx
 2538      FFFFFF
 2539 19ad 488B85F8 		movq	-264(%rbp), %rax
 2539      FEFFFF
 2540 19b4 4889D6   		movq	%rdx, %rsi
 2541 19b7 4889C7   		movq	%rax, %rdi
 2542 19ba E83FFDFF 		call	arg_print_gnuswitch
 2542      FF
 814:argtable2.c   **** 
 815:argtable2.c   ****     /* print remaining options in abbreviated style */
 816:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2543              		.loc 1 816 0
 2544 19bf C7850CFF 		movl	$0, -244(%rbp)
 2544      FFFF0000 
 2544      0000
 2545 19c9 E9950200 		jmp	.L158
 2545      00
 2546              	.L169:
 2547              	.LBB25:
 817:argtable2.c   ****         {
 818:argtable2.c   ****         char syntax[200]="";
 2548              		.loc 1 818 0
 2549 19ce 48C78530 		movq	$0, -208(%rbp)
 2549      FFFFFF00 
 2549      000000
 2550 19d9 48C78538 		movq	$0, -200(%rbp)
 2550      FFFFFF00 
 2550      000000
 2551 19e4 488D9540 		leaq	-192(%rbp), %rdx
 2551      FFFFFF
 2552 19eb B8000000 		movl	$0, %eax
 2552      00
 2553 19f0 B9170000 		movl	$23, %ecx
 2553      00
 2554 19f5 4889D7   		movq	%rdx, %rdi
 2555 19f8 F348AB   		rep stosq
 819:argtable2.c   ****         const char *shortopts, *longopts, *datatype;
 820:argtable2.c   **** 
 821:argtable2.c   ****         /* skip short options without arg values (they were printed by arg_print_gnu_switch) */
 822:argtable2.c   ****         if (table[tabindex]->shortopts && !(table[tabindex]->flag&ARG_HASVALUE))
 2556              		.loc 1 822 0
 2557 19fb 8B850CFF 		movl	-244(%rbp), %eax
 2557      FFFF
 2558 1a01 4898     		cltq
 2559 1a03 488D14C5 		leaq	0(,%rax,8), %rdx
 2559      00000000 
 2560 1a0b 488B8510 		movq	-240(%rbp), %rax
 2560      FFFFFF
 2561 1a12 4801D0   		addq	%rdx, %rax
 2562 1a15 488B00   		movq	(%rax), %rax
 2563 1a18 488B4008 		movq	8(%rax), %rax
 2564 1a1c 4885C0   		testq	%rax, %rax
 2565 1a1f 742E     		je	.L159
 2566              		.loc 1 822 0 is_stmt 0 discriminator 1
 2567 1a21 8B850CFF 		movl	-244(%rbp), %eax
 2567      FFFF
 2568 1a27 4898     		cltq
 2569 1a29 488D14C5 		leaq	0(,%rax,8), %rdx
 2569      00000000 
 2570 1a31 488B8510 		movq	-240(%rbp), %rax
 2570      FFFFFF
 2571 1a38 4801D0   		addq	%rdx, %rax
 2572 1a3b 488B00   		movq	(%rax), %rax
 2573 1a3e 0FB600   		movzbl	(%rax), %eax
 2574 1a41 0FBEC0   		movsbl	%al, %eax
 2575 1a44 83E002   		andl	$2, %eax
 2576 1a47 85C0     		testl	%eax, %eax
 2577 1a49 0F840602 		je	.L173
 2577      0000
 2578              	.L159:
 823:argtable2.c   ****             continue;
 824:argtable2.c   **** 
 825:argtable2.c   ****         shortopts = table[tabindex]->shortopts;
 2579              		.loc 1 825 0 is_stmt 1
 2580 1a4f 8B850CFF 		movl	-244(%rbp), %eax
 2580      FFFF
 2581 1a55 4898     		cltq
 2582 1a57 488D14C5 		leaq	0(,%rax,8), %rdx
 2582      00000000 
 2583 1a5f 488B8510 		movq	-240(%rbp), %rax
 2583      FFFFFF
 2584 1a66 4801D0   		addq	%rdx, %rax
 2585 1a69 488B00   		movq	(%rax), %rax
 2586 1a6c 488B4008 		movq	8(%rax), %rax
 2587 1a70 48898518 		movq	%rax, -232(%rbp)
 2587      FFFFFF
 826:argtable2.c   ****         longopts  = table[tabindex]->longopts;
 2588              		.loc 1 826 0
 2589 1a77 8B850CFF 		movl	-244(%rbp), %eax
 2589      FFFF
 2590 1a7d 4898     		cltq
 2591 1a7f 488D14C5 		leaq	0(,%rax,8), %rdx
 2591      00000000 
 2592 1a87 488B8510 		movq	-240(%rbp), %rax
 2592      FFFFFF
 2593 1a8e 4801D0   		addq	%rdx, %rax
 2594 1a91 488B00   		movq	(%rax), %rax
 2595 1a94 488B4010 		movq	16(%rax), %rax
 2596 1a98 48898520 		movq	%rax, -224(%rbp)
 2596      FFFFFF
 827:argtable2.c   ****         datatype  = table[tabindex]->datatype;
 2597              		.loc 1 827 0
 2598 1a9f 8B850CFF 		movl	-244(%rbp), %eax
 2598      FFFF
 2599 1aa5 4898     		cltq
 2600 1aa7 488D14C5 		leaq	0(,%rax,8), %rdx
 2600      00000000 
 2601 1aaf 488B8510 		movq	-240(%rbp), %rax
 2601      FFFFFF
 2602 1ab6 4801D0   		addq	%rdx, %rax
 2603 1ab9 488B00   		movq	(%rax), %rax
 2604 1abc 488B4018 		movq	24(%rax), %rax
 2605 1ac0 48898528 		movq	%rax, -216(%rbp)
 2605      FFFFFF
 828:argtable2.c   ****         arg_cat_option(syntax,sizeof(syntax),shortopts,longopts,datatype, table[tabindex]->flag&ARG
 2606              		.loc 1 828 0
 2607 1ac7 8B850CFF 		movl	-244(%rbp), %eax
 2607      FFFF
 2608 1acd 4898     		cltq
 2609 1acf 488D14C5 		leaq	0(,%rax,8), %rdx
 2609      00000000 
 2610 1ad7 488B8510 		movq	-240(%rbp), %rax
 2610      FFFFFF
 2611 1ade 4801D0   		addq	%rdx, %rax
 2612 1ae1 488B00   		movq	(%rax), %rax
 2613 1ae4 0FB600   		movzbl	(%rax), %eax
 2614 1ae7 0FBEC0   		movsbl	%al, %eax
 2615 1aea 83E004   		andl	$4, %eax
 2616 1aed 89C7     		movl	%eax, %edi
 2617 1aef 488BB528 		movq	-216(%rbp), %rsi
 2617      FFFFFF
 2618 1af6 488B8D20 		movq	-224(%rbp), %rcx
 2618      FFFFFF
 2619 1afd 488B9518 		movq	-232(%rbp), %rdx
 2619      FFFFFF
 2620 1b04 488D8530 		leaq	-208(%rbp), %rax
 2620      FFFFFF
 2621 1b0b 4189F9   		movl	%edi, %r9d
 2622 1b0e 4989F0   		movq	%rsi, %r8
 2623 1b11 BEC80000 		movl	$200, %esi
 2623      00
 2624 1b16 4889C7   		movq	%rax, %rdi
 2625 1b19 E825F6FF 		call	arg_cat_option
 2625      FF
 829:argtable2.c   **** 
 830:argtable2.c   ****         if (strlen(syntax)>0)
 2626              		.loc 1 830 0
 2627 1b1e 488D8530 		leaq	-208(%rbp), %rax
 2627      FFFFFF
 2628 1b25 0FB600   		movzbl	(%rax), %eax
 2629 1b28 84C0     		testb	%al, %al
 2630 1b2a 0F842801 		je	.L174
 2630      0000
 831:argtable2.c   ****             {
 832:argtable2.c   ****             /* print mandatory instances of this option */
 833:argtable2.c   ****             for (i=0; i<table[tabindex]->mincount; i++)
 2631              		.loc 1 833 0
 2632 1b30 C78508FF 		movl	$0, -248(%rbp)
 2632      FFFF0000 
 2632      0000
 2633 1b3a EB29     		jmp	.L162
 2634              	.L163:
 834:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2635              		.loc 1 834 0 discriminator 3
 2636 1b3c 488D9530 		leaq	-208(%rbp), %rdx
 2636      FFFFFF
 2637 1b43 488B85F8 		movq	-264(%rbp), %rax
 2637      FEFFFF
 2638 1b4a 488D3500 		leaq	.LC18(%rip), %rsi
 2638      000000
 2639 1b51 4889C7   		movq	%rax, %rdi
 2640 1b54 B8000000 		movl	$0, %eax
 2640      00
 2641 1b59 E8000000 		call	fprintf@PLT
 2641      00
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2642              		.loc 1 833 0 discriminator 3
 2643 1b5e 838508FF 		addl	$1, -248(%rbp)
 2643      FFFF01
 2644              	.L162:
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2645              		.loc 1 833 0 is_stmt 0 discriminator 1
 2646 1b65 8B850CFF 		movl	-244(%rbp), %eax
 2646      FFFF
 2647 1b6b 4898     		cltq
 2648 1b6d 488D14C5 		leaq	0(,%rax,8), %rdx
 2648      00000000 
 2649 1b75 488B8510 		movq	-240(%rbp), %rax
 2649      FFFFFF
 2650 1b7c 4801D0   		addq	%rdx, %rax
 2651 1b7f 488B00   		movq	(%rax), %rax
 2652 1b82 8B4028   		movl	40(%rax), %eax
 2653 1b85 398508FF 		cmpl	%eax, -248(%rbp)
 2653      FFFF
 2654 1b8b 7CAF     		jl	.L163
 835:argtable2.c   **** 
 836:argtable2.c   ****             /* print optional instances enclosed in "[..]" */
 837:argtable2.c   ****             switch ( table[tabindex]->maxcount - table[tabindex]->mincount )
 2655              		.loc 1 837 0 is_stmt 1
 2656 1b8d 8B850CFF 		movl	-244(%rbp), %eax
 2656      FFFF
 2657 1b93 4898     		cltq
 2658 1b95 488D14C5 		leaq	0(,%rax,8), %rdx
 2658      00000000 
 2659 1b9d 488B8510 		movq	-240(%rbp), %rax
 2659      FFFFFF
 2660 1ba4 4801D0   		addq	%rdx, %rax
 2661 1ba7 488B00   		movq	(%rax), %rax
 2662 1baa 8B502C   		movl	44(%rax), %edx
 2663 1bad 8B850CFF 		movl	-244(%rbp), %eax
 2663      FFFF
 2664 1bb3 4898     		cltq
 2665 1bb5 488D0CC5 		leaq	0(,%rax,8), %rcx
 2665      00000000 
 2666 1bbd 488B8510 		movq	-240(%rbp), %rax
 2666      FFFFFF
 2667 1bc4 4801C8   		addq	%rcx, %rax
 2668 1bc7 488B00   		movq	(%rax), %rax
 2669 1bca 8B4028   		movl	40(%rax), %eax
 2670 1bcd 29C2     		subl	%eax, %edx
 2671 1bcf 89D0     		movl	%edx, %eax
 2672 1bd1 83F801   		cmpl	$1, %eax
 2673 1bd4 740B     		je	.L165
 2674 1bd6 83F802   		cmpl	$2, %eax
 2675 1bd9 742A     		je	.L166
 2676 1bdb 85C0     		testl	%eax, %eax
 2677 1bdd 747C     		je	.L175
 2678 1bdf EB4F     		jmp	.L172
 2679              	.L165:
 838:argtable2.c   ****                 {
 839:argtable2.c   ****                 case 0:
 840:argtable2.c   ****                     break;
 841:argtable2.c   ****                 case 1:
 842:argtable2.c   ****                     fprintf(fp, " [%s]",syntax);
 2680              		.loc 1 842 0
 2681 1be1 488D9530 		leaq	-208(%rbp), %rdx
 2681      FFFFFF
 2682 1be8 488B85F8 		movq	-264(%rbp), %rax
 2682      FEFFFF
 2683 1bef 488D3500 		leaq	.LC19(%rip), %rsi
 2683      000000
 2684 1bf6 4889C7   		movq	%rax, %rdi
 2685 1bf9 B8000000 		movl	$0, %eax
 2685      00
 2686 1bfe E8000000 		call	fprintf@PLT
 2686      00
 843:argtable2.c   ****                     break;
 2687              		.loc 1 843 0
 2688 1c03 EB57     		jmp	.L160
 2689              	.L166:
 844:argtable2.c   ****                 case 2:
 845:argtable2.c   ****                     fprintf(fp, " [%s] [%s]",syntax,syntax);
 2690              		.loc 1 845 0
 2691 1c05 488D8D30 		leaq	-208(%rbp), %rcx
 2691      FFFFFF
 2692 1c0c 488D9530 		leaq	-208(%rbp), %rdx
 2692      FFFFFF
 2693 1c13 488B85F8 		movq	-264(%rbp), %rax
 2693      FEFFFF
 2694 1c1a 488D3500 		leaq	.LC20(%rip), %rsi
 2694      000000
 2695 1c21 4889C7   		movq	%rax, %rdi
 2696 1c24 B8000000 		movl	$0, %eax
 2696      00
 2697 1c29 E8000000 		call	fprintf@PLT
 2697      00
 846:argtable2.c   ****                     break;
 2698              		.loc 1 846 0
 2699 1c2e EB2C     		jmp	.L160
 2700              	.L172:
 847:argtable2.c   ****                 default:
 848:argtable2.c   ****                     fprintf(fp, " [%s]...",syntax);
 2701              		.loc 1 848 0
 2702 1c30 488D9530 		leaq	-208(%rbp), %rdx
 2702      FFFFFF
 2703 1c37 488B85F8 		movq	-264(%rbp), %rax
 2703      FEFFFF
 2704 1c3e 488D3500 		leaq	.LC21(%rip), %rsi
 2704      000000
 2705 1c45 4889C7   		movq	%rax, %rdi
 2706 1c48 B8000000 		movl	$0, %eax
 2706      00
 2707 1c4d E8000000 		call	fprintf@PLT
 2707      00
 849:argtable2.c   ****                     break;
 2708              		.loc 1 849 0
 2709 1c52 90       		nop
 2710 1c53 EB07     		jmp	.L160
 2711              	.L173:
 823:argtable2.c   **** 
 2712              		.loc 1 823 0
 2713 1c55 90       		nop
 2714 1c56 EB04     		jmp	.L160
 2715              	.L174:
 850:argtable2.c   ****                 }
 851:argtable2.c   ****             }
 2716              		.loc 1 851 0
 2717 1c58 90       		nop
 2718 1c59 EB01     		jmp	.L160
 2719              	.L175:
 840:argtable2.c   ****                 case 1:
 2720              		.loc 1 840 0
 2721 1c5b 90       		nop
 2722              	.L160:
 2723              	.LBE25:
 816:argtable2.c   ****         {
 2724              		.loc 1 816 0 discriminator 2
 2725 1c5c 83850CFF 		addl	$1, -244(%rbp)
 2725      FFFF01
 2726              	.L158:
 816:argtable2.c   ****         {
 2727              		.loc 1 816 0 is_stmt 0 discriminator 1
 2728 1c63 8B850CFF 		movl	-244(%rbp), %eax
 2728      FFFF
 2729 1c69 4898     		cltq
 2730 1c6b 488D14C5 		leaq	0(,%rax,8), %rdx
 2730      00000000 
 2731 1c73 488B8510 		movq	-240(%rbp), %rax
 2731      FFFFFF
 2732 1c7a 4801D0   		addq	%rdx, %rax
 2733 1c7d 488B00   		movq	(%rax), %rax
 2734 1c80 4885C0   		testq	%rax, %rax
 2735 1c83 742E     		je	.L168
 816:argtable2.c   ****         {
 2736              		.loc 1 816 0 discriminator 3
 2737 1c85 8B850CFF 		movl	-244(%rbp), %eax
 2737      FFFF
 2738 1c8b 4898     		cltq
 2739 1c8d 488D14C5 		leaq	0(,%rax,8), %rdx
 2739      00000000 
 2740 1c95 488B8510 		movq	-240(%rbp), %rax
 2740      FFFFFF
 2741 1c9c 4801D0   		addq	%rdx, %rax
 2742 1c9f 488B00   		movq	(%rax), %rax
 2743 1ca2 0FB600   		movzbl	(%rax), %eax
 2744 1ca5 0FBEC0   		movsbl	%al, %eax
 2745 1ca8 83E001   		andl	$1, %eax
 2746 1cab 85C0     		testl	%eax, %eax
 2747 1cad 0F841BFD 		je	.L169
 2747      FFFF
 2748              	.L168:
 852:argtable2.c   ****         }
 853:argtable2.c   **** 
 854:argtable2.c   ****     if (suffix)
 2749              		.loc 1 854 0 is_stmt 1
 2750 1cb3 4883BDE8 		cmpq	$0, -280(%rbp)
 2750      FEFFFF00 
 2751 1cbb 7419     		je	.L176
 855:argtable2.c   ****         fprintf(fp, "%s",suffix);
 2752              		.loc 1 855 0
 2753 1cbd 488B95F8 		movq	-264(%rbp), %rdx
 2753      FEFFFF
 2754 1cc4 488B85E8 		movq	-280(%rbp), %rax
 2754      FEFFFF
 2755 1ccb 4889D6   		movq	%rdx, %rsi
 2756 1cce 4889C7   		movq	%rax, %rdi
 2757 1cd1 E8000000 		call	fputs@PLT
 2757      00
 2758              	.L176:
 856:argtable2.c   ****     }
 2759              		.loc 1 856 0
 2760 1cd6 90       		nop
 2761 1cd7 488B45F8 		movq	-8(%rbp), %rax
 2762 1cdb 64483304 		xorq	%fs:40, %rax
 2762      25280000 
 2762      00
 2763 1ce4 7405     		je	.L171
 2764 1ce6 E8000000 		call	__stack_chk_fail@PLT
 2764      00
 2765              	.L171:
 2766 1ceb C9       		leave
 2767              		.cfi_def_cfa 7, 8
 2768 1cec C3       		ret
 2769              		.cfi_endproc
 2770              	.LFE16:
 2772              		.globl	arg_print_syntaxv
 2774              	arg_print_syntaxv:
 2775              	.LFB17:
 857:argtable2.c   **** 
 858:argtable2.c   **** 
 859:argtable2.c   **** void arg_print_syntaxv(FILE *fp, void **argtable, const char *suffix)
 860:argtable2.c   ****     {
 2776              		.loc 1 860 0
 2777              		.cfi_startproc
 2778 1ced 55       		pushq	%rbp
 2779              		.cfi_def_cfa_offset 16
 2780              		.cfi_offset 6, -16
 2781 1cee 4889E5   		movq	%rsp, %rbp
 2782              		.cfi_def_cfa_register 6
 2783 1cf1 4881EC20 		subq	$288, %rsp
 2783      010000
 2784 1cf8 4889BDF8 		movq	%rdi, -264(%rbp)
 2784      FEFFFF
 2785 1cff 4889B5F0 		movq	%rsi, -272(%rbp)
 2785      FEFFFF
 2786 1d06 488995E8 		movq	%rdx, -280(%rbp)
 2786      FEFFFF
 2787              		.loc 1 860 0
 2788 1d0d 64488B04 		movq	%fs:40, %rax
 2788      25280000 
 2788      00
 2789 1d16 488945F8 		movq	%rax, -8(%rbp)
 2790 1d1a 31C0     		xorl	%eax, %eax
 861:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 2791              		.loc 1 861 0
 2792 1d1c 488B85F0 		movq	-272(%rbp), %rax
 2792      FEFFFF
 2793 1d23 48898510 		movq	%rax, -240(%rbp)
 2793      FFFFFF
 862:argtable2.c   ****     int i,tabindex;
 863:argtable2.c   **** 
 864:argtable2.c   ****     /* print remaining options in abbreviated style */
 865:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2794              		.loc 1 865 0
 2795 1d2a C7850CFF 		movl	$0, -244(%rbp)
 2795      FFFF0000 
 2795      0000
 2796 1d34 E9390200 		jmp	.L178
 2796      00
 2797              	.L187:
 2798              	.LBB26:
 866:argtable2.c   ****         {
 867:argtable2.c   ****         char syntax[200]="";
 2799              		.loc 1 867 0
 2800 1d39 48C78530 		movq	$0, -208(%rbp)
 2800      FFFFFF00 
 2800      000000
 2801 1d44 48C78538 		movq	$0, -200(%rbp)
 2801      FFFFFF00 
 2801      000000
 2802 1d4f 488D9540 		leaq	-192(%rbp), %rdx
 2802      FFFFFF
 2803 1d56 B8000000 		movl	$0, %eax
 2803      00
 2804 1d5b B9170000 		movl	$23, %ecx
 2804      00
 2805 1d60 4889D7   		movq	%rdx, %rdi
 2806 1d63 F348AB   		rep stosq
 868:argtable2.c   ****         const char *shortopts, *longopts, *datatype;
 869:argtable2.c   **** 
 870:argtable2.c   ****         shortopts = table[tabindex]->shortopts;
 2807              		.loc 1 870 0
 2808 1d66 8B850CFF 		movl	-244(%rbp), %eax
 2808      FFFF
 2809 1d6c 4898     		cltq
 2810 1d6e 488D14C5 		leaq	0(,%rax,8), %rdx
 2810      00000000 
 2811 1d76 488B8510 		movq	-240(%rbp), %rax
 2811      FFFFFF
 2812 1d7d 4801D0   		addq	%rdx, %rax
 2813 1d80 488B00   		movq	(%rax), %rax
 2814 1d83 488B4008 		movq	8(%rax), %rax
 2815 1d87 48898518 		movq	%rax, -232(%rbp)
 2815      FFFFFF
 871:argtable2.c   ****         longopts  = table[tabindex]->longopts;
 2816              		.loc 1 871 0
 2817 1d8e 8B850CFF 		movl	-244(%rbp), %eax
 2817      FFFF
 2818 1d94 4898     		cltq
 2819 1d96 488D14C5 		leaq	0(,%rax,8), %rdx
 2819      00000000 
 2820 1d9e 488B8510 		movq	-240(%rbp), %rax
 2820      FFFFFF
 2821 1da5 4801D0   		addq	%rdx, %rax
 2822 1da8 488B00   		movq	(%rax), %rax
 2823 1dab 488B4010 		movq	16(%rax), %rax
 2824 1daf 48898520 		movq	%rax, -224(%rbp)
 2824      FFFFFF
 872:argtable2.c   ****         datatype  = table[tabindex]->datatype;
 2825              		.loc 1 872 0
 2826 1db6 8B850CFF 		movl	-244(%rbp), %eax
 2826      FFFF
 2827 1dbc 4898     		cltq
 2828 1dbe 488D14C5 		leaq	0(,%rax,8), %rdx
 2828      00000000 
 2829 1dc6 488B8510 		movq	-240(%rbp), %rax
 2829      FFFFFF
 2830 1dcd 4801D0   		addq	%rdx, %rax
 2831 1dd0 488B00   		movq	(%rax), %rax
 2832 1dd3 488B4018 		movq	24(%rax), %rax
 2833 1dd7 48898528 		movq	%rax, -216(%rbp)
 2833      FFFFFF
 873:argtable2.c   ****         arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag&ARG
 2834              		.loc 1 873 0
 2835 1dde 8B850CFF 		movl	-244(%rbp), %eax
 2835      FFFF
 2836 1de4 4898     		cltq
 2837 1de6 488D14C5 		leaq	0(,%rax,8), %rdx
 2837      00000000 
 2838 1dee 488B8510 		movq	-240(%rbp), %rax
 2838      FFFFFF
 2839 1df5 4801D0   		addq	%rdx, %rax
 2840 1df8 488B00   		movq	(%rax), %rax
 2841 1dfb 0FB600   		movzbl	(%rax), %eax
 2842 1dfe 0FBEC0   		movsbl	%al, %eax
 2843 1e01 83E004   		andl	$4, %eax
 2844 1e04 4189C0   		movl	%eax, %r8d
 2845 1e07 488BBD28 		movq	-216(%rbp), %rdi
 2845      FFFFFF
 2846 1e0e 488B8D20 		movq	-224(%rbp), %rcx
 2846      FFFFFF
 2847 1e15 488B9518 		movq	-232(%rbp), %rdx
 2847      FFFFFF
 2848 1e1c 488D8530 		leaq	-208(%rbp), %rax
 2848      FFFFFF
 2849 1e23 4883EC08 		subq	$8, %rsp
 2850 1e27 488D3500 		leaq	.LC13(%rip), %rsi
 2850      000000
 2851 1e2e 56       		pushq	%rsi
 2852 1e2f 4589C1   		movl	%r8d, %r9d
 2853 1e32 4989F8   		movq	%rdi, %r8
 2854 1e35 BEC80000 		movl	$200, %esi
 2854      00
 2855 1e3a 4889C7   		movq	%rax, %rdi
 2856 1e3d E85BF5FF 		call	arg_cat_optionv
 2856      FF
 2857 1e42 4883C410 		addq	$16, %rsp
 874:argtable2.c   **** 
 875:argtable2.c   ****         /* print mandatory options */
 876:argtable2.c   ****         for (i=0; i<table[tabindex]->mincount; i++)
 2858              		.loc 1 876 0
 2859 1e46 C78508FF 		movl	$0, -248(%rbp)
 2859      FFFF0000 
 2859      0000
 2860 1e50 EB29     		jmp	.L179
 2861              	.L180:
 877:argtable2.c   ****             fprintf(fp," %s",syntax);
 2862              		.loc 1 877 0 discriminator 3
 2863 1e52 488D9530 		leaq	-208(%rbp), %rdx
 2863      FFFFFF
 2864 1e59 488B85F8 		movq	-264(%rbp), %rax
 2864      FEFFFF
 2865 1e60 488D3500 		leaq	.LC18(%rip), %rsi
 2865      000000
 2866 1e67 4889C7   		movq	%rax, %rdi
 2867 1e6a B8000000 		movl	$0, %eax
 2867      00
 2868 1e6f E8000000 		call	fprintf@PLT
 2868      00
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 2869              		.loc 1 876 0 discriminator 3
 2870 1e74 838508FF 		addl	$1, -248(%rbp)
 2870      FFFF01
 2871              	.L179:
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 2872              		.loc 1 876 0 is_stmt 0 discriminator 1
 2873 1e7b 8B850CFF 		movl	-244(%rbp), %eax
 2873      FFFF
 2874 1e81 4898     		cltq
 2875 1e83 488D14C5 		leaq	0(,%rax,8), %rdx
 2875      00000000 
 2876 1e8b 488B8510 		movq	-240(%rbp), %rax
 2876      FFFFFF
 2877 1e92 4801D0   		addq	%rdx, %rax
 2878 1e95 488B00   		movq	(%rax), %rax
 2879 1e98 8B4028   		movl	40(%rax), %eax
 2880 1e9b 398508FF 		cmpl	%eax, -248(%rbp)
 2880      FFFF
 2881 1ea1 7CAF     		jl	.L180
 878:argtable2.c   **** 
 879:argtable2.c   ****         /* print optional args enclosed in "[..]" */
 880:argtable2.c   ****         switch ( table[tabindex]->maxcount - table[tabindex]->mincount )
 2882              		.loc 1 880 0 is_stmt 1
 2883 1ea3 8B850CFF 		movl	-244(%rbp), %eax
 2883      FFFF
 2884 1ea9 4898     		cltq
 2885 1eab 488D14C5 		leaq	0(,%rax,8), %rdx
 2885      00000000 
 2886 1eb3 488B8510 		movq	-240(%rbp), %rax
 2886      FFFFFF
 2887 1eba 4801D0   		addq	%rdx, %rax
 2888 1ebd 488B00   		movq	(%rax), %rax
 2889 1ec0 8B502C   		movl	44(%rax), %edx
 2890 1ec3 8B850CFF 		movl	-244(%rbp), %eax
 2890      FFFF
 2891 1ec9 4898     		cltq
 2892 1ecb 488D0CC5 		leaq	0(,%rax,8), %rcx
 2892      00000000 
 2893 1ed3 488B8510 		movq	-240(%rbp), %rax
 2893      FFFFFF
 2894 1eda 4801C8   		addq	%rcx, %rax
 2895 1edd 488B00   		movq	(%rax), %rax
 2896 1ee0 8B4028   		movl	40(%rax), %eax
 2897 1ee3 29C2     		subl	%eax, %edx
 2898 1ee5 89D0     		movl	%edx, %eax
 2899 1ee7 83F801   		cmpl	$1, %eax
 2900 1eea 740B     		je	.L182
 2901 1eec 83F802   		cmpl	$2, %eax
 2902 1eef 742A     		je	.L183
 2903 1ef1 85C0     		testl	%eax, %eax
 2904 1ef3 7475     		je	.L191
 2905 1ef5 EB4F     		jmp	.L190
 2906              	.L182:
 881:argtable2.c   ****             {
 882:argtable2.c   ****             case 0:
 883:argtable2.c   ****                 break;
 884:argtable2.c   ****             case 1:
 885:argtable2.c   ****                 fprintf(fp, " [%s]",syntax);
 2907              		.loc 1 885 0
 2908 1ef7 488D9530 		leaq	-208(%rbp), %rdx
 2908      FFFFFF
 2909 1efe 488B85F8 		movq	-264(%rbp), %rax
 2909      FEFFFF
 2910 1f05 488D3500 		leaq	.LC19(%rip), %rsi
 2910      000000
 2911 1f0c 4889C7   		movq	%rax, %rdi
 2912 1f0f B8000000 		movl	$0, %eax
 2912      00
 2913 1f14 E8000000 		call	fprintf@PLT
 2913      00
 886:argtable2.c   ****                 break;
 2914              		.loc 1 886 0
 2915 1f19 EB50     		jmp	.L185
 2916              	.L183:
 887:argtable2.c   ****             case 2:
 888:argtable2.c   ****                 fprintf(fp, " [%s] [%s]",syntax,syntax);
 2917              		.loc 1 888 0
 2918 1f1b 488D8D30 		leaq	-208(%rbp), %rcx
 2918      FFFFFF
 2919 1f22 488D9530 		leaq	-208(%rbp), %rdx
 2919      FFFFFF
 2920 1f29 488B85F8 		movq	-264(%rbp), %rax
 2920      FEFFFF
 2921 1f30 488D3500 		leaq	.LC20(%rip), %rsi
 2921      000000
 2922 1f37 4889C7   		movq	%rax, %rdi
 2923 1f3a B8000000 		movl	$0, %eax
 2923      00
 2924 1f3f E8000000 		call	fprintf@PLT
 2924      00
 889:argtable2.c   ****                 break;
 2925              		.loc 1 889 0
 2926 1f44 EB25     		jmp	.L185
 2927              	.L190:
 890:argtable2.c   ****             default:
 891:argtable2.c   ****                 fprintf(fp, " [%s]...",syntax);
 2928              		.loc 1 891 0
 2929 1f46 488D9530 		leaq	-208(%rbp), %rdx
 2929      FFFFFF
 2930 1f4d 488B85F8 		movq	-264(%rbp), %rax
 2930      FEFFFF
 2931 1f54 488D3500 		leaq	.LC21(%rip), %rsi
 2931      000000
 2932 1f5b 4889C7   		movq	%rax, %rdi
 2933 1f5e B8000000 		movl	$0, %eax
 2933      00
 2934 1f63 E8000000 		call	fprintf@PLT
 2934      00
 892:argtable2.c   ****                 break;
 2935              		.loc 1 892 0
 2936 1f68 EB01     		jmp	.L185
 2937              	.L191:
 883:argtable2.c   ****             case 1:
 2938              		.loc 1 883 0
 2939 1f6a 90       		nop
 2940              	.L185:
 2941              	.LBE26:
 865:argtable2.c   ****         {
 2942              		.loc 1 865 0 discriminator 2
 2943 1f6b 83850CFF 		addl	$1, -244(%rbp)
 2943      FFFF01
 2944              	.L178:
 865:argtable2.c   ****         {
 2945              		.loc 1 865 0 is_stmt 0 discriminator 1
 2946 1f72 8B850CFF 		movl	-244(%rbp), %eax
 2946      FFFF
 2947 1f78 4898     		cltq
 2948 1f7a 488D14C5 		leaq	0(,%rax,8), %rdx
 2948      00000000 
 2949 1f82 488B8510 		movq	-240(%rbp), %rax
 2949      FFFFFF
 2950 1f89 4801D0   		addq	%rdx, %rax
 2951 1f8c 488B00   		movq	(%rax), %rax
 2952 1f8f 4885C0   		testq	%rax, %rax
 2953 1f92 742E     		je	.L186
 865:argtable2.c   ****         {
 2954              		.loc 1 865 0 discriminator 3
 2955 1f94 8B850CFF 		movl	-244(%rbp), %eax
 2955      FFFF
 2956 1f9a 4898     		cltq
 2957 1f9c 488D14C5 		leaq	0(,%rax,8), %rdx
 2957      00000000 
 2958 1fa4 488B8510 		movq	-240(%rbp), %rax
 2958      FFFFFF
 2959 1fab 4801D0   		addq	%rdx, %rax
 2960 1fae 488B00   		movq	(%rax), %rax
 2961 1fb1 0FB600   		movzbl	(%rax), %eax
 2962 1fb4 0FBEC0   		movsbl	%al, %eax
 2963 1fb7 83E001   		andl	$1, %eax
 2964 1fba 85C0     		testl	%eax, %eax
 2965 1fbc 0F8477FD 		je	.L187
 2965      FFFF
 2966              	.L186:
 893:argtable2.c   ****             }
 894:argtable2.c   ****         }
 895:argtable2.c   **** 
 896:argtable2.c   ****     if (suffix)
 2967              		.loc 1 896 0 is_stmt 1
 2968 1fc2 4883BDE8 		cmpq	$0, -280(%rbp)
 2968      FEFFFF00 
 2969 1fca 7419     		je	.L192
 897:argtable2.c   ****         fprintf(fp,"%s",suffix);
 2970              		.loc 1 897 0
 2971 1fcc 488B95F8 		movq	-264(%rbp), %rdx
 2971      FEFFFF
 2972 1fd3 488B85E8 		movq	-280(%rbp), %rax
 2972      FEFFFF
 2973 1fda 4889D6   		movq	%rdx, %rsi
 2974 1fdd 4889C7   		movq	%rax, %rdi
 2975 1fe0 E8000000 		call	fputs@PLT
 2975      00
 2976              	.L192:
 898:argtable2.c   ****     }
 2977              		.loc 1 898 0
 2978 1fe5 90       		nop
 2979 1fe6 488B45F8 		movq	-8(%rbp), %rax
 2980 1fea 64483304 		xorq	%fs:40, %rax
 2980      25280000 
 2980      00
 2981 1ff3 7405     		je	.L189
 2982 1ff5 E8000000 		call	__stack_chk_fail@PLT
 2982      00
 2983              	.L189:
 2984 1ffa C9       		leave
 2985              		.cfi_def_cfa 7, 8
 2986 1ffb C3       		ret
 2987              		.cfi_endproc
 2988              	.LFE17:
 2990              		.section	.rodata
 2991              	.LC22:
 2992 00ca 2020252D 		.string	"  %-20s %s\n"
 2992      32307320 
 2992      25730A00 
 2993              	.LC23:
 2994 00d6 2C2000   		.string	", "
 2995              		.text
 2996              		.globl	arg_print_glossary
 2998              	arg_print_glossary:
 2999              	.LFB18:
 899:argtable2.c   **** 
 900:argtable2.c   **** 
 901:argtable2.c   **** void arg_print_glossary(FILE *fp, void **argtable, const char *format)
 902:argtable2.c   ****     {
 3000              		.loc 1 902 0
 3001              		.cfi_startproc
 3002 1ffc 55       		pushq	%rbp
 3003              		.cfi_def_cfa_offset 16
 3004              		.cfi_offset 6, -16
 3005 1ffd 4889E5   		movq	%rsp, %rbp
 3006              		.cfi_def_cfa_register 6
 3007 2000 4881EC20 		subq	$288, %rsp
 3007      010000
 3008 2007 4889BDF8 		movq	%rdi, -264(%rbp)
 3008      FEFFFF
 3009 200e 4889B5F0 		movq	%rsi, -272(%rbp)
 3009      FEFFFF
 3010 2015 488995E8 		movq	%rdx, -280(%rbp)
 3010      FEFFFF
 3011              		.loc 1 902 0
 3012 201c 64488B04 		movq	%fs:40, %rax
 3012      25280000 
 3012      00
 3013 2025 488945F8 		movq	%rax, -8(%rbp)
 3014 2029 31C0     		xorl	%eax, %eax
 903:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 3015              		.loc 1 903 0
 3016 202b 488B85F0 		movq	-272(%rbp), %rax
 3016      FEFFFF
 3017 2032 48898508 		movq	%rax, -248(%rbp)
 3017      FFFFFF
 904:argtable2.c   ****     int tabindex;
 905:argtable2.c   **** 
 906:argtable2.c   ****     format = format ? format : "  %-20s %s\n";
 3018              		.loc 1 906 0
 3019 2039 4883BDE8 		cmpq	$0, -280(%rbp)
 3019      FEFFFF00 
 3020 2041 7409     		je	.L194
 3021              		.loc 1 906 0 is_stmt 0 discriminator 1
 3022 2043 488B85E8 		movq	-280(%rbp), %rax
 3022      FEFFFF
 3023 204a EB07     		jmp	.L195
 3024              	.L194:
 3025              		.loc 1 906 0 discriminator 2
 3026 204c 488D0500 		leaq	.LC22(%rip), %rax
 3026      000000
 3027              	.L195:
 3028              		.loc 1 906 0 discriminator 4
 3029 2053 488985E8 		movq	%rax, -280(%rbp)
 3029      FEFFFF
 907:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 3030              		.loc 1 907 0 is_stmt 1 discriminator 4
 3031 205a C78504FF 		movl	$0, -252(%rbp)
 3031      FFFF0000 
 3031      0000
 3032 2064 E98F0100 		jmp	.L196
 3032      00
 3033              	.L198:
 908:argtable2.c   ****         {
 909:argtable2.c   ****         if (table[tabindex]->glossary)
 3034              		.loc 1 909 0
 3035 2069 8B8504FF 		movl	-252(%rbp), %eax
 3035      FFFF
 3036 206f 4898     		cltq
 3037 2071 488D14C5 		leaq	0(,%rax,8), %rdx
 3037      00000000 
 3038 2079 488B8508 		movq	-248(%rbp), %rax
 3038      FFFFFF
 3039 2080 4801D0   		addq	%rdx, %rax
 3040 2083 488B00   		movq	(%rax), %rax
 3041 2086 488B4020 		movq	32(%rax), %rax
 3042 208a 4885C0   		testq	%rax, %rax
 3043 208d 0F845E01 		je	.L197
 3043      0000
 3044              	.LBB27:
 910:argtable2.c   ****             {
 911:argtable2.c   ****             char syntax[200]="";
 3045              		.loc 1 911 0
 3046 2093 48C78530 		movq	$0, -208(%rbp)
 3046      FFFFFF00 
 3046      000000
 3047 209e 48C78538 		movq	$0, -200(%rbp)
 3047      FFFFFF00 
 3047      000000
 3048 20a9 488D9540 		leaq	-192(%rbp), %rdx
 3048      FFFFFF
 3049 20b0 B8000000 		movl	$0, %eax
 3049      00
 3050 20b5 B9170000 		movl	$23, %ecx
 3050      00
 3051 20ba 4889D7   		movq	%rdx, %rdi
 3052 20bd F348AB   		rep stosq
 912:argtable2.c   ****             const char *shortopts = table[tabindex]->shortopts;
 3053              		.loc 1 912 0
 3054 20c0 8B8504FF 		movl	-252(%rbp), %eax
 3054      FFFF
 3055 20c6 4898     		cltq
 3056 20c8 488D14C5 		leaq	0(,%rax,8), %rdx
 3056      00000000 
 3057 20d0 488B8508 		movq	-248(%rbp), %rax
 3057      FFFFFF
 3058 20d7 4801D0   		addq	%rdx, %rax
 3059 20da 488B00   		movq	(%rax), %rax
 3060 20dd 488B4008 		movq	8(%rax), %rax
 3061 20e1 48898510 		movq	%rax, -240(%rbp)
 3061      FFFFFF
 913:argtable2.c   ****             const char *longopts  = table[tabindex]->longopts;
 3062              		.loc 1 913 0
 3063 20e8 8B8504FF 		movl	-252(%rbp), %eax
 3063      FFFF
 3064 20ee 4898     		cltq
 3065 20f0 488D14C5 		leaq	0(,%rax,8), %rdx
 3065      00000000 
 3066 20f8 488B8508 		movq	-248(%rbp), %rax
 3066      FFFFFF
 3067 20ff 4801D0   		addq	%rdx, %rax
 3068 2102 488B00   		movq	(%rax), %rax
 3069 2105 488B4010 		movq	16(%rax), %rax
 3070 2109 48898518 		movq	%rax, -232(%rbp)
 3070      FFFFFF
 914:argtable2.c   ****             const char *datatype  = table[tabindex]->datatype;
 3071              		.loc 1 914 0
 3072 2110 8B8504FF 		movl	-252(%rbp), %eax
 3072      FFFF
 3073 2116 4898     		cltq
 3074 2118 488D14C5 		leaq	0(,%rax,8), %rdx
 3074      00000000 
 3075 2120 488B8508 		movq	-248(%rbp), %rax
 3075      FFFFFF
 3076 2127 4801D0   		addq	%rdx, %rax
 3077 212a 488B00   		movq	(%rax), %rax
 3078 212d 488B4018 		movq	24(%rax), %rax
 3079 2131 48898520 		movq	%rax, -224(%rbp)
 3079      FFFFFF
 915:argtable2.c   ****             const char *glossary  = table[tabindex]->glossary;
 3080              		.loc 1 915 0
 3081 2138 8B8504FF 		movl	-252(%rbp), %eax
 3081      FFFF
 3082 213e 4898     		cltq
 3083 2140 488D14C5 		leaq	0(,%rax,8), %rdx
 3083      00000000 
 3084 2148 488B8508 		movq	-248(%rbp), %rax
 3084      FFFFFF
 3085 214f 4801D0   		addq	%rdx, %rax
 3086 2152 488B00   		movq	(%rax), %rax
 3087 2155 488B4020 		movq	32(%rax), %rax
 3088 2159 48898528 		movq	%rax, -216(%rbp)
 3088      FFFFFF
 916:argtable2.c   ****             arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag
 3089              		.loc 1 916 0
 3090 2160 8B8504FF 		movl	-252(%rbp), %eax
 3090      FFFF
 3091 2166 4898     		cltq
 3092 2168 488D14C5 		leaq	0(,%rax,8), %rdx
 3092      00000000 
 3093 2170 488B8508 		movq	-248(%rbp), %rax
 3093      FFFFFF
 3094 2177 4801D0   		addq	%rdx, %rax
 3095 217a 488B00   		movq	(%rax), %rax
 3096 217d 0FB600   		movzbl	(%rax), %eax
 3097 2180 0FBEC0   		movsbl	%al, %eax
 3098 2183 83E004   		andl	$4, %eax
 3099 2186 4189C0   		movl	%eax, %r8d
 3100 2189 488BBD20 		movq	-224(%rbp), %rdi
 3100      FFFFFF
 3101 2190 488B8D18 		movq	-232(%rbp), %rcx
 3101      FFFFFF
 3102 2197 488B9510 		movq	-240(%rbp), %rdx
 3102      FFFFFF
 3103 219e 488D8530 		leaq	-208(%rbp), %rax
 3103      FFFFFF
 3104 21a5 4883EC08 		subq	$8, %rsp
 3105 21a9 488D3500 		leaq	.LC23(%rip), %rsi
 3105      000000
 3106 21b0 56       		pushq	%rsi
 3107 21b1 4589C1   		movl	%r8d, %r9d
 3108 21b4 4989F8   		movq	%rdi, %r8
 3109 21b7 BEC80000 		movl	$200, %esi
 3109      00
 3110 21bc 4889C7   		movq	%rax, %rdi
 3111 21bf E8D9F1FF 		call	arg_cat_optionv
 3111      FF
 3112 21c4 4883C410 		addq	$16, %rsp
 917:argtable2.c   ****             fprintf(fp,format,syntax,glossary);
 3113              		.loc 1 917 0
 3114 21c8 488B8D28 		movq	-216(%rbp), %rcx
 3114      FFFFFF
 3115 21cf 488D9530 		leaq	-208(%rbp), %rdx
 3115      FFFFFF
 3116 21d6 488BB5E8 		movq	-280(%rbp), %rsi
 3116      FEFFFF
 3117 21dd 488B85F8 		movq	-264(%rbp), %rax
 3117      FEFFFF
 3118 21e4 4889C7   		movq	%rax, %rdi
 3119 21e7 B8000000 		movl	$0, %eax
 3119      00
 3120 21ec E8000000 		call	fprintf@PLT
 3120      00
 3121              	.L197:
 3122              	.LBE27:
 907:argtable2.c   ****         {
 3123              		.loc 1 907 0 discriminator 2
 3124 21f1 838504FF 		addl	$1, -252(%rbp)
 3124      FFFF01
 3125              	.L196:
 907:argtable2.c   ****         {
 3126              		.loc 1 907 0 is_stmt 0 discriminator 1
 3127 21f8 8B8504FF 		movl	-252(%rbp), %eax
 3127      FFFF
 3128 21fe 4898     		cltq
 3129 2200 488D14C5 		leaq	0(,%rax,8), %rdx
 3129      00000000 
 3130 2208 488B8508 		movq	-248(%rbp), %rax
 3130      FFFFFF
 3131 220f 4801D0   		addq	%rdx, %rax
 3132 2212 488B00   		movq	(%rax), %rax
 3133 2215 0FB600   		movzbl	(%rax), %eax
 3134 2218 0FBEC0   		movsbl	%al, %eax
 3135 221b 83E001   		andl	$1, %eax
 3136 221e 85C0     		testl	%eax, %eax
 3137 2220 0F8443FE 		je	.L198
 3137      FFFF
 918:argtable2.c   ****             }
 919:argtable2.c   ****         }
 920:argtable2.c   ****     }
 3138              		.loc 1 920 0 is_stmt 1
 3139 2226 90       		nop
 3140 2227 488B45F8 		movq	-8(%rbp), %rax
 3141 222b 64483304 		xorq	%fs:40, %rax
 3141      25280000 
 3141      00
 3142 2234 7405     		je	.L199
 3143 2236 E8000000 		call	__stack_chk_fail@PLT
 3143      00
 3144              	.L199:
 3145 223b C9       		leave
 3146              		.cfi_def_cfa 7, 8
 3147 223c C3       		ret
 3148              		.cfi_endproc
 3149              	.LFE18:
 3151              		.section	.rodata
 3152              	.LC24:
 3153 00d9 25730A00 		.string	"%s\n"
 3154              		.text
 3156              	arg_print_formatted:
 3157              	.LFB19:
 921:argtable2.c   **** 
 922:argtable2.c   **** 
 923:argtable2.c   **** /**
 924:argtable2.c   ****  * Print a piece of text formatted, which means in a column with a
 925:argtable2.c   ****  * left and a right margin. The lines are wrapped at whitspaces next
 926:argtable2.c   ****  * to right margin. The function does not indent the first line, but
 927:argtable2.c   ****  * only the following ones.
 928:argtable2.c   ****  *
 929:argtable2.c   ****  * Example:
 930:argtable2.c   ****  * arg_print_formatted( fp, 0, 5, "Some text that doesn't fit." )
 931:argtable2.c   ****  * will result in the following output:
 932:argtable2.c   ****  *
 933:argtable2.c   ****  * Some
 934:argtable2.c   ****  * text
 935:argtable2.c   ****  * that
 936:argtable2.c   ****  * doesn'
 937:argtable2.c   ****  * t fit.
 938:argtable2.c   ****  *
 939:argtable2.c   ****  * Too long lines will be wrapped in the middle of a word.
 940:argtable2.c   ****  *
 941:argtable2.c   ****  * arg_print_formatted( fp, 2, 7, "Some text that doesn't fit." )
 942:argtable2.c   ****  * will result in the following output:
 943:argtable2.c   ****  *
 944:argtable2.c   ****  * Some
 945:argtable2.c   ****  *   text
 946:argtable2.c   ****  *   that
 947:argtable2.c   ****  *   doesn'
 948:argtable2.c   ****  *   t fit.
 949:argtable2.c   ****  *
 950:argtable2.c   ****  * As you see, the first line is not indented. This enables output of
 951:argtable2.c   ****  * lines, which start in a line where output already happened.
 952:argtable2.c   ****  *
 953:argtable2.c   ****  * Author: Uli Fouquet
 954:argtable2.c   ****  */
 955:argtable2.c   **** static
 956:argtable2.c   **** void arg_print_formatted( FILE *fp, const unsigned lmargin, const unsigned rmargin, const char *tex
 957:argtable2.c   ****     {
 3158              		.loc 1 957 0
 3159              		.cfi_startproc
 3160 223d 55       		pushq	%rbp
 3161              		.cfi_def_cfa_offset 16
 3162              		.cfi_offset 6, -16
 3163 223e 4889E5   		movq	%rsp, %rbp
 3164              		.cfi_def_cfa_register 6
 3165 2241 4883EC40 		subq	$64, %rsp
 3166 2245 48897DD8 		movq	%rdi, -40(%rbp)
 3167 2249 8975D4   		movl	%esi, -44(%rbp)
 3168 224c 8955D0   		movl	%edx, -48(%rbp)
 3169 224f 48894DC8 		movq	%rcx, -56(%rbp)
 958:argtable2.c   ****     const unsigned textlen = strlen( text );
 3170              		.loc 1 958 0
 3171 2253 488B45C8 		movq	-56(%rbp), %rax
 3172 2257 4889C7   		movq	%rax, %rdi
 3173 225a E8000000 		call	strlen@PLT
 3173      00
 3174 225f 8945F8   		movl	%eax, -8(%rbp)
 959:argtable2.c   ****     unsigned line_start = 0;
 3175              		.loc 1 959 0
 3176 2262 C745EC00 		movl	$0, -20(%rbp)
 3176      000000
 960:argtable2.c   ****     unsigned line_end = textlen + 1;
 3177              		.loc 1 960 0
 3178 2269 8B45F8   		movl	-8(%rbp), %eax
 3179 226c 83C001   		addl	$1, %eax
 3180 226f 8945F0   		movl	%eax, -16(%rbp)
 961:argtable2.c   ****     const unsigned colwidth = (rmargin - lmargin) + 1;
 3181              		.loc 1 961 0
 3182 2272 8B45D0   		movl	-48(%rbp), %eax
 3183 2275 2B45D4   		subl	-44(%rbp), %eax
 3184 2278 83C001   		addl	$1, %eax
 3185 227b 8945FC   		movl	%eax, -4(%rbp)
 962:argtable2.c   **** 
 963:argtable2.c   ****     /* Someone doesn't like us... */
 964:argtable2.c   ****     if ( line_end < line_start )
 3186              		.loc 1 964 0
 3187 227e 8B45F0   		movl	-16(%rbp), %eax
 3188 2281 3B45EC   		cmpl	-20(%rbp), %eax
 3189 2284 0F832C01 		jnb	.L202
 3189      0000
 965:argtable2.c   ****         { fprintf( fp, "%s\n", text ); }
 3190              		.loc 1 965 0
 3191 228a 488B55C8 		movq	-56(%rbp), %rdx
 3192 228e 488B45D8 		movq	-40(%rbp), %rax
 3193 2292 488D3500 		leaq	.LC24(%rip), %rsi
 3193      000000
 3194 2299 4889C7   		movq	%rax, %rdi
 3195 229c B8000000 		movl	$0, %eax
 3195      00
 3196 22a1 E8000000 		call	fprintf@PLT
 3196      00
 966:argtable2.c   **** 
 967:argtable2.c   ****     while (line_end-1 > line_start ) 
 3197              		.loc 1 967 0
 3198 22a6 E90B0100 		jmp	.L202
 3198      00
 3199              	.L204:
 968:argtable2.c   ****         {
 969:argtable2.c   ****         /* Eat leading whitespaces. This is essential because while
 970:argtable2.c   ****            wrapping lines, there will often be a whitespace at beginning
 971:argtable2.c   ****            of line  */
 972:argtable2.c   ****         while ( isspace(*(text+line_start)) ) 
 973:argtable2.c   ****             { line_start++; }
 3200              		.loc 1 973 0
 3201 22ab 8345EC01 		addl	$1, -20(%rbp)
 3202              	.L203:
 972:argtable2.c   ****             { line_start++; }
 3203              		.loc 1 972 0
 3204 22af E8000000 		call	__ctype_b_loc@PLT
 3204      00
 3205 22b4 488B00   		movq	(%rax), %rax
 3206 22b7 8B4DEC   		movl	-20(%rbp), %ecx
 3207 22ba 488B55C8 		movq	-56(%rbp), %rdx
 3208 22be 4801CA   		addq	%rcx, %rdx
 3209 22c1 0FB612   		movzbl	(%rdx), %edx
 3210 22c4 480FBED2 		movsbq	%dl, %rdx
 3211 22c8 4801D2   		addq	%rdx, %rdx
 3212 22cb 4801D0   		addq	%rdx, %rax
 3213 22ce 0FB700   		movzwl	(%rax), %eax
 3214 22d1 0FB7C0   		movzwl	%ax, %eax
 3215 22d4 25002000 		andl	$8192, %eax
 3215      00
 3216 22d9 85C0     		testl	%eax, %eax
 3217 22db 75CE     		jne	.L204
 974:argtable2.c   **** 
 975:argtable2.c   ****         if ((line_end - line_start) > colwidth ) 
 3218              		.loc 1 975 0
 3219 22dd 8B45F0   		movl	-16(%rbp), %eax
 3220 22e0 2B45EC   		subl	-20(%rbp), %eax
 3221 22e3 3945FC   		cmpl	%eax, -4(%rbp)
 3222 22e6 7311     		jnb	.L206
 976:argtable2.c   ****             { line_end = line_start + colwidth; }
 3223              		.loc 1 976 0
 3224 22e8 8B55EC   		movl	-20(%rbp), %edx
 3225 22eb 8B45FC   		movl	-4(%rbp), %eax
 3226 22ee 01D0     		addl	%edx, %eax
 3227 22f0 8945F0   		movl	%eax, -16(%rbp)
 977:argtable2.c   **** 
 978:argtable2.c   ****         /* Find last whitespace, that fits into line */
 979:argtable2.c   ****         while ( ( line_end > line_start ) 
 3228              		.loc 1 979 0
 3229 22f3 EB04     		jmp	.L206
 3230              	.L208:
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 981:argtable2.c   ****                 && !isspace(*(text+line_end))) 
 982:argtable2.c   ****             { line_end--; }
 3231              		.loc 1 982 0
 3232 22f5 836DF001 		subl	$1, -16(%rbp)
 3233              	.L206:
 979:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 3234              		.loc 1 979 0
 3235 22f9 8B45F0   		movl	-16(%rbp), %eax
 3236 22fc 3B45EC   		cmpl	-20(%rbp), %eax
 3237 22ff 7639     		jbe	.L207
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 3238              		.loc 1 980 0
 3239 2301 8B45F0   		movl	-16(%rbp), %eax
 3240 2304 2B45EC   		subl	-20(%rbp), %eax
 3241 2307 3945FC   		cmpl	%eax, -4(%rbp)
 3242 230a 732E     		jnb	.L207
 981:argtable2.c   ****             { line_end--; }
 3243              		.loc 1 981 0
 3244 230c E8000000 		call	__ctype_b_loc@PLT
 3244      00
 3245 2311 488B00   		movq	(%rax), %rax
 3246 2314 8B4DF0   		movl	-16(%rbp), %ecx
 3247 2317 488B55C8 		movq	-56(%rbp), %rdx
 3248 231b 4801CA   		addq	%rcx, %rdx
 3249 231e 0FB612   		movzbl	(%rdx), %edx
 3250 2321 480FBED2 		movsbq	%dl, %rdx
 3251 2325 4801D2   		addq	%rdx, %rdx
 3252 2328 4801D0   		addq	%rdx, %rax
 3253 232b 0FB700   		movzwl	(%rax), %eax
 3254 232e 0FB7C0   		movzwl	%ax, %eax
 3255 2331 25002000 		andl	$8192, %eax
 3255      00
 3256 2336 85C0     		testl	%eax, %eax
 3257 2338 74BB     		je	.L208
 3258              	.L207:
 983:argtable2.c   **** 
 984:argtable2.c   ****         /* Do not print trailing whitespace. If this text
 985:argtable2.c   ****            has got only one line, line_end now points to the
 986:argtable2.c   ****            last char due to initialization. */
 987:argtable2.c   ****         line_end--;
 3259              		.loc 1 987 0
 3260 233a 836DF001 		subl	$1, -16(%rbp)
 988:argtable2.c   **** 
 989:argtable2.c   ****         /* Output line of text */
 990:argtable2.c   ****         while ( line_start < line_end ) 
 3261              		.loc 1 990 0
 3262 233e EB22     		jmp	.L209
 3263              	.L210:
 991:argtable2.c   ****             {
 992:argtable2.c   ****             fputc(*(text+line_start), fp );
 3264              		.loc 1 992 0
 3265 2340 8B55EC   		movl	-20(%rbp), %edx
 3266 2343 488B45C8 		movq	-56(%rbp), %rax
 3267 2347 4801D0   		addq	%rdx, %rax
 3268 234a 0FB600   		movzbl	(%rax), %eax
 3269 234d 0FBEC0   		movsbl	%al, %eax
 3270 2350 488B55D8 		movq	-40(%rbp), %rdx
 3271 2354 4889D6   		movq	%rdx, %rsi
 3272 2357 89C7     		movl	%eax, %edi
 3273 2359 E8000000 		call	fputc@PLT
 3273      00
 993:argtable2.c   ****             line_start++;
 3274              		.loc 1 993 0
 3275 235e 8345EC01 		addl	$1, -20(%rbp)
 3276              	.L209:
 990:argtable2.c   ****             {
 3277              		.loc 1 990 0
 3278 2362 8B45EC   		movl	-20(%rbp), %eax
 3279 2365 3B45F0   		cmpl	-16(%rbp), %eax
 3280 2368 72D6     		jb	.L210
 994:argtable2.c   ****             }
 995:argtable2.c   ****         fputc( '\n', fp );
 3281              		.loc 1 995 0
 3282 236a 488B45D8 		movq	-40(%rbp), %rax
 3283 236e 4889C6   		movq	%rax, %rsi
 3284 2371 BF0A0000 		movl	$10, %edi
 3284      00
 3285 2376 E8000000 		call	fputc@PLT
 3285      00
 996:argtable2.c   **** 
 997:argtable2.c   ****         /* Initialize another line */
 998:argtable2.c   ****         if ( line_end+1 < textlen ) 
 3286              		.loc 1 998 0
 3287 237b 8B45F0   		movl	-16(%rbp), %eax
 3288 237e 83C001   		addl	$1, %eax
 3289 2381 3945F8   		cmpl	%eax, -8(%rbp)
 3290 2384 762C     		jbe	.L211
 3291              	.LBB28:
 999:argtable2.c   ****             {
1000:argtable2.c   ****             unsigned i;
1001:argtable2.c   **** 
1002:argtable2.c   ****             for (i=0; i < lmargin; i++ )
 3292              		.loc 1 1002 0
 3293 2386 C745F400 		movl	$0, -12(%rbp)
 3293      000000
 3294 238d EB15     		jmp	.L212
 3295              	.L213:
1003:argtable2.c   ****                 { fputc( ' ', fp ); }
 3296              		.loc 1 1003 0 discriminator 3
 3297 238f 488B45D8 		movq	-40(%rbp), %rax
 3298 2393 4889C6   		movq	%rax, %rsi
 3299 2396 BF200000 		movl	$32, %edi
 3299      00
 3300 239b E8000000 		call	fputc@PLT
 3300      00
1002:argtable2.c   ****                 { fputc( ' ', fp ); }
 3301              		.loc 1 1002 0 discriminator 3
 3302 23a0 8345F401 		addl	$1, -12(%rbp)
 3303              	.L212:
1002:argtable2.c   ****                 { fputc( ' ', fp ); }
 3304              		.loc 1 1002 0 is_stmt 0 discriminator 1
 3305 23a4 8B45F4   		movl	-12(%rbp), %eax
 3306 23a7 3B45D4   		cmpl	-44(%rbp), %eax
 3307 23aa 72E3     		jb	.L213
1004:argtable2.c   **** 
1005:argtable2.c   ****             line_end = textlen;
 3308              		.loc 1 1005 0 is_stmt 1
 3309 23ac 8B45F8   		movl	-8(%rbp), %eax
 3310 23af 8945F0   		movl	%eax, -16(%rbp)
 3311              	.L211:
 3312              	.LBE28:
1006:argtable2.c   ****             }
1007:argtable2.c   **** 
1008:argtable2.c   ****         /* If we have to print another line, get also the last char. */
1009:argtable2.c   ****         line_end++;
 3313              		.loc 1 1009 0
 3314 23b2 8345F001 		addl	$1, -16(%rbp)
 3315              	.L202:
 967:argtable2.c   ****         {
 3316              		.loc 1 967 0
 3317 23b6 8B45F0   		movl	-16(%rbp), %eax
 3318 23b9 83E801   		subl	$1, %eax
 3319 23bc 3945EC   		cmpl	%eax, -20(%rbp)
 3320 23bf 0F82EAFE 		jb	.L203
 3320      FFFF
1010:argtable2.c   **** 
1011:argtable2.c   ****         } /* lines of text */
1012:argtable2.c   ****     }
 3321              		.loc 1 1012 0
 3322 23c5 90       		nop
 3323 23c6 C9       		leave
 3324              		.cfi_def_cfa 7, 8
 3325 23c7 C3       		ret
 3326              		.cfi_endproc
 3327              	.LFE19:
 3329              		.section	.rodata
 3330              	.LC25:
 3331 00dd 2020252D 		.string	"  %-25s %s\n"
 3331      32357320 
 3331      25730A00 
 3332              	.LC26:
 3333 00e9 2020252D 		.string	"  %-25s "
 3333      32357320 
 3333      00
 3334              		.text
 3335              		.globl	arg_print_glossary_gnu
 3337              	arg_print_glossary_gnu:
 3338              	.LFB20:
1013:argtable2.c   **** 
1014:argtable2.c   **** /**
1015:argtable2.c   ****  * Prints the glossary in strict GNU format. 
1016:argtable2.c   ****  * Differences to arg_print_glossary() are:
1017:argtable2.c   ****  *  - wraps lines after 80 chars
1018:argtable2.c   ****  *  - indents lines without shortops
1019:argtable2.c   ****  *  - does not accept formatstrings
1020:argtable2.c   ****  *
1021:argtable2.c   ****  * Contributed by Uli Fouquet
1022:argtable2.c   ****  */
1023:argtable2.c   **** void arg_print_glossary_gnu(FILE *fp, void **argtable )
1024:argtable2.c   ****     {
 3339              		.loc 1 1024 0
 3340              		.cfi_startproc
 3341 23c8 55       		pushq	%rbp
 3342              		.cfi_def_cfa_offset 16
 3343              		.cfi_offset 6, -16
 3344 23c9 4889E5   		movq	%rsp, %rbp
 3345              		.cfi_def_cfa_register 6
 3346 23cc 4881EC10 		subq	$272, %rsp
 3346      010000
 3347 23d3 4889BDF8 		movq	%rdi, -264(%rbp)
 3347      FEFFFF
 3348 23da 4889B5F0 		movq	%rsi, -272(%rbp)
 3348      FEFFFF
 3349              		.loc 1 1024 0
 3350 23e1 64488B04 		movq	%fs:40, %rax
 3350      25280000 
 3350      00
 3351 23ea 488945F8 		movq	%rax, -8(%rbp)
 3352 23ee 31C0     		xorl	%eax, %eax
1025:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 3353              		.loc 1 1025 0
 3354 23f0 488B85F0 		movq	-272(%rbp), %rax
 3354      FEFFFF
 3355 23f7 48898508 		movq	%rax, -248(%rbp)
 3355      FFFFFF
1026:argtable2.c   ****     int tabindex;
1027:argtable2.c   **** 
1028:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 3356              		.loc 1 1028 0
 3357 23fe C78504FF 		movl	$0, -252(%rbp)
 3357      FFFF0000 
 3357      0000
 3358 2408 E9240200 		jmp	.L216
 3358      00
 3359              	.L220:
1029:argtable2.c   ****         {
1030:argtable2.c   ****         if (table[tabindex]->glossary)
 3360              		.loc 1 1030 0
 3361 240d 8B8504FF 		movl	-252(%rbp), %eax
 3361      FFFF
 3362 2413 4898     		cltq
 3363 2415 488D14C5 		leaq	0(,%rax,8), %rdx
 3363      00000000 
 3364 241d 488B8508 		movq	-248(%rbp), %rax
 3364      FFFFFF
 3365 2424 4801D0   		addq	%rdx, %rax
 3366 2427 488B00   		movq	(%rax), %rax
 3367 242a 488B4020 		movq	32(%rax), %rax
 3368 242e 4885C0   		testq	%rax, %rax
 3369 2431 0F84F301 		je	.L217
 3369      0000
 3370              	.LBB29:
1031:argtable2.c   ****             {
1032:argtable2.c   ****             char syntax[200]="";
 3371              		.loc 1 1032 0
 3372 2437 48C78530 		movq	$0, -208(%rbp)
 3372      FFFFFF00 
 3372      000000
 3373 2442 48C78538 		movq	$0, -200(%rbp)
 3373      FFFFFF00 
 3373      000000
 3374 244d 488D9540 		leaq	-192(%rbp), %rdx
 3374      FFFFFF
 3375 2454 B8000000 		movl	$0, %eax
 3375      00
 3376 2459 B9170000 		movl	$23, %ecx
 3376      00
 3377 245e 4889D7   		movq	%rdx, %rdi
 3378 2461 F348AB   		rep stosq
1033:argtable2.c   ****             const char *shortopts = table[tabindex]->shortopts;
 3379              		.loc 1 1033 0
 3380 2464 8B8504FF 		movl	-252(%rbp), %eax
 3380      FFFF
 3381 246a 4898     		cltq
 3382 246c 488D14C5 		leaq	0(,%rax,8), %rdx
 3382      00000000 
 3383 2474 488B8508 		movq	-248(%rbp), %rax
 3383      FFFFFF
 3384 247b 4801D0   		addq	%rdx, %rax
 3385 247e 488B00   		movq	(%rax), %rax
 3386 2481 488B4008 		movq	8(%rax), %rax
 3387 2485 48898510 		movq	%rax, -240(%rbp)
 3387      FFFFFF
1034:argtable2.c   ****             const char *longopts  = table[tabindex]->longopts;
 3388              		.loc 1 1034 0
 3389 248c 8B8504FF 		movl	-252(%rbp), %eax
 3389      FFFF
 3390 2492 4898     		cltq
 3391 2494 488D14C5 		leaq	0(,%rax,8), %rdx
 3391      00000000 
 3392 249c 488B8508 		movq	-248(%rbp), %rax
 3392      FFFFFF
 3393 24a3 4801D0   		addq	%rdx, %rax
 3394 24a6 488B00   		movq	(%rax), %rax
 3395 24a9 488B4010 		movq	16(%rax), %rax
 3396 24ad 48898518 		movq	%rax, -232(%rbp)
 3396      FFFFFF
1035:argtable2.c   ****             const char *datatype  = table[tabindex]->datatype;
 3397              		.loc 1 1035 0
 3398 24b4 8B8504FF 		movl	-252(%rbp), %eax
 3398      FFFF
 3399 24ba 4898     		cltq
 3400 24bc 488D14C5 		leaq	0(,%rax,8), %rdx
 3400      00000000 
 3401 24c4 488B8508 		movq	-248(%rbp), %rax
 3401      FFFFFF
 3402 24cb 4801D0   		addq	%rdx, %rax
 3403 24ce 488B00   		movq	(%rax), %rax
 3404 24d1 488B4018 		movq	24(%rax), %rax
 3405 24d5 48898520 		movq	%rax, -224(%rbp)
 3405      FFFFFF
1036:argtable2.c   ****             const char *glossary  = table[tabindex]->glossary;
 3406              		.loc 1 1036 0
 3407 24dc 8B8504FF 		movl	-252(%rbp), %eax
 3407      FFFF
 3408 24e2 4898     		cltq
 3409 24e4 488D14C5 		leaq	0(,%rax,8), %rdx
 3409      00000000 
 3410 24ec 488B8508 		movq	-248(%rbp), %rax
 3410      FFFFFF
 3411 24f3 4801D0   		addq	%rdx, %rax
 3412 24f6 488B00   		movq	(%rax), %rax
 3413 24f9 488B4020 		movq	32(%rax), %rax
 3414 24fd 48898528 		movq	%rax, -216(%rbp)
 3414      FFFFFF
1037:argtable2.c   **** 
1038:argtable2.c   ****             if ( !shortopts && longopts ) 
 3415              		.loc 1 1038 0
 3416 2504 4883BD10 		cmpq	$0, -240(%rbp)
 3416      FFFFFF00 
 3417 250c 752A     		jne	.L218
 3418              		.loc 1 1038 0 is_stmt 0 discriminator 1
 3419 250e 4883BD18 		cmpq	$0, -232(%rbp)
 3419      FFFFFF00 
 3420 2516 7420     		je	.L218
1039:argtable2.c   ****                 {
1040:argtable2.c   ****                 /* Indent trailing line by 4 spaces... */
1041:argtable2.c   ****                 memset( syntax, ' ', 4 );
 3421              		.loc 1 1041 0 is_stmt 1
 3422 2518 488D8530 		leaq	-208(%rbp), %rax
 3422      FFFFFF
 3423 251f BA040000 		movl	$4, %edx
 3423      00
 3424 2524 BE200000 		movl	$32, %esi
 3424      00
 3425 2529 4889C7   		movq	%rax, %rdi
 3426 252c E8000000 		call	memset@PLT
 3426      00
1042:argtable2.c   ****                 *(syntax+4) = '\0';
 3427              		.loc 1 1042 0
 3428 2531 C68534FF 		movb	$0, -204(%rbp)
 3428      FFFF00
 3429              	.L218:
1043:argtable2.c   ****                 }
1044:argtable2.c   **** 
1045:argtable2.c   ****             arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag
 3430              		.loc 1 1045 0
 3431 2538 8B8504FF 		movl	-252(%rbp), %eax
 3431      FFFF
 3432 253e 4898     		cltq
 3433 2540 488D14C5 		leaq	0(,%rax,8), %rdx
 3433      00000000 
 3434 2548 488B8508 		movq	-248(%rbp), %rax
 3434      FFFFFF
 3435 254f 4801D0   		addq	%rdx, %rax
 3436 2552 488B00   		movq	(%rax), %rax
 3437 2555 0FB600   		movzbl	(%rax), %eax
 3438 2558 0FBEC0   		movsbl	%al, %eax
 3439 255b 83E004   		andl	$4, %eax
 3440 255e 4189C0   		movl	%eax, %r8d
 3441 2561 488BBD20 		movq	-224(%rbp), %rdi
 3441      FFFFFF
 3442 2568 488B8D18 		movq	-232(%rbp), %rcx
 3442      FFFFFF
 3443 256f 488B9510 		movq	-240(%rbp), %rdx
 3443      FFFFFF
 3444 2576 488D8530 		leaq	-208(%rbp), %rax
 3444      FFFFFF
 3445 257d 4883EC08 		subq	$8, %rsp
 3446 2581 488D3500 		leaq	.LC23(%rip), %rsi
 3446      000000
 3447 2588 56       		pushq	%rsi
 3448 2589 4589C1   		movl	%r8d, %r9d
 3449 258c 4989F8   		movq	%rdi, %r8
 3450 258f BEC80000 		movl	$200, %esi
 3450      00
 3451 2594 4889C7   		movq	%rax, %rdi
 3452 2597 E801EEFF 		call	arg_cat_optionv
 3452      FF
 3453 259c 4883C410 		addq	$16, %rsp
1046:argtable2.c   **** 
1047:argtable2.c   ****             /* If syntax fits not into column, print glossary in new line... */
1048:argtable2.c   ****             if ( strlen(syntax) > 25 ) 
 3454              		.loc 1 1048 0
 3455 25a0 488D8530 		leaq	-208(%rbp), %rax
 3455      FFFFFF
 3456 25a7 4889C7   		movq	%rax, %rdi
 3457 25aa E8000000 		call	strlen@PLT
 3457      00
 3458 25af 4883F819 		cmpq	$25, %rax
 3459 25b3 7630     		jbe	.L219
1049:argtable2.c   ****                 {
1050:argtable2.c   ****                 fprintf( fp, "  %-25s %s\n", syntax, "" );
 3460              		.loc 1 1050 0
 3461 25b5 488D9530 		leaq	-208(%rbp), %rdx
 3461      FFFFFF
 3462 25bc 488B85F8 		movq	-264(%rbp), %rax
 3462      FEFFFF
 3463 25c3 488D0D00 		leaq	.LC12(%rip), %rcx
 3463      000000
 3464 25ca 488D3500 		leaq	.LC25(%rip), %rsi
 3464      000000
 3465 25d1 4889C7   		movq	%rax, %rdi
 3466 25d4 B8000000 		movl	$0, %eax
 3466      00
 3467 25d9 E8000000 		call	fprintf@PLT
 3467      00
1051:argtable2.c   ****                 *syntax = '\0';
 3468              		.loc 1 1051 0
 3469 25de C68530FF 		movb	$0, -208(%rbp)
 3469      FFFF00
 3470              	.L219:
1052:argtable2.c   ****                 }
1053:argtable2.c   **** 
1054:argtable2.c   ****             fprintf( fp, "  %-25s ", syntax );
 3471              		.loc 1 1054 0
 3472 25e5 488D9530 		leaq	-208(%rbp), %rdx
 3472      FFFFFF
 3473 25ec 488B85F8 		movq	-264(%rbp), %rax
 3473      FEFFFF
 3474 25f3 488D3500 		leaq	.LC26(%rip), %rsi
 3474      000000
 3475 25fa 4889C7   		movq	%rax, %rdi
 3476 25fd B8000000 		movl	$0, %eax
 3476      00
 3477 2602 E8000000 		call	fprintf@PLT
 3477      00
1055:argtable2.c   ****             arg_print_formatted( fp, 28, 79, glossary );
 3478              		.loc 1 1055 0
 3479 2607 488B9528 		movq	-216(%rbp), %rdx
 3479      FFFFFF
 3480 260e 488B85F8 		movq	-264(%rbp), %rax
 3480      FEFFFF
 3481 2615 4889D1   		movq	%rdx, %rcx
 3482 2618 BA4F0000 		movl	$79, %edx
 3482      00
 3483 261d BE1C0000 		movl	$28, %esi
 3483      00
 3484 2622 4889C7   		movq	%rax, %rdi
 3485 2625 E813FCFF 		call	arg_print_formatted
 3485      FF
 3486              	.L217:
 3487              	.LBE29:
1028:argtable2.c   ****         {
 3488              		.loc 1 1028 0 discriminator 2
 3489 262a 838504FF 		addl	$1, -252(%rbp)
 3489      FFFF01
 3490              	.L216:
1028:argtable2.c   ****         {
 3491              		.loc 1 1028 0 is_stmt 0 discriminator 1
 3492 2631 8B8504FF 		movl	-252(%rbp), %eax
 3492      FFFF
 3493 2637 4898     		cltq
 3494 2639 488D14C5 		leaq	0(,%rax,8), %rdx
 3494      00000000 
 3495 2641 488B8508 		movq	-248(%rbp), %rax
 3495      FFFFFF
 3496 2648 4801D0   		addq	%rdx, %rax
 3497 264b 488B00   		movq	(%rax), %rax
 3498 264e 0FB600   		movzbl	(%rax), %eax
 3499 2651 0FBEC0   		movsbl	%al, %eax
 3500 2654 83E001   		andl	$1, %eax
 3501 2657 85C0     		testl	%eax, %eax
 3502 2659 0F84AEFD 		je	.L220
 3502      FFFF
1056:argtable2.c   ****             }
1057:argtable2.c   ****         } /* for each table entry */
1058:argtable2.c   **** 
1059:argtable2.c   ****     fputc( '\n', fp );
 3503              		.loc 1 1059 0 is_stmt 1
 3504 265f 488B85F8 		movq	-264(%rbp), %rax
 3504      FEFFFF
 3505 2666 4889C6   		movq	%rax, %rsi
 3506 2669 BF0A0000 		movl	$10, %edi
 3506      00
 3507 266e E8000000 		call	fputc@PLT
 3507      00
1060:argtable2.c   ****     }
 3508              		.loc 1 1060 0
 3509 2673 90       		nop
 3510 2674 488B45F8 		movq	-8(%rbp), %rax
 3511 2678 64483304 		xorq	%fs:40, %rax
 3511      25280000 
 3511      00
 3512 2681 7405     		je	.L221
 3513 2683 E8000000 		call	__stack_chk_fail@PLT
 3513      00
 3514              	.L221:
 3515 2688 C9       		leave
 3516              		.cfi_def_cfa 7, 8
 3517 2689 C3       		ret
 3518              		.cfi_endproc
 3519              	.LFE20:
 3521              		.globl	arg_nullcheck
 3523              	arg_nullcheck:
 3524              	.LFB21:
1061:argtable2.c   **** 
1062:argtable2.c   **** 
1063:argtable2.c   **** /**
1064:argtable2.c   ****  * Checks the argtable[] array for NULL entries and returns 1
1065:argtable2.c   ****  * if any are found, zero otherwise.
1066:argtable2.c   ****  */
1067:argtable2.c   **** int arg_nullcheck(void **argtable)
1068:argtable2.c   ****     {
 3525              		.loc 1 1068 0
 3526              		.cfi_startproc
 3527 268a 55       		pushq	%rbp
 3528              		.cfi_def_cfa_offset 16
 3529              		.cfi_offset 6, -16
 3530 268b 4889E5   		movq	%rsp, %rbp
 3531              		.cfi_def_cfa_register 6
 3532 268e 48897DE8 		movq	%rdi, -24(%rbp)
1069:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr **)argtable;
 3533              		.loc 1 1069 0
 3534 2692 488B45E8 		movq	-24(%rbp), %rax
 3535 2696 488945F8 		movq	%rax, -8(%rbp)
1070:argtable2.c   ****     int tabindex;
1071:argtable2.c   ****     /*printf("arg_nullcheck(%p)\n",argtable);*/
1072:argtable2.c   **** 
1073:argtable2.c   ****     if (!table)
 3536              		.loc 1 1073 0
 3537 269a 48837DF8 		cmpq	$0, -8(%rbp)
 3537      00
 3538 269f 7507     		jne	.L223
1074:argtable2.c   ****         return 1;
 3539              		.loc 1 1074 0
 3540 26a1 B8010000 		movl	$1, %eax
 3540      00
 3541 26a6 EB59     		jmp	.L224
 3542              	.L223:
1075:argtable2.c   **** 
1076:argtable2.c   ****     tabindex=0;
 3543              		.loc 1 1076 0
 3544 26a8 C745F400 		movl	$0, -12(%rbp)
 3544      000000
 3545              	.L226:
1077:argtable2.c   ****     do
1078:argtable2.c   ****         {
1079:argtable2.c   ****         /*printf("argtable[%d]=%p\n",tabindex,argtable[tabindex]);*/
1080:argtable2.c   ****         if (!table[tabindex])
 3546              		.loc 1 1080 0
 3547 26af 8B45F4   		movl	-12(%rbp), %eax
 3548 26b2 4898     		cltq
 3549 26b4 488D14C5 		leaq	0(,%rax,8), %rdx
 3549      00000000 
 3550 26bc 488B45F8 		movq	-8(%rbp), %rax
 3551 26c0 4801D0   		addq	%rdx, %rax
 3552 26c3 488B00   		movq	(%rax), %rax
 3553 26c6 4885C0   		testq	%rax, %rax
 3554 26c9 7507     		jne	.L225
1081:argtable2.c   ****             return 1;
 3555              		.loc 1 1081 0
 3556 26cb B8010000 		movl	$1, %eax
 3556      00
 3557 26d0 EB2F     		jmp	.L224
 3558              	.L225:
1082:argtable2.c   ****         } while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 3559              		.loc 1 1082 0
 3560 26d2 8B45F4   		movl	-12(%rbp), %eax
 3561 26d5 8D5001   		leal	1(%rax), %edx
 3562 26d8 8955F4   		movl	%edx, -12(%rbp)
 3563 26db 4898     		cltq
 3564 26dd 488D14C5 		leaq	0(,%rax,8), %rdx
 3564      00000000 
 3565 26e5 488B45F8 		movq	-8(%rbp), %rax
 3566 26e9 4801D0   		addq	%rdx, %rax
 3567 26ec 488B00   		movq	(%rax), %rax
 3568 26ef 0FB600   		movzbl	(%rax), %eax
 3569 26f2 0FBEC0   		movsbl	%al, %eax
 3570 26f5 83E001   		andl	$1, %eax
 3571 26f8 85C0     		testl	%eax, %eax
 3572 26fa 74B3     		je	.L226
1083:argtable2.c   **** 
1084:argtable2.c   ****     return 0;
 3573              		.loc 1 1084 0
 3574 26fc B8000000 		movl	$0, %eax
 3574      00
 3575              	.L224:
1085:argtable2.c   ****     }
 3576              		.loc 1 1085 0
 3577 2701 5D       		popq	%rbp
 3578              		.cfi_def_cfa 7, 8
 3579 2702 C3       		ret
 3580              		.cfi_endproc
 3581              	.LFE21:
 3583              		.globl	arg_free
 3585              	arg_free:
 3586              	.LFB22:
1086:argtable2.c   **** 
1087:argtable2.c   **** 
1088:argtable2.c   **** /*
1089:argtable2.c   ****  * arg_free() is deprecated in favour of arg_freetable() due to a flaw in its design.
1090:argtable2.c   ****  * The flaw results in memory leak in the (very rare) case that an intermediate
1091:argtable2.c   ****  * entry in the argtable array failed its memory allocation while others following
1092:argtable2.c   ****  * that entry were still allocated ok. Those subsequent allocations will not be
1093:argtable2.c   ****  * deallocated by arg_free().
1094:argtable2.c   ****  * Despite the unlikeliness of the problem occurring, and the even unlikelier event
1095:argtable2.c   ****  * that it has any deliterious effect, it is fixed regardless by replacing arg_free()
1096:argtable2.c   ****  * with the newer arg_freetable() function.
1097:argtable2.c   ****  * We still keep arg_free() for backwards compatibility.
1098:argtable2.c   ****  */
1099:argtable2.c   **** void arg_free(void **argtable)
1100:argtable2.c   ****     {
 3587              		.loc 1 1100 0
 3588              		.cfi_startproc
 3589 2703 55       		pushq	%rbp
 3590              		.cfi_def_cfa_offset 16
 3591              		.cfi_offset 6, -16
 3592 2704 4889E5   		movq	%rsp, %rbp
 3593              		.cfi_def_cfa_register 6
 3594 2707 4883EC20 		subq	$32, %rsp
 3595 270b 48897DE8 		movq	%rdi, -24(%rbp)
1101:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 3596              		.loc 1 1101 0
 3597 270f 488B45E8 		movq	-24(%rbp), %rax
 3598 2713 488945F8 		movq	%rax, -8(%rbp)
1102:argtable2.c   ****     int tabindex=0;
 3599              		.loc 1 1102 0
 3600 2717 C745F000 		movl	$0, -16(%rbp)
 3600      000000
 3601              	.L230:
1103:argtable2.c   ****     int flag;
1104:argtable2.c   ****     /*printf("arg_free(%p)\n",argtable);*/
1105:argtable2.c   ****     do
1106:argtable2.c   ****         {
1107:argtable2.c   ****         /*
1108:argtable2.c   ****         if we encounter a NULL entry then somewhat incorrectly we presume
1109:argtable2.c   ****         we have come to the end of the array. It isnt strictly true because
1110:argtable2.c   ****         an intermediate entry could be NULL with other non-NULL entries to follow.
1111:argtable2.c   ****         The subsequent argtable entries would then not be freed as they should.
1112:argtable2.c   ****         */
1113:argtable2.c   ****         if (table[tabindex]==NULL)
 3602              		.loc 1 1113 0
 3603 271e 8B45F0   		movl	-16(%rbp), %eax
 3604 2721 4898     		cltq
 3605 2723 488D14C5 		leaq	0(,%rax,8), %rdx
 3605      00000000 
 3606 272b 488B45F8 		movq	-8(%rbp), %rax
 3607 272f 4801D0   		addq	%rdx, %rax
 3608 2732 488B00   		movq	(%rax), %rax
 3609 2735 4885C0   		testq	%rax, %rax
 3610 2738 7470     		je	.L231
1114:argtable2.c   ****             break;
1115:argtable2.c   ****                     
1116:argtable2.c   ****         flag = table[tabindex]->flag;
 3611              		.loc 1 1116 0
 3612 273a 8B45F0   		movl	-16(%rbp), %eax
 3613 273d 4898     		cltq
 3614 273f 488D14C5 		leaq	0(,%rax,8), %rdx
 3614      00000000 
 3615 2747 488B45F8 		movq	-8(%rbp), %rax
 3616 274b 4801D0   		addq	%rdx, %rax
 3617 274e 488B00   		movq	(%rax), %rax
 3618 2751 0FB600   		movzbl	(%rax), %eax
 3619 2754 0FBEC0   		movsbl	%al, %eax
 3620 2757 8945F4   		movl	%eax, -12(%rbp)
1117:argtable2.c   ****         free(table[tabindex]);
 3621              		.loc 1 1117 0
 3622 275a 8B45F0   		movl	-16(%rbp), %eax
 3623 275d 4898     		cltq
 3624 275f 488D14C5 		leaq	0(,%rax,8), %rdx
 3624      00000000 
 3625 2767 488B45F8 		movq	-8(%rbp), %rax
 3626 276b 4801D0   		addq	%rdx, %rax
 3627 276e 488B00   		movq	(%rax), %rax
 3628 2771 4889C7   		movq	%rax, %rdi
 3629 2774 E8000000 		call	free@PLT
 3629      00
1118:argtable2.c   ****         table[tabindex++]=NULL;
 3630              		.loc 1 1118 0
 3631 2779 8B45F0   		movl	-16(%rbp), %eax
 3632 277c 8D5001   		leal	1(%rax), %edx
 3633 277f 8955F0   		movl	%edx, -16(%rbp)
 3634 2782 4898     		cltq
 3635 2784 488D14C5 		leaq	0(,%rax,8), %rdx
 3635      00000000 
 3636 278c 488B45F8 		movq	-8(%rbp), %rax
 3637 2790 4801D0   		addq	%rdx, %rax
 3638 2793 48C70000 		movq	$0, (%rax)
 3638      000000
1119:argtable2.c   ****         
1120:argtable2.c   ****         } while(!(flag&ARG_TERMINATOR));
 3639              		.loc 1 1120 0
 3640 279a 8B45F4   		movl	-12(%rbp), %eax
 3641 279d 83E001   		andl	$1, %eax
 3642 27a0 85C0     		testl	%eax, %eax
 3643 27a2 0F8476FF 		je	.L230
 3643      FFFF
1121:argtable2.c   ****     }
 3644              		.loc 1 1121 0
 3645 27a8 EB01     		jmp	.L229
 3646              	.L231:
1114:argtable2.c   ****                     
 3647              		.loc 1 1114 0
 3648 27aa 90       		nop
 3649              	.L229:
 3650              		.loc 1 1121 0
 3651 27ab 90       		nop
 3652 27ac C9       		leave
 3653              		.cfi_def_cfa 7, 8
 3654 27ad C3       		ret
 3655              		.cfi_endproc
 3656              	.LFE22:
 3658              		.globl	arg_freetable
 3660              	arg_freetable:
 3661              	.LFB23:
1122:argtable2.c   **** 
1123:argtable2.c   **** /* frees each non-NULL element of argtable[], where n is the size of the number of entries in the a
1124:argtable2.c   **** void arg_freetable(void **argtable, size_t n)
1125:argtable2.c   ****     {
 3662              		.loc 1 1125 0
 3663              		.cfi_startproc
 3664 27ae 55       		pushq	%rbp
 3665              		.cfi_def_cfa_offset 16
 3666              		.cfi_offset 6, -16
 3667 27af 4889E5   		movq	%rsp, %rbp
 3668              		.cfi_def_cfa_register 6
 3669 27b2 4883EC20 		subq	$32, %rsp
 3670 27b6 48897DE8 		movq	%rdi, -24(%rbp)
 3671 27ba 488975E0 		movq	%rsi, -32(%rbp)
1126:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 3672              		.loc 1 1126 0
 3673 27be 488B45E8 		movq	-24(%rbp), %rax
 3674 27c2 488945F8 		movq	%rax, -8(%rbp)
1127:argtable2.c   ****     int tabindex=0;
 3675              		.loc 1 1127 0
 3676 27c6 C745F400 		movl	$0, -12(%rbp)
 3676      000000
1128:argtable2.c   ****     /*printf("arg_freetable(%p)\n",argtable);*/
1129:argtable2.c   ****     for (tabindex=0; tabindex<n; tabindex++)
 3677              		.loc 1 1129 0
 3678 27cd C745F400 		movl	$0, -12(%rbp)
 3678      000000
 3679 27d4 EB5D     		jmp	.L233
 3680              	.L236:
1130:argtable2.c   ****         {
1131:argtable2.c   ****         if (table[tabindex]==NULL)
 3681              		.loc 1 1131 0
 3682 27d6 8B45F4   		movl	-12(%rbp), %eax
 3683 27d9 4898     		cltq
 3684 27db 488D14C5 		leaq	0(,%rax,8), %rdx
 3684      00000000 
 3685 27e3 488B45F8 		movq	-8(%rbp), %rax
 3686 27e7 4801D0   		addq	%rdx, %rax
 3687 27ea 488B00   		movq	(%rax), %rax
 3688 27ed 4885C0   		testq	%rax, %rax
 3689 27f0 743C     		je	.L237
1132:argtable2.c   ****             continue;
1133:argtable2.c   ****                     
1134:argtable2.c   ****         free(table[tabindex]);
 3690              		.loc 1 1134 0
 3691 27f2 8B45F4   		movl	-12(%rbp), %eax
 3692 27f5 4898     		cltq
 3693 27f7 488D14C5 		leaq	0(,%rax,8), %rdx
 3693      00000000 
 3694 27ff 488B45F8 		movq	-8(%rbp), %rax
 3695 2803 4801D0   		addq	%rdx, %rax
 3696 2806 488B00   		movq	(%rax), %rax
 3697 2809 4889C7   		movq	%rax, %rdi
 3698 280c E8000000 		call	free@PLT
 3698      00
1135:argtable2.c   ****         table[tabindex]=NULL;        
 3699              		.loc 1 1135 0
 3700 2811 8B45F4   		movl	-12(%rbp), %eax
 3701 2814 4898     		cltq
 3702 2816 488D14C5 		leaq	0(,%rax,8), %rdx
 3702      00000000 
 3703 281e 488B45F8 		movq	-8(%rbp), %rax
 3704 2822 4801D0   		addq	%rdx, %rax
 3705 2825 48C70000 		movq	$0, (%rax)
 3705      000000
 3706 282c EB01     		jmp	.L235
 3707              	.L237:
1132:argtable2.c   ****             continue;
 3708              		.loc 1 1132 0
 3709 282e 90       		nop
 3710              	.L235:
1129:argtable2.c   ****         {
 3711              		.loc 1 1129 0 discriminator 2
 3712 282f 8345F401 		addl	$1, -12(%rbp)
 3713              	.L233:
1129:argtable2.c   ****         {
 3714              		.loc 1 1129 0 is_stmt 0 discriminator 1
 3715 2833 8B45F4   		movl	-12(%rbp), %eax
 3716 2836 4898     		cltq
 3717 2838 483945E0 		cmpq	%rax, -32(%rbp)
 3718 283c 7798     		ja	.L236
1136:argtable2.c   ****         };
1137:argtable2.c   ****     }
 3719              		.loc 1 1137 0 is_stmt 1
 3720 283e 90       		nop
 3721 283f C9       		leave
 3722              		.cfi_def_cfa 7, 8
 3723 2840 C3       		ret
 3724              		.cfi_endproc
 3725              	.LFE23:
 3727              	.Letext0:
 3728              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 3729              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3730              		.file 4 "./getopt.h"
 3731              		.file 5 "/usr/include/unistd.h"
 3732              		.file 6 "/usr/include/libio.h"
 3733              		.file 7 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 3734              		.file 8 "/usr/include/stdio.h"
 3735              		.file 9 "/usr/include/time.h"
 3736              		.file 10 "/usr/include/ctype.h"
 3737              		.file 11 "argtable2.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 argtable2.c
     /tmp/ccV2Wlub.s:5      .text:0000000000000000 arg_register_error
     /tmp/ccV2Wlub.s:106    .text:00000000000000fe find_shortoption
     /tmp/ccV2Wlub.s:191    .text:000000000000019a dump_longoptions
     /tmp/ccV2Wlub.s:289    .text:00000000000002b5 alloc_longoptions
     /tmp/ccV2Wlub.s:616    .text:0000000000000623 alloc_shortoptions
     /tmp/ccV2Wlub.s:791    .text:00000000000007c6 arg_endindex
     /tmp/ccV2Wlub.s:831    .text:0000000000000804 arg_parse_tagged
     /tmp/ccV2Wlub.s:1151   .text:0000000000000b9b arg_parse_untagged
     /tmp/ccV2Wlub.s:1356   .text:0000000000000dc8 arg_parse_check
     /tmp/ccV2Wlub.s:1439   .text:0000000000000e94 arg_reset
     /tmp/ccV2Wlub.s:1509   .text:0000000000000f3c arg_parse
     /tmp/ccV2Wlub.s:1646   .text:0000000000001099 arg_cat
     /tmp/ccV2Wlub.s:1744   .text:0000000000001143 arg_cat_option
     /tmp/ccV2Wlub.s:1957   .text:000000000000139d arg_cat_optionv
     /tmp/ccV2Wlub.s:2188   .text:00000000000015e8 arg_print_option
     /tmp/ccV2Wlub.s:2278   .text:00000000000016fe arg_print_gnuswitch
     /tmp/ccV2Wlub.s:2517   .text:0000000000001969 arg_print_syntax
     /tmp/ccV2Wlub.s:2774   .text:0000000000001ced arg_print_syntaxv
     /tmp/ccV2Wlub.s:2998   .text:0000000000001ffc arg_print_glossary
     /tmp/ccV2Wlub.s:3156   .text:000000000000223d arg_print_formatted
     /tmp/ccV2Wlub.s:3337   .text:00000000000023c8 arg_print_glossary_gnu
     /tmp/ccV2Wlub.s:3523   .text:000000000000268a arg_nullcheck
     /tmp/ccV2Wlub.s:3585   .text:0000000000002703 arg_free
     /tmp/ccV2Wlub.s:3660   .text:00000000000027ae arg_freetable

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
strchr
printf
strlen
malloc
free
optind
opterr
optarg
optopt
getopt_long
strcspn
strncat
__stack_chk_fail
fputs
fprintf
__ctype_b_loc
fputc
memset
