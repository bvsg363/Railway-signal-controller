   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	__popcountdi2
   5              		.globl	popcount
   7              	popcount:
   8              	.LFB4:
   9              		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****  * Copyright (C) 2012-2014 Chris McClelland
   3:main.c        ****  *
   4:main.c        ****  * This program is free software: you can redistribute it and/or modify
   5:main.c        ****  * it under the terms of the GNU General Public License as published by
   6:main.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:main.c        ****  * (at your option) any later version.
   8:main.c        ****  *
   9:main.c        ****  * This program is distributed in the hope that it will be useful,
  10:main.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:main.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:main.c        ****  * GNU General Public License for more details.
  13:main.c        ****  *  
  14:main.c        ****  * You should have received a copy of the GNU General Public License
  15:main.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:main.c        ****  */
  17:main.c        **** #include <stdio.h>
  18:main.c        **** #include <stdlib.h>
  19:main.c        **** #include <string.h>
  20:main.c        **** #include <errno.h>
  21:main.c        **** #include <math.h>
  22:main.c        **** #include <unistd.h>
  23:main.c        **** #include <stdint.h>
  24:main.c        **** #include <makestuff.h>
  25:main.c        **** #include <libfpgalink.h>
  26:main.c        **** #include <libbuffer.h>
  27:main.c        **** #include <liberror.h>
  28:main.c        **** #include <libdump.h>
  29:main.c        **** #include <argtable2.h>
  30:main.c        **** #include <readline/readline.h>
  31:main.c        **** #include <readline/history.h>
  32:main.c        **** #ifdef WIN32
  33:main.c        **** #include <Windows.h>
  34:main.c        **** #else
  35:main.c        **** #include <sys/time.h>
  36:main.c        **** #endif
  37:main.c        **** #ifdef __GNUC__
  38:main.c        **** uint32 popcount(uint32 x) {
  10              		.loc 1 38 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 4883EC10 		subq	$16, %rsp
  18 0008 897DFC   		movl	%edi, -4(%rbp)
  39:main.c        ****   return __builtin_popcount(x);
  19              		.loc 1 39 0
  20 000b 8B45FC   		movl	-4(%rbp), %eax
  21 000e 4889C7   		movq	%rax, %rdi
  22 0011 E8000000 		call	__popcountdi2@PLT
  22      00
  23              	.LVL0:
  40:main.c        **** }
  24              		.loc 1 40 0
  25 0016 C9       		leave
  26              		.cfi_def_cfa 7, 8
  27 0017 C3       		ret
  28              		.cfi_endproc
  29              	.LFE4:
  31              		.local	ptr
  32              		.comm	ptr,8,8
  33              		.local	enableBenchmarking
  34              		.comm	enableBenchmarking,1,1
  36              	isHexDigit:
  37              	.LFB5:
  41:main.c        **** #else
  42:main.c        **** #error Unimplemented popcount
  43:main.c        **** #endif
  44:main.c        **** 
  45:main.c        **** bool sigIsRaised(void);
  46:main.c        **** void sigRegisterHandler(void);
  47:main.c        **** 
  48:main.c        **** static const char *ptr;
  49:main.c        **** static bool enableBenchmarking = false;
  50:main.c        **** 
  51:main.c        **** static bool isHexDigit(char ch) {
  38              		.loc 1 51 0
  39              		.cfi_startproc
  40 0018 55       		pushq	%rbp
  41              		.cfi_def_cfa_offset 16
  42              		.cfi_offset 6, -16
  43 0019 4889E5   		movq	%rsp, %rbp
  44              		.cfi_def_cfa_register 6
  45 001c 89F8     		movl	%edi, %eax
  46 001e 8845FC   		movb	%al, -4(%rbp)
  52:main.c        **** 	return
  53:main.c        **** 		(ch >= '0' && ch <= '9') ||
  54:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  47              		.loc 1 54 0
  48 0021 807DFC2F 		cmpb	$47, -4(%rbp)
  49 0025 7E06     		jle	.L4
  53:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  50              		.loc 1 53 0
  51 0027 807DFC39 		cmpb	$57, -4(%rbp)
  52 002b 7E18     		jle	.L5
  53              	.L4:
  53:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  54              		.loc 1 53 0 is_stmt 0 discriminator 1
  55 002d 807DFC60 		cmpb	$96, -4(%rbp)
  56 0031 7E06     		jle	.L6
  57              		.loc 1 54 0 is_stmt 1
  58 0033 807DFC66 		cmpb	$102, -4(%rbp)
  59 0037 7E0C     		jle	.L5
  60              	.L6:
  61              		.loc 1 54 0 is_stmt 0 discriminator 2
  62 0039 807DFC40 		cmpb	$64, -4(%rbp)
  63 003d 7E0D     		jle	.L7
  55:main.c        **** 		(ch >= 'A' && ch <= 'F');
  64              		.loc 1 55 0 is_stmt 1
  65 003f 807DFC46 		cmpb	$70, -4(%rbp)
  66 0043 7F07     		jg	.L7
  67              	.L5:
  54:main.c        **** 		(ch >= 'A' && ch <= 'F');
  68              		.loc 1 54 0 discriminator 1
  69 0045 B8010000 		movl	$1, %eax
  69      00
  70 004a EB05     		jmp	.L8
  71              	.L7:
  54:main.c        **** 		(ch >= 'A' && ch <= 'F');
  72              		.loc 1 54 0 is_stmt 0 discriminator 3
  73 004c B8000000 		movl	$0, %eax
  73      00
  74              	.L8:
  54:main.c        **** 		(ch >= 'A' && ch <= 'F');
  75              		.loc 1 54 0 discriminator 5
  76 0051 83E001   		andl	$1, %eax
  56:main.c        **** }
  77              		.loc 1 56 0 is_stmt 1 discriminator 5
  78 0054 5D       		popq	%rbp
  79              		.cfi_def_cfa 7, 8
  80 0055 C3       		ret
  81              		.cfi_endproc
  82              	.LFE5:
  85              	calcChecksum:
  86              	.LFB6:
  57:main.c        **** 
  58:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
  87              		.loc 1 58 0
  88              		.cfi_startproc
  89 0056 55       		pushq	%rbp
  90              		.cfi_def_cfa_offset 16
  91              		.cfi_offset 6, -16
  92 0057 4889E5   		movq	%rsp, %rbp
  93              		.cfi_def_cfa_register 6
  94 005a 48897DE8 		movq	%rdi, -24(%rbp)
  95 005e 488975E0 		movq	%rsi, -32(%rbp)
  59:main.c        **** 	uint16 cksum = 0x0000;
  96              		.loc 1 59 0
  97 0062 66C745FE 		movw	$0, -2(%rbp)
  97      0000
  60:main.c        **** 	while ( length-- ) {
  98              		.loc 1 60 0
  99 0068 EB16     		jmp	.L11
 100              	.L12:
  61:main.c        **** 		cksum = (uint16)(cksum + *data++);
 101              		.loc 1 61 0
 102 006a 488B45E8 		movq	-24(%rbp), %rax
 103 006e 488D5001 		leaq	1(%rax), %rdx
 104 0072 488955E8 		movq	%rdx, -24(%rbp)
 105 0076 0FB600   		movzbl	(%rax), %eax
 106 0079 0FB6C0   		movzbl	%al, %eax
 107 007c 660145FE 		addw	%ax, -2(%rbp)
 108              	.L11:
  60:main.c        **** 	while ( length-- ) {
 109              		.loc 1 60 0
 110 0080 488B45E0 		movq	-32(%rbp), %rax
 111 0084 488D50FF 		leaq	-1(%rax), %rdx
 112 0088 488955E0 		movq	%rdx, -32(%rbp)
 113 008c 4885C0   		testq	%rax, %rax
 114 008f 75D9     		jne	.L12
  62:main.c        **** 	}
  63:main.c        **** 	return cksum;
 115              		.loc 1 63 0
 116 0091 0FB745FE 		movzwl	-2(%rbp), %eax
  64:main.c        **** }
 117              		.loc 1 64 0
 118 0095 5D       		popq	%rbp
 119              		.cfi_def_cfa 7, 8
 120 0096 C3       		ret
 121              		.cfi_endproc
 122              	.LFE6:
 125              	getHexNibble:
 126              	.LFB7:
  65:main.c        **** 
  66:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 127              		.loc 1 66 0
 128              		.cfi_startproc
 129 0097 55       		pushq	%rbp
 130              		.cfi_def_cfa_offset 16
 131              		.cfi_offset 6, -16
 132 0098 4889E5   		movq	%rsp, %rbp
 133              		.cfi_def_cfa_register 6
 134 009b 89F8     		movl	%edi, %eax
 135 009d 488975F0 		movq	%rsi, -16(%rbp)
 136 00a1 8845FC   		movb	%al, -4(%rbp)
  67:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 137              		.loc 1 67 0
 138 00a4 807DFC2F 		cmpb	$47, -4(%rbp)
 139 00a8 7E1A     		jle	.L15
 140              		.loc 1 67 0 is_stmt 0 discriminator 1
 141 00aa 807DFC39 		cmpb	$57, -4(%rbp)
 142 00ae 7F14     		jg	.L15
  68:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 143              		.loc 1 68 0 is_stmt 1
 144 00b0 0FB645FC 		movzbl	-4(%rbp), %eax
 145 00b4 8D50D0   		leal	-48(%rax), %edx
 146 00b7 488B45F0 		movq	-16(%rbp), %rax
 147 00bb 8810     		movb	%dl, (%rax)
  69:main.c        **** 		return false;
 148              		.loc 1 69 0
 149 00bd B8000000 		movl	$0, %eax
 149      00
 150 00c2 EB45     		jmp	.L16
 151              	.L15:
  70:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 152              		.loc 1 70 0
 153 00c4 807DFC60 		cmpb	$96, -4(%rbp)
 154 00c8 7E1A     		jle	.L17
 155              		.loc 1 70 0 is_stmt 0 discriminator 1
 156 00ca 807DFC66 		cmpb	$102, -4(%rbp)
 157 00ce 7F14     		jg	.L17
  71:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 158              		.loc 1 71 0 is_stmt 1
 159 00d0 0FB645FC 		movzbl	-4(%rbp), %eax
 160 00d4 8D50A9   		leal	-87(%rax), %edx
 161 00d7 488B45F0 		movq	-16(%rbp), %rax
 162 00db 8810     		movb	%dl, (%rax)
  72:main.c        **** 		return false;
 163              		.loc 1 72 0
 164 00dd B8000000 		movl	$0, %eax
 164      00
 165 00e2 EB25     		jmp	.L16
 166              	.L17:
  73:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 167              		.loc 1 73 0
 168 00e4 807DFC40 		cmpb	$64, -4(%rbp)
 169 00e8 7E1A     		jle	.L18
 170              		.loc 1 73 0 is_stmt 0 discriminator 1
 171 00ea 807DFC46 		cmpb	$70, -4(%rbp)
 172 00ee 7F14     		jg	.L18
  74:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 173              		.loc 1 74 0 is_stmt 1
 174 00f0 0FB645FC 		movzbl	-4(%rbp), %eax
 175 00f4 8D50C9   		leal	-55(%rax), %edx
 176 00f7 488B45F0 		movq	-16(%rbp), %rax
 177 00fb 8810     		movb	%dl, (%rax)
  75:main.c        **** 		return false;
 178              		.loc 1 75 0
 179 00fd B8000000 		movl	$0, %eax
 179      00
 180 0102 EB05     		jmp	.L16
 181              	.L18:
  76:main.c        **** 	} else {
  77:main.c        **** 		return true;
 182              		.loc 1 77 0
 183 0104 B8010000 		movl	$1, %eax
 183      00
 184              	.L16:
  78:main.c        **** 	}
  79:main.c        **** }
 185              		.loc 1 79 0
 186 0109 5D       		popq	%rbp
 187              		.cfi_def_cfa 7, 8
 188 010a C3       		ret
 189              		.cfi_endproc
 190              	.LFE7:
 193              	getHexByte:
 194              	.LFB8:
  80:main.c        **** 
  81:main.c        **** static int getHexByte(uint8 *byte) {
 195              		.loc 1 81 0
 196              		.cfi_startproc
 197 010b 55       		pushq	%rbp
 198              		.cfi_def_cfa_offset 16
 199              		.cfi_offset 6, -16
 200 010c 4889E5   		movq	%rsp, %rbp
 201              		.cfi_def_cfa_register 6
 202 010f 4883EC20 		subq	$32, %rsp
 203 0113 48897DE8 		movq	%rdi, -24(%rbp)
 204              		.loc 1 81 0
 205 0117 64488B04 		movq	%fs:40, %rax
 205      25280000 
 205      00
 206 0120 488945F8 		movq	%rax, -8(%rbp)
 207 0124 31C0     		xorl	%eax, %eax
  82:main.c        **** 	uint8 upperNibble;
  83:main.c        **** 	uint8 lowerNibble;
  84:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 208              		.loc 1 84 0
 209 0126 488B0500 		movq	ptr(%rip), %rax
 209      000000
 210 012d 0FB600   		movzbl	(%rax), %eax
 211 0130 0FBEC0   		movsbl	%al, %eax
 212 0133 488D55F6 		leaq	-10(%rbp), %rdx
 213 0137 4889D6   		movq	%rdx, %rsi
 214 013a 89C7     		movl	%eax, %edi
 215 013c E856FFFF 		call	getHexNibble
 215      FF
 216 0141 83F001   		xorl	$1, %eax
 217 0144 84C0     		testb	%al, %al
 218 0146 744C     		je	.L20
 219              		.loc 1 84 0 is_stmt 0 discriminator 1
 220 0148 488B0500 		movq	ptr(%rip), %rax
 220      000000
 221 014f 4883C001 		addq	$1, %rax
 222 0153 0FB600   		movzbl	(%rax), %eax
 223 0156 0FBEC0   		movsbl	%al, %eax
 224 0159 488D55F7 		leaq	-9(%rbp), %rdx
 225 015d 4889D6   		movq	%rdx, %rsi
 226 0160 89C7     		movl	%eax, %edi
 227 0162 E830FFFF 		call	getHexNibble
 227      FF
 228 0167 83F001   		xorl	$1, %eax
 229 016a 84C0     		testb	%al, %al
 230 016c 7426     		je	.L20
  85:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 231              		.loc 1 85 0 is_stmt 1
 232 016e 0FB645F6 		movzbl	-10(%rbp), %eax
 233 0172 0FB6C0   		movzbl	%al, %eax
 234 0175 C1E004   		sall	$4, %eax
 235 0178 89C2     		movl	%eax, %edx
 236 017a 0FB645F7 		movzbl	-9(%rbp), %eax
 237 017e 09D0     		orl	%edx, %eax
 238 0180 89C2     		movl	%eax, %edx
 239 0182 488B45E8 		movq	-24(%rbp), %rax
 240 0186 8810     		movb	%dl, (%rax)
  86:main.c        **** 		byte += 2;
 241              		.loc 1 86 0
 242 0188 488345E8 		addq	$2, -24(%rbp)
 242      02
  87:main.c        **** 		return 0;
 243              		.loc 1 87 0
 244 018d B8000000 		movl	$0, %eax
 244      00
 245 0192 EB05     		jmp	.L22
 246              	.L20:
  88:main.c        **** 	} else {
  89:main.c        **** 		return 1;
 247              		.loc 1 89 0
 248 0194 B8010000 		movl	$1, %eax
 248      00
 249              	.L22:
  90:main.c        **** 	}
  91:main.c        **** }
 250              		.loc 1 91 0 discriminator 1
 251 0199 488B4DF8 		movq	-8(%rbp), %rcx
 252 019d 6448330C 		xorq	%fs:40, %rcx
 252      25280000 
 252      00
 253 01a6 7405     		je	.L23
 254              		.loc 1 91 0 is_stmt 0
 255 01a8 E8000000 		call	__stack_chk_fail@PLT
 255      00
 256              	.L23:
 257 01ad C9       		leave
 258              		.cfi_def_cfa 7, 8
 259 01ae C3       		ret
 260              		.cfi_endproc
 261              	.LFE8:
 263              		.section	.rodata
 264              	.LC0:
 265 0000 556E7061 		.string	"Unparseable hex number"
 265      72736561 
 265      626C6520 
 265      68657820 
 265      6E756D62 
 266              	.LC1:
 267 0017 4368616E 		.string	"Channel out of range"
 267      6E656C20 
 267      6F757420 
 267      6F662072 
 267      616E6765 
 268              	.LC2:
 269 002c 436F6E64 		.string	"Conduit out of range"
 269      75697420 
 269      6F757420 
 269      6F662072 
 269      616E6765 
 270              	.LC3:
 271 0041 496C6C65 		.string	"Illegal character"
 271      67616C20 
 271      63686172 
 271      61637465 
 271      7200
 272              	.LC4:
 273 0053 556E7465 		.string	"Unterminated string"
 273      726D696E 
 273      61746564 
 273      20737472 
 273      696E6700 
 274              	.LC5:
 275 0067 4E6F206D 		.string	"No memory"
 275      656D6F72 
 275      7900
 276              	.LC6:
 277 0071 456D7074 		.string	"Empty string"
 277      79207374 
 277      72696E67 
 277      00
 278              	.LC7:
 279 007e 4F646420 		.string	"Odd number of digits"
 279      6E756D62 
 279      6572206F 
 279      66206469 
 279      67697473 
 280              	.LC8:
 281 0093 43616E6E 		.string	"Cannot load file"
 281      6F74206C 
 281      6F616420 
 281      66696C65 
 281      00
 282              	.LC9:
 283 00a4 43616E6E 		.string	"Cannot save file"
 283      6F742073 
 283      61766520 
 283      66696C65 
 283      00
 284              	.LC10:
 285 00b5 42616420 		.string	"Bad arguments"
 285      61726775 
 285      6D656E74 
 285      7300
 286              		.section	.data.rel.ro.local,"aw",@progbits
 287              		.align 32
 290              	errMessages:
 291 0000 00000000 		.quad	0
 291      00000000 
 292 0008 00000000 		.quad	0
 292      00000000 
 293 0010 00000000 		.quad	.LC0
 293      00000000 
 294 0018 00000000 		.quad	.LC1
 294      00000000 
 295 0020 00000000 		.quad	.LC2
 295      00000000 
 296 0028 00000000 		.quad	.LC3
 296      00000000 
 297 0030 00000000 		.quad	.LC4
 297      00000000 
 298 0038 00000000 		.quad	.LC5
 298      00000000 
 299 0040 00000000 		.quad	.LC6
 299      00000000 
 300 0048 00000000 		.quad	.LC7
 300      00000000 
 301 0050 00000000 		.quad	.LC8
 301      00000000 
 302 0058 00000000 		.quad	.LC9
 302      00000000 
 303 0060 00000000 		.quad	.LC10
 303      00000000 
 304              		.section	.rodata
 305              	.LC11:
 306 00c3 646F5265 		.string	"doRead()"
 306      61642829 
 306      00
 307              		.text
 309              	doRead:
 310              	.LFB9:
  92:main.c        **** 
  93:main.c        **** static const char *const errMessages[] = {
  94:main.c        **** 	NULL,
  95:main.c        **** 	NULL,
  96:main.c        **** 	"Unparseable hex number",
  97:main.c        **** 	"Channel out of range",
  98:main.c        **** 	"Conduit out of range",
  99:main.c        **** 	"Illegal character",
 100:main.c        **** 	"Unterminated string",
 101:main.c        **** 	"No memory",
 102:main.c        **** 	"Empty string",
 103:main.c        **** 	"Odd number of digits",
 104:main.c        **** 	"Cannot load file",
 105:main.c        **** 	"Cannot save file",
 106:main.c        **** 	"Bad arguments"
 107:main.c        **** };
 108:main.c        **** 
 109:main.c        **** typedef enum {
 110:main.c        **** 	FLP_SUCCESS,
 111:main.c        **** 	FLP_LIBERR,
 112:main.c        **** 	FLP_BAD_HEX,
 113:main.c        **** 	FLP_CHAN_RANGE,
 114:main.c        **** 	FLP_CONDUIT_RANGE,
 115:main.c        **** 	FLP_ILL_CHAR,
 116:main.c        **** 	FLP_UNTERM_STRING,
 117:main.c        **** 	FLP_NO_MEMORY,
 118:main.c        **** 	FLP_EMPTY_STRING,
 119:main.c        **** 	FLP_ODD_DIGITS,
 120:main.c        **** 	FLP_CANNOT_LOAD,
 121:main.c        **** 	FLP_CANNOT_SAVE,
 122:main.c        **** 	FLP_ARGS
 123:main.c        **** } ReturnCode;
 124:main.c        **** 
 125:main.c        **** static ReturnCode doRead(
 126:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 127:main.c        **** 	const char **error)
 128:main.c        **** {
 311              		.loc 1 128 0 is_stmt 1
 312              		.cfi_startproc
 313 01af 55       		pushq	%rbp
 314              		.cfi_def_cfa_offset 16
 315              		.cfi_offset 6, -16
 316 01b0 4889E5   		movq	%rsp, %rbp
 317              		.cfi_def_cfa_register 6
 318 01b3 4883EC60 		subq	$96, %rsp
 319 01b7 48897DC8 		movq	%rdi, -56(%rbp)
 320 01bb 89F0     		movl	%esi, %eax
 321 01bd 8955C0   		movl	%edx, -64(%rbp)
 322 01c0 48894DB8 		movq	%rcx, -72(%rbp)
 323 01c4 4C8945B0 		movq	%r8, -80(%rbp)
 324 01c8 4C894DA8 		movq	%r9, -88(%rbp)
 325 01cc 8845C4   		movb	%al, -60(%rbp)
 326              		.loc 1 128 0
 327 01cf 64488B04 		movq	%fs:40, %rax
 327      25280000 
 327      00
 328 01d8 488945F8 		movq	%rax, -8(%rbp)
 329 01dc 31C0     		xorl	%eax, %eax
 129:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 330              		.loc 1 129 0
 331 01de C745D800 		movl	$0, -40(%rbp)
 331      000000
 130:main.c        **** 	uint32 bytesWritten;
 131:main.c        **** 	FLStatus fStatus;
 132:main.c        **** 	uint32 chunkSize;
 133:main.c        **** 	const uint8 *recvData;
 134:main.c        **** 	uint32 actualLength;
 135:main.c        **** 	const uint8 *ptr;
 136:main.c        **** 	uint16 csVal = 0x0000;
 332              		.loc 1 136 0
 333 01e5 66C745D2 		movw	$0, -46(%rbp)
 333      0000
 137:main.c        **** 	#define READ_MAX 65536
 138:main.c        **** 
 139:main.c        **** 	// Read first chunk
 140:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 334              		.loc 1 140 0
 335 01eb B8000001 		movl	$65536, %eax
 335      00
 336 01f0 817DC000 		cmpl	$65536, -64(%rbp)
 336      000100
 337 01f7 0F4645C0 		cmovbe	-64(%rbp), %eax
 338 01fb 8945DC   		movl	%eax, -36(%rbp)
 141:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 339              		.loc 1 141 0
 340 01fe 0FB675C4 		movzbl	-60(%rbp), %esi
 341 0202 488B4DA8 		movq	-88(%rbp), %rcx
 342 0206 8B55DC   		movl	-36(%rbp), %edx
 343 0209 488B45C8 		movq	-56(%rbp), %rax
 344 020d 4989C8   		movq	%rcx, %r8
 345 0210 B9000000 		movl	$0, %ecx
 345      00
 346 0215 4889C7   		movq	%rax, %rdi
 347 0218 E8000000 		call	flReadChannelAsyncSubmit@PLT
 347      00
 348 021d 8945E0   		movl	%eax, -32(%rbp)
 142:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 349              		.loc 1 142 0
 350 0220 837DE000 		cmpl	$0, -32(%rbp)
 351 0224 741F     		je	.L25
 352              		.loc 1 142 0 is_stmt 0 discriminator 1
 353 0226 488B45A8 		movq	-88(%rbp), %rax
 354 022a 488D3500 		leaq	.LC11(%rip), %rsi
 354      000000
 355 0231 4889C7   		movq	%rax, %rdi
 356 0234 E8000000 		call	errPrefix@PLT
 356      00
 357 0239 C745D801 		movl	$1, -40(%rbp)
 357      000000
 358 0240 E9050200 		jmp	.L26
 358      00
 359              	.L25:
 143:main.c        **** 	length = length - chunkSize;
 360              		.loc 1 143 0 is_stmt 1
 361 0245 8B45DC   		movl	-36(%rbp), %eax
 362 0248 2945C0   		subl	%eax, -64(%rbp)
 144:main.c        **** 
 145:main.c        **** 	while ( length ) {
 363              		.loc 1 145 0
 364 024b E9240100 		jmp	.L27
 364      00
 365              	.L33:
 146:main.c        **** 		// Read chunk N
 147:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 366              		.loc 1 147 0
 367 0250 B8000001 		movl	$65536, %eax
 367      00
 368 0255 817DC000 		cmpl	$65536, -64(%rbp)
 368      000100
 369 025c 0F4645C0 		cmovbe	-64(%rbp), %eax
 370 0260 8945DC   		movl	%eax, -36(%rbp)
 148:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 371              		.loc 1 148 0
 372 0263 0FB675C4 		movzbl	-60(%rbp), %esi
 373 0267 488B4DA8 		movq	-88(%rbp), %rcx
 374 026b 8B55DC   		movl	-36(%rbp), %edx
 375 026e 488B45C8 		movq	-56(%rbp), %rax
 376 0272 4989C8   		movq	%rcx, %r8
 377 0275 B9000000 		movl	$0, %ecx
 377      00
 378 027a 4889C7   		movq	%rax, %rdi
 379 027d E8000000 		call	flReadChannelAsyncSubmit@PLT
 379      00
 380 0282 8945E0   		movl	%eax, -32(%rbp)
 149:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 381              		.loc 1 149 0
 382 0285 837DE000 		cmpl	$0, -32(%rbp)
 383 0289 741F     		je	.L28
 384              		.loc 1 149 0 is_stmt 0 discriminator 1
 385 028b 488B45A8 		movq	-88(%rbp), %rax
 386 028f 488D3500 		leaq	.LC11(%rip), %rsi
 386      000000
 387 0296 4889C7   		movq	%rax, %rdi
 388 0299 E8000000 		call	errPrefix@PLT
 388      00
 389 029e C745D801 		movl	$1, -40(%rbp)
 389      000000
 390 02a5 E9A00100 		jmp	.L26
 390      00
 391              	.L28:
 150:main.c        **** 		length = length - chunkSize;
 392              		.loc 1 150 0 is_stmt 1
 393 02aa 8B45DC   		movl	-36(%rbp), %eax
 394 02ad 2945C0   		subl	%eax, -64(%rbp)
 151:main.c        **** 		
 152:main.c        **** 		// Await chunk N-1
 153:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 395              		.loc 1 153 0
 396 02b0 488B7DA8 		movq	-88(%rbp), %rdi
 397 02b4 488D4DD4 		leaq	-44(%rbp), %rcx
 398 02b8 488D55D4 		leaq	-44(%rbp), %rdx
 399 02bc 488D75E8 		leaq	-24(%rbp), %rsi
 400 02c0 488B45C8 		movq	-56(%rbp), %rax
 401 02c4 4989F8   		movq	%rdi, %r8
 402 02c7 4889C7   		movq	%rax, %rdi
 403 02ca E8000000 		call	flReadChannelAsyncAwait@PLT
 403      00
 404 02cf 8945E0   		movl	%eax, -32(%rbp)
 154:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 405              		.loc 1 154 0
 406 02d2 837DE000 		cmpl	$0, -32(%rbp)
 407 02d6 741F     		je	.L29
 408              		.loc 1 154 0 is_stmt 0 discriminator 1
 409 02d8 488B45A8 		movq	-88(%rbp), %rax
 410 02dc 488D3500 		leaq	.LC11(%rip), %rsi
 410      000000
 411 02e3 4889C7   		movq	%rax, %rdi
 412 02e6 E8000000 		call	errPrefix@PLT
 412      00
 413 02eb C745D801 		movl	$1, -40(%rbp)
 413      000000
 414 02f2 E9530100 		jmp	.L26
 414      00
 415              	.L29:
 155:main.c        **** 
 156:main.c        **** 		// Write chunk N-1 to file
 157:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 416              		.loc 1 157 0 is_stmt 1
 417 02f7 8B45D4   		movl	-44(%rbp), %eax
 418 02fa 89C6     		movl	%eax, %esi
 419 02fc 488B45E8 		movq	-24(%rbp), %rax
 420 0300 488B55B8 		movq	-72(%rbp), %rdx
 421 0304 4889D1   		movq	%rdx, %rcx
 422 0307 4889F2   		movq	%rsi, %rdx
 423 030a BE010000 		movl	$1, %esi
 423      00
 424 030f 4889C7   		movq	%rax, %rdi
 425 0312 E8000000 		call	fwrite@PLT
 425      00
 426 0317 8945E4   		movl	%eax, -28(%rbp)
 158:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 427              		.loc 1 158 0
 428 031a 8B45D4   		movl	-44(%rbp), %eax
 429 031d 3945E4   		cmpl	%eax, -28(%rbp)
 430 0320 741F     		je	.L30
 431              		.loc 1 158 0 is_stmt 0 discriminator 1
 432 0322 488B45A8 		movq	-88(%rbp), %rax
 433 0326 488D3500 		leaq	.LC11(%rip), %rsi
 433      000000
 434 032d 4889C7   		movq	%rax, %rdi
 435 0330 E8000000 		call	errPrefix@PLT
 435      00
 436 0335 C745D80B 		movl	$11, -40(%rbp)
 436      000000
 437 033c E9090100 		jmp	.L26
 437      00
 438              	.L30:
 159:main.c        **** 
 160:main.c        **** 		// Checksum chunk N-1
 161:main.c        **** 		chunkSize = actualLength;
 439              		.loc 1 161 0 is_stmt 1
 440 0341 8B45D4   		movl	-44(%rbp), %eax
 441 0344 8945DC   		movl	%eax, -36(%rbp)
 162:main.c        **** 		ptr = recvData;
 442              		.loc 1 162 0
 443 0347 488B45E8 		movq	-24(%rbp), %rax
 444 034b 488945F0 		movq	%rax, -16(%rbp)
 163:main.c        **** 		while ( chunkSize-- ) {
 445              		.loc 1 163 0
 446 034f EB16     		jmp	.L31
 447              	.L32:
 164:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 448              		.loc 1 164 0
 449 0351 488B45F0 		movq	-16(%rbp), %rax
 450 0355 488D5001 		leaq	1(%rax), %rdx
 451 0359 488955F0 		movq	%rdx, -16(%rbp)
 452 035d 0FB600   		movzbl	(%rax), %eax
 453 0360 0FB6C0   		movzbl	%al, %eax
 454 0363 660145D2 		addw	%ax, -46(%rbp)
 455              	.L31:
 163:main.c        **** 		while ( chunkSize-- ) {
 456              		.loc 1 163 0
 457 0367 8B45DC   		movl	-36(%rbp), %eax
 458 036a 8D50FF   		leal	-1(%rax), %edx
 459 036d 8955DC   		movl	%edx, -36(%rbp)
 460 0370 85C0     		testl	%eax, %eax
 461 0372 75DD     		jne	.L32
 462              	.L27:
 145:main.c        **** 		// Read chunk N
 463              		.loc 1 145 0
 464 0374 837DC000 		cmpl	$0, -64(%rbp)
 465 0378 0F85D2FE 		jne	.L33
 465      FFFF
 165:main.c        **** 		}
 166:main.c        **** 	}
 167:main.c        **** 
 168:main.c        **** 	// Await last chunk
 169:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 466              		.loc 1 169 0
 467 037e 488B7DA8 		movq	-88(%rbp), %rdi
 468 0382 488D4DD4 		leaq	-44(%rbp), %rcx
 469 0386 488D55D4 		leaq	-44(%rbp), %rdx
 470 038a 488D75E8 		leaq	-24(%rbp), %rsi
 471 038e 488B45C8 		movq	-56(%rbp), %rax
 472 0392 4989F8   		movq	%rdi, %r8
 473 0395 4889C7   		movq	%rax, %rdi
 474 0398 E8000000 		call	flReadChannelAsyncAwait@PLT
 474      00
 475 039d 8945E0   		movl	%eax, -32(%rbp)
 170:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 476              		.loc 1 170 0
 477 03a0 837DE000 		cmpl	$0, -32(%rbp)
 478 03a4 741F     		je	.L34
 479              		.loc 1 170 0 is_stmt 0 discriminator 1
 480 03a6 488B45A8 		movq	-88(%rbp), %rax
 481 03aa 488D3500 		leaq	.LC11(%rip), %rsi
 481      000000
 482 03b1 4889C7   		movq	%rax, %rdi
 483 03b4 E8000000 		call	errPrefix@PLT
 483      00
 484 03b9 C745D801 		movl	$1, -40(%rbp)
 484      000000
 485 03c0 E9850000 		jmp	.L26
 485      00
 486              	.L34:
 171:main.c        **** 	
 172:main.c        **** 	// Write last chunk to file
 173:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 487              		.loc 1 173 0 is_stmt 1
 488 03c5 8B45D4   		movl	-44(%rbp), %eax
 489 03c8 89C6     		movl	%eax, %esi
 490 03ca 488B45E8 		movq	-24(%rbp), %rax
 491 03ce 488B55B8 		movq	-72(%rbp), %rdx
 492 03d2 4889D1   		movq	%rdx, %rcx
 493 03d5 4889F2   		movq	%rsi, %rdx
 494 03d8 BE010000 		movl	$1, %esi
 494      00
 495 03dd 4889C7   		movq	%rax, %rdi
 496 03e0 E8000000 		call	fwrite@PLT
 496      00
 497 03e5 8945E4   		movl	%eax, -28(%rbp)
 174:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 498              		.loc 1 174 0
 499 03e8 8B45D4   		movl	-44(%rbp), %eax
 500 03eb 3945E4   		cmpl	%eax, -28(%rbp)
 501 03ee 741C     		je	.L35
 502              		.loc 1 174 0 is_stmt 0 discriminator 1
 503 03f0 488B45A8 		movq	-88(%rbp), %rax
 504 03f4 488D3500 		leaq	.LC11(%rip), %rsi
 504      000000
 505 03fb 4889C7   		movq	%rax, %rdi
 506 03fe E8000000 		call	errPrefix@PLT
 506      00
 507 0403 C745D80B 		movl	$11, -40(%rbp)
 507      000000
 508 040a EB3E     		jmp	.L26
 509              	.L35:
 175:main.c        **** 
 176:main.c        **** 	// Checksum last chunk
 177:main.c        **** 	chunkSize = actualLength;
 510              		.loc 1 177 0 is_stmt 1
 511 040c 8B45D4   		movl	-44(%rbp), %eax
 512 040f 8945DC   		movl	%eax, -36(%rbp)
 178:main.c        **** 	ptr = recvData;
 513              		.loc 1 178 0
 514 0412 488B45E8 		movq	-24(%rbp), %rax
 515 0416 488945F0 		movq	%rax, -16(%rbp)
 179:main.c        **** 	while ( chunkSize-- ) {
 516              		.loc 1 179 0
 517 041a EB16     		jmp	.L36
 518              	.L37:
 180:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 519              		.loc 1 180 0
 520 041c 488B45F0 		movq	-16(%rbp), %rax
 521 0420 488D5001 		leaq	1(%rax), %rdx
 522 0424 488955F0 		movq	%rdx, -16(%rbp)
 523 0428 0FB600   		movzbl	(%rax), %eax
 524 042b 0FB6C0   		movzbl	%al, %eax
 525 042e 660145D2 		addw	%ax, -46(%rbp)
 526              	.L36:
 179:main.c        **** 	while ( chunkSize-- ) {
 527              		.loc 1 179 0
 528 0432 8B45DC   		movl	-36(%rbp), %eax
 529 0435 8D50FF   		leal	-1(%rax), %edx
 530 0438 8955DC   		movl	%edx, -36(%rbp)
 531 043b 85C0     		testl	%eax, %eax
 532 043d 75DD     		jne	.L37
 181:main.c        **** 	}
 182:main.c        **** 	
 183:main.c        **** 	// Return checksum to caller
 184:main.c        **** 	*checksum = csVal;
 533              		.loc 1 184 0
 534 043f 488B45B0 		movq	-80(%rbp), %rax
 535 0443 0FB755D2 		movzwl	-46(%rbp), %edx
 536 0447 668910   		movw	%dx, (%rax)
 537              	.L26:
 185:main.c        **** cleanup:
 186:main.c        **** 	return retVal;
 538              		.loc 1 186 0
 539 044a 8B45D8   		movl	-40(%rbp), %eax
 187:main.c        **** }
 540              		.loc 1 187 0
 541 044d 488B4DF8 		movq	-8(%rbp), %rcx
 542 0451 6448330C 		xorq	%fs:40, %rcx
 542      25280000 
 542      00
 543 045a 7405     		je	.L39
 544 045c E8000000 		call	__stack_chk_fail@PLT
 544      00
 545              	.L39:
 546 0461 C9       		leave
 547              		.cfi_def_cfa 7, 8
 548 0462 C3       		ret
 549              		.cfi_endproc
 550              	.LFE9:
 552              		.section	.rodata
 553              	.LC12:
 554 00cc 646F5772 		.string	"doWrite()"
 554      69746528 
 554      2900
 555              		.text
 557              	doWrite:
 558              	.LFB10:
 188:main.c        **** 
 189:main.c        **** static ReturnCode doWrite(
 190:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 191:main.c        **** 	const char **error)
 192:main.c        **** {
 559              		.loc 1 192 0
 560              		.cfi_startproc
 561 0463 55       		pushq	%rbp
 562              		.cfi_def_cfa_offset 16
 563              		.cfi_offset 6, -16
 564 0464 4889E5   		movq	%rsp, %rbp
 565              		.cfi_def_cfa_register 6
 566 0467 4881EC70 		subq	$65648, %rsp
 566      000100
 567 046e 4889BDB8 		movq	%rdi, -65608(%rbp)
 567      FFFEFF
 568 0475 89F0     		movl	%esi, %eax
 569 0477 488995A8 		movq	%rdx, -65624(%rbp)
 569      FFFEFF
 570 047e 48898DA0 		movq	%rcx, -65632(%rbp)
 570      FFFEFF
 571 0485 4C898598 		movq	%r8, -65640(%rbp)
 571      FFFEFF
 572 048c 4C898D90 		movq	%r9, -65648(%rbp)
 572      FFFEFF
 573 0493 8885B4FF 		movb	%al, -65612(%rbp)
 573      FEFF
 574              		.loc 1 192 0
 575 0499 64488B04 		movq	%fs:40, %rax
 575      25280000 
 575      00
 576 04a2 488945F8 		movq	%rax, -8(%rbp)
 577 04a6 31C0     		xorl	%eax, %eax
 193:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 578              		.loc 1 193 0
 579 04a8 C785C8FF 		movl	$0, -65592(%rbp)
 579      FEFF0000 
 579      0000
 194:main.c        **** 	size_t bytesRead, i;
 195:main.c        **** 	FLStatus fStatus;
 196:main.c        **** 	const uint8 *ptr;
 197:main.c        **** 	uint16 csVal = 0x0000;
 580              		.loc 1 197 0
 581 04b2 66C785C6 		movw	$0, -65594(%rbp)
 581      FFFEFF00 
 581      00
 198:main.c        **** 	size_t lenVal = 0;
 582              		.loc 1 198 0
 583 04bb 48C785E0 		movq	$0, -65568(%rbp)
 583      FFFEFF00 
 583      000000
 584              	.L46:
 199:main.c        **** 	#define WRITE_MAX (65536 - 5)
 200:main.c        **** 	uint8 buffer[WRITE_MAX];
 201:main.c        **** 
 202:main.c        **** 	do {
 203:main.c        **** 		// Read Nth chunk
 204:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 585              		.loc 1 204 0
 586 04c6 488B95A8 		movq	-65624(%rbp), %rdx
 586      FFFEFF
 587 04cd 488D85F0 		leaq	-65552(%rbp), %rax
 587      FFFEFF
 588 04d4 4889D1   		movq	%rdx, %rcx
 589 04d7 BAFBFF00 		movl	$65531, %edx
 589      00
 590 04dc BE010000 		movl	$1, %esi
 590      00
 591 04e1 4889C7   		movq	%rax, %rdi
 592 04e4 E8000000 		call	fread@PLT
 592      00
 593 04e9 488985E8 		movq	%rax, -65560(%rbp)
 593      FFFEFF
 205:main.c        **** 		if ( bytesRead ) {
 594              		.loc 1 205 0
 595 04f0 4883BDE8 		cmpq	$0, -65560(%rbp)
 595      FFFEFF00 
 596 04f8 0F84C400 		je	.L41
 596      0000
 206:main.c        **** 			// Update running total
 207:main.c        **** 			lenVal = lenVal + bytesRead;
 597              		.loc 1 207 0
 598 04fe 488B85E8 		movq	-65560(%rbp), %rax
 598      FFFEFF
 599 0505 480185E0 		addq	%rax, -65568(%rbp)
 599      FFFEFF
 208:main.c        **** 
 209:main.c        **** 			// Submit Nth chunk
 210:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 600              		.loc 1 210 0
 601 050c 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 601      FFFEFF
 602 0513 488BBD90 		movq	-65648(%rbp), %rdi
 602      FFFEFF
 603 051a 488D8DF0 		leaq	-65552(%rbp), %rcx
 603      FFFEFF
 604 0521 488B95E8 		movq	-65560(%rbp), %rdx
 604      FFFEFF
 605 0528 488B85B8 		movq	-65608(%rbp), %rax
 605      FFFEFF
 606 052f 4989F8   		movq	%rdi, %r8
 607 0532 4889C7   		movq	%rax, %rdi
 608 0535 E8000000 		call	flWriteChannelAsync@PLT
 608      00
 609 053a 8985CCFF 		movl	%eax, -65588(%rbp)
 609      FEFF
 211:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 610              		.loc 1 211 0
 611 0540 83BDCCFF 		cmpl	$0, -65588(%rbp)
 611      FEFF00
 612 0547 7425     		je	.L42
 613              		.loc 1 211 0 is_stmt 0 discriminator 1
 614 0549 488B8590 		movq	-65648(%rbp), %rax
 614      FFFEFF
 615 0550 488D3500 		leaq	.LC12(%rip), %rsi
 615      000000
 616 0557 4889C7   		movq	%rax, %rdi
 617 055a E8000000 		call	errPrefix@PLT
 617      00
 618 055f C785C8FF 		movl	$1, -65592(%rbp)
 618      FEFF0100 
 618      0000
 619 0569 E9D10000 		jmp	.L43
 619      00
 620              	.L42:
 212:main.c        **** 
 213:main.c        **** 			// Checksum Nth chunk
 214:main.c        **** 			i = bytesRead;
 621              		.loc 1 214 0 is_stmt 1
 622 056e 488B85E8 		movq	-65560(%rbp), %rax
 622      FFFEFF
 623 0575 488985D0 		movq	%rax, -65584(%rbp)
 623      FFFEFF
 215:main.c        **** 			ptr = buffer;
 624              		.loc 1 215 0
 625 057c 488D85F0 		leaq	-65552(%rbp), %rax
 625      FFFEFF
 626 0583 488985D8 		movq	%rax, -65576(%rbp)
 626      FFFEFF
 216:main.c        **** 			while ( i-- ) {
 627              		.loc 1 216 0
 628 058a EB1F     		jmp	.L44
 629              	.L45:
 217:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 630              		.loc 1 217 0
 631 058c 488B85D8 		movq	-65576(%rbp), %rax
 631      FFFEFF
 632 0593 488D5001 		leaq	1(%rax), %rdx
 633 0597 488995D8 		movq	%rdx, -65576(%rbp)
 633      FFFEFF
 634 059e 0FB600   		movzbl	(%rax), %eax
 635 05a1 0FB6C0   		movzbl	%al, %eax
 636 05a4 660185C6 		addw	%ax, -65594(%rbp)
 636      FFFEFF
 637              	.L44:
 216:main.c        **** 			while ( i-- ) {
 638              		.loc 1 216 0
 639 05ab 488B85D0 		movq	-65584(%rbp), %rax
 639      FFFEFF
 640 05b2 488D50FF 		leaq	-1(%rax), %rdx
 641 05b6 488995D0 		movq	%rdx, -65584(%rbp)
 641      FFFEFF
 642 05bd 4885C0   		testq	%rax, %rax
 643 05c0 75CA     		jne	.L45
 644              	.L41:
 218:main.c        **** 			}
 219:main.c        **** 		}
 220:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 645              		.loc 1 220 0
 646 05c2 4881BDE8 		cmpq	$65531, -65560(%rbp)
 646      FFFEFFFB 
 646      FF0000
 647 05cd 0F84F3FE 		je	.L46
 647      FFFF
 221:main.c        **** 
 222:main.c        **** 	// Wait for writes to be received. This is optional, but it's only fair if we're benchmarking to
 223:main.c        **** 	// actually wait for the work to be completed.
 224:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 648              		.loc 1 224 0
 649 05d3 488B9590 		movq	-65648(%rbp), %rdx
 649      FFFEFF
 650 05da 488B85B8 		movq	-65608(%rbp), %rax
 650      FFFEFF
 651 05e1 4889D6   		movq	%rdx, %rsi
 652 05e4 4889C7   		movq	%rax, %rdi
 653 05e7 E8000000 		call	flAwaitAsyncWrites@PLT
 653      00
 654 05ec 8985CCFF 		movl	%eax, -65588(%rbp)
 654      FEFF
 225:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 655              		.loc 1 225 0
 656 05f2 83BDCCFF 		cmpl	$0, -65588(%rbp)
 656      FEFF00
 657 05f9 7422     		je	.L47
 658              		.loc 1 225 0 is_stmt 0 discriminator 1
 659 05fb 488B8590 		movq	-65648(%rbp), %rax
 659      FFFEFF
 660 0602 488D3500 		leaq	.LC12(%rip), %rsi
 660      000000
 661 0609 4889C7   		movq	%rax, %rdi
 662 060c E8000000 		call	errPrefix@PLT
 662      00
 663 0611 C785C8FF 		movl	$1, -65592(%rbp)
 663      FEFF0100 
 663      0000
 664 061b EB22     		jmp	.L43
 665              	.L47:
 226:main.c        **** 
 227:main.c        **** 	// Return checksum & length to caller
 228:main.c        **** 	*checksum = csVal;
 666              		.loc 1 228 0 is_stmt 1
 667 061d 488B8598 		movq	-65640(%rbp), %rax
 667      FFFEFF
 668 0624 0FB795C6 		movzwl	-65594(%rbp), %edx
 668      FFFEFF
 669 062b 668910   		movw	%dx, (%rax)
 229:main.c        **** 	*length = lenVal;
 670              		.loc 1 229 0
 671 062e 488B85A0 		movq	-65632(%rbp), %rax
 671      FFFEFF
 672 0635 488B95E0 		movq	-65568(%rbp), %rdx
 672      FFFEFF
 673 063c 488910   		movq	%rdx, (%rax)
 674              	.L43:
 230:main.c        **** cleanup:
 231:main.c        **** 	return retVal;
 675              		.loc 1 231 0
 676 063f 8B85C8FF 		movl	-65592(%rbp), %eax
 676      FEFF
 232:main.c        **** }
 677              		.loc 1 232 0
 678 0645 488B4DF8 		movq	-8(%rbp), %rcx
 679 0649 6448330C 		xorq	%fs:40, %rcx
 679      25280000 
 679      00
 680 0652 7405     		je	.L49
 681 0654 E8000000 		call	__stack_chk_fail@PLT
 681      00
 682              	.L49:
 683 0659 C9       		leave
 684              		.cfi_def_cfa 7, 8
 685 065a C3       		ret
 686              		.cfi_endproc
 687              	.LFE10:
 689              		.section	.rodata
 690              	.LC13:
 691 00d6 776200   		.string	"wb"
 692 00d9 00000000 		.align 8
 692      000000
 693              	.LC16:
 694 00e0 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 694      20256420 
 694      62797465 
 694      73202863 
 694      6865636B 
 695              	.LC17:
 696 011d 726200   		.string	"rb"
 697              		.align 8
 698              	.LC18:
 699 0120 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 699      6520257A 
 699      75206279 
 699      74657320 
 699      28636865 
 700              	.LC19:
 701 015e 25732061 		.string	"%s at column %d\n  %s\n  "
 701      7420636F 
 701      6C756D6E 
 701      2025640A 
 701      20202573 
 702              	.LC20:
 703 0176 5E0A00   		.string	"^\n"
 704              		.text
 706              	parseLine:
 707              	.LFB11:
 233:main.c        **** 
 234:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 708              		.loc 1 234 0
 709              		.cfi_startproc
 710 065b 55       		pushq	%rbp
 711              		.cfi_def_cfa_offset 16
 712              		.cfi_offset 6, -16
 713 065c 4889E5   		movq	%rsp, %rbp
 714              		.cfi_def_cfa_register 6
 715 065f 4881EC10 		subq	$272, %rsp
 715      010000
 716 0666 4889BD08 		movq	%rdi, -248(%rbp)
 716      FFFFFF
 717 066d 4889B500 		movq	%rsi, -256(%rbp)
 717      FFFFFF
 718 0674 488995F8 		movq	%rdx, -264(%rbp)
 718      FEFFFF
 719              		.loc 1 234 0
 720 067b 64488B04 		movq	%fs:40, %rax
 720      25280000 
 720      00
 721 0684 488945F8 		movq	%rax, -8(%rbp)
 722 0688 31C0     		xorl	%eax, %eax
 235:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 723              		.loc 1 235 0
 724 068a C78514FF 		movl	$0, -236(%rbp)
 724      FFFF0000 
 724      0000
 236:main.c        **** 	FLStatus fStatus;
 237:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 725              		.loc 1 237 0
 726 0694 48C745D0 		movq	$0, -48(%rbp)
 726      00000000 
 727 069c 48C745D8 		movq	$0, -40(%rbp)
 727      00000000 
 728 06a4 48C745E0 		movq	$0, -32(%rbp)
 728      00000000 
 729 06ac 48C745E8 		movq	$0, -24(%rbp)
 729      00000000 
 238:main.c        **** 	BufferStatus bStatus;
 239:main.c        **** 	uint8 *data = NULL;
 730              		.loc 1 239 0
 731 06b4 48C78548 		movq	$0, -184(%rbp)
 731      FFFFFF00 
 731      000000
 240:main.c        **** 	char *fileName = NULL;
 732              		.loc 1 240 0
 733 06bf 48C78550 		movq	$0, -176(%rbp)
 733      FFFFFF00 
 733      000000
 241:main.c        **** 	FILE *file = NULL;
 734              		.loc 1 241 0
 735 06ca 48C78558 		movq	$0, -168(%rbp)
 735      FFFFFF00 
 735      000000
 242:main.c        **** 	double totalTime, speed;
 243:main.c        **** 	//string key = "10011001100110011001100110011111", Var;
 244:main.c        **** 	#ifdef WIN32
 245:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 246:main.c        **** 		DWORD_PTR mask = 1;
 247:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 248:main.c        **** 		QueryPerformanceFrequency(&freq);
 249:main.c        **** 	#else
 250:main.c        **** 		struct timeval tvStart, tvEnd;
 251:main.c        **** 		long long startTime, endTime;
 252:main.c        **** 	#endif
 253:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 736              		.loc 1 253 0
 737 06d5 488B95F8 		movq	-264(%rbp), %rdx
 737      FEFFFF
 738 06dc 488D45D0 		leaq	-48(%rbp), %rax
 739 06e0 4889D1   		movq	%rdx, %rcx
 740 06e3 BA000000 		movl	$0, %edx
 740      00
 741 06e8 BE000400 		movl	$1024, %esi
 741      00
 742 06ed 4889C7   		movq	%rax, %rdi
 743 06f0 E8000000 		call	bufInitialise@PLT
 743      00
 744 06f5 898520FF 		movl	%eax, -224(%rbp)
 744      FFFF
 254:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 745              		.loc 1 254 0
 746 06fb 83BD20FF 		cmpl	$0, -224(%rbp)
 746      FFFF00
 747 0702 740F     		je	.L51
 748              		.loc 1 254 0 is_stmt 0 discriminator 1
 749 0704 C78514FF 		movl	$1, -236(%rbp)
 749      FFFF0100 
 749      0000
 750 070e E9C00E00 		jmp	.L52
 750      00
 751              	.L51:
 255:main.c        **** 	ptr = line;
 752              		.loc 1 255 0 is_stmt 1
 753 0713 488B8500 		movq	-256(%rbp), %rax
 753      FFFFFF
 754 071a 48890500 		movq	%rax, ptr(%rip)
 754      000000
 256:main.c        **** 	do {
 257:main.c        **** 		while ( *ptr == ';' ) {
 755              		.loc 1 257 0
 756 0721 EB12     		jmp	.L53
 757              	.L54:
 258:main.c        **** 			ptr++;
 758              		.loc 1 258 0
 759 0723 488B0500 		movq	ptr(%rip), %rax
 759      000000
 760 072a 4883C001 		addq	$1, %rax
 761 072e 48890500 		movq	%rax, ptr(%rip)
 761      000000
 762              	.L53:
 257:main.c        **** 			ptr++;
 763              		.loc 1 257 0
 764 0735 488B0500 		movq	ptr(%rip), %rax
 764      000000
 765 073c 0FB600   		movzbl	(%rax), %eax
 766 073f 3C3B     		cmpb	$59, %al
 767 0741 74E0     		je	.L54
 259:main.c        **** 		}
 260:main.c        **** 		switch ( *ptr ) {
 768              		.loc 1 260 0
 769 0743 488B0500 		movq	ptr(%rip), %rax
 769      000000
 770 074a 0FB600   		movzbl	(%rax), %eax
 771 074d 0FBEC0   		movsbl	%al, %eax
 772 0750 83F872   		cmpl	$114, %eax
 773 0753 7417     		je	.L56
 774 0755 83F877   		cmpl	$119, %eax
 775 0758 0F84B106 		je	.L57
 775      0000
 776 075e 83F82B   		cmpl	$43, %eax
 777 0761 0F842F0D 		je	.L58
 777      0000
 778 0767 E9160E00 		jmp	.L128
 778      00
 779              	.L56:
 780              	.LBB2:
 261:main.c        **** 		case 'r':{
 262:main.c        **** 			uint32 chan;
 263:main.c        **** 			uint32 length = 1;
 781              		.loc 1 263 0
 782 076c C78518FF 		movl	$1, -232(%rbp)
 782      FFFF0100 
 782      0000
 264:main.c        **** 			char *end;
 265:main.c        **** 			ptr++;
 783              		.loc 1 265 0
 784 0776 488B0500 		movq	ptr(%rip), %rax
 784      000000
 785 077d 4883C001 		addq	$1, %rax
 786 0781 48890500 		movq	%rax, ptr(%rip)
 786      000000
 266:main.c        **** 			
 267:main.c        **** 			// Get the channel to be read:
 268:main.c        **** 			errno = 0;
 787              		.loc 1 268 0
 788 0788 E8000000 		call	__errno_location@PLT
 788      00
 789 078d C7000000 		movl	$0, (%rax)
 789      0000
 269:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 790              		.loc 1 269 0
 791 0793 488B0500 		movq	ptr(%rip), %rax
 791      000000
 792 079a 488D8D40 		leaq	-192(%rbp), %rcx
 792      FFFFFF
 793 07a1 BA100000 		movl	$16, %edx
 793      00
 794 07a6 4889CE   		movq	%rcx, %rsi
 795 07a9 4889C7   		movq	%rax, %rdi
 796 07ac E8000000 		call	strtoul@PLT
 796      00
 797 07b1 89852CFF 		movl	%eax, -212(%rbp)
 797      FFFF
 270:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 798              		.loc 1 270 0
 799 07b7 E8000000 		call	__errno_location@PLT
 799      00
 800 07bc 8B00     		movl	(%rax), %eax
 801 07be 85C0     		testl	%eax, %eax
 802 07c0 740F     		je	.L59
 803              		.loc 1 270 0 is_stmt 0 discriminator 1
 804 07c2 C78514FF 		movl	$2, -236(%rbp)
 804      FFFF0200 
 804      0000
 805 07cc E9020E00 		jmp	.L52
 805      00
 806              	.L59:
 271:main.c        **** 
 272:main.c        **** 			// Ensure that it's 0-127
 273:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 807              		.loc 1 273 0 is_stmt 1
 808 07d1 83BD2CFF 		cmpl	$127, -212(%rbp)
 808      FFFF7F
 809 07d8 760F     		jbe	.L61
 810              		.loc 1 273 0 is_stmt 0 discriminator 1
 811 07da C78514FF 		movl	$3, -236(%rbp)
 811      FFFF0300 
 811      0000
 812 07e4 E9EA0D00 		jmp	.L52
 812      00
 813              	.L61:
 274:main.c        **** 			ptr = end;
 814              		.loc 1 274 0 is_stmt 1
 815 07e9 488B8540 		movq	-192(%rbp), %rax
 815      FFFFFF
 816 07f0 48890500 		movq	%rax, ptr(%rip)
 816      000000
 275:main.c        **** 
 276:main.c        **** 			// Only three valid chars at this point:
 277:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 817              		.loc 1 277 0
 818 07f7 488B0500 		movq	ptr(%rip), %rax
 818      000000
 819 07fe 0FB600   		movzbl	(%rax), %eax
 820 0801 84C0     		testb	%al, %al
 821 0803 742B     		je	.L62
 822              		.loc 1 277 0 is_stmt 0 discriminator 1
 823 0805 488B0500 		movq	ptr(%rip), %rax
 823      000000
 824 080c 0FB600   		movzbl	(%rax), %eax
 825 080f 3C3B     		cmpb	$59, %al
 826 0811 741D     		je	.L62
 827              		.loc 1 277 0 discriminator 2
 828 0813 488B0500 		movq	ptr(%rip), %rax
 828      000000
 829 081a 0FB600   		movzbl	(%rax), %eax
 830 081d 3C20     		cmpb	$32, %al
 831 081f 740F     		je	.L62
 832              		.loc 1 277 0 discriminator 3
 833 0821 C78514FF 		movl	$5, -236(%rbp)
 833      FFFF0500 
 833      0000
 834 082b E9A30D00 		jmp	.L52
 834      00
 835              	.L62:
 278:main.c        **** 
 279:main.c        **** 			if ( *ptr == ' ' ) {
 836              		.loc 1 279 0 is_stmt 1
 837 0830 488B0500 		movq	ptr(%rip), %rax
 837      000000
 838 0837 0FB600   		movzbl	(%rax), %eax
 839 083a 3C20     		cmpb	$32, %al
 840 083c 0F851D02 		jne	.L63
 840      0000
 280:main.c        **** 				ptr++;
 841              		.loc 1 280 0
 842 0842 488B0500 		movq	ptr(%rip), %rax
 842      000000
 843 0849 4883C001 		addq	$1, %rax
 844 084d 48890500 		movq	%rax, ptr(%rip)
 844      000000
 281:main.c        **** 
 282:main.c        **** 				// Get the read count:
 283:main.c        **** 				errno = 0;
 845              		.loc 1 283 0
 846 0854 E8000000 		call	__errno_location@PLT
 846      00
 847 0859 C7000000 		movl	$0, (%rax)
 847      0000
 284:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 848              		.loc 1 284 0
 849 085f 488B0500 		movq	ptr(%rip), %rax
 849      000000
 850 0866 488D8D40 		leaq	-192(%rbp), %rcx
 850      FFFFFF
 851 086d BA100000 		movl	$16, %edx
 851      00
 852 0872 4889CE   		movq	%rcx, %rsi
 853 0875 4889C7   		movq	%rax, %rdi
 854 0878 E8000000 		call	strtoul@PLT
 854      00
 855 087d 898518FF 		movl	%eax, -232(%rbp)
 855      FFFF
 285:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 856              		.loc 1 285 0
 857 0883 E8000000 		call	__errno_location@PLT
 857      00
 858 0888 8B00     		movl	(%rax), %eax
 859 088a 85C0     		testl	%eax, %eax
 860 088c 740F     		je	.L64
 861              		.loc 1 285 0 is_stmt 0 discriminator 1
 862 088e C78514FF 		movl	$2, -236(%rbp)
 862      FFFF0200 
 862      0000
 863 0898 E9360D00 		jmp	.L52
 863      00
 864              	.L64:
 286:main.c        **** 				ptr = end;
 865              		.loc 1 286 0 is_stmt 1
 866 089d 488B8540 		movq	-192(%rbp), %rax
 866      FFFFFF
 867 08a4 48890500 		movq	%rax, ptr(%rip)
 867      000000
 287:main.c        **** 				
 288:main.c        **** 				// Only three valid chars at this point:
 289:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 868              		.loc 1 289 0
 869 08ab 488B0500 		movq	ptr(%rip), %rax
 869      000000
 870 08b2 0FB600   		movzbl	(%rax), %eax
 871 08b5 84C0     		testb	%al, %al
 872 08b7 742B     		je	.L65
 873              		.loc 1 289 0 is_stmt 0 discriminator 1
 874 08b9 488B0500 		movq	ptr(%rip), %rax
 874      000000
 875 08c0 0FB600   		movzbl	(%rax), %eax
 876 08c3 3C3B     		cmpb	$59, %al
 877 08c5 741D     		je	.L65
 878              		.loc 1 289 0 discriminator 2
 879 08c7 488B0500 		movq	ptr(%rip), %rax
 879      000000
 880 08ce 0FB600   		movzbl	(%rax), %eax
 881 08d1 3C20     		cmpb	$32, %al
 882 08d3 740F     		je	.L65
 883              		.loc 1 289 0 discriminator 3
 884 08d5 C78514FF 		movl	$5, -236(%rbp)
 884      FFFF0500 
 884      0000
 885 08df E9EF0C00 		jmp	.L52
 885      00
 886              	.L65:
 290:main.c        **** 				if ( *ptr == ' ' ) {
 887              		.loc 1 290 0 is_stmt 1
 888 08e4 488B0500 		movq	ptr(%rip), %rax
 888      000000
 889 08eb 0FB600   		movzbl	(%rax), %eax
 890 08ee 3C20     		cmpb	$32, %al
 891 08f0 0F856901 		jne	.L63
 891      0000
 892              	.LBB3:
 291:main.c        **** 					const char *p;
 292:main.c        **** 					const char quoteChar = *++ptr;
 893              		.loc 1 292 0
 894 08f6 488B0500 		movq	ptr(%rip), %rax
 894      000000
 895 08fd 4883C001 		addq	$1, %rax
 896 0901 48890500 		movq	%rax, ptr(%rip)
 896      000000
 897 0908 488B0500 		movq	ptr(%rip), %rax
 897      000000
 898 090f 0FB600   		movzbl	(%rax), %eax
 899 0912 888511FF 		movb	%al, -239(%rbp)
 899      FFFF
 293:main.c        **** 					CHECK_STATUS(
 900              		.loc 1 293 0
 901 0918 80BD11FF 		cmpb	$34, -239(%rbp)
 901      FFFF22
 902 091f 7418     		je	.L66
 903              		.loc 1 293 0 is_stmt 0 discriminator 1
 904 0921 80BD11FF 		cmpb	$39, -239(%rbp)
 904      FFFF27
 905 0928 740F     		je	.L66
 906              		.loc 1 293 0 discriminator 2
 907 092a C78514FF 		movl	$5, -236(%rbp)
 907      FFFF0500 
 907      0000
 908 0934 E99A0C00 		jmp	.L52
 908      00
 909              	.L66:
 294:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 295:main.c        **** 						FLP_ILL_CHAR, cleanup);
 296:main.c        **** 					
 297:main.c        **** 					// Get the file to write bytes to:
 298:main.c        **** 					ptr++;
 910              		.loc 1 298 0 is_stmt 1
 911 0939 488B0500 		movq	ptr(%rip), %rax
 911      000000
 912 0940 4883C001 		addq	$1, %rax
 913 0944 48890500 		movq	%rax, ptr(%rip)
 913      000000
 299:main.c        **** 					p = ptr;
 914              		.loc 1 299 0
 915 094b 488B0500 		movq	ptr(%rip), %rax
 915      000000
 916 0952 48898560 		movq	%rax, -160(%rbp)
 916      FFFFFF
 300:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 917              		.loc 1 300 0
 918 0959 EB08     		jmp	.L67
 919              	.L69:
 301:main.c        **** 						p++;
 920              		.loc 1 301 0
 921 095b 48838560 		addq	$1, -160(%rbp)
 921      FFFFFF01 
 922              	.L67:
 300:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 923              		.loc 1 300 0
 924 0963 488B8560 		movq	-160(%rbp), %rax
 924      FFFFFF
 925 096a 0FB600   		movzbl	(%rax), %eax
 926 096d 388511FF 		cmpb	%al, -239(%rbp)
 926      FFFF
 927 0973 740E     		je	.L68
 300:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 928              		.loc 1 300 0 is_stmt 0 discriminator 1
 929 0975 488B8560 		movq	-160(%rbp), %rax
 929      FFFFFF
 930 097c 0FB600   		movzbl	(%rax), %eax
 931 097f 84C0     		testb	%al, %al
 932 0981 75D8     		jne	.L69
 933              	.L68:
 302:main.c        **** 					}
 303:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 934              		.loc 1 303 0 is_stmt 1
 935 0983 488B8560 		movq	-160(%rbp), %rax
 935      FFFFFF
 936 098a 0FB600   		movzbl	(%rax), %eax
 937 098d 84C0     		testb	%al, %al
 938 098f 750F     		jne	.L70
 939              		.loc 1 303 0 is_stmt 0 discriminator 1
 940 0991 C78514FF 		movl	$6, -236(%rbp)
 940      FFFF0600 
 940      0000
 941 099b E9330C00 		jmp	.L52
 941      00
 942              	.L70:
 304:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 943              		.loc 1 304 0 is_stmt 1
 944 09a0 488B8560 		movq	-160(%rbp), %rax
 944      FFFFFF
 945 09a7 488B1500 		movq	ptr(%rip), %rdx
 945      000000
 946 09ae 4829D0   		subq	%rdx, %rax
 947 09b1 4883C001 		addq	$1, %rax
 948 09b5 4889C7   		movq	%rax, %rdi
 949 09b8 E8000000 		call	malloc@PLT
 949      00
 950 09bd 48898550 		movq	%rax, -176(%rbp)
 950      FFFFFF
 305:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 951              		.loc 1 305 0
 952 09c4 4883BD50 		cmpq	$0, -176(%rbp)
 952      FFFFFF00 
 953 09cc 750F     		jne	.L71
 954              		.loc 1 305 0 is_stmt 0 discriminator 1
 955 09ce C78514FF 		movl	$7, -236(%rbp)
 955      FFFF0700 
 955      0000
 956 09d8 E9F60B00 		jmp	.L52
 956      00
 957              	.L71:
 306:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 958              		.loc 1 306 0 is_stmt 1
 959 09dd 488B8560 		movq	-160(%rbp), %rax
 959      FFFFFF
 960 09e4 488B1500 		movq	ptr(%rip), %rdx
 960      000000
 961 09eb 4839D0   		cmpq	%rdx, %rax
 962 09ee 750F     		jne	.L72
 963              		.loc 1 306 0 is_stmt 0 discriminator 1
 964 09f0 C78514FF 		movl	$8, -236(%rbp)
 964      FFFF0800 
 964      0000
 965 09fa E9D40B00 		jmp	.L52
 965      00
 966              	.L72:
 307:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 967              		.loc 1 307 0 is_stmt 1
 968 09ff 488B8560 		movq	-160(%rbp), %rax
 968      FFFFFF
 969 0a06 488B1500 		movq	ptr(%rip), %rdx
 969      000000
 970 0a0d 4829D0   		subq	%rdx, %rax
 971 0a10 4889C2   		movq	%rax, %rdx
 972 0a13 488B0D00 		movq	ptr(%rip), %rcx
 972      000000
 973 0a1a 488B8550 		movq	-176(%rbp), %rax
 973      FFFFFF
 974 0a21 4889CE   		movq	%rcx, %rsi
 975 0a24 4889C7   		movq	%rax, %rdi
 976 0a27 E8000000 		call	strncpy@PLT
 976      00
 308:main.c        **** 					fileName[p - ptr] = '\0';
 977              		.loc 1 308 0
 978 0a2c 488B8560 		movq	-160(%rbp), %rax
 978      FFFFFF
 979 0a33 488B1500 		movq	ptr(%rip), %rdx
 979      000000
 980 0a3a 4829D0   		subq	%rdx, %rax
 981 0a3d 4889C2   		movq	%rax, %rdx
 982 0a40 488B8550 		movq	-176(%rbp), %rax
 982      FFFFFF
 983 0a47 4801D0   		addq	%rdx, %rax
 984 0a4a C60000   		movb	$0, (%rax)
 309:main.c        **** 					ptr = p + 1;
 985              		.loc 1 309 0
 986 0a4d 488B8560 		movq	-160(%rbp), %rax
 986      FFFFFF
 987 0a54 4883C001 		addq	$1, %rax
 988 0a58 48890500 		movq	%rax, ptr(%rip)
 988      000000
 989              	.L63:
 990              	.LBE3:
 310:main.c        **** 				}
 311:main.c        **** 			}
 312:main.c        **** 			if ( fileName ) {
 991              		.loc 1 312 0
 992 0a5f 4883BD50 		cmpq	$0, -176(%rbp)
 992      FFFFFF00 
 993 0a67 0F84E201 		je	.L73
 993      0000
 994              	.LBB4:
 313:main.c        **** 				uint16 checksum = 0x0000;
 995              		.loc 1 313 0
 996 0a6d 66C78538 		movw	$0, -200(%rbp)
 996      FFFFFF00 
 996      00
 314:main.c        **** 
 315:main.c        **** 				// Open file for writing
 316:main.c        **** 				file = fopen(fileName, "wb");
 997              		.loc 1 316 0
 998 0a76 488B8550 		movq	-176(%rbp), %rax
 998      FFFFFF
 999 0a7d 488D3500 		leaq	.LC13(%rip), %rsi
 999      000000
 1000 0a84 4889C7   		movq	%rax, %rdi
 1001 0a87 E8000000 		call	fopen@PLT
 1001      00
 1002 0a8c 48898558 		movq	%rax, -168(%rbp)
 1002      FFFFFF
 317:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 1003              		.loc 1 317 0
 1004 0a93 4883BD58 		cmpq	$0, -168(%rbp)
 1004      FFFFFF00 
 1005 0a9b 750F     		jne	.L74
 1006              		.loc 1 317 0 is_stmt 0 discriminator 1
 1007 0a9d C78514FF 		movl	$11, -236(%rbp)
 1007      FFFF0B00 
 1007      0000
 1008 0aa7 E9270B00 		jmp	.L52
 1008      00
 1009              	.L74:
 318:main.c        **** 				free(fileName);
 1010              		.loc 1 318 0 is_stmt 1
 1011 0aac 488B8550 		movq	-176(%rbp), %rax
 1011      FFFFFF
 1012 0ab3 4889C7   		movq	%rax, %rdi
 1013 0ab6 E8000000 		call	free@PLT
 1013      00
 319:main.c        **** 				fileName = NULL;
 1014              		.loc 1 319 0
 1015 0abb 48C78550 		movq	$0, -176(%rbp)
 1015      FFFFFF00 
 1015      000000
 320:main.c        **** 
 321:main.c        **** 				#ifdef WIN32
 322:main.c        **** 					QueryPerformanceCounter(&tvStart);
 323:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 324:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 325:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 326:main.c        **** 					totalTime /= freq.QuadPart;
 327:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 328:main.c        **** 				#else
 329:main.c        **** 					gettimeofday(&tvStart, NULL);
 1016              		.loc 1 329 0
 1017 0ac6 488D45B0 		leaq	-80(%rbp), %rax
 1018 0aca BE000000 		movl	$0, %esi
 1018      00
 1019 0acf 4889C7   		movq	%rax, %rdi
 1020 0ad2 E8000000 		call	gettimeofday@PLT
 1020      00
 330:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 1021              		.loc 1 330 0
 1022 0ad7 8B852CFF 		movl	-212(%rbp), %eax
 1022      FFFF
 1023 0add 0FB6F0   		movzbl	%al, %esi
 1024 0ae0 4C8B85F8 		movq	-264(%rbp), %r8
 1024      FEFFFF
 1025 0ae7 488DBD38 		leaq	-200(%rbp), %rdi
 1025      FFFFFF
 1026 0aee 488B8D58 		movq	-168(%rbp), %rcx
 1026      FFFFFF
 1027 0af5 8B9518FF 		movl	-232(%rbp), %edx
 1027      FFFF
 1028 0afb 488B8508 		movq	-248(%rbp), %rax
 1028      FFFFFF
 1029 0b02 4D89C1   		movq	%r8, %r9
 1030 0b05 4989F8   		movq	%rdi, %r8
 1031 0b08 4889C7   		movq	%rax, %rdi
 1032 0b0b E89FF6FF 		call	doRead
 1032      FF
 1033 0b10 898528FF 		movl	%eax, -216(%rbp)
 1033      FFFF
 331:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1034              		.loc 1 331 0
 1035 0b16 488D45C0 		leaq	-64(%rbp), %rax
 1036 0b1a BE000000 		movl	$0, %esi
 1036      00
 1037 0b1f 4889C7   		movq	%rax, %rdi
 1038 0b22 E8000000 		call	gettimeofday@PLT
 1038      00
 332:main.c        **** 					startTime = tvStart.tv_sec;
 1039              		.loc 1 332 0
 1040 0b27 488B45B0 		movq	-80(%rbp), %rax
 1041 0b2b 48894588 		movq	%rax, -120(%rbp)
 333:main.c        **** 					startTime *= 1000000;
 1042              		.loc 1 333 0
 1043 0b2f 488B4588 		movq	-120(%rbp), %rax
 1044 0b33 4869C040 		imulq	$1000000, %rax, %rax
 1044      420F00
 1045 0b3a 48894588 		movq	%rax, -120(%rbp)
 334:main.c        **** 					startTime += tvStart.tv_usec;
 1046              		.loc 1 334 0
 1047 0b3e 488B45B8 		movq	-72(%rbp), %rax
 1048 0b42 48014588 		addq	%rax, -120(%rbp)
 335:main.c        **** 					endTime = tvEnd.tv_sec;
 1049              		.loc 1 335 0
 1050 0b46 488B45C0 		movq	-64(%rbp), %rax
 1051 0b4a 48894590 		movq	%rax, -112(%rbp)
 336:main.c        **** 					endTime *= 1000000;
 1052              		.loc 1 336 0
 1053 0b4e 488B4590 		movq	-112(%rbp), %rax
 1054 0b52 4869C040 		imulq	$1000000, %rax, %rax
 1054      420F00
 1055 0b59 48894590 		movq	%rax, -112(%rbp)
 337:main.c        **** 					endTime += tvEnd.tv_usec;
 1056              		.loc 1 337 0
 1057 0b5d 488B45C8 		movq	-56(%rbp), %rax
 1058 0b61 48014590 		addq	%rax, -112(%rbp)
 338:main.c        **** 					totalTime = (double)(endTime - startTime);
 1059              		.loc 1 338 0
 1060 0b65 488B4590 		movq	-112(%rbp), %rax
 1061 0b69 482B4588 		subq	-120(%rbp), %rax
 1062 0b6d F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1062      C0
 1063 0b72 F20F1145 		movsd	%xmm0, -104(%rbp)
 1063      98
 339:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1064              		.loc 1 339 0
 1065 0b77 F20F1045 		movsd	-104(%rbp), %xmm0
 1065      98
 1066 0b7c F20F100D 		movsd	.LC14(%rip), %xmm1
 1066      00000000 
 1067 0b84 F20F5EC1 		divsd	%xmm1, %xmm0
 1068 0b88 F20F1145 		movsd	%xmm0, -104(%rbp)
 1068      98
 340:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1069              		.loc 1 340 0
 1070 0b8d 8B8518FF 		movl	-232(%rbp), %eax
 1070      FFFF
 1071 0b93 4885C0   		testq	%rax, %rax
 1072 0b96 7807     		js	.L76
 1073 0b98 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1073      C0
 1074 0b9d EB15     		jmp	.L77
 1075              	.L76:
 1076 0b9f 4889C2   		movq	%rax, %rdx
 1077 0ba2 48D1EA   		shrq	%rdx
 1078 0ba5 83E001   		andl	$1, %eax
 1079 0ba8 4809C2   		orq	%rax, %rdx
 1080 0bab F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1080      C2
 1081 0bb0 F20F58C0 		addsd	%xmm0, %xmm0
 1082              	.L77:
 1083 0bb4 F20F1055 		movsd	-104(%rbp), %xmm2
 1083      98
 1084 0bb9 F20F100D 		movsd	.LC15(%rip), %xmm1
 1084      00000000 
 1085 0bc1 F20F59CA 		mulsd	%xmm2, %xmm1
 1086 0bc5 F20F5EC1 		divsd	%xmm1, %xmm0
 1087 0bc9 F20F1145 		movsd	%xmm0, -96(%rbp)
 1087      A0
 341:main.c        **** 				#endif
 342:main.c        **** 				if ( enableBenchmarking ) {
 1088              		.loc 1 342 0
 1089 0bce 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1089      000000
 1090 0bd5 84C0     		testb	%al, %al
 1091 0bd7 743C     		je	.L78
 343:main.c        **** 					printf(
 1092              		.loc 1 343 0
 1093 0bd9 0FB78538 		movzwl	-200(%rbp), %eax
 1093      FFFFFF
 1094 0be0 0FB7D0   		movzwl	%ax, %edx
 1095 0be3 488B75A0 		movq	-96(%rbp), %rsi
 1096 0be7 8B8D2CFF 		movl	-212(%rbp), %ecx
 1096      FFFF
 1097 0bed 8B8518FF 		movl	-232(%rbp), %eax
 1097      FFFF
 1098 0bf3 4889B5F0 		movq	%rsi, -272(%rbp)
 1098      FEFFFF
 1099 0bfa F20F1085 		movsd	-272(%rbp), %xmm0
 1099      F0FEFFFF 
 1100 0c02 89C6     		movl	%eax, %esi
 1101 0c04 488D3D00 		leaq	.LC16(%rip), %rdi
 1101      000000
 1102 0c0b B8010000 		movl	$1, %eax
 1102      00
 1103 0c10 E8000000 		call	printf@PLT
 1103      00
 1104              	.L78:
 344:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 345:main.c        **** 						length, checksum, chan, speed);
 346:main.c        **** 				}
 347:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1105              		.loc 1 347 0
 1106 0c15 83BD28FF 		cmpl	$0, -216(%rbp)
 1106      FFFF00
 1107 0c1c 7412     		je	.L79
 1108              		.loc 1 347 0 is_stmt 0 discriminator 1
 1109 0c1e 8B8528FF 		movl	-216(%rbp), %eax
 1109      FFFF
 1110 0c24 898514FF 		movl	%eax, -236(%rbp)
 1110      FFFF
 1111 0c2a 90       		nop
 1112              	.LBE4:
 270:main.c        **** 
 1113              		.loc 1 270 0 is_stmt 1 discriminator 1
 1114 0c2b E9A30900 		jmp	.L52
 1114      00
 1115              	.L79:
 1116              	.LBB5:
 348:main.c        **** 
 349:main.c        **** 				// Close the file
 350:main.c        **** 				fclose(file);
 1117              		.loc 1 350 0
 1118 0c30 488B8558 		movq	-168(%rbp), %rax
 1118      FFFFFF
 1119 0c37 4889C7   		movq	%rax, %rdi
 1120 0c3a E8000000 		call	fclose@PLT
 1120      00
 351:main.c        **** 				file = NULL;
 1121              		.loc 1 351 0
 1122 0c3f 48C78558 		movq	$0, -168(%rbp)
 1122      FFFFFF00 
 1122      000000
 1123              	.LBE5:
 352:main.c        **** 			} else {
 353:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 354:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 355:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 356:main.c        **** 				#ifdef WIN32
 357:main.c        **** 					QueryPerformanceCounter(&tvStart);
 358:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 359:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 360:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 361:main.c        **** 					totalTime /= freq.QuadPart;
 362:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 363:main.c        **** 				#else
 364:main.c        **** 					gettimeofday(&tvStart, NULL);
 365:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 366:main.c        **** 					gettimeofday(&tvEnd, NULL);
 367:main.c        **** 					startTime = tvStart.tv_sec;
 368:main.c        **** 					startTime *= 1000000;
 369:main.c        **** 					startTime += tvStart.tv_usec;
 370:main.c        **** 					endTime = tvEnd.tv_sec;
 371:main.c        **** 					endTime *= 1000000;
 372:main.c        **** 					endTime += tvEnd.tv_usec;
 373:main.c        **** 					totalTime = (double)(endTime - startTime);
 374:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 375:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 376:main.c        **** 				#endif
 377:main.c        **** 				if ( enableBenchmarking ) {
 378:main.c        **** 					printf(
 379:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 380:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 381:main.c        **** 				}
 382:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 383:main.c        **** 			}
 384:main.c        **** 			break;
 1124              		.loc 1 384 0
 1125 0c4a E93F0900 		jmp	.L129
 1125      00
 1126              	.L73:
 1127              	.LBB6:
 353:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 1128              		.loc 1 353 0
 1129 0c4f 488B45D8 		movq	-40(%rbp), %rax
 1130 0c53 488945A8 		movq	%rax, -88(%rbp)
 354:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1131              		.loc 1 354 0
 1132 0c57 8B9518FF 		movl	-232(%rbp), %edx
 1132      FFFF
 1133 0c5d 488B8DF8 		movq	-264(%rbp), %rcx
 1133      FEFFFF
 1134 0c64 488D45D0 		leaq	-48(%rbp), %rax
 1135 0c68 BE000000 		movl	$0, %esi
 1135      00
 1136 0c6d 4889C7   		movq	%rax, %rdi
 1137 0c70 E8000000 		call	bufAppendConst@PLT
 1137      00
 1138 0c75 898520FF 		movl	%eax, -224(%rbp)
 1138      FFFF
 355:main.c        **** 				#ifdef WIN32
 1139              		.loc 1 355 0
 1140 0c7b 83BD20FF 		cmpl	$0, -224(%rbp)
 1140      FFFF00
 1141 0c82 740F     		je	.L81
 355:main.c        **** 				#ifdef WIN32
 1142              		.loc 1 355 0 is_stmt 0 discriminator 1
 1143 0c84 C78514FF 		movl	$1, -236(%rbp)
 1143      FFFF0100 
 1143      0000
 1144 0c8e E9400900 		jmp	.L52
 1144      00
 1145              	.L81:
 364:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 1146              		.loc 1 364 0 is_stmt 1
 1147 0c93 488D45B0 		leaq	-80(%rbp), %rax
 1148 0c97 BE000000 		movl	$0, %esi
 1148      00
 1149 0c9c 4889C7   		movq	%rax, %rdi
 1150 0c9f E8000000 		call	gettimeofday@PLT
 1150      00
 365:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1151              		.loc 1 365 0
 1152 0ca4 488B55D0 		movq	-48(%rbp), %rdx
 1153 0ca8 488B45A8 		movq	-88(%rbp), %rax
 1154 0cac 488D0C02 		leaq	(%rdx,%rax), %rcx
 1155 0cb0 8B9518FF 		movl	-232(%rbp), %edx
 1155      FFFF
 1156 0cb6 8B852CFF 		movl	-212(%rbp), %eax
 1156      FFFF
 1157 0cbc 0FB6F0   		movzbl	%al, %esi
 1158 0cbf 488BBDF8 		movq	-264(%rbp), %rdi
 1158      FEFFFF
 1159 0cc6 488B8508 		movq	-248(%rbp), %rax
 1159      FFFFFF
 1160 0ccd 4989F8   		movq	%rdi, %r8
 1161 0cd0 4889C7   		movq	%rax, %rdi
 1162 0cd3 E8000000 		call	flReadChannel@PLT
 1162      00
 1163 0cd8 898524FF 		movl	%eax, -220(%rbp)
 1163      FFFF
 366:main.c        **** 					startTime = tvStart.tv_sec;
 1164              		.loc 1 366 0
 1165 0cde 488D45C0 		leaq	-64(%rbp), %rax
 1166 0ce2 BE000000 		movl	$0, %esi
 1166      00
 1167 0ce7 4889C7   		movq	%rax, %rdi
 1168 0cea E8000000 		call	gettimeofday@PLT
 1168      00
 367:main.c        **** 					startTime *= 1000000;
 1169              		.loc 1 367 0
 1170 0cef 488B45B0 		movq	-80(%rbp), %rax
 1171 0cf3 48894588 		movq	%rax, -120(%rbp)
 368:main.c        **** 					startTime += tvStart.tv_usec;
 1172              		.loc 1 368 0
 1173 0cf7 488B4588 		movq	-120(%rbp), %rax
 1174 0cfb 4869C040 		imulq	$1000000, %rax, %rax
 1174      420F00
 1175 0d02 48894588 		movq	%rax, -120(%rbp)
 369:main.c        **** 					endTime = tvEnd.tv_sec;
 1176              		.loc 1 369 0
 1177 0d06 488B45B8 		movq	-72(%rbp), %rax
 1178 0d0a 48014588 		addq	%rax, -120(%rbp)
 370:main.c        **** 					endTime *= 1000000;
 1179              		.loc 1 370 0
 1180 0d0e 488B45C0 		movq	-64(%rbp), %rax
 1181 0d12 48894590 		movq	%rax, -112(%rbp)
 371:main.c        **** 					endTime += tvEnd.tv_usec;
 1182              		.loc 1 371 0
 1183 0d16 488B4590 		movq	-112(%rbp), %rax
 1184 0d1a 4869C040 		imulq	$1000000, %rax, %rax
 1184      420F00
 1185 0d21 48894590 		movq	%rax, -112(%rbp)
 372:main.c        **** 					totalTime = (double)(endTime - startTime);
 1186              		.loc 1 372 0
 1187 0d25 488B45C8 		movq	-56(%rbp), %rax
 1188 0d29 48014590 		addq	%rax, -112(%rbp)
 373:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1189              		.loc 1 373 0
 1190 0d2d 488B4590 		movq	-112(%rbp), %rax
 1191 0d31 482B4588 		subq	-120(%rbp), %rax
 1192 0d35 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1192      C0
 1193 0d3a F20F1145 		movsd	%xmm0, -104(%rbp)
 1193      98
 374:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1194              		.loc 1 374 0
 1195 0d3f F20F1045 		movsd	-104(%rbp), %xmm0
 1195      98
 1196 0d44 F20F100D 		movsd	.LC14(%rip), %xmm1
 1196      00000000 
 1197 0d4c F20F5EC1 		divsd	%xmm1, %xmm0
 1198 0d50 F20F1145 		movsd	%xmm0, -104(%rbp)
 1198      98
 375:main.c        **** 				#endif
 1199              		.loc 1 375 0
 1200 0d55 8B8518FF 		movl	-232(%rbp), %eax
 1200      FFFF
 1201 0d5b 4885C0   		testq	%rax, %rax
 1202 0d5e 7807     		js	.L82
 1203 0d60 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1203      C0
 1204 0d65 EB15     		jmp	.L83
 1205              	.L82:
 1206 0d67 4889C2   		movq	%rax, %rdx
 1207 0d6a 48D1EA   		shrq	%rdx
 1208 0d6d 83E001   		andl	$1, %eax
 1209 0d70 4809C2   		orq	%rax, %rdx
 1210 0d73 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1210      C2
 1211 0d78 F20F58C0 		addsd	%xmm0, %xmm0
 1212              	.L83:
 1213 0d7c F20F1055 		movsd	-104(%rbp), %xmm2
 1213      98
 1214 0d81 F20F100D 		movsd	.LC15(%rip), %xmm1
 1214      00000000 
 1215 0d89 F20F59CA 		mulsd	%xmm2, %xmm1
 1216 0d8d F20F5EC1 		divsd	%xmm1, %xmm0
 1217 0d91 F20F1145 		movsd	%xmm0, -96(%rbp)
 1217      A0
 377:main.c        **** 					printf(
 1218              		.loc 1 377 0
 1219 0d96 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1219      000000
 1220 0d9d 84C0     		testb	%al, %al
 1221 0d9f 7451     		je	.L84
 380:main.c        **** 				}
 1222              		.loc 1 380 0
 1223 0da1 8B8518FF 		movl	-232(%rbp), %eax
 1223      FFFF
 1224 0da7 488B4DD0 		movq	-48(%rbp), %rcx
 1225 0dab 488B55A8 		movq	-88(%rbp), %rdx
 1226 0daf 4801CA   		addq	%rcx, %rdx
 1227 0db2 4889C6   		movq	%rax, %rsi
 1228 0db5 4889D7   		movq	%rdx, %rdi
 1229 0db8 E899F2FF 		call	calcChecksum
 1229      FF
 378:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 1230              		.loc 1 378 0
 1231 0dbd 0FB7D0   		movzwl	%ax, %edx
 1232 0dc0 488B75A0 		movq	-96(%rbp), %rsi
 1233 0dc4 8B8D2CFF 		movl	-212(%rbp), %ecx
 1233      FFFF
 1234 0dca 8B8518FF 		movl	-232(%rbp), %eax
 1234      FFFF
 1235 0dd0 4889B5F0 		movq	%rsi, -272(%rbp)
 1235      FEFFFF
 1236 0dd7 F20F1085 		movsd	-272(%rbp), %xmm0
 1236      F0FEFFFF 
 1237 0ddf 89C6     		movl	%eax, %esi
 1238 0de1 488D3D00 		leaq	.LC16(%rip), %rdi
 1238      000000
 1239 0de8 B8010000 		movl	$1, %eax
 1239      00
 1240 0ded E8000000 		call	printf@PLT
 1240      00
 1241              	.L84:
 382:main.c        **** 			}
 1242              		.loc 1 382 0
 1243 0df2 83BD24FF 		cmpl	$0, -220(%rbp)
 1243      FFFF00
 1244 0df9 0F848F07 		je	.L129
 1244      0000
 382:main.c        **** 			}
 1245              		.loc 1 382 0 is_stmt 0 discriminator 1
 1246 0dff C78514FF 		movl	$1, -236(%rbp)
 1246      FFFF0100 
 1246      0000
 1247 0e09 90       		nop
 1248 0e0a E9C40700 		jmp	.L52
 1248      00
 1249              	.L57:
 1250              	.LBE6:
 1251              	.LBE2:
 1252              	.LBB7:
 385:main.c        **** 		}
 386:main.c        **** 		case 'w':{
 387:main.c        **** 			unsigned long int chan;
 388:main.c        **** 			size_t length = 1, i;
 1253              		.loc 1 388 0 is_stmt 1
 1254 0e0f 48C78538 		movq	$1, -200(%rbp)
 1254      FFFFFF01 
 1254      000000
 389:main.c        **** 			char *end, ch;
 390:main.c        **** 			const char *p;
 391:main.c        **** 			ptr++;
 1255              		.loc 1 391 0
 1256 0e1a 488B0500 		movq	ptr(%rip), %rax
 1256      000000
 1257 0e21 4883C001 		addq	$1, %rax
 1258 0e25 48890500 		movq	%rax, ptr(%rip)
 1258      000000
 392:main.c        **** 			
 393:main.c        **** 			// Get the channel to be written:
 394:main.c        **** 			errno = 0;
 1259              		.loc 1 394 0
 1260 0e2c E8000000 		call	__errno_location@PLT
 1260      00
 1261 0e31 C7000000 		movl	$0, (%rax)
 1261      0000
 395:main.c        **** 			chan = strtoul(ptr, &end, 16);
 1262              		.loc 1 395 0
 1263 0e37 488B0500 		movq	ptr(%rip), %rax
 1263      000000
 1264 0e3e 488D8D40 		leaq	-192(%rbp), %rcx
 1264      FFFFFF
 1265 0e45 BA100000 		movl	$16, %edx
 1265      00
 1266 0e4a 4889CE   		movq	%rcx, %rsi
 1267 0e4d 4889C7   		movq	%rax, %rdi
 1268 0e50 E8000000 		call	strtoul@PLT
 1268      00
 1269 0e55 48894580 		movq	%rax, -128(%rbp)
 396:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1270              		.loc 1 396 0
 1271 0e59 E8000000 		call	__errno_location@PLT
 1271      00
 1272 0e5e 8B00     		movl	(%rax), %eax
 1273 0e60 85C0     		testl	%eax, %eax
 1274 0e62 740F     		je	.L86
 1275              		.loc 1 396 0 is_stmt 0 discriminator 1
 1276 0e64 C78514FF 		movl	$2, -236(%rbp)
 1276      FFFF0200 
 1276      0000
 1277 0e6e E9600700 		jmp	.L52
 1277      00
 1278              	.L86:
 397:main.c        **** 
 398:main.c        **** 			// Ensure that it's 0-127
 399:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1279              		.loc 1 399 0 is_stmt 1
 1280 0e73 48837D80 		cmpq	$127, -128(%rbp)
 1280      7F
 1281 0e78 760F     		jbe	.L88
 1282              		.loc 1 399 0 is_stmt 0 discriminator 1
 1283 0e7a C78514FF 		movl	$3, -236(%rbp)
 1283      FFFF0300 
 1283      0000
 1284 0e84 E94A0700 		jmp	.L52
 1284      00
 1285              	.L88:
 400:main.c        **** 			ptr = end;
 1286              		.loc 1 400 0 is_stmt 1
 1287 0e89 488B8540 		movq	-192(%rbp), %rax
 1287      FFFFFF
 1288 0e90 48890500 		movq	%rax, ptr(%rip)
 1288      000000
 401:main.c        **** 
 402:main.c        **** 			// There must be a space now:
 403:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 1289              		.loc 1 403 0
 1290 0e97 488B0500 		movq	ptr(%rip), %rax
 1290      000000
 1291 0e9e 0FB600   		movzbl	(%rax), %eax
 1292 0ea1 3C20     		cmpb	$32, %al
 1293 0ea3 740F     		je	.L89
 1294              		.loc 1 403 0 is_stmt 0 discriminator 1
 1295 0ea5 C78514FF 		movl	$5, -236(%rbp)
 1295      FFFF0500 
 1295      0000
 1296 0eaf E91F0700 		jmp	.L52
 1296      00
 1297              	.L89:
 404:main.c        **** 
 405:main.c        **** 			// Now either a quote or a hex digit
 406:main.c        **** 		   ch = *++ptr;
 1298              		.loc 1 406 0 is_stmt 1
 1299 0eb4 488B0500 		movq	ptr(%rip), %rax
 1299      000000
 1300 0ebb 4883C001 		addq	$1, %rax
 1301 0ebf 48890500 		movq	%rax, ptr(%rip)
 1301      000000
 1302 0ec6 488B0500 		movq	ptr(%rip), %rax
 1302      000000
 1303 0ecd 0FB600   		movzbl	(%rax), %eax
 1304 0ed0 888510FF 		movb	%al, -240(%rbp)
 1304      FFFF
 407:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 1305              		.loc 1 407 0
 1306 0ed6 80BD10FF 		cmpb	$34, -240(%rbp)
 1306      FFFF22
 1307 0edd 740D     		je	.L90
 1308              		.loc 1 407 0 is_stmt 0 discriminator 1
 1309 0edf 80BD10FF 		cmpb	$39, -240(%rbp)
 1309      FFFF27
 1310 0ee6 0F850A03 		jne	.L91
 1310      0000
 1311              	.L90:
 1312              	.LBB8:
 408:main.c        **** 				uint16 checksum = 0x0000;
 1313              		.loc 1 408 0 is_stmt 1
 1314 0eec 66C78512 		movw	$0, -238(%rbp)
 1314      FFFFFF00 
 1314      00
 409:main.c        **** 
 410:main.c        **** 				// Get the file to read bytes from:
 411:main.c        **** 				ptr++;
 1315              		.loc 1 411 0
 1316 0ef5 488B0500 		movq	ptr(%rip), %rax
 1316      000000
 1317 0efc 4883C001 		addq	$1, %rax
 1318 0f00 48890500 		movq	%rax, ptr(%rip)
 1318      000000
 412:main.c        **** 				p = ptr;
 1319              		.loc 1 412 0
 1320 0f07 488B0500 		movq	ptr(%rip), %rax
 1320      000000
 1321 0f0e 48898570 		movq	%rax, -144(%rbp)
 1321      FFFFFF
 413:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1322              		.loc 1 413 0
 1323 0f15 EB08     		jmp	.L92
 1324              	.L94:
 414:main.c        **** 					p++;
 1325              		.loc 1 414 0
 1326 0f17 48838570 		addq	$1, -144(%rbp)
 1326      FFFFFF01 
 1327              	.L92:
 413:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1328              		.loc 1 413 0
 1329 0f1f 488B8570 		movq	-144(%rbp), %rax
 1329      FFFFFF
 1330 0f26 0FB600   		movzbl	(%rax), %eax
 1331 0f29 388510FF 		cmpb	%al, -240(%rbp)
 1331      FFFF
 1332 0f2f 740E     		je	.L93
 413:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1333              		.loc 1 413 0 is_stmt 0 discriminator 1
 1334 0f31 488B8570 		movq	-144(%rbp), %rax
 1334      FFFFFF
 1335 0f38 0FB600   		movzbl	(%rax), %eax
 1336 0f3b 84C0     		testb	%al, %al
 1337 0f3d 75D8     		jne	.L94
 1338              	.L93:
 415:main.c        **** 				}
 416:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1339              		.loc 1 416 0 is_stmt 1
 1340 0f3f 488B8570 		movq	-144(%rbp), %rax
 1340      FFFFFF
 1341 0f46 0FB600   		movzbl	(%rax), %eax
 1342 0f49 84C0     		testb	%al, %al
 1343 0f4b 750F     		jne	.L95
 1344              		.loc 1 416 0 is_stmt 0 discriminator 1
 1345 0f4d C78514FF 		movl	$6, -236(%rbp)
 1345      FFFF0600 
 1345      0000
 1346 0f57 E9770600 		jmp	.L52
 1346      00
 1347              	.L95:
 417:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 1348              		.loc 1 417 0 is_stmt 1
 1349 0f5c 488B8570 		movq	-144(%rbp), %rax
 1349      FFFFFF
 1350 0f63 488B1500 		movq	ptr(%rip), %rdx
 1350      000000
 1351 0f6a 4829D0   		subq	%rdx, %rax
 1352 0f6d 4883C001 		addq	$1, %rax
 1353 0f71 4889C7   		movq	%rax, %rdi
 1354 0f74 E8000000 		call	malloc@PLT
 1354      00
 1355 0f79 48898550 		movq	%rax, -176(%rbp)
 1355      FFFFFF
 418:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1356              		.loc 1 418 0
 1357 0f80 4883BD50 		cmpq	$0, -176(%rbp)
 1357      FFFFFF00 
 1358 0f88 750F     		jne	.L97
 1359              		.loc 1 418 0 is_stmt 0 discriminator 1
 1360 0f8a C78514FF 		movl	$7, -236(%rbp)
 1360      FFFF0700 
 1360      0000
 1361 0f94 E9580200 		jmp	.L96
 1361      00
 1362              	.L97:
 419:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1363              		.loc 1 419 0 is_stmt 1
 1364 0f99 488B8570 		movq	-144(%rbp), %rax
 1364      FFFFFF
 1365 0fa0 488B1500 		movq	ptr(%rip), %rdx
 1365      000000
 1366 0fa7 4839D0   		cmpq	%rdx, %rax
 1367 0faa 750F     		jne	.L98
 1368              		.loc 1 419 0 is_stmt 0 discriminator 1
 1369 0fac C78514FF 		movl	$8, -236(%rbp)
 1369      FFFF0800 
 1369      0000
 1370 0fb6 E9360200 		jmp	.L96
 1370      00
 1371              	.L98:
 420:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 1372              		.loc 1 420 0 is_stmt 1
 1373 0fbb 488B8570 		movq	-144(%rbp), %rax
 1373      FFFFFF
 1374 0fc2 488B1500 		movq	ptr(%rip), %rdx
 1374      000000
 1375 0fc9 4829D0   		subq	%rdx, %rax
 1376 0fcc 4889C2   		movq	%rax, %rdx
 1377 0fcf 488B0D00 		movq	ptr(%rip), %rcx
 1377      000000
 1378 0fd6 488B8550 		movq	-176(%rbp), %rax
 1378      FFFFFF
 1379 0fdd 4889CE   		movq	%rcx, %rsi
 1380 0fe0 4889C7   		movq	%rax, %rdi
 1381 0fe3 E8000000 		call	strncpy@PLT
 1381      00
 421:main.c        **** 				fileName[p - ptr] = '\0';
 1382              		.loc 1 421 0
 1383 0fe8 488B8570 		movq	-144(%rbp), %rax
 1383      FFFFFF
 1384 0fef 488B1500 		movq	ptr(%rip), %rdx
 1384      000000
 1385 0ff6 4829D0   		subq	%rdx, %rax
 1386 0ff9 4889C2   		movq	%rax, %rdx
 1387 0ffc 488B8550 		movq	-176(%rbp), %rax
 1387      FFFFFF
 1388 1003 4801D0   		addq	%rdx, %rax
 1389 1006 C60000   		movb	$0, (%rax)
 422:main.c        **** 				ptr = p + 1;  // skip over closing quote
 1390              		.loc 1 422 0
 1391 1009 488B8570 		movq	-144(%rbp), %rax
 1391      FFFFFF
 1392 1010 4883C001 		addq	$1, %rax
 1393 1014 48890500 		movq	%rax, ptr(%rip)
 1393      000000
 423:main.c        **** 
 424:main.c        **** 				// Open file for reading
 425:main.c        **** 				file = fopen(fileName, "rb");
 1394              		.loc 1 425 0
 1395 101b 488B8550 		movq	-176(%rbp), %rax
 1395      FFFFFF
 1396 1022 488D3500 		leaq	.LC17(%rip), %rsi
 1396      000000
 1397 1029 4889C7   		movq	%rax, %rdi
 1398 102c E8000000 		call	fopen@PLT
 1398      00
 1399 1031 48898558 		movq	%rax, -168(%rbp)
 1399      FFFFFF
 426:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 1400              		.loc 1 426 0
 1401 1038 4883BD58 		cmpq	$0, -168(%rbp)
 1401      FFFFFF00 
 1402 1040 750F     		jne	.L99
 1403              		.loc 1 426 0 is_stmt 0 discriminator 1
 1404 1042 C78514FF 		movl	$10, -236(%rbp)
 1404      FFFF0A00 
 1404      0000
 1405 104c E9A00100 		jmp	.L96
 1405      00
 1406              	.L99:
 427:main.c        **** 				free(fileName);
 1407              		.loc 1 427 0 is_stmt 1
 1408 1051 488B8550 		movq	-176(%rbp), %rax
 1408      FFFFFF
 1409 1058 4889C7   		movq	%rax, %rdi
 1410 105b E8000000 		call	free@PLT
 1410      00
 428:main.c        **** 				fileName = NULL;
 1411              		.loc 1 428 0
 1412 1060 48C78550 		movq	$0, -176(%rbp)
 1412      FFFFFF00 
 1412      000000
 429:main.c        **** 				
 430:main.c        **** 				#ifdef WIN32
 431:main.c        **** 					QueryPerformanceCounter(&tvStart);
 432:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 433:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 434:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 435:main.c        **** 					totalTime /= freq.QuadPart;
 436:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 437:main.c        **** 				#else
 438:main.c        **** 					gettimeofday(&tvStart, NULL);
 1413              		.loc 1 438 0
 1414 106b 488D45B0 		leaq	-80(%rbp), %rax
 1415 106f BE000000 		movl	$0, %esi
 1415      00
 1416 1074 4889C7   		movq	%rax, %rdi
 1417 1077 E8000000 		call	gettimeofday@PLT
 1417      00
 439:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 1418              		.loc 1 439 0
 1419 107c 488B4580 		movq	-128(%rbp), %rax
 1420 1080 0FB6F0   		movzbl	%al, %esi
 1421 1083 4C8B85F8 		movq	-264(%rbp), %r8
 1421      FEFFFF
 1422 108a 488DBD12 		leaq	-238(%rbp), %rdi
 1422      FFFFFF
 1423 1091 488D8D38 		leaq	-200(%rbp), %rcx
 1423      FFFFFF
 1424 1098 488B9558 		movq	-168(%rbp), %rdx
 1424      FFFFFF
 1425 109f 488B8508 		movq	-248(%rbp), %rax
 1425      FFFFFF
 1426 10a6 4D89C1   		movq	%r8, %r9
 1427 10a9 4989F8   		movq	%rdi, %r8
 1428 10ac 4889C7   		movq	%rax, %rdi
 1429 10af E8AFF3FF 		call	doWrite
 1429      FF
 1430 10b4 898528FF 		movl	%eax, -216(%rbp)
 1430      FFFF
 440:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1431              		.loc 1 440 0
 1432 10ba 488D45C0 		leaq	-64(%rbp), %rax
 1433 10be BE000000 		movl	$0, %esi
 1433      00
 1434 10c3 4889C7   		movq	%rax, %rdi
 1435 10c6 E8000000 		call	gettimeofday@PLT
 1435      00
 441:main.c        **** 					startTime = tvStart.tv_sec;
 1436              		.loc 1 441 0
 1437 10cb 488B45B0 		movq	-80(%rbp), %rax
 1438 10cf 48894588 		movq	%rax, -120(%rbp)
 442:main.c        **** 					startTime *= 1000000;
 1439              		.loc 1 442 0
 1440 10d3 488B4588 		movq	-120(%rbp), %rax
 1441 10d7 4869C040 		imulq	$1000000, %rax, %rax
 1441      420F00
 1442 10de 48894588 		movq	%rax, -120(%rbp)
 443:main.c        **** 					startTime += tvStart.tv_usec;
 1443              		.loc 1 443 0
 1444 10e2 488B45B8 		movq	-72(%rbp), %rax
 1445 10e6 48014588 		addq	%rax, -120(%rbp)
 444:main.c        **** 					endTime = tvEnd.tv_sec;
 1446              		.loc 1 444 0
 1447 10ea 488B45C0 		movq	-64(%rbp), %rax
 1448 10ee 48894590 		movq	%rax, -112(%rbp)
 445:main.c        **** 					endTime *= 1000000;
 1449              		.loc 1 445 0
 1450 10f2 488B4590 		movq	-112(%rbp), %rax
 1451 10f6 4869C040 		imulq	$1000000, %rax, %rax
 1451      420F00
 1452 10fd 48894590 		movq	%rax, -112(%rbp)
 446:main.c        **** 					endTime += tvEnd.tv_usec;
 1453              		.loc 1 446 0
 1454 1101 488B45C8 		movq	-56(%rbp), %rax
 1455 1105 48014590 		addq	%rax, -112(%rbp)
 447:main.c        **** 					totalTime = (double)(endTime - startTime);
 1456              		.loc 1 447 0
 1457 1109 488B4590 		movq	-112(%rbp), %rax
 1458 110d 482B4588 		subq	-120(%rbp), %rax
 1459 1111 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1459      C0
 1460 1116 F20F1145 		movsd	%xmm0, -104(%rbp)
 1460      98
 448:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1461              		.loc 1 448 0
 1462 111b F20F1045 		movsd	-104(%rbp), %xmm0
 1462      98
 1463 1120 F20F100D 		movsd	.LC14(%rip), %xmm1
 1463      00000000 
 1464 1128 F20F5EC1 		divsd	%xmm1, %xmm0
 1465 112c F20F1145 		movsd	%xmm0, -104(%rbp)
 1465      98
 449:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1466              		.loc 1 449 0
 1467 1131 488B8538 		movq	-200(%rbp), %rax
 1467      FFFFFF
 1468 1138 4885C0   		testq	%rax, %rax
 1469 113b 7807     		js	.L100
 1470 113d F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1470      C0
 1471 1142 EB15     		jmp	.L101
 1472              	.L100:
 1473 1144 4889C2   		movq	%rax, %rdx
 1474 1147 48D1EA   		shrq	%rdx
 1475 114a 83E001   		andl	$1, %eax
 1476 114d 4809C2   		orq	%rax, %rdx
 1477 1150 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1477      C2
 1478 1155 F20F58C0 		addsd	%xmm0, %xmm0
 1479              	.L101:
 1480 1159 F20F1055 		movsd	-104(%rbp), %xmm2
 1480      98
 1481 115e F20F100D 		movsd	.LC15(%rip), %xmm1
 1481      00000000 
 1482 1166 F20F59CA 		mulsd	%xmm2, %xmm1
 1483 116a F20F5EC1 		divsd	%xmm1, %xmm0
 1484 116e F20F1145 		movsd	%xmm0, -96(%rbp)
 1484      A0
 450:main.c        **** 				#endif
 451:main.c        **** 				if ( enableBenchmarking ) {
 1485              		.loc 1 451 0
 1486 1173 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1486      000000
 1487 117a 84C0     		testb	%al, %al
 1488 117c 743C     		je	.L102
 452:main.c        **** 					printf(
 1489              		.loc 1 452 0
 1490 117e 0FB78512 		movzwl	-238(%rbp), %eax
 1490      FFFFFF
 1491 1185 0FB7D0   		movzwl	%ax, %edx
 1492 1188 488B8538 		movq	-200(%rbp), %rax
 1492      FFFFFF
 1493 118f 488B75A0 		movq	-96(%rbp), %rsi
 1494 1193 488B4D80 		movq	-128(%rbp), %rcx
 1495 1197 4889B5F0 		movq	%rsi, -272(%rbp)
 1495      FEFFFF
 1496 119e F20F1085 		movsd	-272(%rbp), %xmm0
 1496      F0FEFFFF 
 1497 11a6 4889C6   		movq	%rax, %rsi
 1498 11a9 488D3D00 		leaq	.LC18(%rip), %rdi
 1498      000000
 1499 11b0 B8010000 		movl	$1, %eax
 1499      00
 1500 11b5 E8000000 		call	printf@PLT
 1500      00
 1501              	.L102:
 453:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 454:main.c        **** 						length, checksum, chan, speed);
 455:main.c        **** 				}
 456:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1502              		.loc 1 456 0
 1503 11ba 83BD28FF 		cmpl	$0, -216(%rbp)
 1503      FFFF00
 1504 11c1 740E     		je	.L103
 1505              		.loc 1 456 0 is_stmt 0 discriminator 1
 1506 11c3 8B8528FF 		movl	-216(%rbp), %eax
 1506      FFFF
 1507 11c9 898514FF 		movl	%eax, -236(%rbp)
 1507      FFFF
 1508 11cf EB20     		jmp	.L96
 1509              	.L103:
 457:main.c        **** 
 458:main.c        **** 				// Close the file
 459:main.c        **** 				fclose(file);
 1510              		.loc 1 459 0 is_stmt 1
 1511 11d1 488B8558 		movq	-168(%rbp), %rax
 1511      FFFFFF
 1512 11d8 4889C7   		movq	%rax, %rdi
 1513 11db E8000000 		call	fclose@PLT
 1513      00
 460:main.c        **** 				file = NULL;
 1514              		.loc 1 460 0
 1515 11e0 48C78558 		movq	$0, -168(%rbp)
 1515      FFFFFF00 
 1515      000000
 1516              	.LBE8:
 407:main.c        **** 				uint16 checksum = 0x0000;
 1517              		.loc 1 407 0
 1518 11eb 90       		nop
 1519 11ec E9A10300 		jmp	.L85
 1519      00
 1520              	.L96:
 396:main.c        **** 
 1521              		.loc 1 396 0 discriminator 2
 1522 11f1 E9DD0300 		jmp	.L52
 1522      00
 1523              	.L91:
 461:main.c        **** 			} else if ( isHexDigit(ch) ) {
 1524              		.loc 1 461 0
 1525 11f6 0FBE8510 		movsbl	-240(%rbp), %eax
 1525      FFFFFF
 1526 11fd 89C7     		movl	%eax, %edi
 1527 11ff E814EEFF 		call	isHexDigit
 1527      FF
 1528 1204 84C0     		testb	%al, %al
 1529 1206 0F847A02 		je	.L105
 1529      0000
 1530              	.LBB9:
 462:main.c        **** 				// Read a sequence of hex bytes to write
 463:main.c        **** 				uint8 *dataPtr;
 464:main.c        **** 				p = ptr + 1;
 1531              		.loc 1 464 0
 1532 120c 488B0500 		movq	ptr(%rip), %rax
 1532      000000
 1533 1213 4883C001 		addq	$1, %rax
 1534 1217 48898570 		movq	%rax, -144(%rbp)
 1534      FFFFFF
 465:main.c        **** 				while ( isHexDigit(*p) ) {
 1535              		.loc 1 465 0
 1536 121e EB08     		jmp	.L106
 1537              	.L107:
 466:main.c        **** 					p++;
 1538              		.loc 1 466 0
 1539 1220 48838570 		addq	$1, -144(%rbp)
 1539      FFFFFF01 
 1540              	.L106:
 465:main.c        **** 				while ( isHexDigit(*p) ) {
 1541              		.loc 1 465 0
 1542 1228 488B8570 		movq	-144(%rbp), %rax
 1542      FFFFFF
 1543 122f 0FB600   		movzbl	(%rax), %eax
 1544 1232 0FBEC0   		movsbl	%al, %eax
 1545 1235 89C7     		movl	%eax, %edi
 1546 1237 E8DCEDFF 		call	isHexDigit
 1546      FF
 1547 123c 84C0     		testb	%al, %al
 1548 123e 75E0     		jne	.L107
 467:main.c        **** 				}
 468:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 1549              		.loc 1 468 0
 1550 1240 488B8570 		movq	-144(%rbp), %rax
 1550      FFFFFF
 1551 1247 488B1500 		movq	ptr(%rip), %rdx
 1551      000000
 1552 124e 4829D0   		subq	%rdx, %rax
 1553 1251 83E001   		andl	$1, %eax
 1554 1254 4885C0   		testq	%rax, %rax
 1555 1257 740F     		je	.L108
 1556              		.loc 1 468 0 is_stmt 0 discriminator 1
 1557 1259 C78514FF 		movl	$9, -236(%rbp)
 1557      FFFF0900 
 1557      0000
 1558 1263 E96B0300 		jmp	.L52
 1558      00
 1559              	.L108:
 469:main.c        **** 				length = (size_t)(p - ptr) / 2;
 1560              		.loc 1 469 0 is_stmt 1
 1561 1268 488B8570 		movq	-144(%rbp), %rax
 1561      FFFFFF
 1562 126f 488B1500 		movq	ptr(%rip), %rdx
 1562      000000
 1563 1276 4829D0   		subq	%rdx, %rax
 1564 1279 48D1E8   		shrq	%rax
 1565 127c 48898538 		movq	%rax, -200(%rbp)
 1565      FFFFFF
 470:main.c        **** 				data = malloc(length);
 1566              		.loc 1 470 0
 1567 1283 488B8538 		movq	-200(%rbp), %rax
 1567      FFFFFF
 1568 128a 4889C7   		movq	%rax, %rdi
 1569 128d E8000000 		call	malloc@PLT
 1569      00
 1570 1292 48898548 		movq	%rax, -184(%rbp)
 1570      FFFFFF
 471:main.c        **** 				dataPtr = data;
 1571              		.loc 1 471 0
 1572 1299 488B8548 		movq	-184(%rbp), %rax
 1572      FFFFFF
 1573 12a0 48898578 		movq	%rax, -136(%rbp)
 1573      FFFFFF
 472:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1574              		.loc 1 472 0
 1575 12a7 48C78568 		movq	$0, -152(%rbp)
 1575      FFFFFF00 
 1575      000000
 1576 12b2 EB34     		jmp	.L109
 1577              	.L110:
 473:main.c        **** 					getHexByte(dataPtr++);
 1578              		.loc 1 473 0 discriminator 3
 1579 12b4 488B8578 		movq	-136(%rbp), %rax
 1579      FFFFFF
 1580 12bb 488D5001 		leaq	1(%rax), %rdx
 1581 12bf 48899578 		movq	%rdx, -136(%rbp)
 1581      FFFFFF
 1582 12c6 4889C7   		movq	%rax, %rdi
 1583 12c9 E83DEEFF 		call	getHexByte
 1583      FF
 474:main.c        **** 					ptr += 2;
 1584              		.loc 1 474 0 discriminator 3
 1585 12ce 488B0500 		movq	ptr(%rip), %rax
 1585      000000
 1586 12d5 4883C002 		addq	$2, %rax
 1587 12d9 48890500 		movq	%rax, ptr(%rip)
 1587      000000
 472:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1588              		.loc 1 472 0 discriminator 3
 1589 12e0 48838568 		addq	$1, -152(%rbp)
 1589      FFFFFF01 
 1590              	.L109:
 472:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1591              		.loc 1 472 0 is_stmt 0 discriminator 1
 1592 12e8 488B8538 		movq	-200(%rbp), %rax
 1592      FFFFFF
 1593 12ef 48398568 		cmpq	%rax, -152(%rbp)
 1593      FFFFFF
 1594 12f6 72BC     		jb	.L110
 475:main.c        **** 				}
 476:main.c        **** 				#ifdef WIN32
 477:main.c        **** 					QueryPerformanceCounter(&tvStart);
 478:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 479:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 480:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 481:main.c        **** 					totalTime /= freq.QuadPart;
 482:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 483:main.c        **** 				#else
 484:main.c        **** 					gettimeofday(&tvStart, NULL);
 1595              		.loc 1 484 0 is_stmt 1
 1596 12f8 488D45B0 		leaq	-80(%rbp), %rax
 1597 12fc BE000000 		movl	$0, %esi
 1597      00
 1598 1301 4889C7   		movq	%rax, %rdi
 1599 1304 E8000000 		call	gettimeofday@PLT
 1599      00
 485:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 1600              		.loc 1 485 0
 1601 1309 488B9538 		movq	-200(%rbp), %rdx
 1601      FFFFFF
 1602 1310 488B4580 		movq	-128(%rbp), %rax
 1603 1314 0FB6F0   		movzbl	%al, %esi
 1604 1317 488BBDF8 		movq	-264(%rbp), %rdi
 1604      FEFFFF
 1605 131e 488B8D48 		movq	-184(%rbp), %rcx
 1605      FFFFFF
 1606 1325 488B8508 		movq	-248(%rbp), %rax
 1606      FFFFFF
 1607 132c 4989F8   		movq	%rdi, %r8
 1608 132f 4889C7   		movq	%rax, %rdi
 1609 1332 E8000000 		call	flWriteChannel@PLT
 1609      00
 1610 1337 898524FF 		movl	%eax, -220(%rbp)
 1610      FFFF
 486:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1611              		.loc 1 486 0
 1612 133d 488D45C0 		leaq	-64(%rbp), %rax
 1613 1341 BE000000 		movl	$0, %esi
 1613      00
 1614 1346 4889C7   		movq	%rax, %rdi
 1615 1349 E8000000 		call	gettimeofday@PLT
 1615      00
 487:main.c        **** 					startTime = tvStart.tv_sec;
 1616              		.loc 1 487 0
 1617 134e 488B45B0 		movq	-80(%rbp), %rax
 1618 1352 48894588 		movq	%rax, -120(%rbp)
 488:main.c        **** 					startTime *= 1000000;
 1619              		.loc 1 488 0
 1620 1356 488B4588 		movq	-120(%rbp), %rax
 1621 135a 4869C040 		imulq	$1000000, %rax, %rax
 1621      420F00
 1622 1361 48894588 		movq	%rax, -120(%rbp)
 489:main.c        **** 					startTime += tvStart.tv_usec;
 1623              		.loc 1 489 0
 1624 1365 488B45B8 		movq	-72(%rbp), %rax
 1625 1369 48014588 		addq	%rax, -120(%rbp)
 490:main.c        **** 					endTime = tvEnd.tv_sec;
 1626              		.loc 1 490 0
 1627 136d 488B45C0 		movq	-64(%rbp), %rax
 1628 1371 48894590 		movq	%rax, -112(%rbp)
 491:main.c        **** 					endTime *= 1000000;
 1629              		.loc 1 491 0
 1630 1375 488B4590 		movq	-112(%rbp), %rax
 1631 1379 4869C040 		imulq	$1000000, %rax, %rax
 1631      420F00
 1632 1380 48894590 		movq	%rax, -112(%rbp)
 492:main.c        **** 					endTime += tvEnd.tv_usec;
 1633              		.loc 1 492 0
 1634 1384 488B45C8 		movq	-56(%rbp), %rax
 1635 1388 48014590 		addq	%rax, -112(%rbp)
 493:main.c        **** 					totalTime = (double)(endTime - startTime);
 1636              		.loc 1 493 0
 1637 138c 488B4590 		movq	-112(%rbp), %rax
 1638 1390 482B4588 		subq	-120(%rbp), %rax
 1639 1394 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1639      C0
 1640 1399 F20F1145 		movsd	%xmm0, -104(%rbp)
 1640      98
 494:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1641              		.loc 1 494 0
 1642 139e F20F1045 		movsd	-104(%rbp), %xmm0
 1642      98
 1643 13a3 F20F100D 		movsd	.LC14(%rip), %xmm1
 1643      00000000 
 1644 13ab F20F5EC1 		divsd	%xmm1, %xmm0
 1645 13af F20F1145 		movsd	%xmm0, -104(%rbp)
 1645      98
 495:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1646              		.loc 1 495 0
 1647 13b4 488B8538 		movq	-200(%rbp), %rax
 1647      FFFFFF
 1648 13bb 4885C0   		testq	%rax, %rax
 1649 13be 7807     		js	.L111
 1650 13c0 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1650      C0
 1651 13c5 EB15     		jmp	.L112
 1652              	.L111:
 1653 13c7 4889C2   		movq	%rax, %rdx
 1654 13ca 48D1EA   		shrq	%rdx
 1655 13cd 83E001   		andl	$1, %eax
 1656 13d0 4809C2   		orq	%rax, %rdx
 1657 13d3 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1657      C2
 1658 13d8 F20F58C0 		addsd	%xmm0, %xmm0
 1659              	.L112:
 1660 13dc F20F1055 		movsd	-104(%rbp), %xmm2
 1660      98
 1661 13e1 F20F100D 		movsd	.LC15(%rip), %xmm1
 1661      00000000 
 1662 13e9 F20F59CA 		mulsd	%xmm2, %xmm1
 1663 13ed F20F5EC1 		divsd	%xmm1, %xmm0
 1664 13f1 F20F1145 		movsd	%xmm0, -96(%rbp)
 1664      A0
 496:main.c        **** 				#endif
 497:main.c        **** 				if ( enableBenchmarking ) {
 1665              		.loc 1 497 0
 1666 13f6 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1666      000000
 1667 13fd 84C0     		testb	%al, %al
 1668 13ff 744E     		je	.L113
 498:main.c        **** 					printf(
 499:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 500:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 1669              		.loc 1 500 0
 1670 1401 488B9538 		movq	-200(%rbp), %rdx
 1670      FFFFFF
 1671 1408 488B8548 		movq	-184(%rbp), %rax
 1671      FFFFFF
 1672 140f 4889D6   		movq	%rdx, %rsi
 1673 1412 4889C7   		movq	%rax, %rdi
 1674 1415 E83CECFF 		call	calcChecksum
 1674      FF
 498:main.c        **** 					printf(
 1675              		.loc 1 498 0
 1676 141a 0FB7D0   		movzwl	%ax, %edx
 1677 141d 488B8538 		movq	-200(%rbp), %rax
 1677      FFFFFF
 1678 1424 488B75A0 		movq	-96(%rbp), %rsi
 1679 1428 488B4D80 		movq	-128(%rbp), %rcx
 1680 142c 4889B5F0 		movq	%rsi, -272(%rbp)
 1680      FEFFFF
 1681 1433 F20F1085 		movsd	-272(%rbp), %xmm0
 1681      F0FEFFFF 
 1682 143b 4889C6   		movq	%rax, %rsi
 1683 143e 488D3D00 		leaq	.LC18(%rip), %rdi
 1683      000000
 1684 1445 B8010000 		movl	$1, %eax
 1684      00
 1685 144a E8000000 		call	printf@PLT
 1685      00
 1686              	.L113:
 501:main.c        **** 				}
 502:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1687              		.loc 1 502 0
 1688 144f 83BD24FF 		cmpl	$0, -220(%rbp)
 1688      FFFF00
 1689 1456 740F     		je	.L114
 1690              		.loc 1 502 0 is_stmt 0 discriminator 1
 1691 1458 C78514FF 		movl	$1, -236(%rbp)
 1691      FFFF0100 
 1691      0000
 1692 1462 E96C0100 		jmp	.L52
 1692      00
 1693              	.L114:
 503:main.c        **** 				free(data);
 1694              		.loc 1 503 0 is_stmt 1
 1695 1467 488B8548 		movq	-184(%rbp), %rax
 1695      FFFFFF
 1696 146e 4889C7   		movq	%rax, %rdi
 1697 1471 E8000000 		call	free@PLT
 1697      00
 504:main.c        **** 				data = NULL;
 1698              		.loc 1 504 0
 1699 1476 48C78548 		movq	$0, -184(%rbp)
 1699      FFFFFF00 
 1699      000000
 1700              	.LBE9:
 505:main.c        **** 			} else {
 506:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 507:main.c        **** 			}
 508:main.c        **** 			break;
 1701              		.loc 1 508 0
 1702 1481 E90C0100 		jmp	.L85
 1702      00
 1703              	.L105:
 506:main.c        **** 			}
 1704              		.loc 1 506 0
 1705 1486 C78514FF 		movl	$5, -236(%rbp)
 1705      FFFF0500 
 1705      0000
 1706 1490 90       		nop
 1707 1491 E93D0100 		jmp	.L52
 1707      00
 1708              	.L58:
 1709              	.LBE7:
 1710              	.LBB10:
 509:main.c        **** 		}
 510:main.c        **** 		case '+':{
 511:main.c        **** 			uint32 conduit;
 512:main.c        **** 			char *end;
 513:main.c        **** 			ptr++;
 1711              		.loc 1 513 0
 1712 1496 488B0500 		movq	ptr(%rip), %rax
 1712      000000
 1713 149d 4883C001 		addq	$1, %rax
 1714 14a1 48890500 		movq	%rax, ptr(%rip)
 1714      000000
 514:main.c        **** 
 515:main.c        **** 			// Get the conduit
 516:main.c        **** 			errno = 0;
 1715              		.loc 1 516 0
 1716 14a8 E8000000 		call	__errno_location@PLT
 1716      00
 1717 14ad C7000000 		movl	$0, (%rax)
 1717      0000
 517:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 1718              		.loc 1 517 0
 1719 14b3 488B0500 		movq	ptr(%rip), %rax
 1719      000000
 1720 14ba 488D8D40 		leaq	-192(%rbp), %rcx
 1720      FFFFFF
 1721 14c1 BA100000 		movl	$16, %edx
 1721      00
 1722 14c6 4889CE   		movq	%rcx, %rsi
 1723 14c9 4889C7   		movq	%rax, %rdi
 1724 14cc E8000000 		call	strtoul@PLT
 1724      00
 1725 14d1 898530FF 		movl	%eax, -208(%rbp)
 1725      FFFF
 518:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1726              		.loc 1 518 0
 1727 14d7 E8000000 		call	__errno_location@PLT
 1727      00
 1728 14dc 8B00     		movl	(%rax), %eax
 1729 14de 85C0     		testl	%eax, %eax
 1730 14e0 740F     		je	.L115
 1731              		.loc 1 518 0 is_stmt 0 discriminator 1
 1732 14e2 C78514FF 		movl	$2, -236(%rbp)
 1732      FFFF0200 
 1732      0000
 1733 14ec E9E20000 		jmp	.L52
 1733      00
 1734              	.L115:
 519:main.c        **** 
 520:main.c        **** 			// Ensure that it's 0-127
 521:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 1735              		.loc 1 521 0 is_stmt 1
 1736 14f1 81BD30FF 		cmpl	$255, -208(%rbp)
 1736      FFFFFF00 
 1736      0000
 1737 14fb 760F     		jbe	.L117
 1738              		.loc 1 521 0 is_stmt 0 discriminator 1
 1739 14fd C78514FF 		movl	$4, -236(%rbp)
 1739      FFFF0400 
 1739      0000
 1740 1507 E9C70000 		jmp	.L52
 1740      00
 1741              	.L117:
 522:main.c        **** 			ptr = end;
 1742              		.loc 1 522 0 is_stmt 1
 1743 150c 488B8540 		movq	-192(%rbp), %rax
 1743      FFFFFF
 1744 1513 48890500 		movq	%rax, ptr(%rip)
 1744      000000
 523:main.c        **** 
 524:main.c        **** 			// Only two valid chars at this point:
 525:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 1745              		.loc 1 525 0
 1746 151a 488B0500 		movq	ptr(%rip), %rax
 1746      000000
 1747 1521 0FB600   		movzbl	(%rax), %eax
 1748 1524 84C0     		testb	%al, %al
 1749 1526 741D     		je	.L118
 1750              		.loc 1 525 0 is_stmt 0 discriminator 1
 1751 1528 488B0500 		movq	ptr(%rip), %rax
 1751      000000
 1752 152f 0FB600   		movzbl	(%rax), %eax
 1753 1532 3C3B     		cmpb	$59, %al
 1754 1534 740F     		je	.L118
 1755              		.loc 1 525 0 discriminator 2
 1756 1536 C78514FF 		movl	$5, -236(%rbp)
 1756      FFFF0500 
 1756      0000
 1757 1540 E98E0000 		jmp	.L52
 1757      00
 1758              	.L118:
 526:main.c        **** 
 527:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 1759              		.loc 1 527 0 is_stmt 1
 1760 1545 8B8530FF 		movl	-208(%rbp), %eax
 1760      FFFF
 1761 154b 0FB6C8   		movzbl	%al, %ecx
 1762 154e 488B95F8 		movq	-264(%rbp), %rdx
 1762      FEFFFF
 1763 1555 488B8508 		movq	-248(%rbp), %rax
 1763      FFFFFF
 1764 155c 89CE     		movl	%ecx, %esi
 1765 155e 4889C7   		movq	%rax, %rdi
 1766 1561 E8000000 		call	flSelectConduit@PLT
 1766      00
 1767 1566 898524FF 		movl	%eax, -220(%rbp)
 1767      FFFF
 528:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1768              		.loc 1 528 0
 1769 156c 83BD24FF 		cmpl	$0, -220(%rbp)
 1769      FFFF00
 1770 1573 741C     		je	.L130
 1771              		.loc 1 528 0 is_stmt 0 discriminator 1
 1772 1575 C78514FF 		movl	$1, -236(%rbp)
 1772      FFFF0100 
 1772      0000
 1773 157f 90       		nop
 1774 1580 EB51     		jmp	.L52
 1775              	.L128:
 1776              	.LBE10:
 529:main.c        **** 			break;
 530:main.c        **** 		}
 531:main.c        **** 		default:
 532:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 1777              		.loc 1 532 0 is_stmt 1
 1778 1582 C78514FF 		movl	$5, -236(%rbp)
 1778      FFFF0500 
 1778      0000
 1779 158c EB45     		jmp	.L52
 1780              	.L129:
 1781              	.LBB11:
 384:main.c        **** 		}
 1782              		.loc 1 384 0
 1783 158e 90       		nop
 1784 158f EB01     		jmp	.L85
 1785              	.L130:
 1786              	.LBE11:
 1787              	.LBB12:
 529:main.c        **** 			break;
 1788              		.loc 1 529 0
 1789 1591 90       		nop
 1790              	.L85:
 1791              	.LBE12:
 533:main.c        **** 		}
 534:main.c        **** 	} while ( *ptr == ';' );
 1792              		.loc 1 534 0
 1793 1592 488B0500 		movq	ptr(%rip), %rax
 1793      000000
 1794 1599 0FB600   		movzbl	(%rax), %eax
 1795 159c 3C3B     		cmpb	$59, %al
 1796 159e 0F8491F1 		je	.L53
 1796      FFFF
 535:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 1797              		.loc 1 535 0
 1798 15a4 488B0500 		movq	ptr(%rip), %rax
 1798      000000
 1799 15ab 0FB600   		movzbl	(%rax), %eax
 1800 15ae 84C0     		testb	%al, %al
 1801 15b0 740C     		je	.L121
 1802              		.loc 1 535 0 is_stmt 0 discriminator 1
 1803 15b2 C78514FF 		movl	$5, -236(%rbp)
 1803      FFFF0500 
 1803      0000
 1804 15bc EB15     		jmp	.L52
 1805              	.L121:
 536:main.c        **** 
 537:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 1806              		.loc 1 537 0 is_stmt 1
 1807 15be 488B55D8 		movq	-40(%rbp), %rdx
 1808 15c2 488B45D0 		movq	-48(%rbp), %rax
 1809 15c6 4889C6   		movq	%rax, %rsi
 1810 15c9 BF000000 		movl	$0, %edi
 1810      00
 1811 15ce E8000000 		call	dump@PLT
 1811      00
 1812              	.L52:
 538:main.c        **** 
 539:main.c        **** cleanup:
 540:main.c        **** 	bufDestroy(&dataFromFPGA);
 1813              		.loc 1 540 0
 1814 15d3 488D45D0 		leaq	-48(%rbp), %rax
 1815 15d7 4889C7   		movq	%rax, %rdi
 1816 15da E8000000 		call	bufDestroy@PLT
 1816      00
 541:main.c        **** 	if ( file ) {
 1817              		.loc 1 541 0
 1818 15df 4883BD58 		cmpq	$0, -168(%rbp)
 1818      FFFFFF00 
 1819 15e7 740F     		je	.L122
 542:main.c        **** 		fclose(file);
 1820              		.loc 1 542 0
 1821 15e9 488B8558 		movq	-168(%rbp), %rax
 1821      FFFFFF
 1822 15f0 4889C7   		movq	%rax, %rdi
 1823 15f3 E8000000 		call	fclose@PLT
 1823      00
 1824              	.L122:
 543:main.c        **** 	}
 544:main.c        **** 	free(fileName);
 1825              		.loc 1 544 0
 1826 15f8 488B8550 		movq	-176(%rbp), %rax
 1826      FFFFFF
 1827 15ff 4889C7   		movq	%rax, %rdi
 1828 1602 E8000000 		call	free@PLT
 1828      00
 545:main.c        **** 	free(data);
 1829              		.loc 1 545 0
 1830 1607 488B8548 		movq	-184(%rbp), %rax
 1830      FFFFFF
 1831 160e 4889C7   		movq	%rax, %rdi
 1832 1611 E8000000 		call	free@PLT
 1832      00
 546:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 1833              		.loc 1 546 0
 1834 1616 83BD14FF 		cmpl	$1, -236(%rbp)
 1834      FFFF01
 1835 161d 0F86B600 		jbe	.L123
 1835      0000
 1836              	.LBB13:
 547:main.c        **** 		const int column = (int)(ptr - line);
 1837              		.loc 1 547 0
 1838 1623 488B0500 		movq	ptr(%rip), %rax
 1838      000000
 1839 162a 4889C2   		movq	%rax, %rdx
 1840 162d 488B8500 		movq	-256(%rbp), %rax
 1840      FFFFFF
 1841 1634 4829C2   		subq	%rax, %rdx
 1842 1637 4889D0   		movq	%rdx, %rax
 1843 163a 898534FF 		movl	%eax, -204(%rbp)
 1843      FFFF
 548:main.c        **** 		int i;
 549:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 1844              		.loc 1 549 0
 1845 1640 8B8514FF 		movl	-236(%rbp), %eax
 1845      FFFF
 1846 1646 488D14C5 		leaq	0(,%rax,8), %rdx
 1846      00000000 
 1847 164e 488D0500 		leaq	errMessages(%rip), %rax
 1847      000000
 1848 1655 488B1402 		movq	(%rdx,%rax), %rdx
 1849 1659 488B0500 		movq	stderr(%rip), %rax
 1849      000000
 1850 1660 488BB500 		movq	-256(%rbp), %rsi
 1850      FFFFFF
 1851 1667 8B8D34FF 		movl	-204(%rbp), %ecx
 1851      FFFF
 1852 166d 4989F0   		movq	%rsi, %r8
 1853 1670 488D3500 		leaq	.LC19(%rip), %rsi
 1853      000000
 1854 1677 4889C7   		movq	%rax, %rdi
 1855 167a B8000000 		movl	$0, %eax
 1855      00
 1856 167f E8000000 		call	fprintf@PLT
 1856      00
 550:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1857              		.loc 1 550 0
 1858 1684 C7851CFF 		movl	$0, -228(%rbp)
 1858      FFFF0000 
 1858      0000
 1859 168e EB1B     		jmp	.L124
 1860              	.L125:
 551:main.c        **** 			fprintf(stderr, " ");
 1861              		.loc 1 551 0 discriminator 3
 1862 1690 488B0500 		movq	stderr(%rip), %rax
 1862      000000
 1863 1697 4889C6   		movq	%rax, %rsi
 1864 169a BF200000 		movl	$32, %edi
 1864      00
 1865 169f E8000000 		call	fputc@PLT
 1865      00
 550:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1866              		.loc 1 550 0 discriminator 3
 1867 16a4 83851CFF 		addl	$1, -228(%rbp)
 1867      FFFF01
 1868              	.L124:
 550:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1869              		.loc 1 550 0 is_stmt 0 discriminator 1
 1870 16ab 8B851CFF 		movl	-228(%rbp), %eax
 1870      FFFF
 1871 16b1 3B8534FF 		cmpl	-204(%rbp), %eax
 1871      FFFF
 1872 16b7 7CD7     		jl	.L125
 552:main.c        **** 		}
 553:main.c        **** 		fprintf(stderr, "^\n");
 1873              		.loc 1 553 0 is_stmt 1
 1874 16b9 488B0500 		movq	stderr(%rip), %rax
 1874      000000
 1875 16c0 4889C1   		movq	%rax, %rcx
 1876 16c3 BA020000 		movl	$2, %edx
 1876      00
 1877 16c8 BE010000 		movl	$1, %esi
 1877      00
 1878 16cd 488D3D00 		leaq	.LC20(%rip), %rdi
 1878      000000
 1879 16d4 E8000000 		call	fwrite@PLT
 1879      00
 1880              	.L123:
 1881              	.LBE13:
 554:main.c        **** 	}
 555:main.c        **** 	return retVal;
 1882              		.loc 1 555 0
 1883 16d9 8B8514FF 		movl	-236(%rbp), %eax
 1883      FFFF
 556:main.c        **** }
 1884              		.loc 1 556 0
 1885 16df 488B4DF8 		movq	-8(%rbp), %rcx
 1886 16e3 6448330C 		xorq	%fs:40, %rcx
 1886      25280000 
 1886      00
 1887 16ec 7405     		je	.L127
 1888 16ee E8000000 		call	__stack_chk_fail@PLT
 1888      00
 1889              	.L127:
 1890 16f3 C9       		leave
 1891              		.cfi_def_cfa 7, 8
 1892 16f4 C3       		ret
 1893              		.cfi_endproc
 1894              	.LFE11:
 1896              		.section	.rodata
 1897              	.LC21:
 1898 0179 30303030 		.string	"0000"
 1898      00
 1899              	.LC22:
 1900 017e 30303031 		.string	"0001"
 1900      00
 1901              	.LC23:
 1902 0183 30303130 		.string	"0010"
 1902      00
 1903              	.LC24:
 1904 0188 30303131 		.string	"0011"
 1904      00
 1905              	.LC25:
 1906 018d 30313030 		.string	"0100"
 1906      00
 1907              	.LC26:
 1908 0192 30313031 		.string	"0101"
 1908      00
 1909              	.LC27:
 1910 0197 30313130 		.string	"0110"
 1910      00
 1911              	.LC28:
 1912 019c 30313131 		.string	"0111"
 1912      00
 1913              	.LC29:
 1914 01a1 31303030 		.string	"1000"
 1914      00
 1915              	.LC30:
 1916 01a6 31303031 		.string	"1001"
 1916      00
 1917              	.LC31:
 1918 01ab 58585858 		.string	"XXXX"
 1918      00
 1919              	.LC32:
 1920 01b0 31303130 		.string	"1010"
 1920      00
 1921              	.LC33:
 1922 01b5 31303131 		.string	"1011"
 1922      00
 1923              	.LC34:
 1924 01ba 31313030 		.string	"1100"
 1924      00
 1925              	.LC35:
 1926 01bf 31313031 		.string	"1101"
 1926      00
 1927              	.LC36:
 1928 01c4 31313130 		.string	"1110"
 1928      00
 1929              	.LC37:
 1930 01c9 31313131 		.string	"1111"
 1930      00
 1931              		.section	.data.rel.local,"aw",@progbits
 1932              		.align 32
 1935              	nibbles:
 1936 0000 00000000 		.quad	.LC21
 1936      00000000 
 1937 0008 00000000 		.quad	.LC22
 1937      00000000 
 1938 0010 00000000 		.quad	.LC23
 1938      00000000 
 1939 0018 00000000 		.quad	.LC24
 1939      00000000 
 1940 0020 00000000 		.quad	.LC25
 1940      00000000 
 1941 0028 00000000 		.quad	.LC26
 1941      00000000 
 1942 0030 00000000 		.quad	.LC27
 1942      00000000 
 1943 0038 00000000 		.quad	.LC28
 1943      00000000 
 1944 0040 00000000 		.quad	.LC29
 1944      00000000 
 1945 0048 00000000 		.quad	.LC30
 1945      00000000 
 1946 0050 00000000 		.quad	.LC31
 1946      00000000 
 1947 0058 00000000 		.quad	.LC31
 1947      00000000 
 1948 0060 00000000 		.quad	.LC31
 1948      00000000 
 1949 0068 00000000 		.quad	.LC31
 1949      00000000 
 1950 0070 00000000 		.quad	.LC31
 1950      00000000 
 1951 0078 00000000 		.quad	.LC31
 1951      00000000 
 1952 0080 00000000 		.quad	.LC31
 1952      00000000 
 1953 0088 00000000 		.quad	.LC32
 1953      00000000 
 1954 0090 00000000 		.quad	.LC33
 1954      00000000 
 1955 0098 00000000 		.quad	.LC34
 1955      00000000 
 1956 00a0 00000000 		.quad	.LC35
 1956      00000000 
 1957 00a8 00000000 		.quad	.LC36
 1957      00000000 
 1958 00b0 00000000 		.quad	.LC37
 1958      00000000 
 1959              		.text
 1960              		.globl	pow1
 1962              	pow1:
 1963              	.LFB12:
 557:main.c        **** 
 558:main.c        **** static const char *nibbles[] = {
 559:main.c        **** 	"0000",  // '0'
 560:main.c        **** 	"0001",  // '1'
 561:main.c        **** 	"0010",  // '2'
 562:main.c        **** 	"0011",  // '3'
 563:main.c        **** 	"0100",  // '4'
 564:main.c        **** 	"0101",  // '5'
 565:main.c        **** 	"0110",  // '6'
 566:main.c        **** 	"0111",  // '7'
 567:main.c        **** 	"1000",  // '8'
 568:main.c        **** 	"1001",  // '9'
 569:main.c        **** 
 570:main.c        **** 	"XXXX",  // ':'
 571:main.c        **** 	"XXXX",  // ';'
 572:main.c        **** 	"XXXX",  // '<'
 573:main.c        **** 	"XXXX",  // '='
 574:main.c        **** 	"XXXX",  // '>'
 575:main.c        **** 	"XXXX",  // '?'
 576:main.c        **** 	"XXXX",  // '@'
 577:main.c        **** 
 578:main.c        **** 	"1010",  // 'A'
 579:main.c        **** 	"1011",  // 'B'
 580:main.c        **** 	"1100",  // 'C'
 581:main.c        **** 	"1101",  // 'D'
 582:main.c        **** 	"1110",  // 'E'
 583:main.c        **** 	"1111"   // 'F'
 584:main.c        **** };
 585:main.c        **** 
 586:main.c        **** int pow1(int a,int b){
 1964              		.loc 1 586 0
 1965              		.cfi_startproc
 1966 16f5 55       		pushq	%rbp
 1967              		.cfi_def_cfa_offset 16
 1968              		.cfi_offset 6, -16
 1969 16f6 4889E5   		movq	%rsp, %rbp
 1970              		.cfi_def_cfa_register 6
 1971 16f9 897DEC   		movl	%edi, -20(%rbp)
 1972 16fc 8975E8   		movl	%esi, -24(%rbp)
 587:main.c        ****     int c = 1;
 1973              		.loc 1 587 0
 1974 16ff C745F801 		movl	$1, -8(%rbp)
 1974      000000
 1975              	.LBB14:
 588:main.c        ****     for(int i =0;i<b;i++){
 1976              		.loc 1 588 0
 1977 1706 C745FC00 		movl	$0, -4(%rbp)
 1977      000000
 1978 170d EB0E     		jmp	.L132
 1979              	.L133:
 589:main.c        ****         c = c*a;
 1980              		.loc 1 589 0 discriminator 3
 1981 170f 8B45F8   		movl	-8(%rbp), %eax
 1982 1712 0FAF45EC 		imull	-20(%rbp), %eax
 1983 1716 8945F8   		movl	%eax, -8(%rbp)
 588:main.c        ****     for(int i =0;i<b;i++){
 1984              		.loc 1 588 0 discriminator 3
 1985 1719 8345FC01 		addl	$1, -4(%rbp)
 1986              	.L132:
 588:main.c        ****     for(int i =0;i<b;i++){
 1987              		.loc 1 588 0 is_stmt 0 discriminator 1
 1988 171d 8B45FC   		movl	-4(%rbp), %eax
 1989 1720 3B45E8   		cmpl	-24(%rbp), %eax
 1990 1723 7CEA     		jl	.L133
 1991              	.LBE14:
 590:main.c        ****     }
 591:main.c        ****     return c;
 1992              		.loc 1 591 0 is_stmt 1
 1993 1725 8B45F8   		movl	-8(%rbp), %eax
 592:main.c        **** }
 1994              		.loc 1 592 0
 1995 1728 5D       		popq	%rbp
 1996              		.cfi_def_cfa 7, 8
 1997 1729 C3       		ret
 1998              		.cfi_endproc
 1999              	.LFE12:
 2001              		.section	.rodata
 2002              	.LC38:
 2003 01ce 7200     		.string	"r"
 2004              		.align 8
 2005              	.LC39:
 2006 01d0 2F686F6D 		.string	"/home/gani/eval/20140524/makestuff/hdlmake/apps/makestuff/swled/cksum/vhdl/track_data.csv
 2006      652F6761 
 2006      6E692F65 
 2006      76616C2F 
 2006      32303134 
 2007              	.LC40:
 2008 022a 6E6F2073 		.string	"no such file"
 2008      75636820 
 2008      66696C65 
 2008      00
 2009              	.LC41:
 2010 0237 25642C25 		.string	"%d,%d,%d,%d,%d"
 2010      642C2564 
 2010      2C25642C 
 2010      256400
 2011              		.text
 2012              		.globl	text_read
 2014              	text_read:
 2015              	.LFB13:
 593:main.c        **** 
 594:main.c        **** // void rail_data(int x, int y, int i, uint8 file_data[][64], uint8 *dataPtr) {
 595:main.c        **** // 	*dataPtr = file_data[x][y * 8 + i];
 596:main.c        **** // }
 597:main.c        **** 
 598:main.c        **** void text_read(uint8_t file_data[][64]) {
 2016              		.loc 1 598 0
 2017              		.cfi_startproc
 2018 172a 55       		pushq	%rbp
 2019              		.cfi_def_cfa_offset 16
 2020              		.cfi_offset 6, -16
 2021 172b 4889E5   		movq	%rsp, %rbp
 2022              		.cfi_def_cfa_register 6
 2023 172e 4154     		pushq	%r12
 2024 1730 53       		pushq	%rbx
 2025 1731 4883EC40 		subq	$64, %rsp
 2026              		.cfi_offset 12, -24
 2027              		.cfi_offset 3, -32
 2028 1735 48897DB8 		movq	%rdi, -72(%rbp)
 2029              		.loc 1 598 0
 2030 1739 64488B04 		movq	%fs:40, %rax
 2030      25280000 
 2030      00
 2031 1742 488945E8 		movq	%rax, -24(%rbp)
 2032 1746 31C0     		xorl	%eax, %eax
 599:main.c        **** 	FILE* file1 = fopen("/home/gani/eval/20140524/makestuff/hdlmake/apps/makestuff/swled/cksum/vhdl/tr
 2033              		.loc 1 599 0
 2034 1748 488D3500 		leaq	.LC38(%rip), %rsi
 2034      000000
 2035 174f 488D3D00 		leaq	.LC39(%rip), %rdi
 2035      000000
 2036 1756 E8000000 		call	fopen@PLT
 2036      00
 2037 175b 488945E0 		movq	%rax, -32(%rbp)
 600:main.c        **** 	if(file1 == NULL){
 2038              		.loc 1 600 0
 2039 175f 48837DE0 		cmpq	$0, -32(%rbp)
 2039      00
 2040 1764 750C     		jne	.L136
 601:main.c        **** 		printf("no such file\n");
 2041              		.loc 1 601 0
 2042 1766 488D3D00 		leaq	.LC40(%rip), %rdi
 2042      000000
 2043 176d E8000000 		call	puts@PLT
 2043      00
 2044              	.L136:
 602:main.c        **** 	}
 603:main.c        **** 	int i_1, j_1, x_1, y_1, dir_1, ok_1, next_1;
 604:main.c        **** 	for(i_1 = 0; i_1 < 8; i_1++){
 2045              		.loc 1 604 0
 2046 1772 C745D800 		movl	$0, -40(%rbp)
 2046      000000
 2047 1779 EB45     		jmp	.L137
 2048              	.L140:
 605:main.c        **** 		for(j_1 = 0; j_1 < 64; j_1++){
 2049              		.loc 1 605 0
 2050 177b C745DC00 		movl	$0, -36(%rbp)
 2050      000000
 2051 1782 EB32     		jmp	.L138
 2052              	.L139:
 606:main.c        **** 			file_data[i_1][j_1] = (j_1 % 8) * 8;
 2053              		.loc 1 606 0 discriminator 3
 2054 1784 8B45DC   		movl	-36(%rbp), %eax
 2055 1787 99       		cltd
 2056 1788 C1EA1D   		shrl	$29, %edx
 2057 178b 01D0     		addl	%edx, %eax
 2058 178d 83E007   		andl	$7, %eax
 2059 1790 29D0     		subl	%edx, %eax
 2060 1792 89C1     		movl	%eax, %ecx
 2061 1794 8B45D8   		movl	-40(%rbp), %eax
 2062 1797 4898     		cltq
 2063 1799 48C1E006 		salq	$6, %rax
 2064 179d 4889C2   		movq	%rax, %rdx
 2065 17a0 488B45B8 		movq	-72(%rbp), %rax
 2066 17a4 4801C2   		addq	%rax, %rdx
 2067 17a7 C1E103   		sall	$3, %ecx
 2068 17aa 8B45DC   		movl	-36(%rbp), %eax
 2069 17ad 4898     		cltq
 2070 17af 880C02   		movb	%cl, (%rdx,%rax)
 605:main.c        **** 		for(j_1 = 0; j_1 < 64; j_1++){
 2071              		.loc 1 605 0 discriminator 3
 2072 17b2 8345DC01 		addl	$1, -36(%rbp)
 2073              	.L138:
 605:main.c        **** 		for(j_1 = 0; j_1 < 64; j_1++){
 2074              		.loc 1 605 0 is_stmt 0 discriminator 1
 2075 17b6 837DDC3F 		cmpl	$63, -36(%rbp)
 2076 17ba 7EC8     		jle	.L139
 604:main.c        **** 		for(j_1 = 0; j_1 < 64; j_1++){
 2077              		.loc 1 604 0 is_stmt 1 discriminator 2
 2078 17bc 8345D801 		addl	$1, -40(%rbp)
 2079              	.L137:
 604:main.c        **** 		for(j_1 = 0; j_1 < 64; j_1++){
 2080              		.loc 1 604 0 is_stmt 0 discriminator 1
 2081 17c0 837DD807 		cmpl	$7, -40(%rbp)
 2082 17c4 7EB5     		jle	.L140
 607:main.c        **** 		}
 608:main.c        **** 	}
 609:main.c        **** 
 610:main.c        **** 	while(fscanf(file1, "%d,%d,%d,%d,%d", &x_1, &y_1, &dir_1, &ok_1, &next_1) != EOF){
 2083              		.loc 1 610 0 is_stmt 1
 2084 17c6 EB71     		jmp	.L141
 2085              	.L142:
 611:main.c        **** 		y_1 = dir_1 + (8 * y_1);
 2086              		.loc 1 611 0
 2087 17c8 8B45C8   		movl	-56(%rbp), %eax
 2088 17cb 8D14C500 		leal	0(,%rax,8), %edx
 2088      000000
 2089 17d2 8B45CC   		movl	-52(%rbp), %eax
 2090 17d5 01D0     		addl	%edx, %eax
 2091 17d7 8945C8   		movl	%eax, -56(%rbp)
 612:main.c        **** 		file_data[x_1][y_1] = pow1(2, 7) + (pow1(2,6) * ok_1) + (8 * dir_1) + next_1;
 2092              		.loc 1 612 0
 2093 17da BE070000 		movl	$7, %esi
 2093      00
 2094 17df BF020000 		movl	$2, %edi
 2094      00
 2095 17e4 E8000000 		call	pow1
 2095      00
 2096 17e9 4189C4   		movl	%eax, %r12d
 2097 17ec 8B45CC   		movl	-52(%rbp), %eax
 2098 17ef 8D1CC500 		leal	0(,%rax,8), %ebx
 2098      000000
 2099 17f6 BE060000 		movl	$6, %esi
 2099      00
 2100 17fb BF020000 		movl	$2, %edi
 2100      00
 2101 1800 E8000000 		call	pow1
 2101      00
 2102 1805 89C1     		movl	%eax, %ecx
 2103 1807 8B45D0   		movl	-48(%rbp), %eax
 2104 180a 89C2     		movl	%eax, %edx
 2105 180c 89C8     		movl	%ecx, %eax
 2106 180e 0FAFC2   		imull	%edx, %eax
 2107 1811 01D8     		addl	%ebx, %eax
 2108 1813 418D0C04 		leal	(%r12,%rax), %ecx
 2109 1817 8B45D4   		movl	-44(%rbp), %eax
 2110 181a 89C6     		movl	%eax, %esi
 2111 181c 8B45C4   		movl	-60(%rbp), %eax
 2112 181f 4898     		cltq
 2113 1821 48C1E006 		salq	$6, %rax
 2114 1825 4889C2   		movq	%rax, %rdx
 2115 1828 488B45B8 		movq	-72(%rbp), %rax
 2116 182c 4801C2   		addq	%rax, %rdx
 2117 182f 8B45C8   		movl	-56(%rbp), %eax
 2118 1832 01F1     		addl	%esi, %ecx
 2119 1834 4898     		cltq
 2120 1836 880C02   		movb	%cl, (%rdx,%rax)
 2121              	.L141:
 610:main.c        **** 		y_1 = dir_1 + (8 * y_1);
 2122              		.loc 1 610 0
 2123 1839 4C8D45D0 		leaq	-48(%rbp), %r8
 2124 183d 488D7DCC 		leaq	-52(%rbp), %rdi
 2125 1841 488D4DC8 		leaq	-56(%rbp), %rcx
 2126 1845 488D55C4 		leaq	-60(%rbp), %rdx
 2127 1849 488B45E0 		movq	-32(%rbp), %rax
 2128 184d 4883EC08 		subq	$8, %rsp
 2129 1851 488D75D4 		leaq	-44(%rbp), %rsi
 2130 1855 56       		pushq	%rsi
 2131 1856 4D89C1   		movq	%r8, %r9
 2132 1859 4989F8   		movq	%rdi, %r8
 2133 185c 488D3500 		leaq	.LC41(%rip), %rsi
 2133      000000
 2134 1863 4889C7   		movq	%rax, %rdi
 2135 1866 B8000000 		movl	$0, %eax
 2135      00
 2136 186b E8000000 		call	__isoc99_fscanf@PLT
 2136      00
 2137 1870 4883C410 		addq	$16, %rsp
 2138 1874 83F8FF   		cmpl	$-1, %eax
 2139 1877 0F854BFF 		jne	.L142
 2139      FFFF
 613:main.c        **** 	}
 614:main.c        **** 	fclose(file1);
 2140              		.loc 1 614 0
 2141 187d 488B45E0 		movq	-32(%rbp), %rax
 2142 1881 4889C7   		movq	%rax, %rdi
 2143 1884 E8000000 		call	fclose@PLT
 2143      00
 615:main.c        **** }
 2144              		.loc 1 615 0
 2145 1889 90       		nop
 2146 188a 488B45E8 		movq	-24(%rbp), %rax
 2147 188e 64483304 		xorq	%fs:40, %rax
 2147      25280000 
 2147      00
 2148 1897 7405     		je	.L143
 2149 1899 E8000000 		call	__stack_chk_fail@PLT
 2149      00
 2150              	.L143:
 2151 189e 488D65F0 		leaq	-16(%rbp), %rsp
 2152 18a2 5B       		popq	%rbx
 2153 18a3 415C     		popq	%r12
 2154 18a5 5D       		popq	%rbp
 2155              		.cfi_def_cfa 7, 8
 2156 18a6 C3       		ret
 2157              		.cfi_endproc
 2158              	.LFE13:
 2160              		.section	.rodata
 2161              	.LC42:
 2162 0246 7700     		.string	"w"
 2163              	.LC43:
 2164 0248 6E6F2073 		.string	"no such file to write"
 2164      75636820 
 2164      66696C65 
 2164      20746F20 
 2164      77726974 
 2165              	.LC44:
 2166 025e 25642C25 		.string	"%d,%d,%d,%d,%d\n"
 2166      642C2564 
 2166      2C25642C 
 2166      25640A00 
 2167              		.text
 2168              		.globl	update_file
 2170              	update_file:
 2171              	.LFB14:
 616:main.c        **** 
 617:main.c        **** void update_file(uint8_t file_data[][64]) {
 2172              		.loc 1 617 0
 2173              		.cfi_startproc
 2174 18a7 55       		pushq	%rbp
 2175              		.cfi_def_cfa_offset 16
 2176              		.cfi_offset 6, -16
 2177 18a8 4889E5   		movq	%rsp, %rbp
 2178              		.cfi_def_cfa_register 6
 2179 18ab 53       		pushq	%rbx
 2180 18ac 4883EC38 		subq	$56, %rsp
 2181              		.cfi_offset 3, -24
 2182 18b0 48897DC8 		movq	%rdi, -56(%rbp)
 618:main.c        **** 	FILE* file1 = fopen("/home/gani/eval/20140524/makestuff/hdlmake/apps/makestuff/swled/cksum/vhdl/tr
 2183              		.loc 1 618 0
 2184 18b4 488D3500 		leaq	.LC42(%rip), %rsi
 2184      000000
 2185 18bb 488D3D00 		leaq	.LC39(%rip), %rdi
 2185      000000
 2186 18c2 E8000000 		call	fopen@PLT
 2186      00
 2187 18c7 488945E8 		movq	%rax, -24(%rbp)
 619:main.c        **** 	if(file1 == NULL){
 2188              		.loc 1 619 0
 2189 18cb 48837DE8 		cmpq	$0, -24(%rbp)
 2189      00
 2190 18d0 750C     		jne	.L145
 620:main.c        **** 		printf("no such file to write\n");
 2191              		.loc 1 620 0
 2192 18d2 488D3D00 		leaq	.LC43(%rip), %rdi
 2192      000000
 2193 18d9 E8000000 		call	puts@PLT
 2193      00
 2194              	.L145:
 621:main.c        **** 	}
 622:main.c        **** 	int i, j, ok, next;
 623:main.c        **** 
 624:main.c        **** 	for(i = 0; i < 8; i++){
 2195              		.loc 1 624 0
 2196 18de C745D800 		movl	$0, -40(%rbp)
 2196      000000
 2197 18e5 E9140100 		jmp	.L146
 2197      00
 2198              	.L150:
 625:main.c        **** 		for(j = 0; j < 64; j++){
 2199              		.loc 1 625 0
 2200 18ea C745DC00 		movl	$0, -36(%rbp)
 2200      000000
 2201 18f1 E9FA0000 		jmp	.L147
 2201      00
 2202              	.L149:
 626:main.c        **** 			if(file_data[i][j] != (j % 8) * 8){
 2203              		.loc 1 626 0
 2204 18f6 8B45D8   		movl	-40(%rbp), %eax
 2205 18f9 4898     		cltq
 2206 18fb 48C1E006 		salq	$6, %rax
 2207 18ff 4889C2   		movq	%rax, %rdx
 2208 1902 488B45C8 		movq	-56(%rbp), %rax
 2209 1906 4801C2   		addq	%rax, %rdx
 2210 1909 8B45DC   		movl	-36(%rbp), %eax
 2211 190c 4898     		cltq
 2212 190e 0FB60402 		movzbl	(%rdx,%rax), %eax
 2213 1912 0FB6C8   		movzbl	%al, %ecx
 2214 1915 8B45DC   		movl	-36(%rbp), %eax
 2215 1918 99       		cltd
 2216 1919 C1EA1D   		shrl	$29, %edx
 2217 191c 01D0     		addl	%edx, %eax
 2218 191e 83E007   		andl	$7, %eax
 2219 1921 29D0     		subl	%edx, %eax
 2220 1923 C1E003   		sall	$3, %eax
 2221 1926 39C1     		cmpl	%eax, %ecx
 2222 1928 0F84BE00 		je	.L148
 2222      0000
 627:main.c        **** 				ok = file_data[i][j] / pow1(2, 6);
 2223              		.loc 1 627 0
 2224 192e 8B45D8   		movl	-40(%rbp), %eax
 2225 1931 4898     		cltq
 2226 1933 48C1E006 		salq	$6, %rax
 2227 1937 4889C2   		movq	%rax, %rdx
 2228 193a 488B45C8 		movq	-56(%rbp), %rax
 2229 193e 4801C2   		addq	%rax, %rdx
 2230 1941 8B45DC   		movl	-36(%rbp), %eax
 2231 1944 4898     		cltq
 2232 1946 0FB60402 		movzbl	(%rdx,%rax), %eax
 2233 194a 0FB6D8   		movzbl	%al, %ebx
 2234 194d BE060000 		movl	$6, %esi
 2234      00
 2235 1952 BF020000 		movl	$2, %edi
 2235      00
 2236 1957 E8000000 		call	pow1
 2236      00
 2237 195c 89C1     		movl	%eax, %ecx
 2238 195e 89D8     		movl	%ebx, %eax
 2239 1960 99       		cltd
 2240 1961 F7F9     		idivl	%ecx
 2241 1963 8945E0   		movl	%eax, -32(%rbp)
 628:main.c        **** 				ok = ok % 2;
 2242              		.loc 1 628 0
 2243 1966 8B45E0   		movl	-32(%rbp), %eax
 2244 1969 99       		cltd
 2245 196a C1EA1F   		shrl	$31, %edx
 2246 196d 01D0     		addl	%edx, %eax
 2247 196f 83E001   		andl	$1, %eax
 2248 1972 29D0     		subl	%edx, %eax
 2249 1974 8945E0   		movl	%eax, -32(%rbp)
 629:main.c        **** 				next = file_data[i][j] % 8;
 2250              		.loc 1 629 0
 2251 1977 8B45D8   		movl	-40(%rbp), %eax
 2252 197a 4898     		cltq
 2253 197c 48C1E006 		salq	$6, %rax
 2254 1980 4889C2   		movq	%rax, %rdx
 2255 1983 488B45C8 		movq	-56(%rbp), %rax
 2256 1987 4801C2   		addq	%rax, %rdx
 2257 198a 8B45DC   		movl	-36(%rbp), %eax
 2258 198d 4898     		cltq
 2259 198f 0FB60402 		movzbl	(%rdx,%rax), %eax
 2260 1993 0FB6C0   		movzbl	%al, %eax
 2261 1996 83E007   		andl	$7, %eax
 2262 1999 8945E4   		movl	%eax, -28(%rbp)
 630:main.c        **** 				fprintf(file1, "%d,%d,%d,%d,%d\n", i, j / 8, j % 8, ok, next);
 2263              		.loc 1 630 0
 2264 199c 8B45DC   		movl	-36(%rbp), %eax
 2265 199f 99       		cltd
 2266 19a0 C1EA1D   		shrl	$29, %edx
 2267 19a3 01D0     		addl	%edx, %eax
 2268 19a5 83E007   		andl	$7, %eax
 2269 19a8 29D0     		subl	%edx, %eax
 2270 19aa 4189C0   		movl	%eax, %r8d
 2271 19ad 8B45DC   		movl	-36(%rbp), %eax
 2272 19b0 8D5007   		leal	7(%rax), %edx
 2273 19b3 85C0     		testl	%eax, %eax
 2274 19b5 0F48C2   		cmovs	%edx, %eax
 2275 19b8 C1F803   		sarl	$3, %eax
 2276 19bb 89C7     		movl	%eax, %edi
 2277 19bd 8B75E0   		movl	-32(%rbp), %esi
 2278 19c0 8B55D8   		movl	-40(%rbp), %edx
 2279 19c3 488B45E8 		movq	-24(%rbp), %rax
 2280 19c7 4883EC08 		subq	$8, %rsp
 2281 19cb 8B4DE4   		movl	-28(%rbp), %ecx
 2282 19ce 51       		pushq	%rcx
 2283 19cf 4189F1   		movl	%esi, %r9d
 2284 19d2 89F9     		movl	%edi, %ecx
 2285 19d4 488D3500 		leaq	.LC44(%rip), %rsi
 2285      000000
 2286 19db 4889C7   		movq	%rax, %rdi
 2287 19de B8000000 		movl	$0, %eax
 2287      00
 2288 19e3 E8000000 		call	fprintf@PLT
 2288      00
 2289 19e8 4883C410 		addq	$16, %rsp
 2290              	.L148:
 625:main.c        **** 			if(file_data[i][j] != (j % 8) * 8){
 2291              		.loc 1 625 0 discriminator 2
 2292 19ec 8345DC01 		addl	$1, -36(%rbp)
 2293              	.L147:
 625:main.c        **** 			if(file_data[i][j] != (j % 8) * 8){
 2294              		.loc 1 625 0 is_stmt 0 discriminator 1
 2295 19f0 837DDC3F 		cmpl	$63, -36(%rbp)
 2296 19f4 0F8EFCFE 		jle	.L149
 2296      FFFF
 624:main.c        **** 		for(j = 0; j < 64; j++){
 2297              		.loc 1 624 0 is_stmt 1 discriminator 2
 2298 19fa 8345D801 		addl	$1, -40(%rbp)
 2299              	.L146:
 624:main.c        **** 		for(j = 0; j < 64; j++){
 2300              		.loc 1 624 0 is_stmt 0 discriminator 1
 2301 19fe 837DD807 		cmpl	$7, -40(%rbp)
 2302 1a02 0F8EE2FE 		jle	.L150
 2302      FFFF
 631:main.c        **** 			}
 632:main.c        **** 		}
 633:main.c        **** 	}
 634:main.c        **** 	fclose(file1);
 2303              		.loc 1 634 0 is_stmt 1
 2304 1a08 488B45E8 		movq	-24(%rbp), %rax
 2305 1a0c 4889C7   		movq	%rax, %rdi
 2306 1a0f E8000000 		call	fclose@PLT
 2306      00
 635:main.c        **** }
 2307              		.loc 1 635 0
 2308 1a14 90       		nop
 2309 1a15 488B5DF8 		movq	-8(%rbp), %rbx
 2310 1a19 C9       		leave
 2311              		.cfi_def_cfa 7, 8
 2312 1a1a C3       		ret
 2313              		.cfi_endproc
 2314              	.LFE14:
 2316              		.globl	count1
 2318              	count1:
 2319              	.LFB15:
 636:main.c        **** 
 637:main.c        **** uint32 count1(uint32 a){
 2320              		.loc 1 637 0
 2321              		.cfi_startproc
 2322 1a1b 55       		pushq	%rbp
 2323              		.cfi_def_cfa_offset 16
 2324              		.cfi_offset 6, -16
 2325 1a1c 4889E5   		movq	%rsp, %rbp
 2326              		.cfi_def_cfa_register 6
 2327 1a1f 4883EC10 		subq	$16, %rsp
 2328 1a23 897DFC   		movl	%edi, -4(%rbp)
 638:main.c        ****     return popcount(a);
 2329              		.loc 1 638 0
 2330 1a26 8B45FC   		movl	-4(%rbp), %eax
 2331 1a29 89C7     		movl	%eax, %edi
 2332 1a2b E8000000 		call	popcount
 2332      00
 639:main.c        **** }
 2333              		.loc 1 639 0
 2334 1a30 C9       		leave
 2335              		.cfi_def_cfa 7, 8
 2336 1a31 C3       		ret
 2337              		.cfi_endproc
 2338              	.LFE15:
 2340              		.globl	neg
 2342              	neg:
 2343              	.LFB16:
 640:main.c        ****  
 641:main.c        **** uint32 neg(uint32 a){
 2344              		.loc 1 641 0
 2345              		.cfi_startproc
 2346 1a32 55       		pushq	%rbp
 2347              		.cfi_def_cfa_offset 16
 2348              		.cfi_offset 6, -16
 2349 1a33 4889E5   		movq	%rsp, %rbp
 2350              		.cfi_def_cfa_register 6
 2351 1a36 4883EC18 		subq	$24, %rsp
 2352 1a3a 897DEC   		movl	%edi, -20(%rbp)
 642:main.c        ****     uint32 b = pow1(2,32) -1;
 2353              		.loc 1 642 0
 2354 1a3d BE200000 		movl	$32, %esi
 2354      00
 2355 1a42 BF020000 		movl	$2, %edi
 2355      00
 2356 1a47 E8000000 		call	pow1
 2356      00
 2357 1a4c 83E801   		subl	$1, %eax
 2358 1a4f 8945FC   		movl	%eax, -4(%rbp)
 643:main.c        ****     b -= a;
 2359              		.loc 1 643 0
 2360 1a52 8B45EC   		movl	-20(%rbp), %eax
 2361 1a55 2945FC   		subl	%eax, -4(%rbp)
 644:main.c        ****     return b;
 2362              		.loc 1 644 0
 2363 1a58 8B45FC   		movl	-4(%rbp), %eax
 645:main.c        **** }
 2364              		.loc 1 645 0
 2365 1a5b C9       		leave
 2366              		.cfi_def_cfa 7, 8
 2367 1a5c C3       		ret
 2368              		.cfi_endproc
 2369              	.LFE16:
 2371              		.globl	concat
 2373              	concat:
 2374              	.LFB17:
 646:main.c        **** 
 647:main.c        **** // uint32 displaybitrev(uint32 a){
 648:main.c        **** //     uint8 b;
 649:main.c        **** //     uint32 c=0U;
 650:main.c        **** //     for(int i=0;i<32;i++){
 651:main.c        **** //         b = a % 2U;
 652:main.c        **** //         a = a / 2U;
 653:main.c        **** //         c+= b*pow1(2,31-i);
 654:main.c        **** //     }
 655:main.c        **** //     return c;
 656:main.c        **** // }
 657:main.c        **** 
 658:main.c        **** // void displaybit(uint32 a){
 659:main.c        **** //     uint8 b;
 660:main.c        **** //     uint32 c = displaybitrev(a);
 661:main.c        **** //     for(int i=0;i<32;i++){
 662:main.c        **** //         b = c % 2U;
 663:main.c        **** //         c = c / 2U;
 664:main.c        **** //         printf("%u",b);
 665:main.c        **** //     }
 666:main.c        **** //     printf("\n");
 667:main.c        **** // }
 668:main.c        **** 
 669:main.c        **** uint32 concat(uint8 a){
 2375              		.loc 1 669 0
 2376              		.cfi_startproc
 2377 1a5d 55       		pushq	%rbp
 2378              		.cfi_def_cfa_offset 16
 2379              		.cfi_offset 6, -16
 2380 1a5e 4889E5   		movq	%rsp, %rbp
 2381              		.cfi_def_cfa_register 6
 2382 1a61 89F8     		movl	%edi, %eax
 2383 1a63 8845EC   		movb	%al, -20(%rbp)
 670:main.c        ****     uint32 b = 0x00000000;
 2384              		.loc 1 670 0
 2385 1a66 C745F800 		movl	$0, -8(%rbp)
 2385      000000
 671:main.c        ****     b |=a;
 2386              		.loc 1 671 0
 2387 1a6d 0FB645EC 		movzbl	-20(%rbp), %eax
 2388 1a71 0945F8   		orl	%eax, -8(%rbp)
 2389              	.LBB15:
 672:main.c        ****      for (int i=0;i<8;i++) {
 2390              		.loc 1 672 0
 2391 1a74 C745FC00 		movl	$0, -4(%rbp)
 2391      000000
 2392 1a7b EB0F     		jmp	.L156
 2393              	.L157:
 673:main.c        ****         b = b << 4;
 2394              		.loc 1 673 0 discriminator 3
 2395 1a7d C165F804 		sall	$4, -8(%rbp)
 674:main.c        ****         b |= a;
 2396              		.loc 1 674 0 discriminator 3
 2397 1a81 0FB645EC 		movzbl	-20(%rbp), %eax
 2398 1a85 0945F8   		orl	%eax, -8(%rbp)
 672:main.c        ****      for (int i=0;i<8;i++) {
 2399              		.loc 1 672 0 discriminator 3
 2400 1a88 8345FC01 		addl	$1, -4(%rbp)
 2401              	.L156:
 672:main.c        ****      for (int i=0;i<8;i++) {
 2402              		.loc 1 672 0 is_stmt 0 discriminator 1
 2403 1a8c 837DFC07 		cmpl	$7, -4(%rbp)
 2404 1a90 7EEB     		jle	.L157
 2405              	.LBE15:
 675:main.c        ****     } 
 676:main.c        ****     return b;
 2406              		.loc 1 676 0 is_stmt 1
 2407 1a92 8B45F8   		movl	-8(%rbp), %eax
 677:main.c        **** }
 2408              		.loc 1 677 0
 2409 1a95 5D       		popq	%rbp
 2410              		.cfi_def_cfa 7, 8
 2411 1a96 C3       		ret
 2412              		.cfi_endproc
 2413              	.LFE17:
 2415              		.globl	bitXor
 2417              	bitXor:
 2418              	.LFB18:
 678:main.c        **** 
 679:main.c        **** uint32 bitXor(uint32 x, uint32 y) {
 2419              		.loc 1 679 0
 2420              		.cfi_startproc
 2421 1a97 55       		pushq	%rbp
 2422              		.cfi_def_cfa_offset 16
 2423              		.cfi_offset 6, -16
 2424 1a98 4889E5   		movq	%rsp, %rbp
 2425              		.cfi_def_cfa_register 6
 2426 1a9b 53       		pushq	%rbx
 2427 1a9c 4883EC18 		subq	$24, %rsp
 2428              		.cfi_offset 3, -24
 2429 1aa0 897DE4   		movl	%edi, -28(%rbp)
 2430 1aa3 8975E0   		movl	%esi, -32(%rbp)
 680:main.c        ****     uint32 a = x & y;
 2431              		.loc 1 680 0
 2432 1aa6 8B45E4   		movl	-28(%rbp), %eax
 2433 1aa9 2345E0   		andl	-32(%rbp), %eax
 2434 1aac 8945EC   		movl	%eax, -20(%rbp)
 681:main.c        ****     uint32 b = neg(x) & neg(y);
 2435              		.loc 1 681 0
 2436 1aaf 8B45E4   		movl	-28(%rbp), %eax
 2437 1ab2 89C7     		movl	%eax, %edi
 2438 1ab4 E8000000 		call	neg
 2438      00
 2439 1ab9 89C3     		movl	%eax, %ebx
 2440 1abb 8B45E0   		movl	-32(%rbp), %eax
 2441 1abe 89C7     		movl	%eax, %edi
 2442 1ac0 E8000000 		call	neg
 2442      00
 2443 1ac5 21D8     		andl	%ebx, %eax
 2444 1ac7 8945F0   		movl	%eax, -16(%rbp)
 682:main.c        ****     uint32 c = neg(a) & neg(b);
 2445              		.loc 1 682 0
 2446 1aca 8B45EC   		movl	-20(%rbp), %eax
 2447 1acd 89C7     		movl	%eax, %edi
 2448 1acf E8000000 		call	neg
 2448      00
 2449 1ad4 89C3     		movl	%eax, %ebx
 2450 1ad6 8B45F0   		movl	-16(%rbp), %eax
 2451 1ad9 89C7     		movl	%eax, %edi
 2452 1adb E8000000 		call	neg
 2452      00
 2453 1ae0 21D8     		andl	%ebx, %eax
 2454 1ae2 8945F4   		movl	%eax, -12(%rbp)
 683:main.c        ****     return c;
 2455              		.loc 1 683 0
 2456 1ae5 8B45F4   		movl	-12(%rbp), %eax
 684:main.c        **** } 
 2457              		.loc 1 684 0
 2458 1ae8 4883C418 		addq	$24, %rsp
 2459 1aec 5B       		popq	%rbx
 2460 1aed 5D       		popq	%rbp
 2461              		.cfi_def_cfa 7, 8
 2462 1aee C3       		ret
 2463              		.cfi_endproc
 2464              	.LFE18:
 2466              		.globl	findki
 2468              	findki:
 2469              	.LFB19:
 685:main.c        **** 
 686:main.c        **** uint8 findki(uint32 a,int n){
 2470              		.loc 1 686 0
 2471              		.cfi_startproc
 2472 1aef 55       		pushq	%rbp
 2473              		.cfi_def_cfa_offset 16
 2474              		.cfi_offset 6, -16
 2475 1af0 4889E5   		movq	%rsp, %rbp
 2476              		.cfi_def_cfa_register 6
 2477 1af3 897DEC   		movl	%edi, -20(%rbp)
 2478 1af6 8975E8   		movl	%esi, -24(%rbp)
 687:main.c        ****     uint8 b = 0x00;
 2479              		.loc 1 687 0
 2480 1af9 C645FB00 		movb	$0, -5(%rbp)
 2481              	.LBB16:
 688:main.c        ****     for(int i=0;i<n+1;i++){
 2482              		.loc 1 688 0
 2483 1afd C745FC00 		movl	$0, -4(%rbp)
 2483      000000
 2484 1b04 EB15     		jmp	.L162
 2485              	.L163:
 689:main.c        ****         b = a % 2U;
 2486              		.loc 1 689 0 discriminator 3
 2487 1b06 8B45EC   		movl	-20(%rbp), %eax
 2488 1b09 83E001   		andl	$1, %eax
 2489 1b0c 8845FB   		movb	%al, -5(%rbp)
 690:main.c        ****         a = a/2U;
 2490              		.loc 1 690 0 discriminator 3
 2491 1b0f 8B45EC   		movl	-20(%rbp), %eax
 2492 1b12 D1E8     		shrl	%eax
 2493 1b14 8945EC   		movl	%eax, -20(%rbp)
 688:main.c        ****     for(int i=0;i<n+1;i++){
 2494              		.loc 1 688 0 discriminator 3
 2495 1b17 8345FC01 		addl	$1, -4(%rbp)
 2496              	.L162:
 688:main.c        ****     for(int i=0;i<n+1;i++){
 2497              		.loc 1 688 0 is_stmt 0 discriminator 1
 2498 1b1b 8B45E8   		movl	-24(%rbp), %eax
 2499 1b1e 83C001   		addl	$1, %eax
 2500 1b21 3945FC   		cmpl	%eax, -4(%rbp)
 2501 1b24 7CE0     		jl	.L163
 2502              	.LBE16:
 691:main.c        ****     }
 692:main.c        ****     return b;
 2503              		.loc 1 692 0 is_stmt 1
 2504 1b26 0FB645FB 		movzbl	-5(%rbp), %eax
 693:main.c        **** }
 2505              		.loc 1 693 0
 2506 1b2a 5D       		popq	%rbp
 2507              		.cfi_def_cfa 7, 8
 2508 1b2b C3       		ret
 2509              		.cfi_endproc
 2510              	.LFE19:
 2512              		.globl	findti
 2514              	findti:
 2515              	.LFB20:
 694:main.c        **** 
 695:main.c        **** uint8 findti(uint32 key,int n){
 2516              		.loc 1 695 0
 2517              		.cfi_startproc
 2518 1b2c 55       		pushq	%rbp
 2519              		.cfi_def_cfa_offset 16
 2520              		.cfi_offset 6, -16
 2521 1b2d 4889E5   		movq	%rsp, %rbp
 2522              		.cfi_def_cfa_register 6
 2523 1b30 4883EC18 		subq	$24, %rsp
 2524 1b34 897DEC   		movl	%edi, -20(%rbp)
 2525 1b37 8975E8   		movl	%esi, -24(%rbp)
 696:main.c        ****     
 697:main.c        ****     uint8 t=findki(key,n%4U),k;
 2526              		.loc 1 697 0
 2527 1b3a 8B45E8   		movl	-24(%rbp), %eax
 2528 1b3d 83E003   		andl	$3, %eax
 2529 1b40 89C2     		movl	%eax, %edx
 2530 1b42 8B45EC   		movl	-20(%rbp), %eax
 2531 1b45 89D6     		movl	%edx, %esi
 2532 1b47 89C7     		movl	%eax, %edi
 2533 1b49 E8000000 		call	findki
 2533      00
 2534 1b4e 8845FA   		movb	%al, -6(%rbp)
 2535              	.LBB17:
 698:main.c        ****     for(int i=n+4; i<32;i=i+4){
 2536              		.loc 1 698 0
 2537 1b51 8B45E8   		movl	-24(%rbp), %eax
 2538 1b54 83C004   		addl	$4, %eax
 2539 1b57 8945FC   		movl	%eax, -4(%rbp)
 2540 1b5a EB2A     		jmp	.L166
 2541              	.L167:
 699:main.c        ****         k = findki(key,i);
 2542              		.loc 1 699 0 discriminator 3
 2543 1b5c 8B55FC   		movl	-4(%rbp), %edx
 2544 1b5f 8B45EC   		movl	-20(%rbp), %eax
 2545 1b62 89D6     		movl	%edx, %esi
 2546 1b64 89C7     		movl	%eax, %edi
 2547 1b66 E8000000 		call	findki
 2547      00
 2548 1b6b 8845FB   		movb	%al, -5(%rbp)
 700:main.c        ****         t = bitXor(t,k);
 2549              		.loc 1 700 0 discriminator 3
 2550 1b6e 0FB655FB 		movzbl	-5(%rbp), %edx
 2551 1b72 0FB645FA 		movzbl	-6(%rbp), %eax
 2552 1b76 89D6     		movl	%edx, %esi
 2553 1b78 89C7     		movl	%eax, %edi
 2554 1b7a E8000000 		call	bitXor
 2554      00
 2555 1b7f 8845FA   		movb	%al, -6(%rbp)
 698:main.c        ****     for(int i=n+4; i<32;i=i+4){
 2556              		.loc 1 698 0 discriminator 3
 2557 1b82 8345FC04 		addl	$4, -4(%rbp)
 2558              	.L166:
 698:main.c        ****     for(int i=n+4; i<32;i=i+4){
 2559              		.loc 1 698 0 is_stmt 0 discriminator 1
 2560 1b86 837DFC1F 		cmpl	$31, -4(%rbp)
 2561 1b8a 7ED0     		jle	.L167
 2562              	.LBE17:
 701:main.c        ****     }
 702:main.c        ****     return t;
 2563              		.loc 1 702 0 is_stmt 1
 2564 1b8c 0FB645FA 		movzbl	-6(%rbp), %eax
 703:main.c        **** }
 2565              		.loc 1 703 0
 2566 1b90 C9       		leave
 2567              		.cfi_def_cfa 7, 8
 2568 1b91 C3       		ret
 2569              		.cfi_endproc
 2570              	.LFE20:
 2572              		.globl	findt
 2574              	findt:
 2575              	.LFB21:
 704:main.c        **** 
 705:main.c        **** uint8 findt(uint32 key){
 2576              		.loc 1 705 0
 2577              		.cfi_startproc
 2578 1b92 55       		pushq	%rbp
 2579              		.cfi_def_cfa_offset 16
 2580              		.cfi_offset 6, -16
 2581 1b93 4889E5   		movq	%rsp, %rbp
 2582              		.cfi_def_cfa_register 6
 2583 1b96 4883EC18 		subq	$24, %rsp
 2584 1b9a 897DEC   		movl	%edi, -20(%rbp)
 706:main.c        ****     uint32 t=0,k;
 2585              		.loc 1 706 0
 2586 1b9d C745F400 		movl	$0, -12(%rbp)
 2586      000000
 2587              	.LBB18:
 707:main.c        ****     for(int i=0; i<4;i++){
 2588              		.loc 1 707 0
 2589 1ba4 C745F800 		movl	$0, -8(%rbp)
 2589      000000
 2590 1bab EB2F     		jmp	.L170
 2591              	.L171:
 708:main.c        ****         k = findti(key,i);
 2592              		.loc 1 708 0 discriminator 3
 2593 1bad 8B55F8   		movl	-8(%rbp), %edx
 2594 1bb0 8B45EC   		movl	-20(%rbp), %eax
 2595 1bb3 89D6     		movl	%edx, %esi
 2596 1bb5 89C7     		movl	%eax, %edi
 2597 1bb7 E8000000 		call	findti
 2597      00
 2598 1bbc 0FB6C0   		movzbl	%al, %eax
 2599 1bbf 8945FC   		movl	%eax, -4(%rbp)
 709:main.c        ****         t += k*pow1(2,i); 
 2600              		.loc 1 709 0 discriminator 3
 2601 1bc2 8B45F8   		movl	-8(%rbp), %eax
 2602 1bc5 89C6     		movl	%eax, %esi
 2603 1bc7 BF020000 		movl	$2, %edi
 2603      00
 2604 1bcc E8000000 		call	pow1
 2604      00
 2605 1bd1 0FAF45FC 		imull	-4(%rbp), %eax
 2606 1bd5 0145F4   		addl	%eax, -12(%rbp)
 707:main.c        ****     for(int i=0; i<4;i++){
 2607              		.loc 1 707 0 discriminator 3
 2608 1bd8 8345F801 		addl	$1, -8(%rbp)
 2609              	.L170:
 707:main.c        ****     for(int i=0; i<4;i++){
 2610              		.loc 1 707 0 is_stmt 0 discriminator 1
 2611 1bdc 837DF803 		cmpl	$3, -8(%rbp)
 2612 1be0 7ECB     		jle	.L171
 2613              	.LBE18:
 710:main.c        ****     }
 711:main.c        ****     return t;
 2614              		.loc 1 711 0 is_stmt 1
 2615 1be2 8B45F4   		movl	-12(%rbp), %eax
 712:main.c        **** }
 2616              		.loc 1 712 0
 2617 1be5 C9       		leave
 2618              		.cfi_def_cfa 7, 8
 2619 1be6 C3       		ret
 2620              		.cfi_endproc
 2621              	.LFE21:
 2623              		.globl	encrypt
 2625              	encrypt:
 2626              	.LFB22:
 713:main.c        **** 
 714:main.c        **** uint32 encrypt(uint32 inp, uint32 key){
 2627              		.loc 1 714 0
 2628              		.cfi_startproc
 2629 1be7 55       		pushq	%rbp
 2630              		.cfi_def_cfa_offset 16
 2631              		.cfi_offset 6, -16
 2632 1be8 4889E5   		movq	%rsp, %rbp
 2633              		.cfi_def_cfa_register 6
 2634 1beb 4883EC20 		subq	$32, %rsp
 2635 1bef 897DEC   		movl	%edi, -20(%rbp)
 2636 1bf2 8975E8   		movl	%esi, -24(%rbp)
 715:main.c        ****     uint8 t = findt(key);
 2637              		.loc 1 715 0
 2638 1bf5 8B45E8   		movl	-24(%rbp), %eax
 2639 1bf8 89C7     		movl	%eax, %edi
 2640 1bfa E8000000 		call	findt
 2640      00
 2641 1bff 8845F5   		movb	%al, -11(%rbp)
 716:main.c        ****     uint8 n = count1(key);
 2642              		.loc 1 716 0
 2643 1c02 8B45E8   		movl	-24(%rbp), %eax
 2644 1c05 89C7     		movl	%eax, %edi
 2645 1c07 E8000000 		call	count1
 2645      00
 2646 1c0c 8845F7   		movb	%al, -9(%rbp)
 717:main.c        ****     uint32 cipher = inp;
 2647              		.loc 1 717 0
 2648 1c0f 8B45EC   		movl	-20(%rbp), %eax
 2649 1c12 8945F8   		movl	%eax, -8(%rbp)
 2650              	.LBB19:
 718:main.c        ****     for(uint8 i = 0; i<n;i++){
 2651              		.loc 1 718 0
 2652 1c15 C645F600 		movb	$0, -10(%rbp)
 2653 1c19 EB37     		jmp	.L174
 2654              	.L175:
 2655              	.LBB20:
 719:main.c        ****         uint32 inter = concat(t);
 2656              		.loc 1 719 0 discriminator 3
 2657 1c1b 0FB645F5 		movzbl	-11(%rbp), %eax
 2658 1c1f 89C7     		movl	%eax, %edi
 2659 1c21 E8000000 		call	concat
 2659      00
 2660 1c26 8945FC   		movl	%eax, -4(%rbp)
 720:main.c        ****         cipher = bitXor(cipher,inter);
 2661              		.loc 1 720 0 discriminator 3
 2662 1c29 8B55FC   		movl	-4(%rbp), %edx
 2663 1c2c 8B45F8   		movl	-8(%rbp), %eax
 2664 1c2f 89D6     		movl	%edx, %esi
 2665 1c31 89C7     		movl	%eax, %edi
 2666 1c33 E8000000 		call	bitXor
 2666      00
 2667 1c38 8945F8   		movl	%eax, -8(%rbp)
 721:main.c        ****         t = (t+1) % 16U;       
 2668              		.loc 1 721 0 discriminator 3
 2669 1c3b 0FB645F5 		movzbl	-11(%rbp), %eax
 2670 1c3f 83C001   		addl	$1, %eax
 2671 1c42 83E00F   		andl	$15, %eax
 2672 1c45 8845F5   		movb	%al, -11(%rbp)
 2673              	.LBE20:
 718:main.c        ****         uint32 inter = concat(t);
 2674              		.loc 1 718 0 discriminator 3
 2675 1c48 0FB645F6 		movzbl	-10(%rbp), %eax
 2676 1c4c 83C001   		addl	$1, %eax
 2677 1c4f 8845F6   		movb	%al, -10(%rbp)
 2678              	.L174:
 718:main.c        ****         uint32 inter = concat(t);
 2679              		.loc 1 718 0 is_stmt 0 discriminator 1
 2680 1c52 0FB645F6 		movzbl	-10(%rbp), %eax
 2681 1c56 3A45F7   		cmpb	-9(%rbp), %al
 2682 1c59 72C0     		jb	.L175
 2683              	.LBE19:
 722:main.c        ****     }
 723:main.c        ****     return cipher;
 2684              		.loc 1 723 0 is_stmt 1
 2685 1c5b 8B45F8   		movl	-8(%rbp), %eax
 724:main.c        **** }
 2686              		.loc 1 724 0
 2687 1c5e C9       		leave
 2688              		.cfi_def_cfa 7, 8
 2689 1c5f C3       		ret
 2690              		.cfi_endproc
 2691              	.LFE22:
 2693              		.globl	decrypt
 2695              	decrypt:
 2696              	.LFB23:
 725:main.c        **** 
 726:main.c        **** uint32 decrypt(uint32 inp,uint32 key){
 2697              		.loc 1 726 0
 2698              		.cfi_startproc
 2699 1c60 55       		pushq	%rbp
 2700              		.cfi_def_cfa_offset 16
 2701              		.cfi_offset 6, -16
 2702 1c61 4889E5   		movq	%rsp, %rbp
 2703              		.cfi_def_cfa_register 6
 2704 1c64 4883EC20 		subq	$32, %rsp
 2705 1c68 897DEC   		movl	%edi, -20(%rbp)
 2706 1c6b 8975E8   		movl	%esi, -24(%rbp)
 727:main.c        ****     uint8 t = findt(key);
 2707              		.loc 1 727 0
 2708 1c6e 8B45E8   		movl	-24(%rbp), %eax
 2709 1c71 89C7     		movl	%eax, %edi
 2710 1c73 E8000000 		call	findt
 2710      00
 2711 1c78 8845F5   		movb	%al, -11(%rbp)
 728:main.c        ****     uint8 n = count1(key);
 2712              		.loc 1 728 0
 2713 1c7b 8B45E8   		movl	-24(%rbp), %eax
 2714 1c7e 89C7     		movl	%eax, %edi
 2715 1c80 E8000000 		call	count1
 2715      00
 2716 1c85 8845F7   		movb	%al, -9(%rbp)
 729:main.c        ****     uint32 cipher = inp;
 2717              		.loc 1 729 0
 2718 1c88 8B45EC   		movl	-20(%rbp), %eax
 2719 1c8b 8945F8   		movl	%eax, -8(%rbp)
 730:main.c        ****     t = (t+15)% 16U;
 2720              		.loc 1 730 0
 2721 1c8e 0FB645F5 		movzbl	-11(%rbp), %eax
 2722 1c92 83C00F   		addl	$15, %eax
 2723 1c95 83E00F   		andl	$15, %eax
 2724 1c98 8845F5   		movb	%al, -11(%rbp)
 2725              	.LBB21:
 731:main.c        ****     for(uint8 i = 0; i<32-n;i++){
 2726              		.loc 1 731 0
 2727 1c9b C645F600 		movb	$0, -10(%rbp)
 2728 1c9f EB37     		jmp	.L178
 2729              	.L179:
 2730              	.LBB22:
 732:main.c        ****         uint32 inter = concat(t);
 2731              		.loc 1 732 0 discriminator 3
 2732 1ca1 0FB645F5 		movzbl	-11(%rbp), %eax
 2733 1ca5 89C7     		movl	%eax, %edi
 2734 1ca7 E8000000 		call	concat
 2734      00
 2735 1cac 8945FC   		movl	%eax, -4(%rbp)
 733:main.c        ****         cipher = bitXor(cipher,inter);
 2736              		.loc 1 733 0 discriminator 3
 2737 1caf 8B55FC   		movl	-4(%rbp), %edx
 2738 1cb2 8B45F8   		movl	-8(%rbp), %eax
 2739 1cb5 89D6     		movl	%edx, %esi
 2740 1cb7 89C7     		movl	%eax, %edi
 2741 1cb9 E8000000 		call	bitXor
 2741      00
 2742 1cbe 8945F8   		movl	%eax, -8(%rbp)
 734:main.c        ****         t = (t+15) % 16U;
 2743              		.loc 1 734 0 discriminator 3
 2744 1cc1 0FB645F5 		movzbl	-11(%rbp), %eax
 2745 1cc5 83C00F   		addl	$15, %eax
 2746 1cc8 83E00F   		andl	$15, %eax
 2747 1ccb 8845F5   		movb	%al, -11(%rbp)
 2748              	.LBE22:
 731:main.c        ****         uint32 inter = concat(t);
 2749              		.loc 1 731 0 discriminator 3
 2750 1cce 0FB645F6 		movzbl	-10(%rbp), %eax
 2751 1cd2 83C001   		addl	$1, %eax
 2752 1cd5 8845F6   		movb	%al, -10(%rbp)
 2753              	.L178:
 731:main.c        ****         uint32 inter = concat(t);
 2754              		.loc 1 731 0 is_stmt 0 discriminator 1
 2755 1cd8 0FB645F6 		movzbl	-10(%rbp), %eax
 2756 1cdc 0FB655F7 		movzbl	-9(%rbp), %edx
 2757 1ce0 B9200000 		movl	$32, %ecx
 2757      00
 2758 1ce5 29D1     		subl	%edx, %ecx
 2759 1ce7 89CA     		movl	%ecx, %edx
 2760 1ce9 39D0     		cmpl	%edx, %eax
 2761 1ceb 7CB4     		jl	.L179
 2762              	.LBE21:
 735:main.c        ****     }
 736:main.c        ****     return cipher;
 2763              		.loc 1 736 0 is_stmt 1
 2764 1ced 8B45F8   		movl	-8(%rbp), %eax
 737:main.c        **** }
 2765              		.loc 1 737 0
 2766 1cf0 C9       		leave
 2767              		.cfi_def_cfa 7, 8
 2768 1cf1 C3       		ret
 2769              		.cfi_endproc
 2770              	.LFE23:
 2772              		.section	.rodata
 2773              	.LC45:
 2774 026e 72656365 		.string	"receive_from_fpga()"
 2774      6976655F 
 2774      66726F6D 
 2774      5F667067 
 2774      61282900 
 2775              	.LC46:
 2776 0282 25730A00 		.string	"%s\n"
 2777              		.text
 2779              	receive_from_fpga:
 2780              	.LFB24:
 738:main.c        **** 
 739:main.c        **** static int receive_from_fpga(struct FLContext *handle, uint8 chan, uint32 *decrypted_data, const ch
 2781              		.loc 1 739 0
 2782              		.cfi_startproc
 2783 1cf2 55       		pushq	%rbp
 2784              		.cfi_def_cfa_offset 16
 2785              		.cfi_offset 6, -16
 2786 1cf3 4889E5   		movq	%rsp, %rbp
 2787              		.cfi_def_cfa_register 6
 2788 1cf6 4883EC50 		subq	$80, %rsp
 2789 1cfa 48897DC8 		movq	%rdi, -56(%rbp)
 2790 1cfe 89F0     		movl	%esi, %eax
 2791 1d00 488955B8 		movq	%rdx, -72(%rbp)
 2792 1d04 48894DB0 		movq	%rcx, -80(%rbp)
 2793 1d08 8845C4   		movb	%al, -60(%rbp)
 2794              		.loc 1 739 0
 2795 1d0b 64488B04 		movq	%fs:40, %rax
 2795      25280000 
 2795      00
 2796 1d14 488945F8 		movq	%rax, -8(%rbp)
 2797 1d18 31C0     		xorl	%eax, %eax
 740:main.c        **** 	uint32 key = 0x9999999F, length = 4, actualLength, received_data = 0x00000000, chunkSize;
 2798              		.loc 1 740 0
 2799 1d1a C745E49F 		movl	$-1717986913, -28(%rbp)
 2799      999999
 2800 1d21 C745D804 		movl	$4, -40(%rbp)
 2800      000000
 2801 1d28 C745DC00 		movl	$0, -36(%rbp)
 2801      000000
 741:main.c        **** 	uint8 chan0 = 2U * chan;
 2802              		.loc 1 741 0
 2803 1d2f 0FB645C4 		movzbl	-60(%rbp), %eax
 2804 1d33 01C0     		addl	%eax, %eax
 2805 1d35 8845D3   		movb	%al, -45(%rbp)
 742:main.c        **** 	const uint8 *received_databit;
 743:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 2806              		.loc 1 743 0
 2807 1d38 C745E000 		movl	$0, -32(%rbp)
 2807      000000
 744:main.c        **** 	FLStatus fStatus;
 745:main.c        **** 	#define READ_MAX_1 1
 746:main.c        **** 
 747:main.c        **** 	chunkSize = length >= READ_MAX_1 ? READ_MAX_1 : length;
 2808              		.loc 1 747 0
 2809 1d3f 837DD800 		cmpl	$0, -40(%rbp)
 2810 1d43 0F95C0   		setne	%al
 2811 1d46 0FB6C0   		movzbl	%al, %eax
 2812 1d49 8945E8   		movl	%eax, -24(%rbp)
 748:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan0, chunkSize, NULL, error);
 2813              		.loc 1 748 0
 2814 1d4c 0FB675D3 		movzbl	-45(%rbp), %esi
 2815 1d50 488B4DB0 		movq	-80(%rbp), %rcx
 2816 1d54 8B55E8   		movl	-24(%rbp), %edx
 2817 1d57 488B45C8 		movq	-56(%rbp), %rax
 2818 1d5b 4989C8   		movq	%rcx, %r8
 2819 1d5e B9000000 		movl	$0, %ecx
 2819      00
 2820 1d63 4889C7   		movq	%rax, %rdi
 2821 1d66 E8000000 		call	flReadChannelAsyncSubmit@PLT
 2821      00
 2822 1d6b 8945EC   		movl	%eax, -20(%rbp)
 749:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "receive_from_fpga()");
 2823              		.loc 1 749 0
 2824 1d6e 837DEC00 		cmpl	$0, -20(%rbp)
 2825 1d72 741F     		je	.L182
 2826              		.loc 1 749 0 is_stmt 0 discriminator 1
 2827 1d74 488B45B0 		movq	-80(%rbp), %rax
 2828 1d78 488D3500 		leaq	.LC45(%rip), %rsi
 2828      000000
 2829 1d7f 4889C7   		movq	%rax, %rdi
 2830 1d82 E8000000 		call	errPrefix@PLT
 2830      00
 2831 1d87 C745E001 		movl	$1, -32(%rbp)
 2831      000000
 2832 1d8e E9410100 		jmp	.L183
 2832      00
 2833              	.L182:
 750:main.c        **** 	length = length - chunkSize;
 2834              		.loc 1 750 0 is_stmt 1
 2835 1d93 8B45E8   		movl	-24(%rbp), %eax
 2836 1d96 2945D8   		subl	%eax, -40(%rbp)
 751:main.c        **** 
 752:main.c        **** 	while(length){
 2837              		.loc 1 752 0
 2838 1d99 E9B90000 		jmp	.L184
 2838      00
 2839              	.L187:
 753:main.c        **** 		chunkSize = length >= READ_MAX_1 ? READ_MAX_1 : length;
 2840              		.loc 1 753 0
 2841 1d9e 837DD800 		cmpl	$0, -40(%rbp)
 2842 1da2 0F95C0   		setne	%al
 2843 1da5 0FB6C0   		movzbl	%al, %eax
 2844 1da8 8945E8   		movl	%eax, -24(%rbp)
 754:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan0, chunkSize, NULL, error);
 2845              		.loc 1 754 0
 2846 1dab 0FB675D3 		movzbl	-45(%rbp), %esi
 2847 1daf 488B4DB0 		movq	-80(%rbp), %rcx
 2848 1db3 8B55E8   		movl	-24(%rbp), %edx
 2849 1db6 488B45C8 		movq	-56(%rbp), %rax
 2850 1dba 4989C8   		movq	%rcx, %r8
 2851 1dbd B9000000 		movl	$0, %ecx
 2851      00
 2852 1dc2 4889C7   		movq	%rax, %rdi
 2853 1dc5 E8000000 		call	flReadChannelAsyncSubmit@PLT
 2853      00
 2854 1dca 8945EC   		movl	%eax, -20(%rbp)
 755:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "receive_from_fpga()");
 2855              		.loc 1 755 0
 2856 1dcd 837DEC00 		cmpl	$0, -20(%rbp)
 2857 1dd1 741F     		je	.L185
 2858              		.loc 1 755 0 is_stmt 0 discriminator 1
 2859 1dd3 488B45B0 		movq	-80(%rbp), %rax
 2860 1dd7 488D3500 		leaq	.LC45(%rip), %rsi
 2860      000000
 2861 1dde 4889C7   		movq	%rax, %rdi
 2862 1de1 E8000000 		call	errPrefix@PLT
 2862      00
 2863 1de6 C745E001 		movl	$1, -32(%rbp)
 2863      000000
 2864 1ded E9E20000 		jmp	.L183
 2864      00
 2865              	.L185:
 756:main.c        **** 		length = length - chunkSize;
 2866              		.loc 1 756 0 is_stmt 1
 2867 1df2 8B45E8   		movl	-24(%rbp), %eax
 2868 1df5 2945D8   		subl	%eax, -40(%rbp)
 757:main.c        **** 		
 758:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &received_databit, &actualLength, &actualLength, error)
 2869              		.loc 1 758 0
 2870 1df8 488B7DB0 		movq	-80(%rbp), %rdi
 2871 1dfc 488D4DD4 		leaq	-44(%rbp), %rcx
 2872 1e00 488D55D4 		leaq	-44(%rbp), %rdx
 2873 1e04 488D75F0 		leaq	-16(%rbp), %rsi
 2874 1e08 488B45C8 		movq	-56(%rbp), %rax
 2875 1e0c 4989F8   		movq	%rdi, %r8
 2876 1e0f 4889C7   		movq	%rax, %rdi
 2877 1e12 E8000000 		call	flReadChannelAsyncAwait@PLT
 2877      00
 2878 1e17 8945EC   		movl	%eax, -20(%rbp)
 759:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "receive_from_fpga()");
 2879              		.loc 1 759 0
 2880 1e1a 837DEC00 		cmpl	$0, -20(%rbp)
 2881 1e1e 741F     		je	.L186
 2882              		.loc 1 759 0 is_stmt 0 discriminator 1
 2883 1e20 488B45B0 		movq	-80(%rbp), %rax
 2884 1e24 488D3500 		leaq	.LC45(%rip), %rsi
 2884      000000
 2885 1e2b 4889C7   		movq	%rax, %rdi
 2886 1e2e E8000000 		call	errPrefix@PLT
 2886      00
 2887 1e33 C745E001 		movl	$1, -32(%rbp)
 2887      000000
 2888 1e3a E9950000 		jmp	.L183
 2888      00
 2889              	.L186:
 760:main.c        **** 		//printf("length of data received is %u\n", actualLength);
 761:main.c        **** 		//printf("received_databit is %u\n", *received_databit);
 762:main.c        **** 
 763:main.c        **** 		received_data = received_data << actualLength * 8;
 2890              		.loc 1 763 0 is_stmt 1
 2891 1e3f 8B45D4   		movl	-44(%rbp), %eax
 2892 1e42 C1E003   		sall	$3, %eax
 2893 1e45 89C1     		movl	%eax, %ecx
 2894 1e47 D365DC   		sall	%cl, -36(%rbp)
 764:main.c        **** 		received_data |= *received_databit;
 2895              		.loc 1 764 0
 2896 1e4a 488B45F0 		movq	-16(%rbp), %rax
 2897 1e4e 0FB600   		movzbl	(%rax), %eax
 2898 1e51 0FB6C0   		movzbl	%al, %eax
 2899 1e54 0945DC   		orl	%eax, -36(%rbp)
 2900              	.L184:
 752:main.c        **** 		chunkSize = length >= READ_MAX_1 ? READ_MAX_1 : length;
 2901              		.loc 1 752 0
 2902 1e57 837DD800 		cmpl	$0, -40(%rbp)
 2903 1e5b 0F853DFF 		jne	.L187
 2903      FFFF
 765:main.c        **** 	}
 766:main.c        **** 
 767:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &received_databit, &actualLength, &actualLength, error);
 2904              		.loc 1 767 0
 2905 1e61 488B7DB0 		movq	-80(%rbp), %rdi
 2906 1e65 488D4DD4 		leaq	-44(%rbp), %rcx
 2907 1e69 488D55D4 		leaq	-44(%rbp), %rdx
 2908 1e6d 488D75F0 		leaq	-16(%rbp), %rsi
 2909 1e71 488B45C8 		movq	-56(%rbp), %rax
 2910 1e75 4989F8   		movq	%rdi, %r8
 2911 1e78 4889C7   		movq	%rax, %rdi
 2912 1e7b E8000000 		call	flReadChannelAsyncAwait@PLT
 2912      00
 2913 1e80 8945EC   		movl	%eax, -20(%rbp)
 768:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "receive_from_fpga()");
 2914              		.loc 1 768 0
 2915 1e83 837DEC00 		cmpl	$0, -20(%rbp)
 2916 1e87 741C     		je	.L188
 2917              		.loc 1 768 0 is_stmt 0 discriminator 1
 2918 1e89 488B45B0 		movq	-80(%rbp), %rax
 2919 1e8d 488D3500 		leaq	.LC45(%rip), %rsi
 2919      000000
 2920 1e94 4889C7   		movq	%rax, %rdi
 2921 1e97 E8000000 		call	errPrefix@PLT
 2921      00
 2922 1e9c C745E001 		movl	$1, -32(%rbp)
 2922      000000
 2923 1ea3 EB2F     		jmp	.L183
 2924              	.L188:
 769:main.c        **** 	//printf("length of data received is %u\n", actualLength);
 770:main.c        **** 	//printf("received_databit is %u\n", *received_databit);
 771:main.c        **** 
 772:main.c        **** 	received_data = received_data << actualLength * 8;
 2925              		.loc 1 772 0 is_stmt 1
 2926 1ea5 8B45D4   		movl	-44(%rbp), %eax
 2927 1ea8 C1E003   		sall	$3, %eax
 2928 1eab 89C1     		movl	%eax, %ecx
 2929 1ead D365DC   		sall	%cl, -36(%rbp)
 773:main.c        **** 	received_data |= *received_databit;
 2930              		.loc 1 773 0
 2931 1eb0 488B45F0 		movq	-16(%rbp), %rax
 2932 1eb4 0FB600   		movzbl	(%rax), %eax
 2933 1eb7 0FB6C0   		movzbl	%al, %eax
 2934 1eba 0945DC   		orl	%eax, -36(%rbp)
 774:main.c        **** 	
 775:main.c        **** 	//printf("data received %u\n", received_data);
 776:main.c        **** 	*decrypted_data = decrypt(received_data, key);
 2935              		.loc 1 776 0
 2936 1ebd 8B55E4   		movl	-28(%rbp), %edx
 2937 1ec0 8B45DC   		movl	-36(%rbp), %eax
 2938 1ec3 89D6     		movl	%edx, %esi
 2939 1ec5 89C7     		movl	%eax, %edi
 2940 1ec7 E8000000 		call	decrypt
 2940      00
 2941 1ecc 89C2     		movl	%eax, %edx
 2942 1ece 488B45B8 		movq	-72(%rbp), %rax
 2943 1ed2 8910     		movl	%edx, (%rax)
 2944              	.L183:
 777:main.c        **** 	//printf("decrypted received data is %u\n", *decrypted_data);
 778:main.c        **** 
 779:main.c        **** cleanup:
 780:main.c        **** 	if(*error){
 2945              		.loc 1 780 0
 2946 1ed4 488B45B0 		movq	-80(%rbp), %rax
 2947 1ed8 488B00   		movq	(%rax), %rax
 2948 1edb 4885C0   		testq	%rax, %rax
 2949 1ede 7431     		je	.L189
 781:main.c        **** 		fprintf(stderr, "%s\n", *error);
 2950              		.loc 1 781 0
 2951 1ee0 488B45B0 		movq	-80(%rbp), %rax
 2952 1ee4 488B10   		movq	(%rax), %rdx
 2953 1ee7 488B0500 		movq	stderr(%rip), %rax
 2953      000000
 2954 1eee 488D3500 		leaq	.LC46(%rip), %rsi
 2954      000000
 2955 1ef5 4889C7   		movq	%rax, %rdi
 2956 1ef8 B8000000 		movl	$0, %eax
 2956      00
 2957 1efd E8000000 		call	fprintf@PLT
 2957      00
 782:main.c        **** 		flFreeError(*error);
 2958              		.loc 1 782 0
 2959 1f02 488B45B0 		movq	-80(%rbp), %rax
 2960 1f06 488B00   		movq	(%rax), %rax
 2961 1f09 4889C7   		movq	%rax, %rdi
 2962 1f0c E8000000 		call	flFreeError@PLT
 2962      00
 2963              	.L189:
 783:main.c        **** 	}
 784:main.c        **** 	return retVal;
 2964              		.loc 1 784 0
 2965 1f11 8B45E0   		movl	-32(%rbp), %eax
 785:main.c        **** }
 2966              		.loc 1 785 0
 2967 1f14 488B7DF8 		movq	-8(%rbp), %rdi
 2968 1f18 6448333C 		xorq	%fs:40, %rdi
 2968      25280000 
 2968      00
 2969 1f21 7405     		je	.L191
 2970 1f23 E8000000 		call	__stack_chk_fail@PLT
 2970      00
 2971              	.L191:
 2972 1f28 C9       		leave
 2973              		.cfi_def_cfa 7, 8
 2974 1f29 C3       		ret
 2975              		.cfi_endproc
 2976              	.LFE24:
 2979              	send_to_fpga:
 2980              	.LFB25:
 786:main.c        **** 
 787:main.c        **** static int send_to_fpga(struct FLContext *handle, uint8 chan, uint32 send_data, const char **error)
 2981              		.loc 1 787 0
 2982              		.cfi_startproc
 2983 1f2a 55       		pushq	%rbp
 2984              		.cfi_def_cfa_offset 16
 2985              		.cfi_offset 6, -16
 2986 1f2b 4889E5   		movq	%rsp, %rbp
 2987              		.cfi_def_cfa_register 6
 2988 1f2e 4883EC50 		subq	$80, %rsp
 2989 1f32 48897DC8 		movq	%rdi, -56(%rbp)
 2990 1f36 89F0     		movl	%esi, %eax
 2991 1f38 8955C0   		movl	%edx, -64(%rbp)
 2992 1f3b 48894DB8 		movq	%rcx, -72(%rbp)
 2993 1f3f 8845C4   		movb	%al, -60(%rbp)
 788:main.c        **** 	uint32 encrypted_data = 0x00000000, key = 0x9999999F, length = 0x00000001;
 2994              		.loc 1 788 0
 2995 1f42 C745D800 		movl	$0, -40(%rbp)
 2995      000000
 2996 1f49 C745E49F 		movl	$-1717986913, -28(%rbp)
 2996      999999
 2997 1f50 C745E801 		movl	$1, -24(%rbp)
 2997      000000
 789:main.c        **** 	uint8 *data = NULL, *dataPtr, chan1 = (2U * chan) + 1;
 2998              		.loc 1 789 0
 2999 1f57 48C745F8 		movq	$0, -8(%rbp)
 2999      00000000 
 3000 1f5f 0FB645C4 		movzbl	-60(%rbp), %eax
 3001 1f63 01C0     		addl	%eax, %eax
 3002 1f65 83C001   		addl	$1, %eax
 3003 1f68 8845D7   		movb	%al, -41(%rbp)
 790:main.c        **** 	int i;
 791:main.c        **** 	data = malloc(8);
 3004              		.loc 1 791 0
 3005 1f6b BF080000 		movl	$8, %edi
 3005      00
 3006 1f70 E8000000 		call	malloc@PLT
 3006      00
 3007 1f75 488945F8 		movq	%rax, -8(%rbp)
 792:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 3008              		.loc 1 792 0
 3009 1f79 C745E000 		movl	$0, -32(%rbp)
 3009      000000
 793:main.c        **** 	FLStatus fStatus;
 794:main.c        **** 
 795:main.c        **** 	//printf("data to be sent is %u\n", send_data);
 796:main.c        **** 	encrypted_data = encrypt(send_data, key);
 3010              		.loc 1 796 0
 3011 1f80 8B55E4   		movl	-28(%rbp), %edx
 3012 1f83 8B45C0   		movl	-64(%rbp), %eax
 3013 1f86 89D6     		movl	%edx, %esi
 3014 1f88 89C7     		movl	%eax, %edi
 3015 1f8a E8000000 		call	encrypt
 3015      00
 3016 1f8f 8945D8   		movl	%eax, -40(%rbp)
 797:main.c        **** 	dataPtr = data;
 3017              		.loc 1 797 0
 3018 1f92 488B45F8 		movq	-8(%rbp), %rax
 3019 1f96 488945F0 		movq	%rax, -16(%rbp)
 798:main.c        **** 	for(i = 0; i < 4; i++){
 3020              		.loc 1 798 0
 3021 1f9a C745DC00 		movl	$0, -36(%rbp)
 3021      000000
 3022 1fa1 EB1D     		jmp	.L193
 3023              	.L194:
 799:main.c        **** 		*dataPtr = encrypted_data % 256U;
 3024              		.loc 1 799 0 discriminator 3
 3025 1fa3 8B45D8   		movl	-40(%rbp), %eax
 3026 1fa6 89C2     		movl	%eax, %edx
 3027 1fa8 488B45F0 		movq	-16(%rbp), %rax
 3028 1fac 8810     		movb	%dl, (%rax)
 800:main.c        **** 		encrypted_data = encrypted_data / 256U;
 3029              		.loc 1 800 0 discriminator 3
 3030 1fae 8B45D8   		movl	-40(%rbp), %eax
 3031 1fb1 C1E808   		shrl	$8, %eax
 3032 1fb4 8945D8   		movl	%eax, -40(%rbp)
 801:main.c        **** 		dataPtr++;
 3033              		.loc 1 801 0 discriminator 3
 3034 1fb7 488345F0 		addq	$1, -16(%rbp)
 3034      01
 798:main.c        **** 		*dataPtr = encrypted_data % 256U;
 3035              		.loc 1 798 0 discriminator 3
 3036 1fbc 8345DC01 		addl	$1, -36(%rbp)
 3037              	.L193:
 798:main.c        **** 		*dataPtr = encrypted_data % 256U;
 3038              		.loc 1 798 0 is_stmt 0 discriminator 1
 3039 1fc0 837DDC03 		cmpl	$3, -36(%rbp)
 3040 1fc4 7EDD     		jle	.L194
 802:main.c        **** 	}
 803:main.c        **** 	for(i = 0; i < 4; i++){
 3041              		.loc 1 803 0 is_stmt 1
 3042 1fc6 C745DC00 		movl	$0, -36(%rbp)
 3042      000000
 3043 1fcd EB39     		jmp	.L195
 3044              	.L198:
 804:main.c        **** 		dataPtr--;
 3045              		.loc 1 804 0
 3046 1fcf 48836DF0 		subq	$1, -16(%rbp)
 3046      01
 805:main.c        **** 		fStatus = flWriteChannel(handle, chan1, length, dataPtr, error);
 3047              		.loc 1 805 0
 3048 1fd4 8B55E8   		movl	-24(%rbp), %edx
 3049 1fd7 0FB675D7 		movzbl	-41(%rbp), %esi
 3050 1fdb 488B7DB8 		movq	-72(%rbp), %rdi
 3051 1fdf 488B4DF0 		movq	-16(%rbp), %rcx
 3052 1fe3 488B45C8 		movq	-56(%rbp), %rax
 3053 1fe7 4989F8   		movq	%rdi, %r8
 3054 1fea 4889C7   		movq	%rax, %rdi
 3055 1fed E8000000 		call	flWriteChannel@PLT
 3055      00
 3056 1ff2 8945EC   		movl	%eax, -20(%rbp)
 806:main.c        **** 		//printf("send_databit is %u\n", *dataPtr);
 807:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3057              		.loc 1 807 0
 3058 1ff5 837DEC00 		cmpl	$0, -20(%rbp)
 3059 1ff9 7409     		je	.L196
 3060              		.loc 1 807 0 is_stmt 0 discriminator 1
 3061 1ffb C745E001 		movl	$1, -32(%rbp)
 3061      000000
 3062 2002 EB1E     		jmp	.L197
 3063              	.L196:
 803:main.c        **** 		dataPtr--;
 3064              		.loc 1 803 0 is_stmt 1 discriminator 2
 3065 2004 8345DC01 		addl	$1, -36(%rbp)
 3066              	.L195:
 803:main.c        **** 		dataPtr--;
 3067              		.loc 1 803 0 is_stmt 0 discriminator 1
 3068 2008 837DDC03 		cmpl	$3, -36(%rbp)
 3069 200c 7EC1     		jle	.L198
 808:main.c        **** 	}
 809:main.c        **** 	free(data);
 3070              		.loc 1 809 0 is_stmt 1
 3071 200e 488B45F8 		movq	-8(%rbp), %rax
 3072 2012 4889C7   		movq	%rax, %rdi
 3073 2015 E8000000 		call	free@PLT
 3073      00
 810:main.c        **** 	data = NULL;
 3074              		.loc 1 810 0
 3075 201a 48C745F8 		movq	$0, -8(%rbp)
 3075      00000000 
 3076              	.L197:
 811:main.c        **** cleanup:
 812:main.c        **** 	if(*error){
 3077              		.loc 1 812 0
 3078 2022 488B45B8 		movq	-72(%rbp), %rax
 3079 2026 488B00   		movq	(%rax), %rax
 3080 2029 4885C0   		testq	%rax, %rax
 3081 202c 7431     		je	.L199
 813:main.c        **** 		fprintf(stderr, "%s\n", *error);
 3082              		.loc 1 813 0
 3083 202e 488B45B8 		movq	-72(%rbp), %rax
 3084 2032 488B10   		movq	(%rax), %rdx
 3085 2035 488B0500 		movq	stderr(%rip), %rax
 3085      000000
 3086 203c 488D3500 		leaq	.LC46(%rip), %rsi
 3086      000000
 3087 2043 4889C7   		movq	%rax, %rdi
 3088 2046 B8000000 		movl	$0, %eax
 3088      00
 3089 204b E8000000 		call	fprintf@PLT
 3089      00
 814:main.c        **** 		flFreeError(*error);
 3090              		.loc 1 814 0
 3091 2050 488B45B8 		movq	-72(%rbp), %rax
 3092 2054 488B00   		movq	(%rax), %rax
 3093 2057 4889C7   		movq	%rax, %rdi
 3094 205a E8000000 		call	flFreeError@PLT
 3094      00
 3095              	.L199:
 815:main.c        **** 	}
 816:main.c        **** 	return retVal;
 3096              		.loc 1 816 0
 3097 205f 8B45E0   		movl	-32(%rbp), %eax
 817:main.c        **** }
 3098              		.loc 1 817 0
 3099 2062 C9       		leave
 3100              		.cfi_def_cfa 7, 8
 3101 2063 C3       		ret
 3102              		.cfi_endproc
 3103              	.LFE25:
 3105              		.section	.rodata
 3106 0286 0000     		.align 8
 3107              	.LC47:
 3108 0288 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 3108      20202020 
 3108      20202020 
 3108      76656E64 
 3108      6F722049 
 3109              	.LC48:
 3110 02bd 3C564944 		.string	"<VID:PID>"
 3110      3A504944 
 3110      3E00
 3111              	.LC49:
 3112 02c7 69767000 		.string	"ivp"
 3113              	.LC50:
 3114 02cb 6900     		.string	"i"
 3115 02cd 000000   		.align 8
 3116              	.LC51:
 3117 02d0 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 3117      20202056 
 3117      49442C20 
 3117      50494420 
 3117      616E6420 
 3118              	.LC52:
 3119 0305 3C564944 		.string	"<VID:PID[:DID]>"
 3119      3A504944 
 3119      5B3A4449 
 3119      445D3E00 
 3120              	.LC53:
 3121 0315 767000   		.string	"vp"
 3122              	.LC54:
 3123 0318 7600     		.string	"v"
 3124 031a 00000000 		.align 8
 3124      0000
 3125              	.LC55:
 3126 0320 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 3126      20202020 
 3126      6669726D 
 3126      77617265 
 3126      20746F20 
 3127              	.LC56:
 3128 034d 3C666972 		.string	"<firmware.hex>"
 3128      6D776172 
 3128      652E6865 
 3128      783E00
 3129              	.LC57:
 3130 035c 667700   		.string	"fw"
 3131              	.LC58:
 3132 035f 6600     		.string	"f"
 3133 0361 00000000 		.align 8
 3133      000000
 3134              	.LC59:
 3135 0368 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 3135      642F7772 
 3135      69746520 
 3135      64696769 
 3135      74616C20 
 3136              	.LC60:
 3137 0395 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 3137      4366675B 
 3137      2C626974 
 3137      4366675D 
 3137      2A3E00
 3138              	.LC61:
 3139 03a8 706F7274 		.string	"ports"
 3139      7300
 3140              	.LC62:
 3141 03ae 6400     		.string	"d"
 3142              	.LC63:
 3143 03b0 20202020 		.string	"         query the JTAG chain"
 3143      20202020 
 3143      20717565 
 3143      72792074 
 3143      6865204A 
 3144              	.LC64:
 3145 03ce 3C6A7461 		.string	"<jtagBits>"
 3145      67426974 
 3145      733E00
 3146              	.LC65:
 3147 03d9 71756572 		.string	"query"
 3147      7900
 3148              	.LC66:
 3149 03df 7100     		.string	"q"
 3150              	.LC67:
 3151 03e1 20202020 		.string	"         program a device"
 3151      20202020 
 3151      2070726F 
 3151      6772616D 
 3151      20612064 
 3152              	.LC68:
 3153 03fb 3C636F6E 		.string	"<config>"
 3153      6669673E 
 3153      00
 3154              	.LC69:
 3155 0404 70726F67 		.string	"program"
 3155      72616D00 
 3156              	.LC70:
 3157 040c 7000     		.string	"p"
 3158 040e 0000     		.align 8
 3159              	.LC71:
 3160 0410 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 3160      20202020 
 3160      77686963 
 3160      6820636F 
 3160      6D6D2063 
 3161              	.LC72:
 3162 0444 3C636F6E 		.string	"<conduit>"
 3162      64756974 
 3162      3E00
 3163              	.LC73:
 3164 044e 636F6E64 		.string	"conduit"
 3164      75697400 
 3165              	.LC74:
 3166 0456 6300     		.string	"c"
 3167              		.align 8
 3168              	.LC75:
 3169 0458 20202020 		.string	"    a series of CommFPGA actions"
 3169      61207365 
 3169      72696573 
 3169      206F6620 
 3169      436F6D6D 
 3170              	.LC76:
 3171 0479 3C616374 		.string	"<actionString>"
 3171      696F6E53 
 3171      7472696E 
 3171      673E00
 3172              	.LC77:
 3173 0488 61637469 		.string	"action"
 3173      6F6E00
 3174              	.LC78:
 3175 048f 6100     		.string	"a"
 3176 0491 00000000 		.align 8
 3176      000000
 3177              	.LC79:
 3178 0498 20202020 		.string	"                    start up an interactive CommFPGA session"
 3178      20202020 
 3178      20202020 
 3178      20202020 
 3178      20202020 
 3179              	.LC80:
 3180 04d5 7368656C 		.string	"shell"
 3180      6C00
 3181              	.LC81:
 3182 04db 7300     		.string	"s"
 3183 04dd 000000   		.align 8
 3184              	.LC82:
 3185 04e0 20202020 		.string	"                enable benchmarking & checksumming"
 3185      20202020 
 3185      20202020 
 3185      20202020 
 3185      656E6162 
 3186              	.LC83:
 3187 0513 62656E63 		.string	"benchmark"
 3187      686D6172 
 3187      6B00
 3188              	.LC84:
 3189 051d 6200     		.string	"b"
 3190 051f 00       		.align 8
 3191              	.LC85:
 3192 0520 20202020 		.string	"                    reset the bulk endpoints"
 3192      20202020 
 3192      20202020 
 3192      20202020 
 3192      20202020 
 3193              	.LC86:
 3194 054d 72657365 		.string	"reset"
 3194      7400
 3195 0553 00000000 		.align 8
 3195      00
 3196              	.LC87:
 3197 0558 20202077 		.string	"   write data from channel ch to file"
 3197      72697465 
 3197      20646174 
 3197      61206672 
 3197      6F6D2063 
 3198              	.LC88:
 3199 057e 3C63683A 		.string	"<ch:file.bin>"
 3199      66696C65 
 3199      2E62696E 
 3199      3E00
 3200              	.LC89:
 3201 058c 64756D70 		.string	"dumploop"
 3201      6C6F6F70 
 3201      00
 3202              	.LC90:
 3203 0595 6C00     		.string	"l"
 3204 0597 00       		.align 8
 3205              	.LC91:
 3206 0598 20202020 		.string	"                     print this help and exit"
 3206      20202020 
 3206      20202020 
 3206      20202020 
 3206      20202020 
 3207              	.LC92:
 3208 05c6 68656C70 		.string	"help"
 3208      00
 3209              	.LC93:
 3210 05cb 6800     		.string	"h"
 3211 05cd 000000   		.align 8
 3212              	.LC94:
 3213 05d0 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 3213      72697465 
 3213      20666972 
 3213      6D776172 
 3213      6520746F 
 3214              	.LC95:
 3215 05f7 3C737464 		.string	"<std|fw.hex|fw.iic>"
 3215      7C66772E 
 3215      6865787C 
 3215      66772E69 
 3215      69633E00 
 3216              	.LC96:
 3217 060b 65657072 		.string	"eeprom"
 3217      6F6D00
 3218 0612 00000000 		.align 8
 3218      0000
 3219              	.LC97:
 3220 0618 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 3220      20626163 
 3220      6B757020 
 3220      46583227 
 3220      73204545 
 3221              	.LC98:
 3222 0643 3C6B6269 		.string	"<kbitSize:fw.iic>"
 3222      7453697A 
 3222      653A6677 
 3222      2E696963 
 3222      3E00
 3223              	.LC99:
 3224 0655 6261636B 		.string	"backup"
 3224      757000
 3225 065c 00000000 		.align 8
 3226              	.LC100:
 3227 0660 636F6D6D 		.string	"communication with the CommFPGA for rail info"
 3227      756E6963 
 3227      6174696F 
 3227      6E207769 
 3227      74682074 
 3228              	.LC101:
 3229 068e 3C726169 		.string	"<railString>"
 3229      6C537472 
 3229      696E673E 
 3229      00
 3230              	.LC102:
 3231 069b 7261696C 		.string	"rail"
 3231      00
 3232              	.LC103:
 3233 06a0 7900     		.string	"y"
 3234              	.LC104:
 3235 06a2 666C636C 		.string	"flcli"
 3235      6900
 3236              	.LC105:
 3237 06a8 25733A20 		.string	"%s: insufficient memory\n"
 3237      696E7375 
 3237      66666963 
 3237      69656E74 
 3237      206D656D 
 3238 06c1 00000000 		.align 8
 3238      000000
 3239              	.LC106:
 3240 06c8 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 3240      4C696E6B 
 3240      20436F6D 
 3240      6D616E64 
 3240      2D4C696E 
 3241              	.LC107:
 3242 071c 0A00     		.string	"\n"
 3243 071e 0000     		.align 8
 3244              	.LC108:
 3245 0720 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 3245      65726163 
 3245      74207769 
 3245      74682061 
 3245      6E204650 
 3246              	.LC109:
 3247 0744 2020252D 		.string	"  %-10s %s\n"
 3247      31307320 
 3247      25730A00 
 3248              		.align 8
 3249              	.LC110:
 3250 0750 54727920 		.string	"Try '%s --help' for more information.\n"
 3250      27257320 
 3250      2D2D6865 
 3250      6C702720 
 3250      666F7220 
 3251 0777 00       		.align 8
 3252              	.LC111:
 3253 0778 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 3253      6D707469 
 3253      6E672074 
 3253      6F206F70 
 3253      656E2063 
 3254              	.LC112:
 3255 07b0 4C6F6164 		.string	"Loading firmware into %s...\n"
 3255      696E6720 
 3255      6669726D 
 3255      77617265 
 3255      20696E74 
 3256              	.LC113:
 3257 07cd 41776169 		.string	"Awaiting renumeration"
 3257      74696E67 
 3257      2072656E 
 3257      756D6572 
 3257      6174696F 
 3258 07e3 00000000 		.align 8
 3258      00
 3259              	.LC114:
 3260 07e8 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 3260      4C696E6B 
 3260      20646576 
 3260      69636520 
 3260      64696420 
 3261 081b 00000000 		.align 8
 3261      00
 3262              	.LC115:
 3263 0820 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 3263      6D707469 
 3263      6E672074 
 3263      6F206F70 
 3263      656E2063 
 3264 085d 000000   		.align 8
 3265              	.LC116:
 3266 0860 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 3266      64206E6F 
 3266      74206F70 
 3266      656E2046 
 3266      5047414C 
 3267 08aa 00000000 		.align 8
 3267      0000
 3268              	.LC117:
 3269 08b0 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 3269      65637465 
 3269      6420746F 
 3269      20465047 
 3269      414C696E 
 3270              	.LC118:
 3271 08ff 73746400 		.string	"std"
 3272 0903 00000000 		.align 8
 3272      00
 3273              	.LC119:
 3274 0908 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 3274      696E6720 
 3274      74686520 
 3274      7374616E 
 3274      64617264 
 3275 0946 0000     		.align 8
 3276              	.LC120:
 3277 0948 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 3277      696E6720 
 3277      63757374 
 3277      6F6D2046 
 3277      5047414C 
 3278 0989 00000000 		.align 8
 3278      000000
 3279              	.LC121:
 3280 0990 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 3280      696E7661 
 3280      6C696420 
 3280      61726775 
 3280      6D656E74 
 3281 09cb 00000000 		.align 8
 3281      00
 3282              	.LC122:
 3283 09d0 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 3283      6E672061 
 3283      20626163 
 3283      6B757020 
 3283      6F662025 
 3284              	.LC123:
 3285 0a0b 436F6E66 		.string	"Configuring ports..."
 3285      69677572 
 3285      696E6720 
 3285      706F7274 
 3285      732E2E2E 
 3286              	.LC124:
 3287 0a20 25303858 		.string	"%08X"
 3287      00
 3288 0a25 000000   		.align 8
 3289              	.LC125:
 3290 0a28 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 3290      6261636B 
 3290      3A202020 
 3290      32382020 
 3290      20323420 
 3291              	.LC126:
 3292 0a68 20257300 		.string	" %s"
 3293              	.LC127:
 3294 0a6c 20202573 		.string	"  %s"
 3294      00
 3295              	.LC128:
 3296 0a71 2025730A 		.string	" %s\n"
 3296      00
 3297 0a76 0000     		.align 8
 3298              	.LC129:
 3299 0a78 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 3299      46504741 
 3299      4C696E6B 
 3299      20646576 
 3299      69636520 
 3300              	.LC130:
 3301 0ab5 20203078 		.string	"  0x%08X\n"
 3301      25303858 
 3301      0A00
 3302 0abf 00       		.align 8
 3303              	.LC131:
 3304 0ac0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 3304      46504741 
 3304      4C696E6B 
 3304      20646576 
 3304      69636520 
 3305              		.align 8
 3306              	.LC132:
 3307 0b18 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 3307      20636861 
 3307      696E2073 
 3307      63616E20 
 3307      72657175 
 3308              	.LC133:
 3309 0b67 50726F67 		.string	"Programming device..."
 3309      72616D6D 
 3309      696E6720 
 3309      64657669 
 3309      63652E2E 
 3310 0b7d 000000   		.align 8
 3311              	.LC134:
 3312 0b80 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 3312      72616D20 
 3312      6F706572 
 3312      6174696F 
 3312      6E207265 
 3313              		.align 8
 3314              	.LC135:
 3315 0bc8 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 3315      7574696E 
 3315      6720436F 
 3315      6D6D4650 
 3315      47412061 
 3316 0bfd 000000   		.align 8
 3317              	.LC136:
 3318 0c00 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 3318      46504741 
 3318      4C696E6B 
 3318      20646576 
 3318      69636520 
 3319 0c4c 00000000 		.align 8
 3320              	.LC137:
 3321 0c50 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 3321      6F6E2072 
 3321      65717565 
 3321      73746564 
 3321      20627574 
 3322 0c8d 000000   		.align 8
 3323              	.LC138:
 3324 0c90 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 3324      696E7661 
 3324      6C696420 
 3324      61726775 
 3324      6D656E74 
 3325 0ccc 00000000 		.align 8
 3326              	.LC139:
 3327 0cd0 436F7079 		.string	"Copying from channel %lu to %s"
 3327      696E6720 
 3327      66726F6D 
 3327      20636861 
 3327      6E6E656C 
 3328              	.LC140:
 3329 0cef 0A436175 		.string	"\nCaught SIGINT, quitting..."
 3329      67687420 
 3329      53494749 
 3329      4E542C20 
 3329      71756974 
 3330 0d0b 00000000 		.align 8
 3330      00
 3331              	.LC141:
 3332 0d10 45786563 		.string	"Executing CommFPGA rail info on FPGALink device %s...\n"
 3332      7574696E 
 3332      6720436F 
 3332      6D6D4650 
 3332      47412072 
 3333              	.LC142:
 3334 0d47 656E7465 		.string	"entering the loop"
 3334      72696E67 
 3334      20746865 
 3334      206C6F6F 
 3334      7000
 3335              	.LC143:
 3336 0d59 63686563 		.string	"checking on channel %d\n"
 3336      6B696E67 
 3336      206F6E20 
 3336      6368616E 
 3336      6E656C20 
 3337              	.LC144:
 3338 0d71 78206973 		.string	"x is %d, y is %d\n"
 3338      2025642C 
 3338      20792069 
 3338      73202564 
 3338      0A00
 3339              	.LC145:
 3340 0d83 636F2D6F 		.string	"co-ord data re-sent"
 3340      72642064 
 3340      61746120 
 3340      72652D73 
 3340      656E7400 
 3341 0d97 00       		.align 8
 3342              	.LC146:
 3343 0d98 636F6E6E 		.string	"connection established on channel number %d\n"
 3343      65637469 
 3343      6F6E2065 
 3343      73746162 
 3343      6C697368 
 3344 0dc5 000000   		.align 8
 3345              	.LC147:
 3346 0dc8 77726974 		.string	"written the first 4 bytes of rail info"
 3346      74656E20 
 3346      74686520 
 3346      66697273 
 3346      74203420 
 3347 0def 00       		.align 8
 3348              	.LC148:
 3349 0df0 77726974 		.string	"written the last 4 bytes of rail info"
 3349      74656E20 
 3349      74686520 
 3349      6C617374 
 3349      20342062 
 3350 0e16 0000     		.align 8
 3351              	.LC149:
 3352 0e18 53322073 		.string	"S2 state successfully completed"
 3352      74617465 
 3352      20737563 
 3352      63657373 
 3352      66756C6C 
 3353              		.align 8
 3354              	.LC150:
 3355 0e38 72656365 		.string	"received data at S3 is %u at time %d\n"
 3355      69766564 
 3355      20646174 
 3355      61206174 
 3355      20533320 
 3356              	.LC151:
 3357 0e5e 2D00     		.string	"-"
 3358              		.align 8
 3359              	.LC152:
 3360 0e60 4469646E 		.string	"Didn't receive ACK on channel %d, decrypted_data = %u\n"
 3360      27742072 
 3360      65636569 
 3360      76652041 
 3360      434B206F 
 3361              	.LC153:
 3362 0e97 6E6F206F 		.string	"no of processes completed %d\n"
 3362      66207072 
 3362      6F636573 
 3362      73657320 
 3362      636F6D70 
 3363 0eb5 000000   		.align 8
 3364              	.LC154:
 3365 0eb8 77616974 		.string	"waiting for next process to start"
 3365      696E6720 
 3365      666F7220 
 3365      6E657874 
 3365      2070726F 
 3366              	.LC155:
 3367 0eda 2E00     		.string	"."
 3368              	.LC156:
 3369 0edc 77616974 		.string	"waited for 20 seconds\n\n"
 3369      65642066 
 3369      6F722032 
 3369      30207365 
 3369      636F6E64 
 3370 0ef4 00000000 		.align 8
 3371              	.LC157:
 3372 0ef8 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 3372      6572696E 
 3372      6720436F 
 3372      6D6D4650 
 3372      47412063 
 3373              	.LC158:
 3374 0f1e 3E2000   		.string	"> "
 3375 0f21 00000000 		.align 8
 3375      000000
 3376              	.LC159:
 3377 0f28 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 3377      46504741 
 3377      4C696E6B 
 3377      20646576 
 3377      69636520 
 3378 0f71 00000000 		.align 8
 3378      000000
 3379              	.LC160:
 3380 0f78 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 3380      6C207265 
 3380      71756573 
 3380      74656420 
 3380      62757420 
 3381              		.text
 3382              		.globl	main
 3384              	main:
 3385              	.LFB26:
 818:main.c        **** 
 819:main.c        **** 
 820:main.c        **** int main(int argc, char *argv[]) {
 3386              		.loc 1 820 0
 3387              		.cfi_startproc
 3388 2064 55       		pushq	%rbp
 3389              		.cfi_def_cfa_offset 16
 3390              		.cfi_offset 6, -16
 3391 2065 4889E5   		movq	%rsp, %rbp
 3392              		.cfi_def_cfa_register 6
 3393 2068 53       		pushq	%rbx
 3394 2069 4881EC58 		subq	$1112, %rsp
 3394      040000
 3395              		.cfi_offset 3, -24
 3396 2070 89BDACFB 		movl	%edi, -1108(%rbp)
 3396      FFFF
 3397 2076 4889B5A0 		movq	%rsi, -1120(%rbp)
 3397      FBFFFF
 3398              		.loc 1 820 0
 3399 207d 64488B04 		movq	%fs:40, %rax
 3399      25280000 
 3399      00
 3400 2086 488945E8 		movq	%rax, -24(%rbp)
 3401 208a 31C0     		xorl	%eax, %eax
 821:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 3402              		.loc 1 821 0
 3403 208c C785C4FB 		movl	$0, -1084(%rbp)
 3403      FFFF0000 
 3403      0000
 822:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 3404              		.loc 1 822 0
 3405 2096 488D0D00 		leaq	.LC47(%rip), %rcx
 3405      000000
 3406 209d 488D1500 		leaq	.LC48(%rip), %rdx
 3406      000000
 3407 20a4 488D3500 		leaq	.LC49(%rip), %rsi
 3407      000000
 3408 20ab 488D3D00 		leaq	.LC50(%rip), %rdi
 3408      000000
 3409 20b2 E8000000 		call	arg_str0@PLT
 3409      00
 3410 20b7 48898540 		movq	%rax, -960(%rbp)
 3410      FCFFFF
 823:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 3411              		.loc 1 823 0
 3412 20be 488D0D00 		leaq	.LC51(%rip), %rcx
 3412      000000
 3413 20c5 488D1500 		leaq	.LC52(%rip), %rdx
 3413      000000
 3414 20cc 488D3500 		leaq	.LC53(%rip), %rsi
 3414      000000
 3415 20d3 488D3D00 		leaq	.LC54(%rip), %rdi
 3415      000000
 3416 20da E8000000 		call	arg_str1@PLT
 3416      00
 3417 20df 48898548 		movq	%rax, -952(%rbp)
 3417      FCFFFF
 824:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 3418              		.loc 1 824 0
 3419 20e6 488D0D00 		leaq	.LC55(%rip), %rcx
 3419      000000
 3420 20ed 488D1500 		leaq	.LC56(%rip), %rdx
 3420      000000
 3421 20f4 488D3500 		leaq	.LC57(%rip), %rsi
 3421      000000
 3422 20fb 488D3D00 		leaq	.LC58(%rip), %rdi
 3422      000000
 3423 2102 E8000000 		call	arg_str0@PLT
 3423      00
 3424 2107 48898550 		movq	%rax, -944(%rbp)
 3424      FCFFFF
 825:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 3425              		.loc 1 825 0
 3426 210e 488D0D00 		leaq	.LC59(%rip), %rcx
 3426      000000
 3427 2115 488D1500 		leaq	.LC60(%rip), %rdx
 3427      000000
 3428 211c 488D3500 		leaq	.LC61(%rip), %rsi
 3428      000000
 3429 2123 488D3D00 		leaq	.LC62(%rip), %rdi
 3429      000000
 3430 212a E8000000 		call	arg_str0@PLT
 3430      00
 3431 212f 48898558 		movq	%rax, -936(%rbp)
 3431      FCFFFF
 826:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 3432              		.loc 1 826 0
 3433 2136 488D0D00 		leaq	.LC63(%rip), %rcx
 3433      000000
 3434 213d 488D1500 		leaq	.LC64(%rip), %rdx
 3434      000000
 3435 2144 488D3500 		leaq	.LC65(%rip), %rsi
 3435      000000
 3436 214b 488D3D00 		leaq	.LC66(%rip), %rdi
 3436      000000
 3437 2152 E8000000 		call	arg_str0@PLT
 3437      00
 3438 2157 48898560 		movq	%rax, -928(%rbp)
 3438      FCFFFF
 827:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 3439              		.loc 1 827 0
 3440 215e 488D0D00 		leaq	.LC67(%rip), %rcx
 3440      000000
 3441 2165 488D1500 		leaq	.LC68(%rip), %rdx
 3441      000000
 3442 216c 488D3500 		leaq	.LC69(%rip), %rsi
 3442      000000
 3443 2173 488D3D00 		leaq	.LC70(%rip), %rdi
 3443      000000
 3444 217a E8000000 		call	arg_str0@PLT
 3444      00
 3445 217f 48898568 		movq	%rax, -920(%rbp)
 3445      FCFFFF
 828:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 3446              		.loc 1 828 0
 3447 2186 488D0D00 		leaq	.LC71(%rip), %rcx
 3447      000000
 3448 218d 488D1500 		leaq	.LC72(%rip), %rdx
 3448      000000
 3449 2194 488D3500 		leaq	.LC73(%rip), %rsi
 3449      000000
 3450 219b 488D3D00 		leaq	.LC74(%rip), %rdi
 3450      000000
 3451 21a2 E8000000 		call	arg_uint0@PLT
 3451      00
 3452 21a7 48898570 		movq	%rax, -912(%rbp)
 3452      FCFFFF
 829:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 3453              		.loc 1 829 0
 3454 21ae 488D0D00 		leaq	.LC75(%rip), %rcx
 3454      000000
 3455 21b5 488D1500 		leaq	.LC76(%rip), %rdx
 3455      000000
 3456 21bc 488D3500 		leaq	.LC77(%rip), %rsi
 3456      000000
 3457 21c3 488D3D00 		leaq	.LC78(%rip), %rdi
 3457      000000
 3458 21ca E8000000 		call	arg_str0@PLT
 3458      00
 3459 21cf 48898578 		movq	%rax, -904(%rbp)
 3459      FCFFFF
 830:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 3460              		.loc 1 830 0
 3461 21d6 488D1500 		leaq	.LC79(%rip), %rdx
 3461      000000
 3462 21dd 488D3500 		leaq	.LC80(%rip), %rsi
 3462      000000
 3463 21e4 488D3D00 		leaq	.LC81(%rip), %rdi
 3463      000000
 3464 21eb E8000000 		call	arg_lit0@PLT
 3464      00
 3465 21f0 48898580 		movq	%rax, -896(%rbp)
 3465      FCFFFF
 831:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 3466              		.loc 1 831 0
 3467 21f7 488D1500 		leaq	.LC82(%rip), %rdx
 3467      000000
 3468 21fe 488D3500 		leaq	.LC83(%rip), %rsi
 3468      000000
 3469 2205 488D3D00 		leaq	.LC84(%rip), %rdi
 3469      000000
 3470 220c E8000000 		call	arg_lit0@PLT
 3470      00
 3471 2211 48898588 		movq	%rax, -888(%rbp)
 3471      FCFFFF
 832:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 3472              		.loc 1 832 0
 3473 2218 488D1500 		leaq	.LC85(%rip), %rdx
 3473      000000
 3474 221f 488D3500 		leaq	.LC86(%rip), %rsi
 3474      000000
 3475 2226 488D3D00 		leaq	.LC38(%rip), %rdi
 3475      000000
 3476 222d E8000000 		call	arg_lit0@PLT
 3476      00
 3477 2232 48898590 		movq	%rax, -880(%rbp)
 3477      FCFFFF
 833:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 3478              		.loc 1 833 0
 3479 2239 488D0D00 		leaq	.LC87(%rip), %rcx
 3479      000000
 3480 2240 488D1500 		leaq	.LC88(%rip), %rdx
 3480      000000
 3481 2247 488D3500 		leaq	.LC89(%rip), %rsi
 3481      000000
 3482 224e 488D3D00 		leaq	.LC90(%rip), %rdi
 3482      000000
 3483 2255 E8000000 		call	arg_str0@PLT
 3483      00
 3484 225a 48898598 		movq	%rax, -872(%rbp)
 3484      FCFFFF
 834:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 3485              		.loc 1 834 0
 3486 2261 488D1500 		leaq	.LC91(%rip), %rdx
 3486      000000
 3487 2268 488D3500 		leaq	.LC92(%rip), %rsi
 3487      000000
 3488 226f 488D3D00 		leaq	.LC93(%rip), %rdi
 3488      000000
 3489 2276 E8000000 		call	arg_lit0@PLT
 3489      00
 3490 227b 488985A0 		movq	%rax, -864(%rbp)
 3490      FCFFFF
 835:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 3491              		.loc 1 835 0
 3492 2282 488D0D00 		leaq	.LC94(%rip), %rcx
 3492      000000
 3493 2289 488D1500 		leaq	.LC95(%rip), %rdx
 3493      000000
 3494 2290 488D3500 		leaq	.LC96(%rip), %rsi
 3494      000000
 3495 2297 BF000000 		movl	$0, %edi
 3495      00
 3496 229c E8000000 		call	arg_str0@PLT
 3496      00
 3497 22a1 488985A8 		movq	%rax, -856(%rbp)
 3497      FCFFFF
 836:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 3498              		.loc 1 836 0
 3499 22a8 488D0D00 		leaq	.LC97(%rip), %rcx
 3499      000000
 3500 22af 488D1500 		leaq	.LC98(%rip), %rdx
 3500      000000
 3501 22b6 488D3500 		leaq	.LC99(%rip), %rsi
 3501      000000
 3502 22bd BF000000 		movl	$0, %edi
 3502      00
 3503 22c2 E8000000 		call	arg_str0@PLT
 3503      00
 3504 22c7 488985B0 		movq	%rax, -848(%rbp)
 3504      FCFFFF
 837:main.c        **** 	struct arg_str *railOpt = arg_str0("y", "rail", "<railString>", "communication with the CommFPGA f
 3505              		.loc 1 837 0
 3506 22ce 488D0D00 		leaq	.LC100(%rip), %rcx
 3506      000000
 3507 22d5 488D1500 		leaq	.LC101(%rip), %rdx
 3507      000000
 3508 22dc 488D3500 		leaq	.LC102(%rip), %rsi
 3508      000000
 3509 22e3 488D3D00 		leaq	.LC103(%rip), %rdi
 3509      000000
 3510 22ea E8000000 		call	arg_str0@PLT
 3510      00
 3511 22ef 488985B8 		movq	%rax, -840(%rbp)
 3511      FCFFFF
 838:main.c        **** 	{
 839:main.c        **** 		
 840:main.c        **** 	};
 841:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 3512              		.loc 1 841 0
 3513 22f6 BF140000 		movl	$20, %edi
 3513      00
 3514 22fb E8000000 		call	arg_end@PLT
 3514      00
 3515 2300 488985C0 		movq	%rax, -832(%rbp)
 3515      FCFFFF
 842:main.c        **** 	void *argTable[] = {
 3516              		.loc 1 842 0
 3517 2307 488B8540 		movq	-960(%rbp), %rax
 3517      FCFFFF
 3518 230e 48898540 		movq	%rax, -704(%rbp)
 3518      FDFFFF
 3519 2315 488B8548 		movq	-952(%rbp), %rax
 3519      FCFFFF
 3520 231c 48898548 		movq	%rax, -696(%rbp)
 3520      FDFFFF
 3521 2323 488B8550 		movq	-944(%rbp), %rax
 3521      FCFFFF
 3522 232a 48898550 		movq	%rax, -688(%rbp)
 3522      FDFFFF
 3523 2331 488B8558 		movq	-936(%rbp), %rax
 3523      FCFFFF
 3524 2338 48898558 		movq	%rax, -680(%rbp)
 3524      FDFFFF
 3525 233f 488B8560 		movq	-928(%rbp), %rax
 3525      FCFFFF
 3526 2346 48898560 		movq	%rax, -672(%rbp)
 3526      FDFFFF
 3527 234d 488B8568 		movq	-920(%rbp), %rax
 3527      FCFFFF
 3528 2354 48898568 		movq	%rax, -664(%rbp)
 3528      FDFFFF
 3529 235b 488B8570 		movq	-912(%rbp), %rax
 3529      FCFFFF
 3530 2362 48898570 		movq	%rax, -656(%rbp)
 3530      FDFFFF
 3531 2369 488B8578 		movq	-904(%rbp), %rax
 3531      FCFFFF
 3532 2370 48898578 		movq	%rax, -648(%rbp)
 3532      FDFFFF
 3533 2377 488B8580 		movq	-896(%rbp), %rax
 3533      FCFFFF
 3534 237e 48898580 		movq	%rax, -640(%rbp)
 3534      FDFFFF
 3535 2385 488B8588 		movq	-888(%rbp), %rax
 3535      FCFFFF
 3536 238c 48898588 		movq	%rax, -632(%rbp)
 3536      FDFFFF
 3537 2393 488B8590 		movq	-880(%rbp), %rax
 3537      FCFFFF
 3538 239a 48898590 		movq	%rax, -624(%rbp)
 3538      FDFFFF
 3539 23a1 488B8598 		movq	-872(%rbp), %rax
 3539      FCFFFF
 3540 23a8 48898598 		movq	%rax, -616(%rbp)
 3540      FDFFFF
 3541 23af 488B85A0 		movq	-864(%rbp), %rax
 3541      FCFFFF
 3542 23b6 488985A0 		movq	%rax, -608(%rbp)
 3542      FDFFFF
 3543 23bd 488B85A8 		movq	-856(%rbp), %rax
 3543      FCFFFF
 3544 23c4 488985A8 		movq	%rax, -600(%rbp)
 3544      FDFFFF
 3545 23cb 488B85B0 		movq	-848(%rbp), %rax
 3545      FCFFFF
 3546 23d2 488985B0 		movq	%rax, -592(%rbp)
 3546      FDFFFF
 3547 23d9 488B85B8 		movq	-840(%rbp), %rax
 3547      FCFFFF
 3548 23e0 488985B8 		movq	%rax, -584(%rbp)
 3548      FDFFFF
 3549 23e7 488B85C0 		movq	-832(%rbp), %rax
 3549      FCFFFF
 3550 23ee 488985C0 		movq	%rax, -576(%rbp)
 3550      FDFFFF
 843:main.c        **** 		ivpOpt, vpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
 844:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, railOpt, endOpt
 845:main.c        **** 	};
 846:main.c        **** 	const char *progName = "flcli";
 3551              		.loc 1 846 0
 3552 23f5 488D0500 		leaq	.LC104(%rip), %rax
 3552      000000
 3553 23fc 488985C8 		movq	%rax, -824(%rbp)
 3553      FCFFFF
 847:main.c        **** 	int numErrors;
 848:main.c        **** 	struct FLContext *handle = NULL;
 3554              		.loc 1 848 0
 3555 2403 48C78518 		movq	$0, -1000(%rbp)
 3555      FCFFFF00 
 3555      000000
 849:main.c        **** 	FLStatus fStatus;
 850:main.c        **** 	const char *error = NULL;
 3556              		.loc 1 850 0
 3557 240e 48C78520 		movq	$0, -992(%rbp)
 3557      FCFFFF00 
 3557      000000
 851:main.c        **** 	const char *ivp = NULL;
 3558              		.loc 1 851 0
 3559 2419 48C785D0 		movq	$0, -816(%rbp)
 3559      FCFFFF00 
 3559      000000
 852:main.c        **** 	const char *vp = NULL;
 3560              		.loc 1 852 0
 3561 2424 48C785D8 		movq	$0, -808(%rbp)
 3561      FCFFFF00 
 3561      000000
 853:main.c        **** 	bool isNeroCapable, isCommCapable;
 854:main.c        **** 	uint32 numDevices, scanChain[16], i;
 855:main.c        **** 	const char *line = NULL;
 3562              		.loc 1 855 0
 3563 242f 48C78538 		movq	$0, -968(%rbp)
 3563      FCFFFF00 
 3563      000000
 856:main.c        **** 	uint8 conduit = 0x01;
 3564              		.loc 1 856 0
 3565 243a C685B8FB 		movb	$1, -1096(%rbp)
 3565      FFFF01
 857:main.c        **** 
 858:main.c        **** 
 859:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 3566              		.loc 1 859 0
 3567 2441 488D8540 		leaq	-704(%rbp), %rax
 3567      FDFFFF
 3568 2448 4889C7   		movq	%rax, %rdi
 3569 244b E8000000 		call	arg_nullcheck@PLT
 3569      00
 3570 2450 85C0     		testl	%eax, %eax
 3571 2452 7431     		je	.L202
 860:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 3572              		.loc 1 860 0
 3573 2454 488B0500 		movq	stderr(%rip), %rax
 3573      000000
 3574 245b 488B95C8 		movq	-824(%rbp), %rdx
 3574      FCFFFF
 3575 2462 488D3500 		leaq	.LC105(%rip), %rsi
 3575      000000
 3576 2469 4889C7   		movq	%rax, %rdi
 3577 246c B8000000 		movl	$0, %eax
 3577      00
 3578 2471 E8000000 		call	fprintf@PLT
 3578      00
 861:main.c        **** 		FAIL(1, cleanup);
 3579              		.loc 1 861 0
 3580 2476 C785C4FB 		movl	$1, -1084(%rbp)
 3580      FFFF0100 
 3580      0000
 3581 2480 E9311A00 		jmp	.L203
 3581      00
 3582              	.L202:
 862:main.c        **** 	}
 863:main.c        **** 
 864:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 3583              		.loc 1 864 0
 3584 2485 488D9540 		leaq	-704(%rbp), %rdx
 3584      FDFFFF
 3585 248c 488B8DA0 		movq	-1120(%rbp), %rcx
 3585      FBFFFF
 3586 2493 8B85ACFB 		movl	-1108(%rbp), %eax
 3586      FFFF
 3587 2499 4889CE   		movq	%rcx, %rsi
 3588 249c 89C7     		movl	%eax, %edi
 3589 249e E8000000 		call	arg_parse@PLT
 3589      00
 3590 24a3 8985F4FB 		movl	%eax, -1036(%rbp)
 3590      FFFF
 865:main.c        **** 
 866:main.c        **** 	if ( helpOpt->count > 0 ) {
 3591              		.loc 1 866 0
 3592 24a9 488B85A0 		movq	-864(%rbp), %rax
 3592      FCFFFF
 3593 24b0 8B4060   		movl	96(%rax), %eax
 3594 24b3 85C0     		testl	%eax, %eax
 3595 24b5 7E76     		jle	.L204
 867:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 3596              		.loc 1 867 0
 3597 24b7 488B85C8 		movq	-824(%rbp), %rax
 3597      FCFFFF
 3598 24be 4889C6   		movq	%rax, %rsi
 3599 24c1 488D3D00 		leaq	.LC106(%rip), %rdi
 3599      000000
 3600 24c8 B8000000 		movl	$0, %eax
 3600      00
 3601 24cd E8000000 		call	printf@PLT
 3601      00
 868:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 3602              		.loc 1 868 0
 3603 24d2 488B0500 		movq	stdout(%rip), %rax
 3603      000000
 3604 24d9 488D8D40 		leaq	-704(%rbp), %rcx
 3604      FDFFFF
 3605 24e0 488D1500 		leaq	.LC107(%rip), %rdx
 3605      000000
 3606 24e7 4889CE   		movq	%rcx, %rsi
 3607 24ea 4889C7   		movq	%rax, %rdi
 3608 24ed E8000000 		call	arg_print_syntax@PLT
 3608      00
 869:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 3609              		.loc 1 869 0
 3610 24f2 488D3D00 		leaq	.LC108(%rip), %rdi
 3610      000000
 3611 24f9 E8000000 		call	puts@PLT
 3611      00
 870:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 3612              		.loc 1 870 0
 3613 24fe 488B0500 		movq	stdout(%rip), %rax
 3613      000000
 3614 2505 488D8D40 		leaq	-704(%rbp), %rcx
 3614      FDFFFF
 3615 250c 488D1500 		leaq	.LC109(%rip), %rdx
 3615      000000
 3616 2513 4889CE   		movq	%rcx, %rsi
 3617 2516 4889C7   		movq	%rax, %rdi
 3618 2519 E8000000 		call	arg_print_glossary@PLT
 3618      00
 871:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 3619              		.loc 1 871 0
 3620 251e C785C4FB 		movl	$0, -1084(%rbp)
 3620      FFFF0000 
 3620      0000
 3621 2528 E9891900 		jmp	.L203
 3621      00
 3622              	.L204:
 872:main.c        **** 	}
 873:main.c        **** 
 874:main.c        **** 	if ( numErrors > 0 ) {
 3623              		.loc 1 874 0
 3624 252d 83BDF4FB 		cmpl	$0, -1036(%rbp)
 3624      FFFF00
 3625 2534 7E51     		jle	.L205
 875:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 3626              		.loc 1 875 0
 3627 2536 488B0500 		movq	stdout(%rip), %rax
 3627      000000
 3628 253d 488B95C8 		movq	-824(%rbp), %rdx
 3628      FCFFFF
 3629 2544 488B8DC0 		movq	-832(%rbp), %rcx
 3629      FCFFFF
 3630 254b 4889CE   		movq	%rcx, %rsi
 3631 254e 4889C7   		movq	%rax, %rdi
 3632 2551 E8000000 		call	arg_print_errors@PLT
 3632      00
 876:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 3633              		.loc 1 876 0
 3634 2556 488B0500 		movq	stderr(%rip), %rax
 3634      000000
 3635 255d 488B95C8 		movq	-824(%rbp), %rdx
 3635      FCFFFF
 3636 2564 488D3500 		leaq	.LC110(%rip), %rsi
 3636      000000
 3637 256b 4889C7   		movq	%rax, %rdi
 3638 256e B8000000 		movl	$0, %eax
 3638      00
 3639 2573 E8000000 		call	fprintf@PLT
 3639      00
 877:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 3640              		.loc 1 877 0
 3641 2578 C785C4FB 		movl	$12, -1084(%rbp)
 3641      FFFF0C00 
 3641      0000
 3642 2582 E92F1900 		jmp	.L203
 3642      00
 3643              	.L205:
 878:main.c        **** 	}
 879:main.c        **** 
 880:main.c        **** 	fStatus = flInitialise(0, &error);
 3644              		.loc 1 880 0
 3645 2587 488D8520 		leaq	-992(%rbp), %rax
 3645      FCFFFF
 3646 258e 4889C6   		movq	%rax, %rsi
 3647 2591 BF000000 		movl	$0, %edi
 3647      00
 3648 2596 E8000000 		call	flInitialise@PLT
 3648      00
 3649 259b 8985C8FB 		movl	%eax, -1080(%rbp)
 3649      FFFF
 881:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3650              		.loc 1 881 0
 3651 25a1 83BDC8FB 		cmpl	$0, -1080(%rbp)
 3651      FFFF00
 3652 25a8 740F     		je	.L206
 3653              		.loc 1 881 0 is_stmt 0 discriminator 1
 3654 25aa C785C4FB 		movl	$1, -1084(%rbp)
 3654      FFFF0100 
 3654      0000
 3655 25b4 E9FD1800 		jmp	.L203
 3655      00
 3656              	.L206:
 882:main.c        **** 
 883:main.c        **** 	vp = vpOpt->sval[0];
 3657              		.loc 1 883 0 is_stmt 1
 3658 25b9 488B8548 		movq	-952(%rbp), %rax
 3658      FCFFFF
 3659 25c0 488B4068 		movq	104(%rax), %rax
 3660 25c4 488B00   		movq	(%rax), %rax
 3661 25c7 488985D8 		movq	%rax, -808(%rbp)
 3661      FCFFFF
 884:main.c        **** 
 885:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 3662              		.loc 1 885 0
 3663 25ce 488B85D8 		movq	-808(%rbp), %rax
 3663      FCFFFF
 3664 25d5 4889C6   		movq	%rax, %rsi
 3665 25d8 488D3D00 		leaq	.LC111(%rip), %rdi
 3665      000000
 3666 25df B8000000 		movl	$0, %eax
 3666      00
 3667 25e4 E8000000 		call	printf@PLT
 3667      00
 886:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 3668              		.loc 1 886 0
 3669 25e9 488D8D18 		leaq	-1000(%rbp), %rcx
 3669      FCFFFF
 3670 25f0 488B85D8 		movq	-808(%rbp), %rax
 3670      FCFFFF
 3671 25f7 BA000000 		movl	$0, %edx
 3671      00
 3672 25fc 4889CE   		movq	%rcx, %rsi
 3673 25ff 4889C7   		movq	%rax, %rdi
 3674 2602 E8000000 		call	flOpen@PLT
 3674      00
 3675 2607 8985C8FB 		movl	%eax, -1080(%rbp)
 3675      FFFF
 887:main.c        **** 	if ( fStatus ) {
 3676              		.loc 1 887 0
 3677 260d 83BDC8FB 		cmpl	$0, -1080(%rbp)
 3677      FFFF00
 3678 2614 0F842F02 		je	.L207
 3678      0000
 888:main.c        **** 		if ( ivpOpt->count ) {
 3679              		.loc 1 888 0
 3680 261a 488B8540 		movq	-960(%rbp), %rax
 3680      FCFFFF
 3681 2621 8B4060   		movl	96(%rax), %eax
 3682 2624 85C0     		testl	%eax, %eax
 3683 2626 0F84EC01 		je	.L208
 3683      0000
 3684              	.LBB23:
 889:main.c        **** 			int count = 60;
 3685              		.loc 1 889 0
 3686 262c C785D0FB 		movl	$60, -1072(%rbp)
 3686      FFFF3C00 
 3686      0000
 890:main.c        **** 			uint8 flag;
 891:main.c        **** 			ivp = ivpOpt->sval[0];
 3687              		.loc 1 891 0
 3688 2636 488B8540 		movq	-960(%rbp), %rax
 3688      FCFFFF
 3689 263d 488B4068 		movq	104(%rax), %rax
 3690 2641 488B00   		movq	(%rax), %rax
 3691 2644 488985D0 		movq	%rax, -816(%rbp)
 3691      FCFFFF
 892:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 3692              		.loc 1 892 0
 3693 264b 488B85D0 		movq	-816(%rbp), %rax
 3693      FCFFFF
 3694 2652 4889C6   		movq	%rax, %rsi
 3695 2655 488D3D00 		leaq	.LC112(%rip), %rdi
 3695      000000
 3696 265c B8000000 		movl	$0, %eax
 3696      00
 3697 2661 E8000000 		call	printf@PLT
 3697      00
 893:main.c        **** 			if ( fwOpt->count ) {
 3698              		.loc 1 893 0
 3699 2666 488B8550 		movq	-944(%rbp), %rax
 3699      FCFFFF
 3700 266d 8B4060   		movl	96(%rax), %eax
 3701 2670 85C0     		testl	%eax, %eax
 3702 2672 742F     		je	.L209
 894:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 3703              		.loc 1 894 0
 3704 2674 488B8550 		movq	-944(%rbp), %rax
 3704      FCFFFF
 3705 267b 488B4068 		movq	104(%rax), %rax
 3706 267f 488B08   		movq	(%rax), %rcx
 3707 2682 488D9520 		leaq	-992(%rbp), %rdx
 3707      FCFFFF
 3708 2689 488B85D0 		movq	-816(%rbp), %rax
 3708      FCFFFF
 3709 2690 4889CE   		movq	%rcx, %rsi
 3710 2693 4889C7   		movq	%rax, %rdi
 3711 2696 E8000000 		call	flLoadCustomFirmware@PLT
 3711      00
 3712 269b 8985C8FB 		movl	%eax, -1080(%rbp)
 3712      FFFF
 3713 26a1 EB26     		jmp	.L210
 3714              	.L209:
 895:main.c        **** 			} else {
 896:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 3715              		.loc 1 896 0
 3716 26a3 488D9520 		leaq	-992(%rbp), %rdx
 3716      FCFFFF
 3717 26aa 488B8DD8 		movq	-808(%rbp), %rcx
 3717      FCFFFF
 3718 26b1 488B85D0 		movq	-816(%rbp), %rax
 3718      FCFFFF
 3719 26b8 4889CE   		movq	%rcx, %rsi
 3720 26bb 4889C7   		movq	%rax, %rdi
 3721 26be E8000000 		call	flLoadStandardFirmware@PLT
 3721      00
 3722 26c3 8985C8FB 		movl	%eax, -1080(%rbp)
 3722      FFFF
 3723              	.L210:
 897:main.c        **** 			}
 898:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3724              		.loc 1 898 0
 3725 26c9 83BDC8FB 		cmpl	$0, -1080(%rbp)
 3725      FFFF00
 3726 26d0 740F     		je	.L211
 3727              		.loc 1 898 0 is_stmt 0 discriminator 1
 3728 26d2 C785C4FB 		movl	$1, -1084(%rbp)
 3728      FFFF0100 
 3728      0000
 3729 26dc E9D51700 		jmp	.L203
 3729      00
 3730              	.L211:
 899:main.c        **** 			
 900:main.c        **** 			printf("Awaiting renumeration");
 3731              		.loc 1 900 0 is_stmt 1
 3732 26e1 488D3D00 		leaq	.LC113(%rip), %rdi
 3732      000000
 3733 26e8 B8000000 		movl	$0, %eax
 3733      00
 3734 26ed E8000000 		call	printf@PLT
 3734      00
 901:main.c        **** 			flSleep(1000);
 3735              		.loc 1 901 0
 3736 26f2 BFE80300 		movl	$1000, %edi
 3736      00
 3737 26f7 E8000000 		call	flSleep@PLT
 3737      00
 3738              	.L215:
 902:main.c        **** 			do {
 903:main.c        **** 				printf(".");
 3739              		.loc 1 903 0
 3740 26fc BF2E0000 		movl	$46, %edi
 3740      00
 3741 2701 E8000000 		call	putchar@PLT
 3741      00
 904:main.c        **** 				fflush(stdout);
 3742              		.loc 1 904 0
 3743 2706 488B0500 		movq	stdout(%rip), %rax
 3743      000000
 3744 270d 4889C7   		movq	%rax, %rdi
 3745 2710 E8000000 		call	fflush@PLT
 3745      00
 905:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 3746              		.loc 1 905 0
 3747 2715 488D9520 		leaq	-992(%rbp), %rdx
 3747      FCFFFF
 3748 271c 488D8D30 		leaq	-976(%rbp), %rcx
 3748      FCFFFF
 3749 2723 488B85D8 		movq	-808(%rbp), %rax
 3749      FCFFFF
 3750 272a 4889CE   		movq	%rcx, %rsi
 3751 272d 4889C7   		movq	%rax, %rdi
 3752 2730 E8000000 		call	flIsDeviceAvailable@PLT
 3752      00
 3753 2735 8985C8FB 		movl	%eax, -1080(%rbp)
 3753      FFFF
 906:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3754              		.loc 1 906 0
 3755 273b 83BDC8FB 		cmpl	$0, -1080(%rbp)
 3755      FFFF00
 3756 2742 740F     		je	.L213
 3757              		.loc 1 906 0 is_stmt 0 discriminator 1
 3758 2744 C785C4FB 		movl	$1, -1084(%rbp)
 3758      FFFF0100 
 3758      0000
 3759 274e E9631700 		jmp	.L203
 3759      00
 3760              	.L213:
 907:main.c        **** 				flSleep(250);
 3761              		.loc 1 907 0 is_stmt 1
 3762 2753 BFFA0000 		movl	$250, %edi
 3762      00
 3763 2758 E8000000 		call	flSleep@PLT
 3763      00
 908:main.c        **** 				count--;
 3764              		.loc 1 908 0
 3765 275d 83ADD0FB 		subl	$1, -1072(%rbp)
 3765      FFFF01
 909:main.c        **** 			} while ( !flag && count );
 3766              		.loc 1 909 0
 3767 2764 0FB68530 		movzbl	-976(%rbp), %eax
 3767      FCFFFF
 3768 276b 84C0     		testb	%al, %al
 3769 276d 7509     		jne	.L214
 3770              		.loc 1 909 0 is_stmt 0 discriminator 1
 3771 276f 83BDD0FB 		cmpl	$0, -1072(%rbp)
 3771      FFFF00
 3772 2776 7584     		jne	.L215
 3773              	.L214:
 910:main.c        **** 			printf("\n");
 3774              		.loc 1 910 0 is_stmt 1
 3775 2778 BF0A0000 		movl	$10, %edi
 3775      00
 3776 277d E8000000 		call	putchar@PLT
 3776      00
 911:main.c        **** 			if ( !flag ) {
 3777              		.loc 1 911 0
 3778 2782 0FB68530 		movzbl	-976(%rbp), %eax
 3778      FCFFFF
 3779 2789 84C0     		testb	%al, %al
 3780 278b 7531     		jne	.L216
 912:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 3781              		.loc 1 912 0
 3782 278d 488B0500 		movq	stderr(%rip), %rax
 3782      000000
 3783 2794 488B95D8 		movq	-808(%rbp), %rdx
 3783      FCFFFF
 3784 279b 488D3500 		leaq	.LC114(%rip), %rsi
 3784      000000
 3785 27a2 4889C7   		movq	%rax, %rdi
 3786 27a5 B8000000 		movl	$0, %eax
 3786      00
 3787 27aa E8000000 		call	fprintf@PLT
 3787      00
 913:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 3788              		.loc 1 913 0
 3789 27af C785C4FB 		movl	$1, -1084(%rbp)
 3789      FFFF0100 
 3789      0000
 3790 27b9 E9F81600 		jmp	.L203
 3790      00
 3791              	.L216:
 914:main.c        **** 			}
 915:main.c        **** 
 916:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 3792              		.loc 1 916 0
 3793 27be 488B85D8 		movq	-808(%rbp), %rax
 3793      FCFFFF
 3794 27c5 4889C6   		movq	%rax, %rsi
 3795 27c8 488D3D00 		leaq	.LC115(%rip), %rdi
 3795      000000
 3796 27cf B8000000 		movl	$0, %eax
 3796      00
 3797 27d4 E8000000 		call	printf@PLT
 3797      00
 917:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 3798              		.loc 1 917 0
 3799 27d9 488D9520 		leaq	-992(%rbp), %rdx
 3799      FCFFFF
 3800 27e0 488D8D18 		leaq	-1000(%rbp), %rcx
 3800      FCFFFF
 3801 27e7 488B85D8 		movq	-808(%rbp), %rax
 3801      FCFFFF
 3802 27ee 4889CE   		movq	%rcx, %rsi
 3803 27f1 4889C7   		movq	%rax, %rdi
 3804 27f4 E8000000 		call	flOpen@PLT
 3804      00
 3805 27f9 8985C8FB 		movl	%eax, -1080(%rbp)
 3805      FFFF
 918:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3806              		.loc 1 918 0
 3807 27ff 83BDC8FB 		cmpl	$0, -1080(%rbp)
 3807      FFFF00
 3808 2806 7441     		je	.L207
 3809              		.loc 1 918 0 is_stmt 0 discriminator 1
 3810 2808 C785C4FB 		movl	$1, -1084(%rbp)
 3810      FFFF0100 
 3810      0000
 3811 2812 90       		nop
 3812 2813 E99E1600 		jmp	.L203
 3812      00
 3813              	.L208:
 3814              	.LBE23:
 919:main.c        **** 		} else {
 920:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 3815              		.loc 1 920 0 is_stmt 1
 3816 2818 488B0500 		movq	stderr(%rip), %rax
 3816      000000
 3817 281f 488B95D8 		movq	-808(%rbp), %rdx
 3817      FCFFFF
 3818 2826 488D3500 		leaq	.LC116(%rip), %rsi
 3818      000000
 3819 282d 4889C7   		movq	%rax, %rdi
 3820 2830 B8000000 		movl	$0, %eax
 3820      00
 3821 2835 E8000000 		call	fprintf@PLT
 3821      00
 921:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3822              		.loc 1 921 0
 3823 283a C785C4FB 		movl	$12, -1084(%rbp)
 3823      FFFF0C00 
 3823      0000
 3824 2844 E96D1600 		jmp	.L203
 3824      00
 3825              	.L207:
 922:main.c        **** 		}
 923:main.c        **** 	}
 924:main.c        **** 
 925:main.c        **** 	printf(
 3826              		.loc 1 925 0
 3827 2849 488B8518 		movq	-1000(%rbp), %rax
 3827      FCFFFF
 3828 2850 4889C7   		movq	%rax, %rdi
 3829 2853 E8000000 		call	flGetFirmwareVersion@PLT
 3829      00
 3830 2858 89C3     		movl	%eax, %ebx
 926:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 927:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 3831              		.loc 1 927 0
 3832 285a 488B8518 		movq	-1000(%rbp), %rax
 3832      FCFFFF
 3833 2861 4889C7   		movq	%rax, %rdi
 3834 2864 E8000000 		call	flGetFirmwareID@PLT
 3834      00
 925:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 3835              		.loc 1 925 0
 3836 2869 0FB7D0   		movzwl	%ax, %edx
 3837 286c 488B85D8 		movq	-808(%rbp), %rax
 3837      FCFFFF
 3838 2873 89D9     		movl	%ebx, %ecx
 3839 2875 4889C6   		movq	%rax, %rsi
 3840 2878 488D3D00 		leaq	.LC117(%rip), %rdi
 3840      000000
 3841 287f B8000000 		movl	$0, %eax
 3841      00
 3842 2884 E8000000 		call	printf@PLT
 3842      00
 928:main.c        **** 	);
 929:main.c        **** 
 930:main.c        **** 	if ( eepromOpt->count ) {
 3843              		.loc 1 930 0
 3844 2889 488B85A8 		movq	-856(%rbp), %rax
 3844      FCFFFF
 3845 2890 8B4060   		movl	96(%rax), %eax
 3846 2893 85C0     		testl	%eax, %eax
 3847 2895 0F84BC00 		je	.L218
 3847      0000
 931:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 3848              		.loc 1 931 0
 3849 289b 488B85A8 		movq	-856(%rbp), %rax
 3849      FCFFFF
 3850 28a2 488B4068 		movq	104(%rax), %rax
 3851 28a6 488B00   		movq	(%rax), %rax
 3852 28a9 4889C6   		movq	%rax, %rsi
 3853 28ac 488D3D00 		leaq	.LC118(%rip), %rdi
 3853      000000
 3854 28b3 E8000000 		call	strcmp@PLT
 3854      00
 3855 28b8 85C0     		testl	%eax, %eax
 3856 28ba 7534     		jne	.L219
 932:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 3857              		.loc 1 932 0
 3858 28bc 488D3D00 		leaq	.LC119(%rip), %rdi
 3858      000000
 3859 28c3 E8000000 		call	puts@PLT
 3859      00
 933:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 3860              		.loc 1 933 0
 3861 28c8 488B8518 		movq	-1000(%rbp), %rax
 3861      FCFFFF
 3862 28cf 488D9520 		leaq	-992(%rbp), %rdx
 3862      FCFFFF
 3863 28d6 488B8DD8 		movq	-808(%rbp), %rcx
 3863      FCFFFF
 3864 28dd 4889CE   		movq	%rcx, %rsi
 3865 28e0 4889C7   		movq	%rax, %rdi
 3866 28e3 E8000000 		call	flFlashStandardFirmware@PLT
 3866      00
 3867 28e8 8985C8FB 		movl	%eax, -1080(%rbp)
 3867      FFFF
 3868 28ee EB4F     		jmp	.L220
 3869              	.L219:
 934:main.c        **** 		} else {
 935:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 3870              		.loc 1 935 0
 3871 28f0 488B85A8 		movq	-856(%rbp), %rax
 3871      FCFFFF
 3872 28f7 488B4068 		movq	104(%rax), %rax
 3873 28fb 488B00   		movq	(%rax), %rax
 3874 28fe 4889C6   		movq	%rax, %rsi
 3875 2901 488D3D00 		leaq	.LC120(%rip), %rdi
 3875      000000
 3876 2908 B8000000 		movl	$0, %eax
 3876      00
 3877 290d E8000000 		call	printf@PLT
 3877      00
 936:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 3878              		.loc 1 936 0
 3879 2912 488B85A8 		movq	-856(%rbp), %rax
 3879      FCFFFF
 3880 2919 488B4068 		movq	104(%rax), %rax
 3881 291d 488B08   		movq	(%rax), %rcx
 3882 2920 488B8518 		movq	-1000(%rbp), %rax
 3882      FCFFFF
 3883 2927 488D9520 		leaq	-992(%rbp), %rdx
 3883      FCFFFF
 3884 292e 4889CE   		movq	%rcx, %rsi
 3885 2931 4889C7   		movq	%rax, %rdi
 3886 2934 E8000000 		call	flFlashCustomFirmware@PLT
 3886      00
 3887 2939 8985C8FB 		movl	%eax, -1080(%rbp)
 3887      FFFF
 3888              	.L220:
 937:main.c        **** 		}
 938:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3889              		.loc 1 938 0
 3890 293f 83BDC8FB 		cmpl	$0, -1080(%rbp)
 3890      FFFF00
 3891 2946 740F     		je	.L218
 3892              		.loc 1 938 0 is_stmt 0 discriminator 1
 3893 2948 C785C4FB 		movl	$1, -1084(%rbp)
 3893      FFFF0100 
 3893      0000
 3894 2952 E95F1500 		jmp	.L203
 3894      00
 3895              	.L218:
 939:main.c        **** 	}
 940:main.c        **** 
 941:main.c        **** 	if ( backupOpt->count ) {
 3896              		.loc 1 941 0 is_stmt 1
 3897 2957 488B85B0 		movq	-848(%rbp), %rax
 3897      FCFFFF
 3898 295e 8B4060   		movl	96(%rax), %eax
 3899 2961 85C0     		testl	%eax, %eax
 3900 2963 0F84DE00 		je	.L221
 3900      0000
 3901              	.LBB24:
 942:main.c        **** 		const char *fileName;
 943:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 3902              		.loc 1 943 0
 3903 2969 488B85B0 		movq	-848(%rbp), %rax
 3903      FCFFFF
 3904 2970 488B4068 		movq	104(%rax), %rax
 3905 2974 488B00   		movq	(%rax), %rax
 3906 2977 488D8D30 		leaq	-976(%rbp), %rcx
 3906      FCFFFF
 3907 297e BA000000 		movl	$0, %edx
 3907      00
 3908 2983 4889CE   		movq	%rcx, %rsi
 3909 2986 4889C7   		movq	%rax, %rdi
 3910 2989 E8000000 		call	strtoul@PLT
 3910      00
 3911 298e 8985F8FB 		movl	%eax, -1032(%rbp)
 3911      FFFF
 944:main.c        **** 		if ( *fileName != ':' ) {
 3912              		.loc 1 944 0
 3913 2994 488B8530 		movq	-976(%rbp), %rax
 3913      FCFFFF
 3914 299b 0FB600   		movzbl	(%rax), %eax
 3915 299e 3C3A     		cmpb	$58, %al
 3916 29a0 7431     		je	.L222
 945:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 3917              		.loc 1 945 0
 3918 29a2 488B0500 		movq	stderr(%rip), %rax
 3918      000000
 3919 29a9 488B95C8 		movq	-824(%rbp), %rdx
 3919      FCFFFF
 3920 29b0 488D3500 		leaq	.LC121(%rip), %rsi
 3920      000000
 3921 29b7 4889C7   		movq	%rax, %rdi
 3922 29ba B8000000 		movl	$0, %eax
 3922      00
 3923 29bf E8000000 		call	fprintf@PLT
 3923      00
 946:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3924              		.loc 1 946 0
 3925 29c4 C785C4FB 		movl	$12, -1084(%rbp)
 3925      FFFF0C00 
 3925      0000
 3926 29ce E9E31400 		jmp	.L203
 3926      00
 3927              	.L222:
 947:main.c        **** 		}
 948:main.c        **** 		fileName++;
 3928              		.loc 1 948 0
 3929 29d3 488B8530 		movq	-976(%rbp), %rax
 3929      FCFFFF
 3930 29da 4883C001 		addq	$1, %rax
 3931 29de 48898530 		movq	%rax, -976(%rbp)
 3931      FCFFFF
 949:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 3932              		.loc 1 949 0
 3933 29e5 488B9530 		movq	-976(%rbp), %rdx
 3933      FCFFFF
 3934 29ec 8B85F8FB 		movl	-1032(%rbp), %eax
 3934      FFFF
 3935 29f2 89C6     		movl	%eax, %esi
 3936 29f4 488D3D00 		leaq	.LC122(%rip), %rdi
 3936      000000
 3937 29fb B8000000 		movl	$0, %eax
 3937      00
 3938 2a00 E8000000 		call	printf@PLT
 3938      00
 950:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 3939              		.loc 1 950 0
 3940 2a05 488B9530 		movq	-976(%rbp), %rdx
 3940      FCFFFF
 3941 2a0c 488B8518 		movq	-1000(%rbp), %rax
 3941      FCFFFF
 3942 2a13 488D8D20 		leaq	-992(%rbp), %rcx
 3942      FCFFFF
 3943 2a1a 8BB5F8FB 		movl	-1032(%rbp), %esi
 3943      FFFF
 3944 2a20 4889C7   		movq	%rax, %rdi
 3945 2a23 E8000000 		call	flSaveFirmware@PLT
 3945      00
 3946 2a28 8985C8FB 		movl	%eax, -1080(%rbp)
 3946      FFFF
 951:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3947              		.loc 1 951 0
 3948 2a2e 83BDC8FB 		cmpl	$0, -1080(%rbp)
 3948      FFFF00
 3949 2a35 7410     		je	.L221
 3950              		.loc 1 951 0 is_stmt 0 discriminator 1
 3951 2a37 C785C4FB 		movl	$1, -1084(%rbp)
 3951      FFFF0100 
 3951      0000
 3952 2a41 90       		nop
 3953 2a42 E96F1400 		jmp	.L203
 3953      00
 3954              	.L221:
 3955              	.LBE24:
 952:main.c        **** 	}
 953:main.c        **** 
 954:main.c        **** 	if ( rstOpt->count ) {
 3956              		.loc 1 954 0 is_stmt 1
 3957 2a47 488B8590 		movq	-880(%rbp), %rax
 3957      FCFFFF
 3958 2a4e 8B4060   		movl	96(%rax), %eax
 3959 2a51 85C0     		testl	%eax, %eax
 3960 2a53 7437     		je	.L225
 955:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
 956:main.c        **** 		fStatus = flResetToggle(handle, &error);
 3961              		.loc 1 956 0
 3962 2a55 488B8518 		movq	-1000(%rbp), %rax
 3962      FCFFFF
 3963 2a5c 488D9520 		leaq	-992(%rbp), %rdx
 3963      FCFFFF
 3964 2a63 4889D6   		movq	%rdx, %rsi
 3965 2a66 4889C7   		movq	%rax, %rdi
 3966 2a69 E8000000 		call	flResetToggle@PLT
 3966      00
 3967 2a6e 8985C8FB 		movl	%eax, -1080(%rbp)
 3967      FFFF
 957:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3968              		.loc 1 957 0
 3969 2a74 83BDC8FB 		cmpl	$0, -1080(%rbp)
 3969      FFFF00
 3970 2a7b 740F     		je	.L225
 3971              		.loc 1 957 0 is_stmt 0 discriminator 1
 3972 2a7d C785C4FB 		movl	$1, -1084(%rbp)
 3972      FFFF0100 
 3972      0000
 3973 2a87 E92A1400 		jmp	.L203
 3973      00
 3974              	.L225:
 958:main.c        **** 	}
 959:main.c        **** 
 960:main.c        **** 	if ( conOpt->count ) {
 3975              		.loc 1 960 0 is_stmt 1
 3976 2a8c 488B8570 		movq	-912(%rbp), %rax
 3976      FCFFFF
 3977 2a93 8B4060   		movl	96(%rax), %eax
 3978 2a96 85C0     		testl	%eax, %eax
 3979 2a98 7413     		je	.L226
 961:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 3980              		.loc 1 961 0
 3981 2a9a 488B8570 		movq	-912(%rbp), %rax
 3981      FCFFFF
 3982 2aa1 488B4068 		movq	104(%rax), %rax
 3983 2aa5 8B00     		movl	(%rax), %eax
 3984 2aa7 8885B8FB 		movb	%al, -1096(%rbp)
 3984      FFFF
 3985              	.L226:
 962:main.c        **** 	}
 963:main.c        **** 
 964:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 3986              		.loc 1 964 0
 3987 2aad 488B8518 		movq	-1000(%rbp), %rax
 3987      FCFFFF
 3988 2ab4 4889C7   		movq	%rax, %rdi
 3989 2ab7 E8000000 		call	flIsNeroCapable@PLT
 3989      00
 3990 2abc 84C0     		testb	%al, %al
 3991 2abe 0F95C0   		setne	%al
 3992 2ac1 8885BAFB 		movb	%al, -1094(%rbp)
 3992      FFFF
 965:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 3993              		.loc 1 965 0
 3994 2ac7 0FB695B8 		movzbl	-1096(%rbp), %edx
 3994      FBFFFF
 3995 2ace 488B8518 		movq	-1000(%rbp), %rax
 3995      FCFFFF
 3996 2ad5 89D6     		movl	%edx, %esi
 3997 2ad7 4889C7   		movq	%rax, %rdi
 3998 2ada E8000000 		call	flIsCommCapable@PLT
 3998      00
 3999 2adf 84C0     		testb	%al, %al
 4000 2ae1 0F95C0   		setne	%al
 4001 2ae4 8885BBFB 		movb	%al, -1093(%rbp)
 4001      FFFF
 966:main.c        **** 
 967:main.c        **** 	if ( portOpt->count ) {
 4002              		.loc 1 967 0
 4003 2aea 488B8558 		movq	-936(%rbp), %rax
 4003      FCFFFF
 4004 2af1 8B4060   		movl	96(%rax), %eax
 4005 2af4 85C0     		testl	%eax, %eax
 4006 2af6 0F84A802 		je	.L227
 4006      0000
 4007              	.LBB25:
 968:main.c        **** 		uint32 readState;
 969:main.c        **** 		char hex[9];
 970:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 4008              		.loc 1 970 0
 4009 2afc 488D45DF 		leaq	-33(%rbp), %rax
 4010 2b00 488985E0 		movq	%rax, -800(%rbp)
 4010      FCFFFF
 971:main.c        **** 		printf("Configuring ports...\n");
 4011              		.loc 1 971 0
 4012 2b07 488D3D00 		leaq	.LC123(%rip), %rdi
 4012      000000
 4013 2b0e E8000000 		call	puts@PLT
 4013      00
 972:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 4014              		.loc 1 972 0
 4015 2b13 488B8558 		movq	-936(%rbp), %rax
 4015      FCFFFF
 4016 2b1a 488B4068 		movq	104(%rax), %rax
 4017 2b1e 488B30   		movq	(%rax), %rsi
 4018 2b21 488B8518 		movq	-1000(%rbp), %rax
 4018      FCFFFF
 4019 2b28 488D8D20 		leaq	-992(%rbp), %rcx
 4019      FCFFFF
 4020 2b2f 488D9530 		leaq	-976(%rbp), %rdx
 4020      FCFFFF
 4021 2b36 4889C7   		movq	%rax, %rdi
 4022 2b39 E8000000 		call	flMultiBitPortAccess@PLT
 4022      00
 4023 2b3e 8985C8FB 		movl	%eax, -1080(%rbp)
 4023      FFFF
 973:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4024              		.loc 1 973 0
 4025 2b44 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4025      FFFF00
 4026 2b4b 740F     		je	.L228
 4027              		.loc 1 973 0 is_stmt 0 discriminator 1
 4028 2b4d C785C4FB 		movl	$1, -1084(%rbp)
 4028      FFFF0100 
 4028      0000
 4029 2b57 E95A1300 		jmp	.L203
 4029      00
 4030              	.L228:
 974:main.c        **** 		sprintf(hex, "%08X", readState);
 4031              		.loc 1 974 0 is_stmt 1
 4032 2b5c 8B9530FC 		movl	-976(%rbp), %edx
 4032      FFFF
 4033 2b62 488D45DF 		leaq	-33(%rbp), %rax
 4034 2b66 488D3500 		leaq	.LC124(%rip), %rsi
 4034      000000
 4035 2b6d 4889C7   		movq	%rax, %rdi
 4036 2b70 B8000000 		movl	$0, %eax
 4036      00
 4037 2b75 E8000000 		call	sprintf@PLT
 4037      00
 975:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 4038              		.loc 1 975 0
 4039 2b7a 488B85E0 		movq	-800(%rbp), %rax
 4039      FCFFFF
 4040 2b81 488D5001 		leaq	1(%rax), %rdx
 4041 2b85 488995E0 		movq	%rdx, -800(%rbp)
 4041      FCFFFF
 4042 2b8c 0FB600   		movzbl	(%rax), %eax
 4043 2b8f 0FB6C0   		movzbl	%al, %eax
 4044 2b92 83E830   		subl	$48, %eax
 4045 2b95 4898     		cltq
 4046 2b97 488D14C5 		leaq	0(,%rax,8), %rdx
 4046      00000000 
 4047 2b9f 488D0500 		leaq	nibbles(%rip), %rax
 4047      000000
 4048 2ba6 488B0402 		movq	(%rdx,%rax), %rax
 4049 2baa 4889C6   		movq	%rax, %rsi
 4050 2bad 488D3D00 		leaq	.LC125(%rip), %rdi
 4050      000000
 4051 2bb4 B8000000 		movl	$0, %eax
 4051      00
 4052 2bb9 E8000000 		call	printf@PLT
 4052      00
 976:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4053              		.loc 1 976 0
 4054 2bbe 488B85E0 		movq	-800(%rbp), %rax
 4054      FCFFFF
 4055 2bc5 488D5001 		leaq	1(%rax), %rdx
 4056 2bc9 488995E0 		movq	%rdx, -800(%rbp)
 4056      FCFFFF
 4057 2bd0 0FB600   		movzbl	(%rax), %eax
 4058 2bd3 0FB6C0   		movzbl	%al, %eax
 4059 2bd6 83E830   		subl	$48, %eax
 4060 2bd9 4898     		cltq
 4061 2bdb 488D14C5 		leaq	0(,%rax,8), %rdx
 4061      00000000 
 4062 2be3 488D0500 		leaq	nibbles(%rip), %rax
 4062      000000
 4063 2bea 488B0402 		movq	(%rdx,%rax), %rax
 4064 2bee 4889C6   		movq	%rax, %rsi
 4065 2bf1 488D3D00 		leaq	.LC126(%rip), %rdi
 4065      000000
 4066 2bf8 B8000000 		movl	$0, %eax
 4066      00
 4067 2bfd E8000000 		call	printf@PLT
 4067      00
 977:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4068              		.loc 1 977 0
 4069 2c02 488B85E0 		movq	-800(%rbp), %rax
 4069      FCFFFF
 4070 2c09 488D5001 		leaq	1(%rax), %rdx
 4071 2c0d 488995E0 		movq	%rdx, -800(%rbp)
 4071      FCFFFF
 4072 2c14 0FB600   		movzbl	(%rax), %eax
 4073 2c17 0FB6C0   		movzbl	%al, %eax
 4074 2c1a 83E830   		subl	$48, %eax
 4075 2c1d 4898     		cltq
 4076 2c1f 488D14C5 		leaq	0(,%rax,8), %rdx
 4076      00000000 
 4077 2c27 488D0500 		leaq	nibbles(%rip), %rax
 4077      000000
 4078 2c2e 488B0402 		movq	(%rdx,%rax), %rax
 4079 2c32 4889C6   		movq	%rax, %rsi
 4080 2c35 488D3D00 		leaq	.LC126(%rip), %rdi
 4080      000000
 4081 2c3c B8000000 		movl	$0, %eax
 4081      00
 4082 2c41 E8000000 		call	printf@PLT
 4082      00
 978:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4083              		.loc 1 978 0
 4084 2c46 488B85E0 		movq	-800(%rbp), %rax
 4084      FCFFFF
 4085 2c4d 488D5001 		leaq	1(%rax), %rdx
 4086 2c51 488995E0 		movq	%rdx, -800(%rbp)
 4086      FCFFFF
 4087 2c58 0FB600   		movzbl	(%rax), %eax
 4088 2c5b 0FB6C0   		movzbl	%al, %eax
 4089 2c5e 83E830   		subl	$48, %eax
 4090 2c61 4898     		cltq
 4091 2c63 488D14C5 		leaq	0(,%rax,8), %rdx
 4091      00000000 
 4092 2c6b 488D0500 		leaq	nibbles(%rip), %rax
 4092      000000
 4093 2c72 488B0402 		movq	(%rdx,%rax), %rax
 4094 2c76 4889C6   		movq	%rax, %rsi
 4095 2c79 488D3D00 		leaq	.LC126(%rip), %rdi
 4095      000000
 4096 2c80 B8000000 		movl	$0, %eax
 4096      00
 4097 2c85 E8000000 		call	printf@PLT
 4097      00
 979:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 4098              		.loc 1 979 0
 4099 2c8a 488B85E0 		movq	-800(%rbp), %rax
 4099      FCFFFF
 4100 2c91 488D5001 		leaq	1(%rax), %rdx
 4101 2c95 488995E0 		movq	%rdx, -800(%rbp)
 4101      FCFFFF
 4102 2c9c 0FB600   		movzbl	(%rax), %eax
 4103 2c9f 0FB6C0   		movzbl	%al, %eax
 4104 2ca2 83E830   		subl	$48, %eax
 4105 2ca5 4898     		cltq
 4106 2ca7 488D14C5 		leaq	0(,%rax,8), %rdx
 4106      00000000 
 4107 2caf 488D0500 		leaq	nibbles(%rip), %rax
 4107      000000
 4108 2cb6 488B0402 		movq	(%rdx,%rax), %rax
 4109 2cba 4889C6   		movq	%rax, %rsi
 4110 2cbd 488D3D00 		leaq	.LC127(%rip), %rdi
 4110      000000
 4111 2cc4 B8000000 		movl	$0, %eax
 4111      00
 4112 2cc9 E8000000 		call	printf@PLT
 4112      00
 980:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4113              		.loc 1 980 0
 4114 2cce 488B85E0 		movq	-800(%rbp), %rax
 4114      FCFFFF
 4115 2cd5 488D5001 		leaq	1(%rax), %rdx
 4116 2cd9 488995E0 		movq	%rdx, -800(%rbp)
 4116      FCFFFF
 4117 2ce0 0FB600   		movzbl	(%rax), %eax
 4118 2ce3 0FB6C0   		movzbl	%al, %eax
 4119 2ce6 83E830   		subl	$48, %eax
 4120 2ce9 4898     		cltq
 4121 2ceb 488D14C5 		leaq	0(,%rax,8), %rdx
 4121      00000000 
 4122 2cf3 488D0500 		leaq	nibbles(%rip), %rax
 4122      000000
 4123 2cfa 488B0402 		movq	(%rdx,%rax), %rax
 4124 2cfe 4889C6   		movq	%rax, %rsi
 4125 2d01 488D3D00 		leaq	.LC126(%rip), %rdi
 4125      000000
 4126 2d08 B8000000 		movl	$0, %eax
 4126      00
 4127 2d0d E8000000 		call	printf@PLT
 4127      00
 981:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4128              		.loc 1 981 0
 4129 2d12 488B85E0 		movq	-800(%rbp), %rax
 4129      FCFFFF
 4130 2d19 488D5001 		leaq	1(%rax), %rdx
 4131 2d1d 488995E0 		movq	%rdx, -800(%rbp)
 4131      FCFFFF
 4132 2d24 0FB600   		movzbl	(%rax), %eax
 4133 2d27 0FB6C0   		movzbl	%al, %eax
 4134 2d2a 83E830   		subl	$48, %eax
 4135 2d2d 4898     		cltq
 4136 2d2f 488D14C5 		leaq	0(,%rax,8), %rdx
 4136      00000000 
 4137 2d37 488D0500 		leaq	nibbles(%rip), %rax
 4137      000000
 4138 2d3e 488B0402 		movq	(%rdx,%rax), %rax
 4139 2d42 4889C6   		movq	%rax, %rsi
 4140 2d45 488D3D00 		leaq	.LC126(%rip), %rdi
 4140      000000
 4141 2d4c B8000000 		movl	$0, %eax
 4141      00
 4142 2d51 E8000000 		call	printf@PLT
 4142      00
 982:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 4143              		.loc 1 982 0
 4144 2d56 488B85E0 		movq	-800(%rbp), %rax
 4144      FCFFFF
 4145 2d5d 488D5001 		leaq	1(%rax), %rdx
 4146 2d61 488995E0 		movq	%rdx, -800(%rbp)
 4146      FCFFFF
 4147 2d68 0FB600   		movzbl	(%rax), %eax
 4148 2d6b 0FB6C0   		movzbl	%al, %eax
 4149 2d6e 83E830   		subl	$48, %eax
 4150 2d71 4898     		cltq
 4151 2d73 488D14C5 		leaq	0(,%rax,8), %rdx
 4151      00000000 
 4152 2d7b 488D0500 		leaq	nibbles(%rip), %rax
 4152      000000
 4153 2d82 488B0402 		movq	(%rdx,%rax), %rax
 4154 2d86 4889C6   		movq	%rax, %rsi
 4155 2d89 488D3D00 		leaq	.LC128(%rip), %rdi
 4155      000000
 4156 2d90 B8000000 		movl	$0, %eax
 4156      00
 4157 2d95 E8000000 		call	printf@PLT
 4157      00
 983:main.c        **** 		flSleep(100);
 4158              		.loc 1 983 0
 4159 2d9a BF640000 		movl	$100, %edi
 4159      00
 4160 2d9f E8000000 		call	flSleep@PLT
 4160      00
 4161              	.L227:
 4162              	.LBE25:
 984:main.c        **** 	}
 985:main.c        **** 
 986:main.c        **** 	if ( queryOpt->count ) {
 4163              		.loc 1 986 0
 4164 2da4 488B8560 		movq	-928(%rbp), %rax
 4164      FCFFFF
 4165 2dab 8B4060   		movl	96(%rax), %eax
 4166 2dae 85C0     		testl	%eax, %eax
 4167 2db0 0F845501 		je	.L229
 4167      0000
 987:main.c        **** 		if ( isNeroCapable ) {
 4168              		.loc 1 987 0
 4169 2db6 80BDBAFB 		cmpb	$0, -1094(%rbp)
 4169      FFFF00
 4170 2dbd 0F841701 		je	.L230
 4170      0000
 988:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 4171              		.loc 1 988 0
 4172 2dc3 488B8518 		movq	-1000(%rbp), %rax
 4172      FCFFFF
 4173 2dca 488D9520 		leaq	-992(%rbp), %rdx
 4173      FCFFFF
 4174 2dd1 BE000000 		movl	$0, %esi
 4174      00
 4175 2dd6 4889C7   		movq	%rax, %rdi
 4176 2dd9 E8000000 		call	flSelectConduit@PLT
 4176      00
 4177 2dde 8985C8FB 		movl	%eax, -1080(%rbp)
 4177      FFFF
 989:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4178              		.loc 1 989 0
 4179 2de4 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4179      FFFF00
 4180 2deb 740F     		je	.L231
 4181              		.loc 1 989 0 is_stmt 0 discriminator 1
 4182 2ded C785C4FB 		movl	$1, -1084(%rbp)
 4182      FFFF0100 
 4182      0000
 4183 2df7 E9BA1000 		jmp	.L203
 4183      00
 4184              	.L231:
 990:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 4185              		.loc 1 990 0 is_stmt 1
 4186 2dfc 488B8560 		movq	-928(%rbp), %rax
 4186      FCFFFF
 4187 2e03 488B4068 		movq	104(%rax), %rax
 4188 2e07 488B30   		movq	(%rax), %rsi
 4189 2e0a 488B8518 		movq	-1000(%rbp), %rax
 4189      FCFFFF
 4190 2e11 488DBD20 		leaq	-992(%rbp), %rdi
 4190      FCFFFF
 4191 2e18 488D8D00 		leaq	-768(%rbp), %rcx
 4191      FDFFFF
 4192 2e1f 488D95BC 		leaq	-1092(%rbp), %rdx
 4192      FBFFFF
 4193 2e26 4989F9   		movq	%rdi, %r9
 4194 2e29 41B81000 		movl	$16, %r8d
 4194      0000
 4195 2e2f 4889C7   		movq	%rax, %rdi
 4196 2e32 E8000000 		call	jtagScanChain@PLT
 4196      00
 4197 2e37 8985C8FB 		movl	%eax, -1080(%rbp)
 4197      FFFF
 991:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4198              		.loc 1 991 0
 4199 2e3d 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4199      FFFF00
 4200 2e44 740F     		je	.L232
 4201              		.loc 1 991 0 is_stmt 0 discriminator 1
 4202 2e46 C785C4FB 		movl	$1, -1084(%rbp)
 4202      FFFF0100 
 4202      0000
 4203 2e50 E9611000 		jmp	.L203
 4203      00
 4204              	.L232:
 992:main.c        **** 			if ( numDevices ) {
 4205              		.loc 1 992 0 is_stmt 1
 4206 2e55 8B85BCFB 		movl	-1092(%rbp), %eax
 4206      FFFF
 4207 2e5b 85C0     		testl	%eax, %eax
 4208 2e5d 745E     		je	.L233
 993:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 4209              		.loc 1 993 0
 4210 2e5f 488B85D8 		movq	-808(%rbp), %rax
 4210      FCFFFF
 4211 2e66 4889C6   		movq	%rax, %rsi
 4212 2e69 488D3D00 		leaq	.LC129(%rip), %rdi
 4212      000000
 4213 2e70 B8000000 		movl	$0, %eax
 4213      00
 4214 2e75 E8000000 		call	printf@PLT
 4214      00
 994:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 4215              		.loc 1 994 0
 4216 2e7a C785CCFB 		movl	$0, -1076(%rbp)
 4216      FFFF0000 
 4216      0000
 4217 2e84 EB27     		jmp	.L234
 4218              	.L235:
 995:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 4219              		.loc 1 995 0 discriminator 3
 4220 2e86 8B85CCFB 		movl	-1076(%rbp), %eax
 4220      FFFF
 4221 2e8c 8B848500 		movl	-768(%rbp,%rax,4), %eax
 4221      FDFFFF
 4222 2e93 89C6     		movl	%eax, %esi
 4223 2e95 488D3D00 		leaq	.LC130(%rip), %rdi
 4223      000000
 4224 2e9c B8000000 		movl	$0, %eax
 4224      00
 4225 2ea1 E8000000 		call	printf@PLT
 4225      00
 994:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 4226              		.loc 1 994 0 discriminator 3
 4227 2ea6 8385CCFB 		addl	$1, -1076(%rbp)
 4227      FFFF01
 4228              	.L234:
 994:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 4229              		.loc 1 994 0 is_stmt 0 discriminator 1
 4230 2ead 8B85BCFB 		movl	-1092(%rbp), %eax
 4230      FFFF
 4231 2eb3 3985CCFB 		cmpl	%eax, -1076(%rbp)
 4231      FFFF
 4232 2eb9 72CB     		jb	.L235
 4233 2ebb EB4E     		jmp	.L229
 4234              	.L233:
 996:main.c        **** 				}
 997:main.c        **** 			} else {
 998:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 4235              		.loc 1 998 0 is_stmt 1
 4236 2ebd 488B85D8 		movq	-808(%rbp), %rax
 4236      FCFFFF
 4237 2ec4 4889C6   		movq	%rax, %rsi
 4238 2ec7 488D3D00 		leaq	.LC131(%rip), %rdi
 4238      000000
 4239 2ece B8000000 		movl	$0, %eax
 4239      00
 4240 2ed3 E8000000 		call	printf@PLT
 4240      00
 4241 2ed8 EB31     		jmp	.L229
 4242              	.L230:
 999:main.c        **** 			}
1000:main.c        **** 		} else {
1001:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 4243              		.loc 1 1001 0
 4244 2eda 488B0500 		movq	stderr(%rip), %rax
 4244      000000
 4245 2ee1 488B95D8 		movq	-808(%rbp), %rdx
 4245      FCFFFF
 4246 2ee8 488D3500 		leaq	.LC132(%rip), %rsi
 4246      000000
 4247 2eef 4889C7   		movq	%rax, %rdi
 4248 2ef2 B8000000 		movl	$0, %eax
 4248      00
 4249 2ef7 E8000000 		call	fprintf@PLT
 4249      00
1002:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4250              		.loc 1 1002 0
 4251 2efc C785C4FB 		movl	$12, -1084(%rbp)
 4251      FFFF0C00 
 4251      0000
 4252 2f06 E9AB0F00 		jmp	.L203
 4252      00
 4253              	.L229:
1003:main.c        **** 		}
1004:main.c        **** 	}
1005:main.c        **** 
1006:main.c        **** 	if ( progOpt->count ) {
 4254              		.loc 1 1006 0
 4255 2f0b 488B8568 		movq	-920(%rbp), %rax
 4255      FCFFFF
 4256 2f12 8B4060   		movl	96(%rax), %eax
 4257 2f15 85C0     		testl	%eax, %eax
 4258 2f17 0F84CD00 		je	.L237
 4258      0000
1007:main.c        **** 		printf("Programming device...\n");
 4259              		.loc 1 1007 0
 4260 2f1d 488D3D00 		leaq	.LC133(%rip), %rdi
 4260      000000
 4261 2f24 E8000000 		call	puts@PLT
 4261      00
1008:main.c        **** 		if ( isNeroCapable ) {
 4262              		.loc 1 1008 0
 4263 2f29 80BDBAFB 		cmpb	$0, -1094(%rbp)
 4263      FFFF00
 4264 2f30 0F848300 		je	.L238
 4264      0000
1009:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 4265              		.loc 1 1009 0
 4266 2f36 488B8518 		movq	-1000(%rbp), %rax
 4266      FCFFFF
 4267 2f3d 488D9520 		leaq	-992(%rbp), %rdx
 4267      FCFFFF
 4268 2f44 BE000000 		movl	$0, %esi
 4268      00
 4269 2f49 4889C7   		movq	%rax, %rdi
 4270 2f4c E8000000 		call	flSelectConduit@PLT
 4270      00
 4271 2f51 8985C8FB 		movl	%eax, -1080(%rbp)
 4271      FFFF
1010:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4272              		.loc 1 1010 0
 4273 2f57 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4273      FFFF00
 4274 2f5e 740F     		je	.L239
 4275              		.loc 1 1010 0 is_stmt 0 discriminator 1
 4276 2f60 C785C4FB 		movl	$1, -1084(%rbp)
 4276      FFFF0100 
 4276      0000
 4277 2f6a E9470F00 		jmp	.L203
 4277      00
 4278              	.L239:
1011:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 4279              		.loc 1 1011 0 is_stmt 1
 4280 2f6f 488B8568 		movq	-920(%rbp), %rax
 4280      FCFFFF
 4281 2f76 488B4068 		movq	104(%rax), %rax
 4282 2f7a 488B30   		movq	(%rax), %rsi
 4283 2f7d 488B8518 		movq	-1000(%rbp), %rax
 4283      FCFFFF
 4284 2f84 488D9520 		leaq	-992(%rbp), %rdx
 4284      FCFFFF
 4285 2f8b 4889D1   		movq	%rdx, %rcx
 4286 2f8e BA000000 		movl	$0, %edx
 4286      00
 4287 2f93 4889C7   		movq	%rax, %rdi
 4288 2f96 E8000000 		call	flProgram@PLT
 4288      00
 4289 2f9b 8985C8FB 		movl	%eax, -1080(%rbp)
 4289      FFFF
1012:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4290              		.loc 1 1012 0
 4291 2fa1 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4291      FFFF00
 4292 2fa8 7440     		je	.L237
 4293              		.loc 1 1012 0 is_stmt 0 discriminator 1
 4294 2faa C785C4FB 		movl	$1, -1084(%rbp)
 4294      FFFF0100 
 4294      0000
 4295 2fb4 E9FD0E00 		jmp	.L203
 4295      00
 4296              	.L238:
1013:main.c        **** 		} else {
1014:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 4297              		.loc 1 1014 0 is_stmt 1
 4298 2fb9 488B0500 		movq	stderr(%rip), %rax
 4298      000000
 4299 2fc0 488B95D8 		movq	-808(%rbp), %rdx
 4299      FCFFFF
 4300 2fc7 488D3500 		leaq	.LC134(%rip), %rsi
 4300      000000
 4301 2fce 4889C7   		movq	%rax, %rdi
 4302 2fd1 B8000000 		movl	$0, %eax
 4302      00
 4303 2fd6 E8000000 		call	fprintf@PLT
 4303      00
1015:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4304              		.loc 1 1015 0
 4305 2fdb C785C4FB 		movl	$12, -1084(%rbp)
 4305      FFFF0C00 
 4305      0000
 4306 2fe5 E9CC0E00 		jmp	.L203
 4306      00
 4307              	.L237:
1016:main.c        **** 		}
1017:main.c        **** 	}
1018:main.c        **** 
1019:main.c        **** 	if ( benOpt->count ) {
 4308              		.loc 1 1019 0
 4309 2fea 488B8588 		movq	-888(%rbp), %rax
 4309      FCFFFF
 4310 2ff1 8B4060   		movl	96(%rax), %eax
 4311 2ff4 85C0     		testl	%eax, %eax
 4312 2ff6 7407     		je	.L240
1020:main.c        **** 		enableBenchmarking = true;
 4313              		.loc 1 1020 0
 4314 2ff8 C6050000 		movb	$1, enableBenchmarking(%rip)
 4314      000001
 4315              	.L240:
1021:main.c        **** 	}
1022:main.c        **** 	
1023:main.c        **** 	if ( actOpt->count ) {
 4316              		.loc 1 1023 0
 4317 2fff 488B8578 		movq	-904(%rbp), %rax
 4317      FCFFFF
 4318 3006 8B4060   		movl	96(%rax), %eax
 4319 3009 85C0     		testl	%eax, %eax
 4320 300b 0F845801 		je	.L241
 4320      0000
1024:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 4321              		.loc 1 1024 0
 4322 3011 488B85D8 		movq	-808(%rbp), %rax
 4322      FCFFFF
 4323 3018 4889C6   		movq	%rax, %rsi
 4324 301b 488D3D00 		leaq	.LC135(%rip), %rdi
 4324      000000
 4325 3022 B8000000 		movl	$0, %eax
 4325      00
 4326 3027 E8000000 		call	printf@PLT
 4326      00
1025:main.c        **** 		if ( isCommCapable ) {
 4327              		.loc 1 1025 0
 4328 302c 80BDBBFB 		cmpb	$0, -1093(%rbp)
 4328      FFFF00
 4329 3033 0F84FF00 		je	.L242
 4329      0000
 4330              	.LBB26:
1026:main.c        **** 			uint8 isRunning;
1027:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 4331              		.loc 1 1027 0
 4332 3039 0FB68DB8 		movzbl	-1096(%rbp), %ecx
 4332      FBFFFF
 4333 3040 488B8518 		movq	-1000(%rbp), %rax
 4333      FCFFFF
 4334 3047 488D9520 		leaq	-992(%rbp), %rdx
 4334      FCFFFF
 4335 304e 89CE     		movl	%ecx, %esi
 4336 3050 4889C7   		movq	%rax, %rdi
 4337 3053 E8000000 		call	flSelectConduit@PLT
 4337      00
 4338 3058 8985C8FB 		movl	%eax, -1080(%rbp)
 4338      FFFF
1028:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4339              		.loc 1 1028 0
 4340 305e 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4340      FFFF00
 4341 3065 740F     		je	.L243
 4342              		.loc 1 1028 0 is_stmt 0 discriminator 1
 4343 3067 C785C4FB 		movl	$1, -1084(%rbp)
 4343      FFFF0100 
 4343      0000
 4344 3071 E9400E00 		jmp	.L203
 4344      00
 4345              	.L243:
1029:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4346              		.loc 1 1029 0 is_stmt 1
 4347 3076 488B8518 		movq	-1000(%rbp), %rax
 4347      FCFFFF
 4348 307d 488D9520 		leaq	-992(%rbp), %rdx
 4348      FCFFFF
 4349 3084 488D8D30 		leaq	-976(%rbp), %rcx
 4349      FCFFFF
 4350 308b 4889CE   		movq	%rcx, %rsi
 4351 308e 4889C7   		movq	%rax, %rdi
 4352 3091 E8000000 		call	flIsFPGARunning@PLT
 4352      00
 4353 3096 8985C8FB 		movl	%eax, -1080(%rbp)
 4353      FFFF
1030:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4354              		.loc 1 1030 0
 4355 309c 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4355      FFFF00
 4356 30a3 740F     		je	.L245
 4357              		.loc 1 1030 0 is_stmt 0 discriminator 1
 4358 30a5 C785C4FB 		movl	$1, -1084(%rbp)
 4358      FFFF0100 
 4358      0000
 4359 30af E9020E00 		jmp	.L203
 4359      00
 4360              	.L245:
1031:main.c        **** 			if ( isRunning ) {
 4361              		.loc 1 1031 0 is_stmt 1
 4362 30b4 0FB68530 		movzbl	-976(%rbp), %eax
 4362      FCFFFF
 4363 30bb 84C0     		testb	%al, %al
 4364 30bd 7447     		je	.L246
1032:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 4365              		.loc 1 1032 0
 4366 30bf 488B8578 		movq	-904(%rbp), %rax
 4366      FCFFFF
 4367 30c6 488B4068 		movq	104(%rax), %rax
 4368 30ca 488B08   		movq	(%rax), %rcx
 4369 30cd 488B8518 		movq	-1000(%rbp), %rax
 4369      FCFFFF
 4370 30d4 488D9520 		leaq	-992(%rbp), %rdx
 4370      FCFFFF
 4371 30db 4889CE   		movq	%rcx, %rsi
 4372 30de 4889C7   		movq	%rax, %rdi
 4373 30e1 E875D5FF 		call	parseLine
 4373      FF
 4374 30e6 8985FCFB 		movl	%eax, -1028(%rbp)
 4374      FFFF
1033:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 4375              		.loc 1 1033 0
 4376 30ec 83BDFCFB 		cmpl	$0, -1028(%rbp)
 4376      FFFF00
 4377 30f3 7474     		je	.L241
 4378              		.loc 1 1033 0 is_stmt 0 discriminator 1
 4379 30f5 8B85FCFB 		movl	-1028(%rbp), %eax
 4379      FFFF
 4380 30fb 8985C4FB 		movl	%eax, -1084(%rbp)
 4380      FFFF
 4381 3101 E9B00D00 		jmp	.L203
 4381      00
 4382              	.L246:
1034:main.c        **** 			} else {
1035:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 4383              		.loc 1 1035 0 is_stmt 1
 4384 3106 488B0500 		movq	stderr(%rip), %rax
 4384      000000
 4385 310d 488B95D8 		movq	-808(%rbp), %rdx
 4385      FCFFFF
 4386 3114 488D3500 		leaq	.LC136(%rip), %rsi
 4386      000000
 4387 311b 4889C7   		movq	%rax, %rdi
 4388 311e B8000000 		movl	$0, %eax
 4388      00
 4389 3123 E8000000 		call	fprintf@PLT
 4389      00
1036:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4390              		.loc 1 1036 0
 4391 3128 C785C4FB 		movl	$12, -1084(%rbp)
 4391      FFFF0C00 
 4391      0000
 4392 3132 90       		nop
 4393 3133 E97E0D00 		jmp	.L203
 4393      00
 4394              	.L242:
 4395              	.LBE26:
1037:main.c        **** 			}
1038:main.c        **** 		} else {
1039:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 4396              		.loc 1 1039 0
 4397 3138 488B0500 		movq	stderr(%rip), %rax
 4397      000000
 4398 313f 488B95D8 		movq	-808(%rbp), %rdx
 4398      FCFFFF
 4399 3146 488D3500 		leaq	.LC137(%rip), %rsi
 4399      000000
 4400 314d 4889C7   		movq	%rax, %rdi
 4401 3150 B8000000 		movl	$0, %eax
 4401      00
 4402 3155 E8000000 		call	fprintf@PLT
 4402      00
1040:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4403              		.loc 1 1040 0
 4404 315a C785C4FB 		movl	$12, -1084(%rbp)
 4404      FFFF0C00 
 4404      0000
 4405 3164 E94D0D00 		jmp	.L203
 4405      00
 4406              	.L241:
1041:main.c        **** 		}
1042:main.c        **** 	}
1043:main.c        **** 
1044:main.c        **** 	if ( dumpOpt->count ) {
 4407              		.loc 1 1044 0
 4408 3169 488B8598 		movq	-872(%rbp), %rax
 4408      FCFFFF
 4409 3170 8B4060   		movl	96(%rax), %eax
 4410 3173 85C0     		testl	%eax, %eax
 4411 3175 0F84D802 		je	.L248
 4411      0000
 4412              	.LBB27:
1045:main.c        **** 		const char *fileName;
1046:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 4413              		.loc 1 1046 0
 4414 317b 488B8598 		movq	-872(%rbp), %rax
 4414      FCFFFF
 4415 3182 488B4068 		movq	104(%rax), %rax
 4416 3186 488B00   		movq	(%rax), %rax
 4417 3189 488D8D28 		leaq	-984(%rbp), %rcx
 4417      FCFFFF
 4418 3190 BA0A0000 		movl	$10, %edx
 4418      00
 4419 3195 4889CE   		movq	%rcx, %rsi
 4420 3198 4889C7   		movq	%rax, %rdi
 4421 319b E8000000 		call	strtoul@PLT
 4421      00
 4422 31a0 488985E8 		movq	%rax, -792(%rbp)
 4422      FCFFFF
1047:main.c        **** 		FILE *file = NULL;
 4423              		.loc 1 1047 0
 4424 31a7 48C785F0 		movq	$0, -784(%rbp)
 4424      FCFFFF00 
 4424      000000
1048:main.c        **** 		const uint8 *recvData;
1049:main.c        **** 		uint32 actualLength;
1050:main.c        **** 		if ( *fileName != ':' ) {
 4425              		.loc 1 1050 0
 4426 31b2 488B8528 		movq	-984(%rbp), %rax
 4426      FCFFFF
 4427 31b9 0FB600   		movzbl	(%rax), %eax
 4428 31bc 3C3A     		cmpb	$58, %al
 4429 31be 7431     		je	.L249
1051:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 4430              		.loc 1 1051 0
 4431 31c0 488B0500 		movq	stderr(%rip), %rax
 4431      000000
 4432 31c7 488B95C8 		movq	-824(%rbp), %rdx
 4432      FCFFFF
 4433 31ce 488D3500 		leaq	.LC138(%rip), %rsi
 4433      000000
 4434 31d5 4889C7   		movq	%rax, %rdi
 4435 31d8 B8000000 		movl	$0, %eax
 4435      00
 4436 31dd E8000000 		call	fprintf@PLT
 4436      00
1052:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4437              		.loc 1 1052 0
 4438 31e2 C785C4FB 		movl	$12, -1084(%rbp)
 4438      FFFF0C00 
 4438      0000
 4439 31ec E9C50C00 		jmp	.L203
 4439      00
 4440              	.L249:
1053:main.c        **** 		}
1054:main.c        **** 		fileName++;
 4441              		.loc 1 1054 0
 4442 31f1 488B8528 		movq	-984(%rbp), %rax
 4442      FCFFFF
 4443 31f8 4883C001 		addq	$1, %rax
 4444 31fc 48898528 		movq	%rax, -984(%rbp)
 4444      FCFFFF
1055:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 4445              		.loc 1 1055 0
 4446 3203 488B9528 		movq	-984(%rbp), %rdx
 4446      FCFFFF
 4447 320a 488B85E8 		movq	-792(%rbp), %rax
 4447      FCFFFF
 4448 3211 4889C6   		movq	%rax, %rsi
 4449 3214 488D3D00 		leaq	.LC139(%rip), %rdi
 4449      000000
 4450 321b B8000000 		movl	$0, %eax
 4450      00
 4451 3220 E8000000 		call	printf@PLT
 4451      00
1056:main.c        **** 		file = fopen(fileName, "wb");
 4452              		.loc 1 1056 0
 4453 3225 488B8528 		movq	-984(%rbp), %rax
 4453      FCFFFF
 4454 322c 488D3500 		leaq	.LC13(%rip), %rsi
 4454      000000
 4455 3233 4889C7   		movq	%rax, %rdi
 4456 3236 E8000000 		call	fopen@PLT
 4456      00
 4457 323b 488985F0 		movq	%rax, -784(%rbp)
 4457      FCFFFF
1057:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 4458              		.loc 1 1057 0
 4459 3242 4883BDF0 		cmpq	$0, -784(%rbp)
 4459      FCFFFF00 
 4460 324a 750F     		jne	.L251
 4461              		.loc 1 1057 0 is_stmt 0 discriminator 1
 4462 324c C785C4FB 		movl	$11, -1084(%rbp)
 4462      FFFF0B00 
 4462      0000
 4463 3256 E95B0C00 		jmp	.L203
 4463      00
 4464              	.L251:
1058:main.c        **** 		sigRegisterHandler();
 4465              		.loc 1 1058 0 is_stmt 1
 4466 325b E8000000 		call	sigRegisterHandler@PLT
 4466      00
1059:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 4467              		.loc 1 1059 0
 4468 3260 0FB68DB8 		movzbl	-1096(%rbp), %ecx
 4468      FBFFFF
 4469 3267 488B8518 		movq	-1000(%rbp), %rax
 4469      FCFFFF
 4470 326e 488D9520 		leaq	-992(%rbp), %rdx
 4470      FCFFFF
 4471 3275 89CE     		movl	%ecx, %esi
 4472 3277 4889C7   		movq	%rax, %rdi
 4473 327a E8000000 		call	flSelectConduit@PLT
 4473      00
 4474 327f 8985C8FB 		movl	%eax, -1080(%rbp)
 4474      FFFF
1060:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4475              		.loc 1 1060 0
 4476 3285 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4476      FFFF00
 4477 328c 740F     		je	.L252
 4478              		.loc 1 1060 0 is_stmt 0 discriminator 1
 4479 328e C785C4FB 		movl	$1, -1084(%rbp)
 4479      FFFF0100 
 4479      0000
 4480 3298 E9190C00 		jmp	.L203
 4480      00
 4481              	.L252:
1061:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 4482              		.loc 1 1061 0 is_stmt 1
 4483 329d 488B85E8 		movq	-792(%rbp), %rax
 4483      FCFFFF
 4484 32a4 0FB6F0   		movzbl	%al, %esi
 4485 32a7 488B8518 		movq	-1000(%rbp), %rax
 4485      FCFFFF
 4486 32ae 488D9520 		leaq	-992(%rbp), %rdx
 4486      FCFFFF
 4487 32b5 4989D0   		movq	%rdx, %r8
 4488 32b8 B9000000 		movl	$0, %ecx
 4488      00
 4489 32bd BA005800 		movl	$22528, %edx
 4489      00
 4490 32c2 4889C7   		movq	%rax, %rdi
 4491 32c5 E8000000 		call	flReadChannelAsyncSubmit@PLT
 4491      00
 4492 32ca 8985C8FB 		movl	%eax, -1080(%rbp)
 4492      FFFF
1062:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4493              		.loc 1 1062 0
 4494 32d0 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4494      FFFF00
 4495 32d7 740F     		je	.L253
 4496              		.loc 1 1062 0 is_stmt 0 discriminator 1
 4497 32d9 C785C4FB 		movl	$1, -1084(%rbp)
 4497      FFFF0100 
 4497      0000
 4498 32e3 E9CE0B00 		jmp	.L203
 4498      00
 4499              	.L253:
1063:main.c        **** 		do {
1064:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 4500              		.loc 1 1064 0 is_stmt 1
 4501 32e8 488B85E8 		movq	-792(%rbp), %rax
 4501      FCFFFF
 4502 32ef 0FB6F0   		movzbl	%al, %esi
 4503 32f2 488B8518 		movq	-1000(%rbp), %rax
 4503      FCFFFF
 4504 32f9 488D9520 		leaq	-992(%rbp), %rdx
 4504      FCFFFF
 4505 3300 4989D0   		movq	%rdx, %r8
 4506 3303 B9000000 		movl	$0, %ecx
 4506      00
 4507 3308 BA005800 		movl	$22528, %edx
 4507      00
 4508 330d 4889C7   		movq	%rax, %rdi
 4509 3310 E8000000 		call	flReadChannelAsyncSubmit@PLT
 4509      00
 4510 3315 8985C8FB 		movl	%eax, -1080(%rbp)
 4510      FFFF
1065:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4511              		.loc 1 1065 0
 4512 331b 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4512      FFFF00
 4513 3322 740F     		je	.L254
 4514              		.loc 1 1065 0 is_stmt 0 discriminator 1
 4515 3324 C785C4FB 		movl	$1, -1084(%rbp)
 4515      FFFF0100 
 4515      0000
 4516 332e E9830B00 		jmp	.L203
 4516      00
 4517              	.L254:
1066:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 4518              		.loc 1 1066 0 is_stmt 1
 4519 3333 488B8518 		movq	-1000(%rbp), %rax
 4519      FCFFFF
 4520 333a 488DBD20 		leaq	-992(%rbp), %rdi
 4520      FCFFFF
 4521 3341 488D8DC0 		leaq	-1088(%rbp), %rcx
 4521      FBFFFF
 4522 3348 488D95C0 		leaq	-1088(%rbp), %rdx
 4522      FBFFFF
 4523 334f 488DB530 		leaq	-976(%rbp), %rsi
 4523      FCFFFF
 4524 3356 4989F8   		movq	%rdi, %r8
 4525 3359 4889C7   		movq	%rax, %rdi
 4526 335c E8000000 		call	flReadChannelAsyncAwait@PLT
 4526      00
 4527 3361 8985C8FB 		movl	%eax, -1080(%rbp)
 4527      FFFF
1067:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4528              		.loc 1 1067 0
 4529 3367 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4529      FFFF00
 4530 336e 740F     		je	.L255
 4531              		.loc 1 1067 0 is_stmt 0 discriminator 1
 4532 3370 C785C4FB 		movl	$1, -1084(%rbp)
 4532      FFFF0100 
 4532      0000
 4533 337a E9370B00 		jmp	.L203
 4533      00
 4534              	.L255:
1068:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 4535              		.loc 1 1068 0 is_stmt 1
 4536 337f 8B85C0FB 		movl	-1088(%rbp), %eax
 4536      FFFF
 4537 3385 89C6     		movl	%eax, %esi
 4538 3387 488B8530 		movq	-976(%rbp), %rax
 4538      FCFFFF
 4539 338e 488B95F0 		movq	-784(%rbp), %rdx
 4539      FCFFFF
 4540 3395 4889D1   		movq	%rdx, %rcx
 4541 3398 4889F2   		movq	%rsi, %rdx
 4542 339b BE010000 		movl	$1, %esi
 4542      00
 4543 33a0 4889C7   		movq	%rax, %rdi
 4544 33a3 E8000000 		call	fwrite@PLT
 4544      00
1069:main.c        **** 			printf(".");
 4545              		.loc 1 1069 0
 4546 33a8 BF2E0000 		movl	$46, %edi
 4546      00
 4547 33ad E8000000 		call	putchar@PLT
 4547      00
1070:main.c        **** 		} while ( !sigIsRaised() );
 4548              		.loc 1 1070 0
 4549 33b2 E8000000 		call	sigIsRaised@PLT
 4549      00
 4550 33b7 83F001   		xorl	$1, %eax
 4551 33ba 84C0     		testb	%al, %al
 4552 33bc 0F8526FF 		jne	.L253
 4552      FFFF
1071:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 4553              		.loc 1 1071 0
 4554 33c2 488D3D00 		leaq	.LC140(%rip), %rdi
 4554      000000
 4555 33c9 E8000000 		call	puts@PLT
 4555      00
1072:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 4556              		.loc 1 1072 0
 4557 33ce 488B8518 		movq	-1000(%rbp), %rax
 4557      FCFFFF
 4558 33d5 488DBD20 		leaq	-992(%rbp), %rdi
 4558      FCFFFF
 4559 33dc 488D8DC0 		leaq	-1088(%rbp), %rcx
 4559      FBFFFF
 4560 33e3 488D95C0 		leaq	-1088(%rbp), %rdx
 4560      FBFFFF
 4561 33ea 488DB530 		leaq	-976(%rbp), %rsi
 4561      FCFFFF
 4562 33f1 4989F8   		movq	%rdi, %r8
 4563 33f4 4889C7   		movq	%rax, %rdi
 4564 33f7 E8000000 		call	flReadChannelAsyncAwait@PLT
 4564      00
 4565 33fc 8985C8FB 		movl	%eax, -1080(%rbp)
 4565      FFFF
1073:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4566              		.loc 1 1073 0
 4567 3402 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4567      FFFF00
 4568 3409 7410     		je	.L256
 4569              		.loc 1 1073 0 is_stmt 0 discriminator 1
 4570 340b C785C4FB 		movl	$1, -1084(%rbp)
 4570      FFFF0100 
 4570      0000
 4571 3415 90       		nop
 4572 3416 E99B0A00 		jmp	.L203
 4572      00
 4573              	.L256:
1074:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 4574              		.loc 1 1074 0 is_stmt 1
 4575 341b 8B85C0FB 		movl	-1088(%rbp), %eax
 4575      FFFF
 4576 3421 89C6     		movl	%eax, %esi
 4577 3423 488B8530 		movq	-976(%rbp), %rax
 4577      FCFFFF
 4578 342a 488B95F0 		movq	-784(%rbp), %rdx
 4578      FCFFFF
 4579 3431 4889D1   		movq	%rdx, %rcx
 4580 3434 4889F2   		movq	%rsi, %rdx
 4581 3437 BE010000 		movl	$1, %esi
 4581      00
 4582 343c 4889C7   		movq	%rax, %rdi
 4583 343f E8000000 		call	fwrite@PLT
 4583      00
1075:main.c        **** 		fclose(file);
 4584              		.loc 1 1075 0
 4585 3444 488B85F0 		movq	-784(%rbp), %rax
 4585      FCFFFF
 4586 344b 4889C7   		movq	%rax, %rdi
 4587 344e E8000000 		call	fclose@PLT
 4587      00
 4588              	.L248:
 4589              	.LBE27:
1076:main.c        **** 	}
1077:main.c        **** 
1078:main.c        **** 	if(railOpt->count){
 4590              		.loc 1 1078 0
 4591 3453 488B85B8 		movq	-840(%rbp), %rax
 4591      FCFFFF
 4592 345a 8B4060   		movl	96(%rax), %eax
 4593 345d 85C0     		testl	%eax, %eax
 4594 345f 0F847108 		je	.L257
 4594      0000
1079:main.c        **** 		printf("Executing CommFPGA rail info on FPGALink device %s...\n", vp);
 4595              		.loc 1 1079 0
 4596 3465 488B85D8 		movq	-808(%rbp), %rax
 4596      FCFFFF
 4597 346c 4889C6   		movq	%rax, %rsi
 4598 346f 488D3D00 		leaq	.LC141(%rip), %rdi
 4598      000000
 4599 3476 B8000000 		movl	$0, %eax
 4599      00
 4600 347b E8000000 		call	printf@PLT
 4600      00
1080:main.c        **** 		if(isCommCapable){
 4601              		.loc 1 1080 0
 4602 3480 80BDBBFB 		cmpb	$0, -1093(%rbp)
 4602      FFFF00
 4603 3487 0F841808 		je	.L258
 4603      0000
 4604              	.LBB28:
1081:main.c        **** 			uint8 isRunning;
1082:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 4605              		.loc 1 1082 0
 4606 348d 0FB68DB8 		movzbl	-1096(%rbp), %ecx
 4606      FBFFFF
 4607 3494 488B8518 		movq	-1000(%rbp), %rax
 4607      FCFFFF
 4608 349b 488D9520 		leaq	-992(%rbp), %rdx
 4608      FCFFFF
 4609 34a2 89CE     		movl	%ecx, %esi
 4610 34a4 4889C7   		movq	%rax, %rdi
 4611 34a7 E8000000 		call	flSelectConduit@PLT
 4611      00
 4612 34ac 8985C8FB 		movl	%eax, -1080(%rbp)
 4612      FFFF
1083:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4613              		.loc 1 1083 0
 4614 34b2 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4614      FFFF00
 4615 34b9 740F     		je	.L259
 4616              		.loc 1 1083 0 is_stmt 0 discriminator 1
 4617 34bb C785C4FB 		movl	$1, -1084(%rbp)
 4617      FFFF0100 
 4617      0000
 4618 34c5 E9EC0900 		jmp	.L203
 4618      00
 4619              	.L259:
1084:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4620              		.loc 1 1084 0 is_stmt 1
 4621 34ca 488B8518 		movq	-1000(%rbp), %rax
 4621      FCFFFF
 4622 34d1 488D9520 		leaq	-992(%rbp), %rdx
 4622      FCFFFF
 4623 34d8 488D8D28 		leaq	-984(%rbp), %rcx
 4623      FCFFFF
 4624 34df 4889CE   		movq	%rcx, %rsi
 4625 34e2 4889C7   		movq	%rax, %rdi
 4626 34e5 E8000000 		call	flIsFPGARunning@PLT
 4626      00
 4627 34ea 8985C8FB 		movl	%eax, -1080(%rbp)
 4627      FFFF
1085:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4628              		.loc 1 1085 0
 4629 34f0 83BDC8FB 		cmpl	$0, -1080(%rbp)
 4629      FFFF00
 4630 34f7 740F     		je	.L261
 4631              		.loc 1 1085 0 is_stmt 0 discriminator 1
 4632 34f9 C785C4FB 		movl	$1, -1084(%rbp)
 4632      FFFF0100 
 4632      0000
 4633 3503 E9AE0900 		jmp	.L203
 4633      00
 4634              	.L261:
1086:main.c        **** 			const char *line;
1087:main.c        **** 			line = railOpt->sval[0];
 4635              		.loc 1 1087 0 is_stmt 1
 4636 3508 488B85B8 		movq	-840(%rbp), %rax
 4636      FCFFFF
 4637 350f 488B4068 		movq	104(%rax), %rax
 4638 3513 488B00   		movq	(%rax), %rax
 4639 3516 488985F8 		movq	%rax, -776(%rbp)
 4639      FCFFFF
1088:main.c        **** 			if(isRunning){
 4640              		.loc 1 1088 0
 4641 351d 0FB68528 		movzbl	-984(%rbp), %eax
 4641      FCFFFF
 4642 3524 84C0     		testb	%al, %al
 4643 3526 0F844707 		je	.L262
 4643      0000
1089:main.c        **** 				ptr = line;
 4644              		.loc 1 1089 0
 4645 352c 488B85F8 		movq	-776(%rbp), %rax
 4645      FCFFFF
 4646 3533 48890500 		movq	%rax, ptr(%rip)
 4646      000000
1090:main.c        **** 				switch(*ptr){
 4647              		.loc 1 1090 0
 4648 353a 488B0500 		movq	ptr(%rip), %rax
 4648      000000
 4649 3541 0FB600   		movzbl	(%rax), %eax
 4650 3544 0FBEC0   		movsbl	%al, %eax
 4651 3547 83F866   		cmpl	$102, %eax
 4652 354a 0F858607 		jne	.L257
 4652      0000
 4653              	.LBB29:
1091:main.c        **** 					case 'f':{
1092:main.c        **** 						//printf("entered f\n");
1093:main.c        **** 						uint32 decrypted_data = 0x00000000, resend_data = 0x00000000, resend_coorddata = 0x00000000;
 4654              		.loc 1 1093 0
 4655 3550 C78530FC 		movl	$0, -976(%rbp)
 4655      FFFF0000 
 4655      0000
 4656 355a C785D4FB 		movl	$0, -1068(%rbp)
 4656      FFFF0000 
 4656      0000
 4657 3564 C78500FC 		movl	$0, -1024(%rbp)
 4657      FFFF0000 
 4657      0000
1094:main.c        **** 						uint32 ACK1 = 0xCCCCCCCC, ACK2 = 0x33333333, key = 0x9999999F;
 4658              		.loc 1 1094 0
 4659 356e C78504FC 		movl	$-858993460, -1020(%rbp)
 4659      FFFFCCCC 
 4659      CCCC
 4660 3578 C78508FC 		movl	$858993459, -1016(%rbp)
 4660      FFFF3333 
 4660      3333
 4661 3582 C7850CFC 		movl	$-1717986913, -1012(%rbp)
 4661      FFFF9F99 
 4661      9999
1095:main.c        **** 						ptr++;
 4662              		.loc 1 1095 0
 4663 358c 488B0500 		movq	ptr(%rip), %rax
 4663      000000
 4664 3593 4883C001 		addq	$1, %rax
 4665 3597 48890500 		movq	%rax, ptr(%rip)
 4665      000000
1096:main.c        **** 						int i, x, y, process_counter = 0, step = 0, norm = 0;
 4666              		.loc 1 1096 0
 4667 359e C785DCFB 		movl	$0, -1060(%rbp)
 4667      FFFF0000 
 4667      0000
 4668 35a8 C785E0FB 		movl	$0, -1056(%rbp)
 4668      FFFF0000 
 4668      0000
 4669 35b2 C785E4FB 		movl	$0, -1052(%rbp)
 4669      FFFF0000 
 4669      0000
1097:main.c        **** 						uint8_t file_data[8][64];
1098:main.c        **** 
1099:main.c        **** 						printf("entering the loop\n");
 4670              		.loc 1 1099 0
 4671 35bc 488D3D00 		leaq	.LC142(%rip), %rdi
 4671      000000
 4672 35c3 E8000000 		call	puts@PLT
 4672      00
 4673              	.LBB30:
1100:main.c        **** 						for(uint8 chan = 0; chan < 64; chan++){
 4674              		.loc 1 1100 0
 4675 35c8 C685B9FB 		movb	$0, -1095(%rbp)
 4675      FFFF00
 4676 35cf E9900600 		jmp	.L265
 4676      00
 4677              	.L292:
1101:main.c        **** 							printf("checking on channel %d\n", 2 * chan);
 4678              		.loc 1 1101 0
 4679 35d4 0FB685B9 		movzbl	-1095(%rbp), %eax
 4679      FBFFFF
 4680 35db 01C0     		addl	%eax, %eax
 4681 35dd 89C6     		movl	%eax, %esi
 4682 35df 488D3D00 		leaq	.LC143(%rip), %rdi
 4682      000000
 4683 35e6 B8000000 		movl	$0, %eax
 4683      00
 4684 35eb E8000000 		call	printf@PLT
 4684      00
1102:main.c        **** 							
1103:main.c        **** 							fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 4685              		.loc 1 1103 0
 4686 35f0 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4686      FBFFFF
 4687 35f7 488B8518 		movq	-1000(%rbp), %rax
 4687      FCFFFF
 4688 35fe 488D8D20 		leaq	-992(%rbp), %rcx
 4688      FCFFFF
 4689 3605 488D9530 		leaq	-976(%rbp), %rdx
 4689      FCFFFF
 4690 360c 4889C7   		movq	%rax, %rdi
 4691 360f E8DEE6FF 		call	receive_from_fpga
 4691      FF
 4692 3614 8985C8FB 		movl	%eax, -1080(%rbp)
 4692      FFFF
1104:main.c        **** 
1105:main.c        **** 							decrypted_data = decrypted_data % 256U;    // since the co-ords are only in the last 8 bits
 4693              		.loc 1 1105 0
 4694 361a 8B8530FC 		movl	-976(%rbp), %eax
 4694      FFFF
 4695 3620 0FB6C0   		movzbl	%al, %eax
 4696 3623 898530FC 		movl	%eax, -976(%rbp)
 4696      FFFF
1106:main.c        **** 							//printf("the last 8 bits in decrypted data are %u\n", decrypted_data);
1107:main.c        **** 							x = decrypted_data / 16U;
 4697              		.loc 1 1107 0
 4698 3629 8B8530FC 		movl	-976(%rbp), %eax
 4698      FFFF
 4699 362f C1E804   		shrl	$4, %eax
 4700 3632 898510FC 		movl	%eax, -1008(%rbp)
 4700      FFFF
1108:main.c        **** 							y = decrypted_data % 16U;
 4701              		.loc 1 1108 0
 4702 3638 8B8530FC 		movl	-976(%rbp), %eax
 4702      FFFF
 4703 363e 83E00F   		andl	$15, %eax
 4704 3641 898514FC 		movl	%eax, -1004(%rbp)
 4704      FFFF
1109:main.c        **** 							printf("x is %d, y is %d\n", x, y);
 4705              		.loc 1 1109 0
 4706 3647 8B9514FC 		movl	-1004(%rbp), %edx
 4706      FFFF
 4707 364d 8B8510FC 		movl	-1008(%rbp), %eax
 4707      FFFF
 4708 3653 89C6     		movl	%eax, %esi
 4709 3655 488D3D00 		leaq	.LC144(%rip), %rdi
 4709      000000
 4710 365c B8000000 		movl	$0, %eax
 4710      00
 4711 3661 E8000000 		call	printf@PLT
 4711      00
1110:main.c        **** 
1111:main.c        **** 							resend_coorddata = (x * 16) + y;
 4712              		.loc 1 1111 0
 4713 3666 8B8510FC 		movl	-1008(%rbp), %eax
 4713      FFFF
 4714 366c C1E004   		sall	$4, %eax
 4715 366f 89C2     		movl	%eax, %edx
 4716 3671 8B8514FC 		movl	-1004(%rbp), %eax
 4716      FFFF
 4717 3677 01D0     		addl	%edx, %eax
 4718 3679 898500FC 		movl	%eax, -1024(%rbp)
 4718      FFFF
1112:main.c        **** 							fStatus = send_to_fpga(handle, chan, resend_coorddata, &error);
 4719              		.loc 1 1112 0
 4720 367f 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4720      FBFFFF
 4721 3686 488B8518 		movq	-1000(%rbp), %rax
 4721      FCFFFF
 4722 368d 488D8D20 		leaq	-992(%rbp), %rcx
 4722      FCFFFF
 4723 3694 8B9500FC 		movl	-1024(%rbp), %edx
 4723      FFFF
 4724 369a 4889C7   		movq	%rax, %rdi
 4725 369d E888E8FF 		call	send_to_fpga
 4725      FF
 4726 36a2 8985C8FB 		movl	%eax, -1080(%rbp)
 4726      FFFF
1113:main.c        **** 							printf("co-ord data re-sent\n");
 4727              		.loc 1 1113 0
 4728 36a8 488D3D00 		leaq	.LC145(%rip), %rdi
 4728      000000
 4729 36af E8000000 		call	puts@PLT
 4729      00
1114:main.c        **** 
1115:main.c        **** 							fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 4730              		.loc 1 1115 0
 4731 36b4 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4731      FBFFFF
 4732 36bb 488B8518 		movq	-1000(%rbp), %rax
 4732      FCFFFF
 4733 36c2 488D8D20 		leaq	-992(%rbp), %rcx
 4733      FCFFFF
 4734 36c9 488D9530 		leaq	-976(%rbp), %rdx
 4734      FCFFFF
 4735 36d0 4889C7   		movq	%rax, %rdi
 4736 36d3 E81AE6FF 		call	receive_from_fpga
 4736      FF
 4737 36d8 8985C8FB 		movl	%eax, -1080(%rbp)
 4737      FFFF
 4738              	.L289:
1116:main.c        **** 
1117:main.c        **** 							do{
1118:main.c        **** 								if(decrypted_data == ACK1){
 4739              		.loc 1 1118 0
 4740 36de 8B8530FC 		movl	-976(%rbp), %eax
 4740      FFFF
 4741 36e4 398504FC 		cmpl	%eax, -1020(%rbp)
 4741      FFFF
 4742 36ea 0F858C04 		jne	.L266
 4742      0000
1119:main.c        **** 									text_read(file_data);
 4743              		.loc 1 1119 0
 4744 36f0 488D85D0 		leaq	-560(%rbp), %rax
 4744      FDFFFF
 4745 36f7 4889C7   		movq	%rax, %rdi
 4746 36fa E8000000 		call	text_read
 4746      00
1120:main.c        **** 									printf("connection established on channel number %d\n", 2 * chan);
 4747              		.loc 1 1120 0
 4748 36ff 0FB685B9 		movzbl	-1095(%rbp), %eax
 4748      FBFFFF
 4749 3706 01C0     		addl	%eax, %eax
 4750 3708 89C6     		movl	%eax, %esi
 4751 370a 488D3D00 		leaq	.LC146(%rip), %rdi
 4751      000000
 4752 3711 B8000000 		movl	$0, %eax
 4752      00
 4753 3716 E8000000 		call	printf@PLT
 4753      00
1121:main.c        **** 									//printf("ACK1 received %u\n", decrypted_data);
1122:main.c        **** 
1123:main.c        **** 									fStatus = send_to_fpga(handle, chan, ACK2, &error);
 4754              		.loc 1 1123 0
 4755 371b 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4755      FBFFFF
 4756 3722 488B8518 		movq	-1000(%rbp), %rax
 4756      FCFFFF
 4757 3729 488D8D20 		leaq	-992(%rbp), %rcx
 4757      FCFFFF
 4758 3730 8B9508FC 		movl	-1016(%rbp), %edx
 4758      FFFF
 4759 3736 4889C7   		movq	%rax, %rdi
 4760 3739 E8ECE7FF 		call	send_to_fpga
 4760      FF
 4761 373e 8985C8FB 		movl	%eax, -1080(%rbp)
 4761      FFFF
1124:main.c        **** 									//printf("ACK2 sent\n");
1125:main.c        **** 
1126:main.c        **** 									for(i = 0; i < 4; i++){
 4762              		.loc 1 1126 0
 4763 3744 C785D8FB 		movl	$0, -1064(%rbp)
 4763      FFFF0000 
 4763      0000
 4764 374e EB4E     		jmp	.L267
 4765              	.L268:
1127:main.c        **** 										resend_data = resend_data << 8;
 4766              		.loc 1 1127 0 discriminator 3
 4767 3750 C1A5D4FB 		sall	$8, -1068(%rbp)
 4767      FFFF08
1128:main.c        **** 										resend_data |= file_data[x][(y * 8) + i];
 4768              		.loc 1 1128 0 discriminator 3
 4769 3757 8B8514FC 		movl	-1004(%rbp), %eax
 4769      FFFF
 4770 375d 8D14C500 		leal	0(,%rax,8), %edx
 4770      000000
 4771 3764 8B85D8FB 		movl	-1064(%rbp), %eax
 4771      FFFF
 4772 376a 01D0     		addl	%edx, %eax
 4773 376c 4898     		cltq
 4774 376e 8B9510FC 		movl	-1008(%rbp), %edx
 4774      FFFF
 4775 3774 4863D2   		movslq	%edx, %rdx
 4776 3777 48C1E206 		salq	$6, %rdx
 4777 377b 488D5DF0 		leaq	-16(%rbp), %rbx
 4778 377f 4801DA   		addq	%rbx, %rdx
 4779 3782 4801D0   		addq	%rdx, %rax
 4780 3785 482D2002 		subq	$544, %rax
 4780      0000
 4781 378b 0FB600   		movzbl	(%rax), %eax
 4782 378e 0FB6C0   		movzbl	%al, %eax
 4783 3791 0985D4FB 		orl	%eax, -1068(%rbp)
 4783      FFFF
1126:main.c        **** 										resend_data = resend_data << 8;
 4784              		.loc 1 1126 0 discriminator 3
 4785 3797 8385D8FB 		addl	$1, -1064(%rbp)
 4785      FFFF01
 4786              	.L267:
1126:main.c        **** 										resend_data = resend_data << 8;
 4787              		.loc 1 1126 0 is_stmt 0 discriminator 1
 4788 379e 83BDD8FB 		cmpl	$3, -1064(%rbp)
 4788      FFFF03
 4789 37a5 7EA9     		jle	.L268
1129:main.c        **** 										//printf("rail info first byte sent %u\n", file_data[x][(y * 8) + i]);
1130:main.c        **** 									}
1131:main.c        **** 									fStatus = send_to_fpga(handle, chan, resend_data, &error);
 4790              		.loc 1 1131 0 is_stmt 1
 4791 37a7 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4791      FBFFFF
 4792 37ae 488B8518 		movq	-1000(%rbp), %rax
 4792      FCFFFF
 4793 37b5 488D8D20 		leaq	-992(%rbp), %rcx
 4793      FCFFFF
 4794 37bc 8B95D4FB 		movl	-1068(%rbp), %edx
 4794      FFFF
 4795 37c2 4889C7   		movq	%rax, %rdi
 4796 37c5 E860E7FF 		call	send_to_fpga
 4796      FF
 4797 37ca 8985C8FB 		movl	%eax, -1080(%rbp)
 4797      FFFF
1132:main.c        **** 									printf("written the first 4 bytes of rail info\n");
 4798              		.loc 1 1132 0
 4799 37d0 488D3D00 		leaq	.LC147(%rip), %rdi
 4799      000000
 4800 37d7 E8000000 		call	puts@PLT
 4800      00
 4801              	.LBB31:
1133:main.c        **** 
1134:main.c        **** 									for(int j = 0; j < 256; j++){
 4802              		.loc 1 1134 0
 4803 37dc C785E8FB 		movl	$0, -1048(%rbp)
 4803      FFFF0000 
 4803      0000
 4804 37e6 E9600300 		jmp	.L269
 4804      00
 4805              	.L284:
1135:main.c        **** 										fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 4806              		.loc 1 1135 0
 4807 37eb 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4807      FBFFFF
 4808 37f2 488B8518 		movq	-1000(%rbp), %rax
 4808      FCFFFF
 4809 37f9 488D8D20 		leaq	-992(%rbp), %rcx
 4809      FCFFFF
 4810 3800 488D9530 		leaq	-976(%rbp), %rdx
 4810      FCFFFF
 4811 3807 4889C7   		movq	%rax, %rdi
 4812 380a E8E3E4FF 		call	receive_from_fpga
 4812      FF
 4813 380f 8985C8FB 		movl	%eax, -1080(%rbp)
 4813      FFFF
1136:main.c        **** 										if(decrypted_data == ACK1){
 4814              		.loc 1 1136 0
 4815 3815 8B8530FC 		movl	-976(%rbp), %eax
 4815      FFFF
 4816 381b 398504FC 		cmpl	%eax, -1020(%rbp)
 4816      FFFF
 4817 3821 0F851303 		jne	.L270
 4817      0000
1137:main.c        **** 											//printf("ACK1 received %u\n", decrypted_data);
1138:main.c        **** 
1139:main.c        **** 											for(i = 4; i < 8; i++){
 4818              		.loc 1 1139 0
 4819 3827 C785D8FB 		movl	$4, -1064(%rbp)
 4819      FFFF0400 
 4819      0000
 4820 3831 EB4E     		jmp	.L271
 4821              	.L272:
1140:main.c        **** 												resend_data = resend_data << 8;
 4822              		.loc 1 1140 0 discriminator 3
 4823 3833 C1A5D4FB 		sall	$8, -1068(%rbp)
 4823      FFFF08
1141:main.c        **** 												resend_data |= file_data[x][(y * 8) + i];
 4824              		.loc 1 1141 0 discriminator 3
 4825 383a 8B8514FC 		movl	-1004(%rbp), %eax
 4825      FFFF
 4826 3840 8D14C500 		leal	0(,%rax,8), %edx
 4826      000000
 4827 3847 8B85D8FB 		movl	-1064(%rbp), %eax
 4827      FFFF
 4828 384d 01D0     		addl	%edx, %eax
 4829 384f 4898     		cltq
 4830 3851 8B9510FC 		movl	-1008(%rbp), %edx
 4830      FFFF
 4831 3857 4863D2   		movslq	%edx, %rdx
 4832 385a 48C1E206 		salq	$6, %rdx
 4833 385e 488D5DF0 		leaq	-16(%rbp), %rbx
 4834 3862 4801DA   		addq	%rbx, %rdx
 4835 3865 4801D0   		addq	%rdx, %rax
 4836 3868 482D2002 		subq	$544, %rax
 4836      0000
 4837 386e 0FB600   		movzbl	(%rax), %eax
 4838 3871 0FB6C0   		movzbl	%al, %eax
 4839 3874 0985D4FB 		orl	%eax, -1068(%rbp)
 4839      FFFF
1139:main.c        **** 												resend_data = resend_data << 8;
 4840              		.loc 1 1139 0 discriminator 3
 4841 387a 8385D8FB 		addl	$1, -1064(%rbp)
 4841      FFFF01
 4842              	.L271:
1139:main.c        **** 												resend_data = resend_data << 8;
 4843              		.loc 1 1139 0 is_stmt 0 discriminator 1
 4844 3881 83BDD8FB 		cmpl	$7, -1064(%rbp)
 4844      FFFF07
 4845 3888 7EA9     		jle	.L272
1142:main.c        **** 												//printf("rail info next byte sent %u\n", file_data[x][(y * 8) + i]);
1143:main.c        **** 											}
1144:main.c        **** 											fStatus = send_to_fpga(handle, chan, resend_data, &error);
 4846              		.loc 1 1144 0 is_stmt 1
 4847 388a 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4847      FBFFFF
 4848 3891 488B8518 		movq	-1000(%rbp), %rax
 4848      FCFFFF
 4849 3898 488D8D20 		leaq	-992(%rbp), %rcx
 4849      FCFFFF
 4850 389f 8B95D4FB 		movl	-1068(%rbp), %edx
 4850      FFFF
 4851 38a5 4889C7   		movq	%rax, %rdi
 4852 38a8 E87DE6FF 		call	send_to_fpga
 4852      FF
 4853 38ad 8985C8FB 		movl	%eax, -1080(%rbp)
 4853      FFFF
1145:main.c        **** 											printf("written the last 4 bytes of rail info\n");
 4854              		.loc 1 1145 0
 4855 38b3 488D3D00 		leaq	.LC148(%rip), %rdi
 4855      000000
 4856 38ba E8000000 		call	puts@PLT
 4856      00
 4857              	.LBB32:
1146:main.c        **** 
1147:main.c        **** 											for(int j = 0; j < 256; j++){
 4858              		.loc 1 1147 0
 4859 38bf C785ECFB 		movl	$0, -1044(%rbp)
 4859      FFFF0000 
 4859      0000
 4860 38c9 E9570200 		jmp	.L273
 4860      00
 4861              	.L282:
1148:main.c        **** 												fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 4862              		.loc 1 1148 0
 4863 38ce 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4863      FBFFFF
 4864 38d5 488B8518 		movq	-1000(%rbp), %rax
 4864      FCFFFF
 4865 38dc 488D8D20 		leaq	-992(%rbp), %rcx
 4865      FCFFFF
 4866 38e3 488D9530 		leaq	-976(%rbp), %rdx
 4866      FCFFFF
 4867 38ea 4889C7   		movq	%rax, %rdi
 4868 38ed E800E4FF 		call	receive_from_fpga
 4868      FF
 4869 38f2 8985C8FB 		movl	%eax, -1080(%rbp)
 4869      FFFF
1149:main.c        **** 												if(decrypted_data == ACK1){
 4870              		.loc 1 1149 0
 4871 38f8 8B8530FC 		movl	-976(%rbp), %eax
 4871      FFFF
 4872 38fe 398504FC 		cmpl	%eax, -1020(%rbp)
 4872      FFFF
 4873 3904 0F850A02 		jne	.L274
 4873      0000
1150:main.c        **** 													//printf("ACK1 received %u\n", decrypted_data);
1151:main.c        **** 
1152:main.c        **** 													fStatus = send_to_fpga(handle, chan, ACK2, &error);
 4874              		.loc 1 1152 0
 4875 390a 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4875      FBFFFF
 4876 3911 488B8518 		movq	-1000(%rbp), %rax
 4876      FCFFFF
 4877 3918 488D8D20 		leaq	-992(%rbp), %rcx
 4877      FCFFFF
 4878 391f 8B9508FC 		movl	-1016(%rbp), %edx
 4878      FFFF
 4879 3925 4889C7   		movq	%rax, %rdi
 4880 3928 E8FDE5FF 		call	send_to_fpga
 4880      FF
 4881 392d 8985C8FB 		movl	%eax, -1080(%rbp)
 4881      FFFF
1153:main.c        **** 													//printf("ACK2 sent\n");
1154:main.c        **** 													printf("S2 state successfully completed\n");
 4882              		.loc 1 1154 0
 4883 3933 488D3D00 		leaq	.LC149(%rip), %rdi
 4883      000000
 4884 393a E8000000 		call	puts@PLT
 4884      00
1155:main.c        **** 													sleep(24);
 4885              		.loc 1 1155 0
 4886 393f BF180000 		movl	$24, %edi
 4886      00
 4887 3944 E8000000 		call	sleep@PLT
 4887      00
 4888              	.LBB33:
1156:main.c        **** 
1157:main.c        **** 													for(int t = 0; t < 20; t++){
 4889              		.loc 1 1157 0
 4890 3949 C785F0FB 		movl	$0, -1040(%rbp)
 4890      FFFF0000 
 4890      0000
 4891 3953 E9940100 		jmp	.L275
 4891      00
 4892              	.L279:
1158:main.c        **** 														fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 4893              		.loc 1 1158 0
 4894 3958 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4894      FBFFFF
 4895 395f 488B8518 		movq	-1000(%rbp), %rax
 4895      FCFFFF
 4896 3966 488D8D20 		leaq	-992(%rbp), %rcx
 4896      FCFFFF
 4897 396d 488D9530 		leaq	-976(%rbp), %rdx
 4897      FCFFFF
 4898 3974 4889C7   		movq	%rax, %rdi
 4899 3977 E876E3FF 		call	receive_from_fpga
 4899      FF
 4900 397c 8985C8FB 		movl	%eax, -1080(%rbp)
 4900      FFFF
1159:main.c        **** 														if(decrypted_data == resend_coorddata){
 4901              		.loc 1 1159 0
 4902 3982 8B8530FC 		movl	-976(%rbp), %eax
 4902      FFFF
 4903 3988 398500FC 		cmpl	%eax, -1024(%rbp)
 4903      FFFF
 4904 398e 756E     		jne	.L276
1160:main.c        **** 															fStatus = send_to_fpga(handle, chan, resend_coorddata, &error);
 4905              		.loc 1 1160 0
 4906 3990 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4906      FBFFFF
 4907 3997 488B8518 		movq	-1000(%rbp), %rax
 4907      FCFFFF
 4908 399e 488D8D20 		leaq	-992(%rbp), %rcx
 4908      FCFFFF
 4909 39a5 8B9500FC 		movl	-1024(%rbp), %edx
 4909      FFFF
 4910 39ab 4889C7   		movq	%rax, %rdi
 4911 39ae E877E5FF 		call	send_to_fpga
 4911      FF
 4912 39b3 8985C8FB 		movl	%eax, -1080(%rbp)
 4912      FFFF
1161:main.c        **** 															printf("co-ord data re-sent\n");
 4913              		.loc 1 1161 0
 4914 39b9 488D3D00 		leaq	.LC145(%rip), %rdi
 4914      000000
 4915 39c0 E8000000 		call	puts@PLT
 4915      00
1162:main.c        **** 
1163:main.c        **** 															fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 4916              		.loc 1 1163 0
 4917 39c5 0FB6B5B9 		movzbl	-1095(%rbp), %esi
 4917      FBFFFF
 4918 39cc 488B8518 		movq	-1000(%rbp), %rax
 4918      FCFFFF
 4919 39d3 488D8D20 		leaq	-992(%rbp), %rcx
 4919      FCFFFF
 4920 39da 488D9530 		leaq	-976(%rbp), %rdx
 4920      FCFFFF
 4921 39e1 4889C7   		movq	%rax, %rdi
 4922 39e4 E809E3FF 		call	receive_from_fpga
 4922      FF
 4923 39e9 8985C8FB 		movl	%eax, -1080(%rbp)
 4923      FFFF
1164:main.c        **** 															norm = 1;
 4924              		.loc 1 1164 0
 4925 39ef C785E4FB 		movl	$1, -1052(%rbp)
 4925      FFFF0100 
 4925      0000
1165:main.c        **** 															break;
 4926              		.loc 1 1165 0
 4927 39f9 E9FB0000 		jmp	.L277
 4927      00
 4928              	.L276:
1166:main.c        **** 														}
1167:main.c        **** 														decrypted_data = encrypt(decrypted_data, key);
 4929              		.loc 1 1167 0
 4930 39fe 8B8530FC 		movl	-976(%rbp), %eax
 4930      FFFF
 4931 3a04 8B950CFC 		movl	-1012(%rbp), %edx
 4931      FFFF
 4932 3a0a 89D6     		movl	%edx, %esi
 4933 3a0c 89C7     		movl	%eax, %edi
 4934 3a0e E8000000 		call	encrypt
 4934      00
 4935 3a13 898530FC 		movl	%eax, -976(%rbp)
 4935      FFFF
1168:main.c        **** 														printf("received data at S3 is %u at time %d\n", decrypted_data, t);
 4936              		.loc 1 1168 0
 4937 3a19 8B8530FC 		movl	-976(%rbp), %eax
 4937      FFFF
 4938 3a1f 8B95F0FB 		movl	-1040(%rbp), %edx
 4938      FFFF
 4939 3a25 89C6     		movl	%eax, %esi
 4940 3a27 488D3D00 		leaq	.LC150(%rip), %rdi
 4940      000000
 4941 3a2e B8000000 		movl	$0, %eax
 4941      00
 4942 3a33 E8000000 		call	printf@PLT
 4942      00
1169:main.c        **** 														if(decrypted_data != 0x00000000){
 4943              		.loc 1 1169 0
 4944 3a38 8B8530FC 		movl	-976(%rbp), %eax
 4944      FFFF
 4945 3a3e 85C0     		testl	%eax, %eax
 4946 3a40 0F848900 		je	.L278
 4946      0000
1170:main.c        **** 															decrypted_data = decrypt(decrypted_data, key);
 4947              		.loc 1 1170 0
 4948 3a46 8B8530FC 		movl	-976(%rbp), %eax
 4948      FFFF
 4949 3a4c 8B950CFC 		movl	-1012(%rbp), %edx
 4949      FFFF
 4950 3a52 89D6     		movl	%edx, %esi
 4951 3a54 89C7     		movl	%eax, %edi
 4952 3a56 E8000000 		call	decrypt
 4952      00
 4953 3a5b 898530FC 		movl	%eax, -976(%rbp)
 4953      FFFF
1171:main.c        **** 															resend_data = decrypted_data >> 3;
 4954              		.loc 1 1171 0
 4955 3a61 8B8530FC 		movl	-976(%rbp), %eax
 4955      FFFF
 4956 3a67 C1E803   		shrl	$3, %eax
 4957 3a6a 8985D4FB 		movl	%eax, -1068(%rbp)
 4957      FFFF
1172:main.c        **** 															i = resend_data % 8;
 4958              		.loc 1 1172 0
 4959 3a70 8B85D4FB 		movl	-1068(%rbp), %eax
 4959      FFFF
 4960 3a76 83E007   		andl	$7, %eax
 4961 3a79 8985D8FB 		movl	%eax, -1064(%rbp)
 4961      FFFF
1173:main.c        **** 															file_data[x][(8 * y) + i] = decrypted_data;
 4962              		.loc 1 1173 0
 4963 3a7f 8B8530FC 		movl	-976(%rbp), %eax
 4963      FFFF
 4964 3a85 8B9514FC 		movl	-1004(%rbp), %edx
 4964      FFFF
 4965 3a8b 8D0CD500 		leal	0(,%rdx,8), %ecx
 4965      000000
 4966 3a92 8B95D8FB 		movl	-1064(%rbp), %edx
 4966      FFFF
 4967 3a98 01CA     		addl	%ecx, %edx
 4968 3a9a 89C1     		movl	%eax, %ecx
 4969 3a9c 4863C2   		movslq	%edx, %rax
 4970 3a9f 8B9510FC 		movl	-1008(%rbp), %edx
 4970      FFFF
 4971 3aa5 4863D2   		movslq	%edx, %rdx
 4972 3aa8 48C1E206 		salq	$6, %rdx
 4973 3aac 488D5DF0 		leaq	-16(%rbp), %rbx
 4974 3ab0 4801DA   		addq	%rbx, %rdx
 4975 3ab3 4801D0   		addq	%rdx, %rax
 4976 3ab6 482D2002 		subq	$544, %rax
 4976      0000
 4977 3abc 8808     		movb	%cl, (%rax)
1174:main.c        **** 															update_file(file_data);
 4978              		.loc 1 1174 0
 4979 3abe 488D85D0 		leaq	-560(%rbp), %rax
 4979      FDFFFF
 4980 3ac5 4889C7   		movq	%rax, %rdi
 4981 3ac8 E8000000 		call	update_file
 4981      00
1175:main.c        **** 															break;
 4982              		.loc 1 1175 0
 4983 3acd EB2A     		jmp	.L277
 4984              	.L278:
1176:main.c        **** 														}else{
1177:main.c        **** 															sleep(1);
 4985              		.loc 1 1177 0 discriminator 2
 4986 3acf BF010000 		movl	$1, %edi
 4986      00
 4987 3ad4 E8000000 		call	sleep@PLT
 4987      00
1178:main.c        **** 															printf("-\n");
 4988              		.loc 1 1178 0 discriminator 2
 4989 3ad9 488D3D00 		leaq	.LC151(%rip), %rdi
 4989      000000
 4990 3ae0 E8000000 		call	puts@PLT
 4990      00
1157:main.c        **** 														fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 4991              		.loc 1 1157 0 discriminator 2
 4992 3ae5 8385F0FB 		addl	$1, -1040(%rbp)
 4992      FFFF01
 4993              	.L275:
1157:main.c        **** 														fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 4994              		.loc 1 1157 0 is_stmt 0 discriminator 1
 4995 3aec 83BDF0FB 		cmpl	$19, -1040(%rbp)
 4995      FFFF13
 4996 3af3 0F8E5FFE 		jle	.L279
 4996      FFFF
 4997              	.L277:
 4998              	.LBE33:
1179:main.c        **** 														}
1180:main.c        **** 													}
1181:main.c        **** 													//sleep(20);
1182:main.c        **** 													if(norm == 0) chan--;
 4999              		.loc 1 1182 0 is_stmt 1
 5000 3af9 83BDE4FB 		cmpl	$0, -1052(%rbp)
 5000      FFFF00
 5001 3b00 7535     		jne	.L306
 5002              		.loc 1 1182 0 is_stmt 0 discriminator 1
 5003 3b02 0FB685B9 		movzbl	-1095(%rbp), %eax
 5003      FBFFFF
 5004 3b09 83E801   		subl	$1, %eax
 5005 3b0c 8885B9FB 		movb	%al, -1095(%rbp)
 5005      FFFF
1183:main.c        **** 													break;
 5006              		.loc 1 1183 0 is_stmt 1 discriminator 1
 5007 3b12 EB23     		jmp	.L306
 5008              	.L274:
1184:main.c        **** 												}
1185:main.c        **** 												sleep(1);
 5009              		.loc 1 1185 0 discriminator 2
 5010 3b14 BF010000 		movl	$1, %edi
 5010      00
 5011 3b19 E8000000 		call	sleep@PLT
 5011      00
1147:main.c        **** 												fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 5012              		.loc 1 1147 0 discriminator 2
 5013 3b1e 8385ECFB 		addl	$1, -1044(%rbp)
 5013      FFFF01
 5014              	.L273:
1147:main.c        **** 												fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 5015              		.loc 1 1147 0 is_stmt 0 discriminator 1
 5016 3b25 81BDECFB 		cmpl	$255, -1044(%rbp)
 5016      FFFFFF00 
 5016      0000
 5017 3b2f 0F8E99FD 		jle	.L282
 5017      FFFF
 5018              	.LBE32:
1186:main.c        **** 											}
1187:main.c        **** 											break;
 5019              		.loc 1 1187 0 is_stmt 1
 5020 3b35 EB24     		jmp	.L283
 5021              	.L306:
 5022              	.LBB34:
1183:main.c        **** 												}
 5023              		.loc 1 1183 0
 5024 3b37 90       		nop
 5025              	.LBE34:
 5026              		.loc 1 1187 0
 5027 3b38 EB21     		jmp	.L283
 5028              	.L270:
1188:main.c        **** 										}
1189:main.c        **** 										sleep(1);
 5029              		.loc 1 1189 0 discriminator 2
 5030 3b3a BF010000 		movl	$1, %edi
 5030      00
 5031 3b3f E8000000 		call	sleep@PLT
 5031      00
1134:main.c        **** 										fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 5032              		.loc 1 1134 0 discriminator 2
 5033 3b44 8385E8FB 		addl	$1, -1048(%rbp)
 5033      FFFF01
 5034              	.L269:
1134:main.c        **** 										fStatus = receive_from_fpga(handle, chan, &decrypted_data, &error);
 5035              		.loc 1 1134 0 is_stmt 0 discriminator 1
 5036 3b4b 81BDE8FB 		cmpl	$255, -1048(%rbp)
 5036      FFFFFF00 
 5036      0000
 5037 3b55 0F8E90FC 		jle	.L284
 5037      FFFF
 5038              	.L283:
 5039              	.LBE31:
1190:main.c        **** 									}
1191:main.c        **** 									if(norm == 0) step = 2;
 5040              		.loc 1 1191 0 is_stmt 1
 5041 3b5b 83BDE4FB 		cmpl	$0, -1052(%rbp)
 5041      FFFF00
 5042 3b62 750C     		jne	.L285
 5043              		.loc 1 1191 0 is_stmt 0 discriminator 1
 5044 3b64 C785E0FB 		movl	$2, -1056(%rbp)
 5044      FFFF0200 
 5044      0000
 5045 3b6e EB6D     		jmp	.L287
 5046              	.L285:
1192:main.c        **** 									else norm = 0;
 5047              		.loc 1 1192 0 is_stmt 1
 5048 3b70 C785E4FB 		movl	$0, -1052(%rbp)
 5048      FFFF0000 
 5048      0000
 5049 3b7a EB61     		jmp	.L287
 5050              	.L266:
1193:main.c        **** 								}else if(step == 0){
 5051              		.loc 1 1193 0
 5052 3b7c 83BDE0FB 		cmpl	$0, -1056(%rbp)
 5052      FFFF00
 5053 3b83 7538     		jne	.L288
1194:main.c        **** 									printf("Didn't receive ACK on channel %d, decrypted_data = %u\n", 2 * chan, decrypted_data
 5054              		.loc 1 1194 0
 5055 3b85 8B8530FC 		movl	-976(%rbp), %eax
 5055      FFFF
 5056 3b8b 0FB695B9 		movzbl	-1095(%rbp), %edx
 5056      FBFFFF
 5057 3b92 8D0C12   		leal	(%rdx,%rdx), %ecx
 5058 3b95 89C2     		movl	%eax, %edx
 5059 3b97 89CE     		movl	%ecx, %esi
 5060 3b99 488D3D00 		leaq	.LC152(%rip), %rdi
 5060      000000
 5061 3ba0 B8000000 		movl	$0, %eax
 5061      00
 5062 3ba5 E8000000 		call	printf@PLT
 5062      00
1195:main.c        **** 									sleep(5);
 5063              		.loc 1 1195 0
 5064 3baa BF050000 		movl	$5, %edi
 5064      00
 5065 3baf E8000000 		call	sleep@PLT
 5065      00
1196:main.c        **** 									step++;
 5066              		.loc 1 1196 0
 5067 3bb4 8385E0FB 		addl	$1, -1056(%rbp)
 5067      FFFF01
 5068 3bbb EB20     		jmp	.L287
 5069              	.L288:
1197:main.c        **** 								}else if(step == 1){
 5070              		.loc 1 1197 0
 5071 3bbd 83BDE0FB 		cmpl	$1, -1056(%rbp)
 5071      FFFF01
 5072 3bc4 7517     		jne	.L287
1198:main.c        **** 									step++;
 5073              		.loc 1 1198 0
 5074 3bc6 8385E0FB 		addl	$1, -1056(%rbp)
 5074      FFFF01
1199:main.c        **** 									if(chan == 63) chan = -1;
 5075              		.loc 1 1199 0
 5076 3bcd 80BDB9FB 		cmpb	$63, -1095(%rbp)
 5076      FFFF3F
 5077 3bd4 7507     		jne	.L287
 5078              		.loc 1 1199 0 is_stmt 0 discriminator 1
 5079 3bd6 C685B9FB 		movb	$-1, -1095(%rbp)
 5079      FFFFFF
 5080              	.L287:
1200:main.c        **** 								}
1201:main.c        **** 							}while(step != 2);
 5081              		.loc 1 1201 0 is_stmt 1
 5082 3bdd 83BDE0FB 		cmpl	$2, -1056(%rbp)
 5082      FFFF02
 5083 3be4 0F85F4FA 		jne	.L289
 5083      FFFF
1202:main.c        **** 
1203:main.c        **** 							process_counter++;
 5084              		.loc 1 1203 0
 5085 3bea 8385DCFB 		addl	$1, -1060(%rbp)
 5085      FFFF01
1204:main.c        **** 							printf("no of processes completed %d\n", process_counter);
 5086              		.loc 1 1204 0
 5087 3bf1 8B85DCFB 		movl	-1060(%rbp), %eax
 5087      FFFF
 5088 3bf7 89C6     		movl	%eax, %esi
 5089 3bf9 488D3D00 		leaq	.LC153(%rip), %rdi
 5089      000000
 5090 3c00 B8000000 		movl	$0, %eax
 5090      00
 5091 3c05 E8000000 		call	printf@PLT
 5091      00
1205:main.c        **** 							printf("waiting for next process to start\n");
 5092              		.loc 1 1205 0
 5093 3c0a 488D3D00 		leaq	.LC154(%rip), %rdi
 5093      000000
 5094 3c11 E8000000 		call	puts@PLT
 5094      00
1206:main.c        **** 							for(i = 0; i < 10; i++){
 5095              		.loc 1 1206 0
 5096 3c16 C785D8FB 		movl	$0, -1064(%rbp)
 5096      FFFF0000 
 5096      0000
 5097 3c20 EB1D     		jmp	.L290
 5098              	.L291:
1207:main.c        **** 								sleep(2);
 5099              		.loc 1 1207 0 discriminator 3
 5100 3c22 BF020000 		movl	$2, %edi
 5100      00
 5101 3c27 E8000000 		call	sleep@PLT
 5101      00
1208:main.c        **** 								printf(".\n");
 5102              		.loc 1 1208 0 discriminator 3
 5103 3c2c 488D3D00 		leaq	.LC155(%rip), %rdi
 5103      000000
 5104 3c33 E8000000 		call	puts@PLT
 5104      00
1206:main.c        **** 							for(i = 0; i < 10; i++){
 5105              		.loc 1 1206 0 discriminator 3
 5106 3c38 8385D8FB 		addl	$1, -1064(%rbp)
 5106      FFFF01
 5107              	.L290:
1206:main.c        **** 							for(i = 0; i < 10; i++){
 5108              		.loc 1 1206 0 is_stmt 0 discriminator 1
 5109 3c3f 83BDD8FB 		cmpl	$9, -1064(%rbp)
 5109      FFFF09
 5110 3c46 7EDA     		jle	.L291
1209:main.c        **** 							}
1210:main.c        **** 							printf("waited for 20 seconds\n\n\n");
 5111              		.loc 1 1210 0 is_stmt 1 discriminator 2
 5112 3c48 488D3D00 		leaq	.LC156(%rip), %rdi
 5112      000000
 5113 3c4f E8000000 		call	puts@PLT
 5113      00
1100:main.c        **** 							printf("checking on channel %d\n", 2 * chan);
 5114              		.loc 1 1100 0 discriminator 2
 5115 3c54 0FB685B9 		movzbl	-1095(%rbp), %eax
 5115      FBFFFF
 5116 3c5b 83C001   		addl	$1, %eax
 5117 3c5e 8885B9FB 		movb	%al, -1095(%rbp)
 5117      FFFF
 5118              	.L265:
1100:main.c        **** 							printf("checking on channel %d\n", 2 * chan);
 5119              		.loc 1 1100 0 is_stmt 0 discriminator 1
 5120 3c64 80BDB9FB 		cmpb	$63, -1095(%rbp)
 5120      FFFF3F
 5121 3c6b 0F8663F9 		jbe	.L292
 5121      FFFF
 5122 3c71 EB63     		jmp	.L257
 5123              	.L262:
 5124              	.LBE30:
 5125              	.LBE29:
1211:main.c        **** 						}
1212:main.c        **** 					}
1213:main.c        **** 					// default:{
1214:main.c        **** 					// 	FAIL(FLP_ILL_CHAR, cleanup);
1215:main.c        **** 					// 	printf("not entering the loop\n");
1216:main.c        **** 					// }
1217:main.c        **** 				}
1218:main.c        **** 			}else{
1219:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 5126              		.loc 1 1219 0 is_stmt 1
 5127 3c73 488B0500 		movq	stderr(%rip), %rax
 5127      000000
 5128 3c7a 488B95D8 		movq	-808(%rbp), %rdx
 5128      FCFFFF
 5129 3c81 488D3500 		leaq	.LC136(%rip), %rsi
 5129      000000
 5130 3c88 4889C7   		movq	%rax, %rdi
 5131 3c8b B8000000 		movl	$0, %eax
 5131      00
 5132 3c90 E8000000 		call	fprintf@PLT
 5132      00
1220:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 5133              		.loc 1 1220 0
 5134 3c95 C785C4FB 		movl	$12, -1084(%rbp)
 5134      FFFF0C00 
 5134      0000
 5135 3c9f 90       		nop
 5136 3ca0 E9110200 		jmp	.L203
 5136      00
 5137              	.L258:
 5138              	.LBE28:
1221:main.c        **** 			}
1222:main.c        **** 		}else{
1223:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 5139              		.loc 1 1223 0
 5140 3ca5 488B0500 		movq	stderr(%rip), %rax
 5140      000000
 5141 3cac 488B95D8 		movq	-808(%rbp), %rdx
 5141      FCFFFF
 5142 3cb3 488D3500 		leaq	.LC137(%rip), %rsi
 5142      000000
 5143 3cba 4889C7   		movq	%rax, %rdi
 5144 3cbd B8000000 		movl	$0, %eax
 5144      00
 5145 3cc2 E8000000 		call	fprintf@PLT
 5145      00
1224:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5146              		.loc 1 1224 0
 5147 3cc7 C785C4FB 		movl	$12, -1084(%rbp)
 5147      FFFF0C00 
 5147      0000
 5148 3cd1 E9E00100 		jmp	.L203
 5148      00
 5149              	.L257:
1225:main.c        **** 		}
1226:main.c        **** 	}
1227:main.c        **** 
1228:main.c        **** 	if ( shellOpt->count ) {
 5150              		.loc 1 1228 0
 5151 3cd6 488B8580 		movq	-896(%rbp), %rax
 5151      FCFFFF
 5152 3cdd 8B4060   		movl	96(%rax), %eax
 5153 3ce0 85C0     		testl	%eax, %eax
 5154 3ce2 0F84CD01 		je	.L307
 5154      0000
1229:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 5155              		.loc 1 1229 0
 5156 3ce8 488D3D00 		leaq	.LC157(%rip), %rdi
 5156      000000
 5157 3cef E8000000 		call	puts@PLT
 5157      00
1230:main.c        **** 		if ( isCommCapable ) {
 5158              		.loc 1 1230 0
 5159 3cf4 80BDBBFB 		cmpb	$0, -1093(%rbp)
 5159      FFFF00
 5160 3cfb 0F848601 		je	.L293
 5160      0000
 5161              	.LBB35:
1231:main.c        **** 		   uint8 isRunning;
1232:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 5162              		.loc 1 1232 0
 5163 3d01 0FB68DB8 		movzbl	-1096(%rbp), %ecx
 5163      FBFFFF
 5164 3d08 488B8518 		movq	-1000(%rbp), %rax
 5164      FCFFFF
 5165 3d0f 488D9520 		leaq	-992(%rbp), %rdx
 5165      FCFFFF
 5166 3d16 89CE     		movl	%ecx, %esi
 5167 3d18 4889C7   		movq	%rax, %rdi
 5168 3d1b E8000000 		call	flSelectConduit@PLT
 5168      00
 5169 3d20 8985C8FB 		movl	%eax, -1080(%rbp)
 5169      FFFF
1233:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5170              		.loc 1 1233 0
 5171 3d26 83BDC8FB 		cmpl	$0, -1080(%rbp)
 5171      FFFF00
 5172 3d2d 740F     		je	.L294
 5173              		.loc 1 1233 0 is_stmt 0 discriminator 1
 5174 3d2f C785C4FB 		movl	$1, -1084(%rbp)
 5174      FFFF0100 
 5174      0000
 5175 3d39 E9780100 		jmp	.L203
 5175      00
 5176              	.L294:
1234:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5177              		.loc 1 1234 0 is_stmt 1
 5178 3d3e 488B8518 		movq	-1000(%rbp), %rax
 5178      FCFFFF
 5179 3d45 488D9520 		leaq	-992(%rbp), %rdx
 5179      FCFFFF
 5180 3d4c 488D8D30 		leaq	-976(%rbp), %rcx
 5180      FCFFFF
 5181 3d53 4889CE   		movq	%rcx, %rsi
 5182 3d56 4889C7   		movq	%rax, %rdi
 5183 3d59 E8000000 		call	flIsFPGARunning@PLT
 5183      00
 5184 3d5e 8985C8FB 		movl	%eax, -1080(%rbp)
 5184      FFFF
1235:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5185              		.loc 1 1235 0
 5186 3d64 83BDC8FB 		cmpl	$0, -1080(%rbp)
 5186      FFFF00
 5187 3d6b 740F     		je	.L296
 5188              		.loc 1 1235 0 is_stmt 0 discriminator 1
 5189 3d6d C785C4FB 		movl	$1, -1084(%rbp)
 5189      FFFF0100 
 5189      0000
 5190 3d77 E93A0100 		jmp	.L203
 5190      00
 5191              	.L296:
1236:main.c        **** 			if ( isRunning ) {
 5192              		.loc 1 1236 0 is_stmt 1
 5193 3d7c 0FB68530 		movzbl	-976(%rbp), %eax
 5193      FCFFFF
 5194 3d83 84C0     		testb	%al, %al
 5195 3d85 0F84CD00 		je	.L297
 5195      0000
 5196              	.L299:
1237:main.c        **** 				do {
1238:main.c        **** 					do {
1239:main.c        **** 						line = readline("> ");
 5197              		.loc 1 1239 0 discriminator 2
 5198 3d8b 488D3D00 		leaq	.LC158(%rip), %rdi
 5198      000000
 5199 3d92 E8000000 		call	readline@PLT
 5199      00
 5200 3d97 48898538 		movq	%rax, -968(%rbp)
 5200      FCFFFF
1240:main.c        **** 					} while ( line && !line[0] );
 5201              		.loc 1 1240 0 discriminator 2
 5202 3d9e 4883BD38 		cmpq	$0, -968(%rbp)
 5202      FCFFFF00 
 5203 3da6 740E     		je	.L298
 5204              		.loc 1 1240 0 is_stmt 0 discriminator 1
 5205 3da8 488B8538 		movq	-968(%rbp), %rax
 5205      FCFFFF
 5206 3daf 0FB600   		movzbl	(%rax), %eax
 5207 3db2 84C0     		testb	%al, %al
 5208 3db4 74D5     		je	.L299
 5209              	.L298:
1241:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 5210              		.loc 1 1241 0 is_stmt 1
 5211 3db6 4883BD38 		cmpq	$0, -968(%rbp)
 5211      FCFFFF00 
 5212 3dbe 747A     		je	.L300
 5213              		.loc 1 1241 0 is_stmt 0 discriminator 1
 5214 3dc0 488B8538 		movq	-968(%rbp), %rax
 5214      FCFFFF
 5215 3dc7 0FB600   		movzbl	(%rax), %eax
 5216 3dca 84C0     		testb	%al, %al
 5217 3dcc 746C     		je	.L300
 5218              		.loc 1 1241 0 discriminator 2
 5219 3dce 488B8538 		movq	-968(%rbp), %rax
 5219      FCFFFF
 5220 3dd5 0FB600   		movzbl	(%rax), %eax
 5221 3dd8 3C71     		cmpb	$113, %al
 5222 3dda 745E     		je	.L300
1242:main.c        **** 						add_history(line);
 5223              		.loc 1 1242 0 is_stmt 1
 5224 3ddc 488B8538 		movq	-968(%rbp), %rax
 5224      FCFFFF
 5225 3de3 4889C7   		movq	%rax, %rdi
 5226 3de6 E8000000 		call	add_history@PLT
 5226      00
1243:main.c        **** 						pStatus = parseLine(handle, line, &error);
 5227              		.loc 1 1243 0
 5228 3deb 488B8518 		movq	-1000(%rbp), %rax
 5228      FCFFFF
 5229 3df2 488D9520 		leaq	-992(%rbp), %rdx
 5229      FCFFFF
 5230 3df9 488B8D38 		movq	-968(%rbp), %rcx
 5230      FCFFFF
 5231 3e00 4889CE   		movq	%rcx, %rsi
 5232 3e03 4889C7   		movq	%rax, %rdi
 5233 3e06 E850C8FF 		call	parseLine
 5233      FF
 5234 3e0b 8985FCFB 		movl	%eax, -1028(%rbp)
 5234      FFFF
1244:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 5235              		.loc 1 1244 0
 5236 3e11 83BDFCFB 		cmpl	$0, -1028(%rbp)
 5236      FFFF00
 5237 3e18 7411     		je	.L301
 5238              		.loc 1 1244 0 is_stmt 0 discriminator 1
 5239 3e1a 8B85FCFB 		movl	-1028(%rbp), %eax
 5239      FFFF
 5240 3e20 8985C4FB 		movl	%eax, -1084(%rbp)
 5240      FFFF
 5241 3e26 E98B0000 		jmp	.L203
 5241      00
 5242              	.L301:
1245:main.c        **** 						free((void*)line);
 5243              		.loc 1 1245 0 is_stmt 1
 5244 3e2b 488B8538 		movq	-968(%rbp), %rax
 5244      FCFFFF
 5245 3e32 4889C7   		movq	%rax, %rdi
 5246 3e35 E8000000 		call	free@PLT
 5246      00
 5247              	.L300:
1246:main.c        **** 					}
1247:main.c        **** 				} while ( line && line[0] != 'q' );
 5248              		.loc 1 1247 0
 5249 3e3a 4883BD38 		cmpq	$0, -968(%rbp)
 5249      FCFFFF00 
 5250 3e42 7472     		je	.L203
 5251              		.loc 1 1247 0 is_stmt 0 discriminator 1
 5252 3e44 488B8538 		movq	-968(%rbp), %rax
 5252      FCFFFF
 5253 3e4b 0FB600   		movzbl	(%rax), %eax
 5254 3e4e 3C71     		cmpb	$113, %al
 5255 3e50 0F8535FF 		jne	.L299
 5255      FFFF
 5256 3e56 EB5E     		jmp	.L203
 5257              	.L297:
1248:main.c        **** 			} else {
1249:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 5258              		.loc 1 1249 0 is_stmt 1
 5259 3e58 488B0500 		movq	stderr(%rip), %rax
 5259      000000
 5260 3e5f 488B95D8 		movq	-808(%rbp), %rdx
 5260      FCFFFF
 5261 3e66 488D3500 		leaq	.LC159(%rip), %rsi
 5261      000000
 5262 3e6d 4889C7   		movq	%rax, %rdi
 5263 3e70 B8000000 		movl	$0, %eax
 5263      00
 5264 3e75 E8000000 		call	fprintf@PLT
 5264      00
1250:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 5265              		.loc 1 1250 0
 5266 3e7a C785C4FB 		movl	$12, -1084(%rbp)
 5266      FFFF0C00 
 5266      0000
 5267 3e84 90       		nop
 5268 3e85 EB2F     		jmp	.L203
 5269              	.L293:
 5270              	.LBE35:
1251:main.c        **** 			}
1252:main.c        **** 		} else {
1253:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 5271              		.loc 1 1253 0
 5272 3e87 488B0500 		movq	stderr(%rip), %rax
 5272      000000
 5273 3e8e 488B95D8 		movq	-808(%rbp), %rdx
 5273      FCFFFF
 5274 3e95 488D3500 		leaq	.LC160(%rip), %rsi
 5274      000000
 5275 3e9c 4889C7   		movq	%rax, %rdi
 5276 3e9f B8000000 		movl	$0, %eax
 5276      00
 5277 3ea4 E8000000 		call	fprintf@PLT
 5277      00
1254:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5278              		.loc 1 1254 0
 5279 3ea9 C785C4FB 		movl	$12, -1084(%rbp)
 5279      FFFF0C00 
 5279      0000
 5280 3eb3 EB01     		jmp	.L203
 5281              	.L307:
1255:main.c        **** 		}
1256:main.c        **** 	}
1257:main.c        **** 
1258:main.c        **** cleanup:
 5282              		.loc 1 1258 0
 5283 3eb5 90       		nop
 5284              	.L203:
1259:main.c        **** 	free((void*)line);
 5285              		.loc 1 1259 0
 5286 3eb6 488B8538 		movq	-968(%rbp), %rax
 5286      FCFFFF
 5287 3ebd 4889C7   		movq	%rax, %rdi
 5288 3ec0 E8000000 		call	free@PLT
 5288      00
1260:main.c        **** 	flClose(handle);
 5289              		.loc 1 1260 0
 5290 3ec5 488B8518 		movq	-1000(%rbp), %rax
 5290      FCFFFF
 5291 3ecc 4889C7   		movq	%rax, %rdi
 5292 3ecf E8000000 		call	flClose@PLT
 5292      00
1261:main.c        **** 	if ( error ) {
 5293              		.loc 1 1261 0
 5294 3ed4 488B8520 		movq	-992(%rbp), %rax
 5294      FCFFFF
 5295 3edb 4885C0   		testq	%rax, %rax
 5296 3ede 7431     		je	.L303
1262:main.c        **** 		fprintf(stderr, "%s\n", error);
 5297              		.loc 1 1262 0
 5298 3ee0 488B9520 		movq	-992(%rbp), %rdx
 5298      FCFFFF
 5299 3ee7 488B0500 		movq	stderr(%rip), %rax
 5299      000000
 5300 3eee 488D3500 		leaq	.LC46(%rip), %rsi
 5300      000000
 5301 3ef5 4889C7   		movq	%rax, %rdi
 5302 3ef8 B8000000 		movl	$0, %eax
 5302      00
 5303 3efd E8000000 		call	fprintf@PLT
 5303      00
1263:main.c        **** 		flFreeError(error);
 5304              		.loc 1 1263 0
 5305 3f02 488B8520 		movq	-992(%rbp), %rax
 5305      FCFFFF
 5306 3f09 4889C7   		movq	%rax, %rdi
 5307 3f0c E8000000 		call	flFreeError@PLT
 5307      00
 5308              	.L303:
1264:main.c        **** 	}
1265:main.c        **** 	return retVal;
 5309              		.loc 1 1265 0
 5310 3f11 8B85C4FB 		movl	-1084(%rbp), %eax
 5310      FFFF
1266:main.c        **** }...
 5311              		.loc 1 1266 0
 5312 3f17 488B5DE8 		movq	-24(%rbp), %rbx
 5313 3f1b 6448331C 		xorq	%fs:40, %rbx
 5313      25280000 
 5313      00
 5314 3f24 7405     		je	.L305
 5315 3f26 E8000000 		call	__stack_chk_fail@PLT
 5315      00
 5316              	.L305:
 5317 3f2b 4881C458 		addq	$1112, %rsp
 5317      040000
 5318 3f32 5B       		popq	%rbx
 5319 3f33 5D       		popq	%rbp
 5320              		.cfi_def_cfa 7, 8
 5321 3f34 C3       		ret
 5322              		.cfi_endproc
 5323              	.LFE26:
 5325              		.section	.rodata
 5326 0fb4 00000000 		.align 8
 5327              	.LC14:
 5328 0fb8 00000000 		.long	0
 5329 0fbc 80842E41 		.long	1093567616
 5330              		.align 8
 5331              	.LC15:
 5332 0fc0 00000000 		.long	0
 5333 0fc4 00003041 		.long	1093664768
 5334              		.text
 5335              	.Letext0:
 5336              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 5337              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 5338              		.file 4 "/usr/include/libio.h"
 5339              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 5340              		.file 6 "/usr/include/stdio.h"
 5341              		.file 7 "/usr/include/unistd.h"
 5342              		.file 8 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 5343              		.file 9 "/home/gani/eval/20140524/makestuff/common/makestuff.h"
 5344              		.file 10 "/home/gani/eval/20140524/makestuff/libs/libfpgalink/libfpgalink.h"
 5345              		.file 11 "/home/gani/eval/20140524/makestuff/libs/libbuffer/libbuffer.h"
 5346              		.file 12 "/usr/include/time.h"
 5347              		.file 13 "/home/gani/eval/20140524/makestuff/libs/libargtable2/argtable2.h"
 5348              		.file 14 "/usr/include/readline/rltypedefs.h"
 5349              		.file 15 "/usr/include/readline/keymaps.h"
 5350              		.file 16 "/usr/include/readline/tilde.h"
 5351              		.file 17 "/usr/include/readline/readline.h"
 5352              		.file 18 "/usr/include/readline/history.h"
 5353              		.file 19 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccVj2hcW.s:7      .text:0000000000000000 popcount
     /tmp/ccVj2hcW.s:32     .bss:0000000000000000 ptr
     /tmp/ccVj2hcW.s:32     .bss:0000000000000008 enableBenchmarking
     /tmp/ccVj2hcW.s:36     .text:0000000000000018 isHexDigit
     /tmp/ccVj2hcW.s:85     .text:0000000000000056 calcChecksum
     /tmp/ccVj2hcW.s:125    .text:0000000000000097 getHexNibble
     /tmp/ccVj2hcW.s:193    .text:000000000000010b getHexByte
     /tmp/ccVj2hcW.s:290    .data.rel.ro.local:0000000000000000 errMessages
     /tmp/ccVj2hcW.s:309    .text:00000000000001af doRead
     /tmp/ccVj2hcW.s:557    .text:0000000000000463 doWrite
     /tmp/ccVj2hcW.s:706    .text:000000000000065b parseLine
     /tmp/ccVj2hcW.s:1935   .data.rel.local:0000000000000000 nibbles
     /tmp/ccVj2hcW.s:1962   .text:00000000000016f5 pow1
     /tmp/ccVj2hcW.s:2014   .text:000000000000172a text_read
     /tmp/ccVj2hcW.s:2170   .text:00000000000018a7 update_file
     /tmp/ccVj2hcW.s:2318   .text:0000000000001a1b count1
     /tmp/ccVj2hcW.s:2342   .text:0000000000001a32 neg
     /tmp/ccVj2hcW.s:2373   .text:0000000000001a5d concat
     /tmp/ccVj2hcW.s:2417   .text:0000000000001a97 bitXor
     /tmp/ccVj2hcW.s:2468   .text:0000000000001aef findki
     /tmp/ccVj2hcW.s:2514   .text:0000000000001b2c findti
     /tmp/ccVj2hcW.s:2574   .text:0000000000001b92 findt
     /tmp/ccVj2hcW.s:2625   .text:0000000000001be7 encrypt
     /tmp/ccVj2hcW.s:2695   .text:0000000000001c60 decrypt
     /tmp/ccVj2hcW.s:2779   .text:0000000000001cf2 receive_from_fpga
     /tmp/ccVj2hcW.s:2979   .text:0000000000001f2a send_to_fpga
     /tmp/ccVj2hcW.s:3384   .text:0000000000002064 main

UNDEFINED SYMBOLS
__popcountdi2
_GLOBAL_OFFSET_TABLE_
__stack_chk_fail
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
printf
fclose
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fprintf
fputc
puts
__isoc99_fscanf
flFreeError
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
strcmp
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
sleep
readline
add_history
flClose
